
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007344  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007458  08007458  00017458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ec  080078ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f4  080078f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001dc  08007ad8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08007ad8  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c0c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002305  00000000  00000000  00031e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019741  00000000  00000000  00036338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134d2  00000000  00000000  0004fa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f6b  00000000  00000000  00062f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  000f3f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800743c 	.word	0x0800743c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800743c 	.word	0x0800743c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b976 	b.w	8000d8c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14d      	bne.n	8000b64 <__udivmoddi4+0xac>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d968      	bls.n	8000ba0 <__udivmoddi4+0xe8>
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	b152      	cbz	r2, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad8:	f1c2 0120 	rsb	r1, r2, #32
 8000adc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	ea41 0803 	orr.w	r8, r1, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	fb01 8817 	mls	r8, r1, r7, r8
 8000afa:	fb07 f00e 	mul.w	r0, r7, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b10:	f080 811e 	bcs.w	8000d50 <__udivmoddi4+0x298>
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f240 811b 	bls.w	8000d50 <__udivmoddi4+0x298>
 8000b1a:	3f02      	subs	r7, #2
 8000b1c:	4463      	add	r3, ip
 8000b1e:	1a1b      	subs	r3, r3, r0
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b24:	fb01 3310 	mls	r3, r1, r0, r3
 8000b28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 8109 	bcs.w	8000d54 <__udivmoddi4+0x29c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f240 8106 	bls.w	8000d54 <__udivmoddi4+0x29c>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b56:	b11e      	cbz	r6, 8000b60 <__udivmoddi4+0xa8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	40d4      	lsrs	r4, r2
 8000b5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0xc2>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	f000 80ee 	beq.w	8000d4a <__udivmoddi4+0x292>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c6 0500 	strd	r0, r5, [r6]
 8000b74:	4608      	mov	r0, r1
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d14a      	bne.n	8000c18 <__udivmoddi4+0x160>
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd4>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fc 	bhi.w	8000d84 <__udivmoddi4+0x2cc>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e2      	beq.n	8000b60 <__udivmoddi4+0xa8>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7df      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xec>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 8091 	bne.w	8000cd0 <__udivmoddi4+0x218>
 8000bae:	eba1 000c 	sub.w	r0, r1, ip
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb8:	fa1f fe8c 	uxth.w	lr, ip
 8000bbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000bc4:	0c25      	lsrs	r5, r4, #16
 8000bc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bca:	fb0e f003 	mul.w	r0, lr, r3
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x12c>
 8000bd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x12a>
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	f200 80ce 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000be2:	4643      	mov	r3, r8
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bea:	fb07 5510 	mls	r5, r7, r0, r5
 8000bee:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x156>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x154>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f200 80b6 	bhi.w	8000d78 <__udivmoddi4+0x2c0>
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c16:	e79e      	b.n	8000b56 <__udivmoddi4+0x9e>
 8000c18:	f1c1 0720 	rsb	r7, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2e:	fbba f8f9 	udiv	r8, sl, r9
 8000c32:	fa20 f307 	lsr.w	r3, r0, r7
 8000c36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c3a:	408d      	lsls	r5, r1
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	431d      	orrs	r5, r3
 8000c42:	fa00 f301 	lsl.w	r3, r0, r1
 8000c46:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4a:	0c2c      	lsrs	r4, r5, #16
 8000c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90b      	bls.n	8000c70 <__udivmoddi4+0x1b8>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c60:	f080 8088 	bcs.w	8000d74 <__udivmoddi4+0x2bc>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	f240 8085 	bls.w	8000d74 <__udivmoddi4+0x2bc>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	4464      	add	r4, ip
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c76:	fb09 4410 	mls	r4, r9, r0, r4
 8000c7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1e2>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d26c      	bcs.n	8000d6c <__udivmoddi4+0x2b4>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	d96a      	bls.n	8000d6c <__udivmoddi4+0x2b4>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	46c8      	mov	r8, r9
 8000caa:	46ae      	mov	lr, r5
 8000cac:	d356      	bcc.n	8000d5c <__udivmoddi4+0x2a4>
 8000cae:	d053      	beq.n	8000d58 <__udivmoddi4+0x2a0>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d069      	beq.n	8000d88 <__udivmoddi4+0x2d0>
 8000cb4:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb8:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	f1c2 0120 	rsb	r1, r2, #32
 8000cd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000cdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	430d      	orrs	r5, r1
 8000ce8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cec:	fb07 3311 	mls	r3, r7, r1, r3
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	0c28      	lsrs	r0, r5, #16
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	fa04 f402 	lsl.w	r4, r4, r2
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x260>
 8000d06:	eb1c 0000 	adds.w	r0, ip, r0
 8000d0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d0e:	d22f      	bcs.n	8000d70 <__udivmoddi4+0x2b8>
 8000d10:	4283      	cmp	r3, r0
 8000d12:	d92d      	bls.n	8000d70 <__udivmoddi4+0x2b8>
 8000d14:	3902      	subs	r1, #2
 8000d16:	4460      	add	r0, ip
 8000d18:	1ac0      	subs	r0, r0, r3
 8000d1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d28:	fb03 f00e 	mul.w	r0, r3, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x28a>
 8000d30:	eb1c 0505 	adds.w	r5, ip, r5
 8000d34:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d38:	d216      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d914      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	4465      	add	r5, ip
 8000d42:	1a28      	subs	r0, r5, r0
 8000d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d48:	e738      	b.n	8000bbc <__udivmoddi4+0x104>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e707      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000d50:	462f      	mov	r7, r5
 8000d52:	e6e4      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6f9      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d58:	454b      	cmp	r3, r9
 8000d5a:	d2a9      	bcs.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d64:	3801      	subs	r0, #1
 8000d66:	e7a3      	b.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	e7ea      	b.n	8000d42 <__udivmoddi4+0x28a>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e794      	b.n	8000c9a <__udivmoddi4+0x1e2>
 8000d70:	4641      	mov	r1, r8
 8000d72:	e7d1      	b.n	8000d18 <__udivmoddi4+0x260>
 8000d74:	46d0      	mov	r8, sl
 8000d76:	e77b      	b.n	8000c70 <__udivmoddi4+0x1b8>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	e747      	b.n	8000c0e <__udivmoddi4+0x156>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4465      	add	r5, ip
 8000d82:	e72f      	b.n	8000be4 <__udivmoddi4+0x12c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e706      	b.n	8000b96 <__udivmoddi4+0xde>
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e6e9      	b.n	8000b60 <__udivmoddi4+0xa8>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f000 fe29 	bl	80019ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f871 	bl	8000e80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Init();
 8000d9e:	f000 fe25 	bl	80019ec <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f000 faa7 	bl	80012f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da6:	f000 f8ab 	bl	8000f00 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000daa:	f000 fa79 	bl	80012a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dae:	f000 f90d 	bl	8000fcc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000db2:	f000 fa0d 	bl	80011d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000db6:	f000 f9b5 	bl	8001124 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000dba:	f000 f8d1 	bl	8000f60 <MX_SPI1_Init>
   //get_Accl(&hi2c1, &Accl_Data) ;
   //
   //printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);

   // config your wirelss module such as a lora module
   config_wireless();
 8000dbe:	f000 faf5 	bl	80013ac <config_wireless>
//	  lora_tx(&lora, (uint8_t *)buff, strlen(buff));
//	  lora_end_packet(&lora);
//	  printf("sending \n");
//	  HAL_Delay(1);
//	  rcv_channel();
	  uint16_t data1 = 0 ;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	81bb      	strh	r3, [r7, #12]
	  uint16_t data2 = 0 ;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	817b      	strh	r3, [r7, #10]
	  uint16_t data3 = 0 ;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	813b      	strh	r3, [r7, #8]
	  uint16_t data4 = 0 ;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	80fb      	strh	r3, [r7, #6]

	  ret = lora_prasePacket(&lora);
 8000dd2:	4827      	ldr	r0, [pc, #156]	; (8000e70 <main+0xe0>)
 8000dd4:	f003 fc92 	bl	80046fc <lora_prasePacket>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <main+0xe4>)
 8000dde:	701a      	strb	r2, [r3, #0]
	  if(ret){
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <main+0xe4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0ec      	beq.n	8000dc2 <main+0x32>
		uint8_t i=0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
		while( i <  8){
 8000dec:	e00a      	b.n	8000e04 <main+0x74>
		buff[i] = lora_read(&lora);
 8000dee:	7bfc      	ldrb	r4, [r7, #15]
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <main+0xe0>)
 8000df2:	f003 fcf3 	bl	80047dc <lora_read>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <main+0xe8>)
 8000dfc:	551a      	strb	r2, [r3, r4]
		i++;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	3301      	adds	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
		while( i <  8){
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b07      	cmp	r3, #7
 8000e08:	d9f1      	bls.n	8000dee <main+0x5e>
	     }
//		buff[i] ='\0';
		data1 = buff[1] << 8 | buff[0] ;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <main+0xe8>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <main+0xe8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	81bb      	strh	r3, [r7, #12]
		data2 = buff[3] << 8 | buff[2] ;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <main+0xe8>)
 8000e20:	78db      	ldrb	r3, [r3, #3]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <main+0xe8>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	817b      	strh	r3, [r7, #10]
		data3 = buff[5] << 8 | buff[4] ;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <main+0xe8>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <main+0xe8>)
 8000e3c:	791b      	ldrb	r3, [r3, #4]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	813b      	strh	r3, [r7, #8]
		data4 = buff[7] << 8 | buff[6] ;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <main+0xe8>)
 8000e48:	79db      	ldrb	r3, [r3, #7]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <main+0xe8>)
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	80fb      	strh	r3, [r7, #6]

		printf("data1 : %d  ,data2 : %d  ,data3 : %d   ,data4 : %d  \n" , data1,data2,data3,data4) ;
 8000e5a:	89b9      	ldrh	r1, [r7, #12]
 8000e5c:	897a      	ldrh	r2, [r7, #10]
 8000e5e:	8938      	ldrh	r0, [r7, #8]
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4603      	mov	r3, r0
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <main+0xec>)
 8000e68:	f004 f9ae 	bl	80051c8 <iprintf>
  {
 8000e6c:	e7a9      	b.n	8000dc2 <main+0x32>
 8000e6e:	bf00      	nop
 8000e70:	200003e0 	.word	0x200003e0
 8000e74:	200003e8 	.word	0x200003e8
 8000e78:	200003ec 	.word	0x200003ec
 8000e7c:	08007458 	.word	0x08007458

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	; 0x40
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2228      	movs	r2, #40	; 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fd32 	bl	80048f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fa08 	bl	80022d4 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000eca:	f000 facb 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fc76 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ef2:	f000 fab7 	bl	8001464 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <MX_I2C1_Init+0x58>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f0c:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_I2C1_Init+0x5c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f16:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_I2C1_Init+0x54>)
 8000f40:	f001 f884 	bl	800204c <HAL_I2C_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f4a:	f000 fa8b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001f8 	.word	0x200001f8
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	00061a80 	.word	0x00061a80

08000f60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <MX_SPI1_Init+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fb2:	f001 fd9f 	bl	8002af4 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fbc:	f000 fa52 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000024c 	.word	0x2000024c
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b092      	sub	sp, #72	; 0x48
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]
 8000fee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fc7e 	bl	80048f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <MX_TIM1_Init+0x150>)
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <MX_TIM1_Init+0x154>)
 8001000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <MX_TIM1_Init+0x150>)
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b44      	ldr	r3, [pc, #272]	; (800111c <MX_TIM1_Init+0x150>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <MX_TIM1_Init+0x150>)
 8001010:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b41      	ldr	r3, [pc, #260]	; (800111c <MX_TIM1_Init+0x150>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101c:	4b3f      	ldr	r3, [pc, #252]	; (800111c <MX_TIM1_Init+0x150>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <MX_TIM1_Init+0x150>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001028:	483c      	ldr	r0, [pc, #240]	; (800111c <MX_TIM1_Init+0x150>)
 800102a:	f002 fb46 	bl	80036ba <HAL_TIM_PWM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001034:	f000 fa16 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001044:	4619      	mov	r1, r3
 8001046:	4835      	ldr	r0, [pc, #212]	; (800111c <MX_TIM1_Init+0x150>)
 8001048:	f002 ffba 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001052:	f000 fa07 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	4828      	ldr	r0, [pc, #160]	; (800111c <MX_TIM1_Init+0x150>)
 800107c:	f002 fcd0 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001086:	f000 f9ed 	bl	8001464 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 800108a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	2204      	movs	r2, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4820      	ldr	r0, [pc, #128]	; (800111c <MX_TIM1_Init+0x150>)
 800109a:	f002 fcc1 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010a4:	f000 f9de 	bl	8001464 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2208      	movs	r2, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	4819      	ldr	r0, [pc, #100]	; (800111c <MX_TIM1_Init+0x150>)
 80010b6:	f002 fcb3 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010c0:	f000 f9d0 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	220c      	movs	r2, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <MX_TIM1_Init+0x150>)
 80010ce:	f002 fca7 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010d8:	f000 f9c4 	bl	8001464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM1_Init+0x150>)
 8001100:	f002 ffbc 	bl	800407c <HAL_TIMEx_ConfigBreakDeadTime>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800110a:	f000 f9ab 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM1_Init+0x150>)
 8001110:	f000 faae 	bl	8001670 <HAL_TIM_MspPostInit>

}
 8001114:	bf00      	nop
 8001116:	3748      	adds	r7, #72	; 0x48
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002a4 	.word	0x200002a4
 8001120:	40012c00 	.word	0x40012c00

08001124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_TIM2_Init+0xa8>)
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_TIM2_Init+0xa8>)
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_TIM2_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_TIM2_Init+0xa8>)
 800115c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM2_Init+0xa8>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_TIM2_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <MX_TIM2_Init+0xa8>)
 8001170:	f002 fa54 	bl	800361c <HAL_TIM_OC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 f973 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	4619      	mov	r1, r3
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <MX_TIM2_Init+0xa8>)
 800118e:	f002 ff17 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001198:	f000 f964 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM2_Init+0xa8>)
 80011b4:	f002 fbd8 	bl	8003968 <HAL_TIM_OC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011be:	f000 f951 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002ec 	.word	0x200002ec

080011d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
 80011ee:	615a      	str	r2, [r3, #20]
 80011f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MX_TIM3_Init+0xc8>)
 80011f4:	4a29      	ldr	r2, [pc, #164]	; (800129c <MX_TIM3_Init+0xcc>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_TIM3_Init+0xc8>)
 80011fa:	2264      	movs	r2, #100	; 0x64
 80011fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_TIM3_Init+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_TIM3_Init+0xc8>)
 8001206:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800120a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <MX_TIM3_Init+0xc8>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <MX_TIM3_Init+0xc8>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <MX_TIM3_Init+0xc8>)
 800121a:	f002 fa4e 	bl	80036ba <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001224:	f000 f91e 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4619      	mov	r1, r3
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <MX_TIM3_Init+0xc8>)
 8001238:	f002 fec2 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001242:	f000 f90f 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	; 0x60
 8001248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 800124a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800124e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2208      	movs	r2, #8
 800125c:	4619      	mov	r1, r3
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_TIM3_Init+0xc8>)
 8001260:	f002 fbde 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800126a:	f000 f8fb 	bl	8001464 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	220c      	movs	r2, #12
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_TIM3_Init+0xc8>)
 800127a:	f002 fbd1 	bl	8003a20 <HAL_TIM_PWM_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001284:	f000 f8ee 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <MX_TIM3_Init+0xc8>)
 800128a:	f000 f9f1 	bl	8001670 <HAL_TIM_MspPostInit>

}
 800128e:	bf00      	nop
 8001290:	3728      	adds	r7, #40	; 0x28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000334 	.word	0x20000334
 800129c:	40000400 	.word	0x40000400

080012a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART2_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d8:	f002 ff33 	bl	8004142 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f8bf 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000037c 	.word	0x2000037c
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_GPIO_Init+0xac>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <MX_GPIO_Init+0xac>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_GPIO_Init+0xac>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_GPIO_Init+0xac>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <MX_GPIO_Init+0xac>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_GPIO_Init+0xac>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <MX_GPIO_Init+0xb0>)
 800133e:	f000 fe6d 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	4817      	ldr	r0, [pc, #92]	; (80013a8 <MX_GPIO_Init+0xb4>)
 800134a:	f000 fe67 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800134e:	2310      	movs	r3, #16
 8001350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2302      	movs	r3, #2
 800135c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4619      	mov	r1, r3
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <MX_GPIO_Init+0xb0>)
 8001366:	f000 fcd5 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800136a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <MX_GPIO_Init+0xb4>)
 8001384:	f000 fcc6 	bl	8001d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0xb4>)
 8001394:	f000 fcbe 	bl	8001d14 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00

080013ac <config_wireless>:
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , RESET) ;
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 , RESET) ;

}

void config_wireless(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <config_wireless+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <config_wireless+0x68>)
 80013b4:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <config_wireless+0x64>)
 80013b8:	2220      	movs	r2, #32
 80013ba:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <config_wireless+0x64>)
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <config_wireless+0x6c>)
 80013c0:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <config_wireless+0x64>)
 80013c4:	2210      	movs	r2, #16
 80013c6:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <config_wireless+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <config_wireless+0x68>)
 80013cc:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <config_wireless+0x64>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <config_wireless+0x64>)
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <config_wireless+0x70>)
 80013da:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <config_wireless+0x74>)
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <config_wireless+0x64>)
 80013e0:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <config_wireless+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 80013e8:	e006      	b.n	80013f8 <config_wireless+0x4c>
	printf("init Failed \n");
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <config_wireless+0x78>)
 80013ec:	f003 ff72 	bl	80052d4 <puts>
	HAL_Delay(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f4:	f000 fb5c 	bl	8001ab0 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <config_wireless+0x74>)
 80013fa:	f003 f90f 	bl	800461c <lora_init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f2      	bne.n	80013ea <config_wireless+0x3e>
	}
	printf("init success \n");
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <config_wireless+0x7c>)
 8001406:	f003 ff65 	bl	80052d4 <puts>

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200003c4 	.word	0x200003c4
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40010800 	.word	0x40010800
 800141c:	2000024c 	.word	0x2000024c
 8001420:	200003e0 	.word	0x200003e0
 8001424:	08007490 	.word	0x08007490
 8001428:	080074a0 	.word	0x080074a0

0800142c <HAL_TIM_PeriodElapsedCallback>:
	  }

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <__io_putchar>:

void __io_putchar(int ch) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001448:	1d39      	adds	r1, r7, #4
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	2201      	movs	r2, #1
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <__io_putchar+0x20>)
 8001452:	f002 fec6 	bl	80041e2 <HAL_UART_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000037c 	.word	0x2000037c

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_MspInit+0x40>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_MspInit+0x40>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_MspInit+0x40>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_MspInit+0x40>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_MspInit+0x40>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_MspInit+0x40>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_I2C_MspInit+0x70>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d123      	bne.n	800151c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_I2C_MspInit+0x74>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_I2C_MspInit+0x74>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_I2C_MspInit+0x74>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ec:	23c0      	movs	r3, #192	; 0xc0
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <HAL_I2C_MspInit+0x78>)
 8001500:	f000 fc08 	bl	8001d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_I2C_MspInit+0x74>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_I2C_MspInit+0x74>)
 800150a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150e:	61d3      	str	r3, [r2, #28]
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_I2C_MspInit+0x74>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	40021000 	.word	0x40021000
 800152c:	40010c00 	.word	0x40010c00

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_SPI_MspInit+0x88>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d12f      	bne.n	80015b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 8001556:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_SPI_MspInit+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001580:	23a0      	movs	r3, #160	; 0xa0
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <HAL_SPI_MspInit+0x90>)
 8001594:	f000 fbbe 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_SPI_MspInit+0x90>)
 80015ac:	f000 fbb2 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40013000 	.word	0x40013000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_TIM_PWM_MspInit+0x58>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10c      	bne.n	80015f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 80015dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ee:	e010      	b.n	8001612 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_TIM_PWM_MspInit+0x60>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10b      	bne.n	8001612 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_TIM_PWM_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40012c00 	.word	0x40012c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40000400 	.word	0x40000400

08001628 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d113      	bne.n	8001662 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_TIM_OC_MspInit+0x44>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_TIM_OC_MspInit+0x44>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_OC_MspInit+0x44>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201c      	movs	r0, #28
 8001658:	f000 fb25 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165c:	201c      	movs	r0, #28
 800165e:	f000 fb3e 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_TIM_MspPostInit+0x98>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d119      	bne.n	80016c4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a1d      	ldr	r2, [pc, #116]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80016a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80016ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	4814      	ldr	r0, [pc, #80]	; (8001710 <HAL_TIM_MspPostInit+0xa0>)
 80016be:	f000 fb29 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016c2:	e01c      	b.n	80016fe <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <HAL_TIM_MspPostInit+0xa4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d117      	bne.n	80016fe <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_MspPostInit+0x9c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e6:	2303      	movs	r3, #3
 80016e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <HAL_TIM_MspPostInit+0xa8>)
 80016fa:	f000 fb0b 	bl	8001d14 <HAL_GPIO_Init>
}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40021000 	.word	0x40021000
 8001710:	40010800 	.word	0x40010800
 8001714:	40000400 	.word	0x40000400
 8001718:	40010c00 	.word	0x40010c00

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x88>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d12f      	bne.n	800179c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	61d3      	str	r3, [r2, #28]
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0x8c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176c:	2304      	movs	r3, #4
 800176e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_UART_MspInit+0x90>)
 8001780:	f000 fac8 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001784:	2308      	movs	r3, #8
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <HAL_UART_MspInit+0x90>)
 8001798:	f000 fabc 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 f93f 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <TIM2_IRQHandler+0x10>)
 8001806:	f001 ffa7 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002ec 	.word	0x200002ec

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <_kill>:

int _kill(int pid, int sig)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182c:	f003 f83a 	bl	80048a4 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	2216      	movs	r2, #22
 8001834:	601a      	str	r2, [r3, #0]
  return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_exit>:

void _exit (int status)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800184a:	f04f 31ff 	mov.w	r1, #4294967295
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffe7 	bl	8001822 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001854:	e7fe      	b.n	8001854 <_exit+0x12>

08001856 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e00a      	b.n	800187e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001868:	f3af 8000 	nop.w
 800186c:	4601      	mov	r1, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbf0      	blt.n	8001868 <_read+0x12>
  }

  return len;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e009      	b.n	80018b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fdc8 	bl	8001440 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbf1      	blt.n	80018a2 <_write+0x12>
  }
  return len;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_close>:

int _close(int file)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	605a      	str	r2, [r3, #4]
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <_isatty>:

int _isatty(int file)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f002 ffa4 	bl	80048a4 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20005000 	.word	0x20005000
 8001988:	00000400 	.word	0x00000400
 800198c:	200003fc 	.word	0x200003fc
 8001990:	20000418 	.word	0x20000418

08001994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff fff8 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019a6:	490c      	ldr	r1, [pc, #48]	; (80019d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019bc:	4c09      	ldr	r4, [pc, #36]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f002 ff71 	bl	80048b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ce:	f7ff f9df 	bl	8000d90 <main>
  bx lr
 80019d2:	4770      	bx	lr
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019dc:	080078fc 	.word	0x080078fc
  ldr r2, =_sbss
 80019e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019e4:	20000414 	.word	0x20000414

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x28>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 f947 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	200f      	movs	r0, #15
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fd32 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f95f 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 f927 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <HAL_IncTick+0x20>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000400 	.word	0x20000400

08001a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <HAL_GetTick+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000400 	.word	0x20000400

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffe0 	bl	8001a9c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4906      	ldr	r1, [pc, #24]	; (8001b90 <__NVIC_EnableIRQ+0x34>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff90 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff2d 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff42 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff35 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b08b      	sub	sp, #44	; 0x2c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e169      	b.n	8001ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8158 	bne.w	8001ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4a9a      	ldr	r2, [pc, #616]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d05e      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d50:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d875      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d56:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d058      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d5c:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d86f      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d62:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d052      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d68:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2a8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d869      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04c      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d74:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d863      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d80:	4a90      	ldr	r2, [pc, #576]	; (8001fc4 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d85d      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d82a      	bhi.n	8001de0 <HAL_GPIO_Init+0xcc>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d859      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_GPIO_Init+0x80>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e43 	.word	0x08001e43
 8001da8:	08001e43 	.word	0x08001e43
 8001dac:	08001e43 	.word	0x08001e43
 8001db0:	08001e43 	.word	0x08001e43
 8001db4:	08001e43 	.word	0x08001e43
 8001db8:	08001e43 	.word	0x08001e43
 8001dbc:	08001e43 	.word	0x08001e43
 8001dc0:	08001e43 	.word	0x08001e43
 8001dc4:	08001e43 	.word	0x08001e43
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e43 	.word	0x08001e43
 8001dd0:	08001e43 	.word	0x08001e43
 8001dd4:	08001e43 	.word	0x08001e43
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	4a79      	ldr	r2, [pc, #484]	; (8001fc8 <HAL_GPIO_Init+0x2b4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de6:	e02c      	b.n	8001e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e029      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	3304      	adds	r3, #4
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e024      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e01f      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e01a      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e16:	2304      	movs	r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e013      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	611a      	str	r2, [r3, #16]
          break;
 8001e2e:	e009      	b.n	8001e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2308      	movs	r3, #8
 8001e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	615a      	str	r2, [r3, #20]
          break;
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          break;
 8001e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d801      	bhi.n	8001e4e <HAL_GPIO_Init+0x13a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_Init+0x13e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d802      	bhi.n	8001e60 <HAL_GPIO_Init+0x14c>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x152>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3b08      	subs	r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b1 	beq.w	8001ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2b8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <HAL_GPIO_Init+0x2c0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_GPIO_Init+0x1ec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_GPIO_Init+0x1e8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3d      	ldr	r2, [pc, #244]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_Init+0x1e0>
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x1ee>
 8001f00:	2300      	movs	r3, #0
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f12:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <HAL_GPIO_Init+0x2bc>)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4928      	ldr	r1, [pc, #160]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f62:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	491e      	ldr	r1, [pc, #120]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4918      	ldr	r1, [pc, #96]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8a:	4b16      	ldr	r3, [pc, #88]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4914      	ldr	r1, [pc, #80]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d021      	beq.n	8001fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e021      	b.n	8001ff6 <HAL_GPIO_Init+0x2e2>
 8001fb2:	bf00      	nop
 8001fb4:	10320000 	.word	0x10320000
 8001fb8:	10310000 	.word	0x10310000
 8001fbc:	10220000 	.word	0x10220000
 8001fc0:	10210000 	.word	0x10210000
 8001fc4:	10120000 	.word	0x10120000
 8001fc8:	10110000 	.word	0x10110000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <HAL_GPIO_Init+0x304>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	f47f ae8e 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	372c      	adds	r7, #44	; 0x2c
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002038:	e003      	b.n	8002042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800203a:	887b      	ldrh	r3, [r7, #2]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e12b      	b.n	80022b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fa1e 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b0:	f000 fcda 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a81      	ldr	r2, [pc, #516]	; (80022c0 <HAL_I2C_Init+0x274>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d807      	bhi.n	80020d0 <HAL_I2C_Init+0x84>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a80      	ldr	r2, [pc, #512]	; (80022c4 <HAL_I2C_Init+0x278>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bf94      	ite	ls
 80020c8:	2301      	movls	r3, #1
 80020ca:	2300      	movhi	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e006      	b.n	80020de <HAL_I2C_Init+0x92>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a7d      	ldr	r2, [pc, #500]	; (80022c8 <HAL_I2C_Init+0x27c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0e7      	b.n	80022b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a78      	ldr	r2, [pc, #480]	; (80022cc <HAL_I2C_Init+0x280>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9b      	lsrs	r3, r3, #18
 80020f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_I2C_Init+0x274>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d802      	bhi.n	8002120 <HAL_I2C_Init+0xd4>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	e009      	b.n	8002134 <HAL_I2C_Init+0xe8>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a69      	ldr	r2, [pc, #420]	; (80022d0 <HAL_I2C_Init+0x284>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	3301      	adds	r3, #1
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	495c      	ldr	r1, [pc, #368]	; (80022c0 <HAL_I2C_Init+0x274>)
 8002150:	428b      	cmp	r3, r1
 8002152:	d819      	bhi.n	8002188 <HAL_I2C_Init+0x13c>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e59      	subs	r1, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002162:	1c59      	adds	r1, r3, #1
 8002164:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002168:	400b      	ands	r3, r1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_I2C_Init+0x138>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e59      	subs	r1, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fbb1 f3f3 	udiv	r3, r1, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002182:	e051      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002184:	2304      	movs	r3, #4
 8002186:	e04f      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d111      	bne.n	80021b4 <HAL_I2C_Init+0x168>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e012      	b.n	80021da <HAL_I2C_Init+0x18e>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Init+0x196>
 80021de:	2301      	movs	r3, #1
 80021e0:	e022      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <HAL_I2C_Init+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e58      	subs	r0, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	440b      	add	r3, r1
 80021f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002206:	e00f      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6809      	ldr	r1, [r1, #0]
 800222c:	4313      	orrs	r3, r2
 800222e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6911      	ldr	r1, [r2, #16]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68d2      	ldr	r2, [r2, #12]
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	000186a0 	.word	0x000186a0
 80022c4:	001e847f 	.word	0x001e847f
 80022c8:	003d08ff 	.word	0x003d08ff
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e272      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002300:	4b8f      	ldr	r3, [pc, #572]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
 800230c:	4b8c      	ldr	r3, [pc, #560]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06c      	beq.n	8002400 <HAL_RCC_OscConfig+0x12c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d168      	bne.n	8002400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e24c      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x76>
 800233c:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a7f      	ldr	r2, [pc, #508]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b7b      	ldr	r3, [pc, #492]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7a      	ldr	r2, [pc, #488]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b78      	ldr	r3, [pc, #480]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a77      	ldr	r2, [pc, #476]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xbc>
 8002376:	4b72      	ldr	r3, [pc, #456]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a71      	ldr	r2, [pc, #452]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xd4>
 8002390:	4b6b      	ldr	r3, [pc, #428]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6a      	ldr	r2, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a67      	ldr	r2, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fb74 	bl	8001a9c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fb70 	bl	8001a9c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e200      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe4>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb60 	bl	8001a9c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb5c 	bl	8001a9c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1ec      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x10c>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1c0      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4939      	ldr	r1, [pc, #228]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fb15 	bl	8001a9c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fb11 	bl	8001a9c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1a1      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x270>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff faf4 	bl	8001a9c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff faf0 	bl	8001a9c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e180      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03a      	beq.n	8002558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d019      	beq.n	800251e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff fad4 	bl	8001a9c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fad0 	bl	8001a9c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e160      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_RCC_OscConfig+0x26c>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002516:	2001      	movs	r0, #1
 8002518:	f000 face 	bl	8002ab8 <RCC_Delay>
 800251c:	e01c      	b.n	8002558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_OscConfig+0x274>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff faba 	bl	8001a9c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252a:	e00f      	b.n	800254c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff fab6 	bl	8001a9c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d908      	bls.n	800254c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e146      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	42420000 	.word	0x42420000
 8002548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b92      	ldr	r3, [pc, #584]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e9      	bne.n	800252c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a6 	beq.w	80026b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b82      	ldr	r3, [pc, #520]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800259e:	4b7f      	ldr	r3, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7e      	ldr	r2, [pc, #504]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fa77 	bl	8001a9c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff fa73 	bl	8001a9c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b64      	cmp	r3, #100	; 0x64
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e103      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	4b75      	ldr	r3, [pc, #468]	; (800279c <HAL_RCC_OscConfig+0x4c8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	e02d      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x334>
 80025ee:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a69      	ldr	r2, [pc, #420]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	4b67      	ldr	r3, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a66      	ldr	r2, [pc, #408]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	6213      	str	r3, [r2, #32]
 8002606:	e01c      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x356>
 8002610:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a60      	ldr	r2, [pc, #384]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x36e>
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a5a      	ldr	r2, [pc, #360]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b58      	ldr	r3, [pc, #352]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a57      	ldr	r2, [pc, #348]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d015      	beq.n	8002676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7ff fa27 	bl	8001a9c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fa23 	bl	8001a9c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0b1      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <HAL_RCC_OscConfig+0x37e>
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fa11 	bl	8001a9c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff fa0d 	bl	8001a9c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e09b      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8087 	beq.w	80027ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026bc:	4b36      	ldr	r3, [pc, #216]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d061      	beq.n	800278c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d146      	bne.n	800275e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f9e1 	bl	8001a9c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff f9dd 	bl	8001a9c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e06d      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f0      	bne.n	80026de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4921      	ldr	r1, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a19      	ldr	r1, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	430b      	orrs	r3, r1
 800272a:	491b      	ldr	r1, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f9b1 	bl	8001a9c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f9ad 	bl	8001a9c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x46a>
 800275c:	e035      	b.n	80027ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_RCC_OscConfig+0x4cc>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff f99a 	bl	8001a9c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276c:	f7ff f996 	bl	8001a9c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e026      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x498>
 800278a:	e01e      	b.n	80027ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e019      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x500>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000

080027d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d0      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4965      	ldr	r1, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d040      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e073      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff f8e8 	bl	8001a9c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff f8e4 	bl	8001a9c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e053      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f846 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	080074c0 	.word	0x080074c0
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x30>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x36>
 80029da:	e027      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	e027      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	fb03 f202 	mul.w	r2, r3, r2
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2e:	613b      	str	r3, [r7, #16]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	080074d8 	.word	0x080074d8
 8002a4c:	080074e8 	.word	0x080074e8
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff2 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080074d0 	.word	0x080074d0

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	080074d0 	.word	0x080074d0

08002ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <RCC_Delay+0x34>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <RCC_Delay+0x38>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a5b      	lsrs	r3, r3, #9
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad4:	bf00      	nop
  }
  while (Delay --);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <RCC_Delay+0x1c>
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000000 	.word	0x20000000
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e076      	b.n	8002bf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b16:	d009      	beq.n	8002b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
 8002b1e:	e005      	b.n	8002b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fcf2 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	0c1a      	lsrs	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f002 0204 	and.w	r2, r2, #4
 8002bd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_SPI_Transmit+0x22>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e12d      	b.n	8002e7a <HAL_SPI_Transmit+0x27e>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c26:	f7fe ff39 	bl	8001a9c <HAL_GetTick>
 8002c2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d002      	beq.n	8002c42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c40:	e116      	b.n	8002e70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_SPI_Transmit+0x52>
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c52:	e10d      	b.n	8002e70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2203      	movs	r2, #3
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9a:	d10f      	bne.n	8002cbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d007      	beq.n	8002cda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce2:	d14f      	bne.n	8002d84 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_Transmit+0xf6>
 8002cec:	8afb      	ldrh	r3, [r7, #22]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d142      	bne.n	8002d78 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	881a      	ldrh	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	1c9a      	adds	r2, r3, #2
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d16:	e02f      	b.n	8002d78 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d112      	bne.n	8002d4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	1c9a      	adds	r2, r3, #2
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d4a:	e015      	b.n	8002d78 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4c:	f7fe fea6 	bl	8001a9c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d803      	bhi.n	8002d64 <HAL_SPI_Transmit+0x168>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d102      	bne.n	8002d6a <HAL_SPI_Transmit+0x16e>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d76:	e07b      	b.n	8002e70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ca      	bne.n	8002d18 <HAL_SPI_Transmit+0x11c>
 8002d82:	e050      	b.n	8002e26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0x196>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d144      	bne.n	8002e1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002db8:	e030      	b.n	8002e1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d113      	bne.n	8002df0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	7812      	ldrb	r2, [r2, #0]
 8002dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dee:	e015      	b.n	8002e1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df0:	f7fe fe54 	bl	8001a9c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d803      	bhi.n	8002e08 <HAL_SPI_Transmit+0x20c>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x212>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e1a:	e029      	b.n	8002e70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1c9      	bne.n	8002dba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fbd8 	bl	80035e0 <SPI_EndRxTxTransaction>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]
 8002e66:	e003      	b.n	8002e70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b088      	sub	sp, #32
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ea6:	e0fb      	b.n	80030a0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb0:	d112      	bne.n	8002ed8 <HAL_SPI_Receive+0x56>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8ef 	bl	80030b2 <HAL_SPI_TransmitReceive>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	e0e8      	b.n	80030aa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Receive+0x64>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e0e1      	b.n	80030aa <HAL_SPI_Receive+0x228>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eee:	f7fe fdd5 	bl	8001a9c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Receive+0x7e>
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f04:	e0cc      	b.n	80030a0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f4c:	d10f      	bne.n	8002f6e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d007      	beq.n	8002f8c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d16a      	bne.n	800306a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f94:	e032      	b.n	8002ffc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d115      	bne.n	8002fd0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f103 020c 	add.w	r2, r3, #12
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fce:	e015      	b.n	8002ffc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd0:	f7fe fd64 	bl	8001a9c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_Receive+0x166>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x16c>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ffa:	e051      	b.n	80030a0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1c7      	bne.n	8002f96 <HAL_SPI_Receive+0x114>
 8003006:	e035      	b.n	8003074 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d113      	bne.n	800303e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	b292      	uxth	r2, r2
 8003022:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303c:	e015      	b.n	800306a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303e:	f7fe fd2d 	bl	8001a9c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d803      	bhi.n	8003056 <HAL_SPI_Receive+0x1d4>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d102      	bne.n	800305c <HAL_SPI_Receive+0x1da>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003068:	e01a      	b.n	80030a0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1c9      	bne.n	8003008 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	6839      	ldr	r1, [r7, #0]
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fa5f 	bl	800353c <SPI_EndRxTransaction>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
 8003096:	e003      	b.n	80030a0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b08c      	sub	sp, #48	; 0x30
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_SPI_TransmitReceive+0x26>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e198      	b.n	800340a <HAL_SPI_TransmitReceive+0x358>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e0:	f7fe fcdc 	bl	8001a9c <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d00f      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x70>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003108:	d107      	bne.n	800311a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <HAL_SPI_TransmitReceive+0x68>
 8003112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003116:	2b04      	cmp	r3, #4
 8003118:	d003      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800311a:	2302      	movs	r3, #2
 800311c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003120:	e16d      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x82>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x82>
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800313a:	e160      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b04      	cmp	r3, #4
 8003146:	d003      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2205      	movs	r2, #5
 800314c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	887a      	ldrh	r2, [r7, #2]
 8003166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	887a      	ldrh	r2, [r7, #2]
 8003172:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ac:	d17c      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_TransmitReceive+0x10a>
 80031b6:	8b7b      	ldrh	r3, [r7, #26]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d16a      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e0:	e057      	b.n	8003292 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d11b      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x176>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_SPI_TransmitReceive+0x176>
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d113      	bne.n	8003228 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	1c9a      	adds	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d119      	bne.n	800326a <HAL_SPI_TransmitReceive+0x1b8>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d014      	beq.n	800326a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	b292      	uxth	r2, r2
 800324c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	1c9a      	adds	r2, r3, #2
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003266:	2301      	movs	r3, #1
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800326a:	f7fe fc17 	bl	8001a9c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003276:	429a      	cmp	r2, r3
 8003278:	d80b      	bhi.n	8003292 <HAL_SPI_TransmitReceive+0x1e0>
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d007      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003290:	e0b5      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1a2      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x130>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d19d      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x130>
 80032a6:	e080      	b.n	80033aa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x204>
 80032b0:	8b7b      	ldrh	r3, [r7, #26]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d16f      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032dc:	e05b      	b.n	8003396 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11c      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x274>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x274>
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d114      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x2b6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003368:	f7fe fb98 	bl	8001a9c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	429a      	cmp	r2, r3
 8003376:	d803      	bhi.n	8003380 <HAL_SPI_TransmitReceive+0x2ce>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d102      	bne.n	8003386 <HAL_SPI_TransmitReceive+0x2d4>
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003394:	e033      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d19e      	bne.n	80032de <HAL_SPI_TransmitReceive+0x22c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d199      	bne.n	80032de <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f916 	bl	80035e0 <SPI_EndRxTxTransaction>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033c6:	e01a      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f4:	e003      	b.n	80033fe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800340a:	4618      	mov	r0, r3
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003420:	b2db      	uxtb	r3, r3
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800343c:	f7fe fb2e 	bl	8001a9c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800344c:	f7fe fb26 	bl	8001a9c <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	0d1b      	lsrs	r3, r3, #20
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003462:	e054      	b.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d050      	beq.n	800350e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800346c:	f7fe fb16 	bl	8001a9c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d902      	bls.n	8003482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d13d      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349a:	d111      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a4:	d004      	beq.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d107      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c8:	d10f      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e017      	b.n	800352e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3b01      	subs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d19b      	bne.n	8003464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3720      	adds	r7, #32
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000000 	.word	0x20000000

0800353c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003550:	d111      	bne.n	8003576 <SPI_EndRxTransaction+0x3a>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355a:	d004      	beq.n	8003566 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003564:	d107      	bne.n	8003576 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003574:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d117      	bne.n	80035b0 <SPI_EndRxTransaction+0x74>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d112      	bne.n	80035b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2200      	movs	r2, #0
 8003592:	2101      	movs	r1, #1
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff ff49 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e013      	b.n	80035d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff ff36 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f043 0220 	orr.w	r2, r3, #32
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e000      	b.n	80035d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2180      	movs	r1, #128	; 0x80
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff ff18 	bl	800342c <SPI_WaitFlagStateUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e000      	b.n	8003614 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fff0 	bl	8001628 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 fac6 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e041      	b.n	8003750 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fd ff6f 	bl	80015c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f000 fa77 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa0b 	bl	8003bb6 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9fe 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa0d 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0204 	mvn.w	r2, #4
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9e1 	bl	8003bb6 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f9d4 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f9e3 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9b7 	bl	8003bb6 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9aa 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9b9 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f98d 	bl	8003bb6 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f980 	bl	8003ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f98f 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0201 	mvn.w	r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fda8 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fc14 	bl	8004130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f953 	bl	8003bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0220 	mvn.w	r2, #32
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fbdf 	bl	800411e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e048      	b.n	8003a18 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d839      	bhi.n	8003a08 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003a09 	.word	0x08003a09
 80039ac:	080039df 	.word	0x080039df
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	08003a09 	.word	0x08003a09
 80039c4:	08003a09 	.word	0x08003a09
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	080039fb 	.word	0x080039fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f96a 	bl	8003cb0 <TIM_OC1_SetConfig>
      break;
 80039dc:	e017      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f9c9 	bl	8003d7c <TIM_OC2_SetConfig>
      break;
 80039ea:	e010      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa2c 	bl	8003e50 <TIM_OC3_SetConfig>
      break;
 80039f8:	e009      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fa8f 	bl	8003f24 <TIM_OC4_SetConfig>
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e0ae      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	f200 809f 	bhi.w	8003b8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003b8d 	.word	0x08003b8d
 8003a5c:	08003b8d 	.word	0x08003b8d
 8003a60:	08003b8d 	.word	0x08003b8d
 8003a64:	08003ac9 	.word	0x08003ac9
 8003a68:	08003b8d 	.word	0x08003b8d
 8003a6c:	08003b8d 	.word	0x08003b8d
 8003a70:	08003b8d 	.word	0x08003b8d
 8003a74:	08003b0b 	.word	0x08003b0b
 8003a78:	08003b8d 	.word	0x08003b8d
 8003a7c:	08003b8d 	.word	0x08003b8d
 8003a80:	08003b8d 	.word	0x08003b8d
 8003a84:	08003b4b 	.word	0x08003b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f90e 	bl	8003cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0208 	orr.w	r2, r2, #8
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
      break;
 8003ac6:	e064      	b.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f954 	bl	8003d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6999      	ldr	r1, [r3, #24]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	619a      	str	r2, [r3, #24]
      break;
 8003b08:	e043      	b.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f99d 	bl	8003e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0208 	orr.w	r2, r2, #8
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0204 	bic.w	r2, r2, #4
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	61da      	str	r2, [r3, #28]
      break;
 8003b48:	e023      	b.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f9e7 	bl	8003f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69d9      	ldr	r1, [r3, #28]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	021a      	lsls	r2, r3, #8
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	61da      	str	r2, [r3, #28]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <TIM_Base_SetConfig+0xbc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a25      	ldr	r2, [pc, #148]	; (8003cac <TIM_Base_SetConfig+0xc0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <TIM_Base_SetConfig+0xbc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <TIM_Base_SetConfig+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800

08003cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f023 0201 	bic.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f023 0302 	bic.w	r3, r3, #2
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <TIM_OC1_SetConfig+0xc8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10c      	bne.n	8003d26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0308 	bic.w	r3, r3, #8
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <TIM_OC1_SetConfig+0xc8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d111      	bne.n	8003d52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40012c00 	.word	0x40012c00

08003d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0320 	bic.w	r3, r3, #32
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <TIM_OC2_SetConfig+0xd0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10d      	bne.n	8003df8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <TIM_OC2_SetConfig+0xd0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d113      	bne.n	8003e28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00

08003e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <TIM_OC3_SetConfig+0xd0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10d      	bne.n	8003eca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <TIM_OC3_SetConfig+0xd0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d113      	bne.n	8003efa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00

08003f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	031b      	lsls	r3, r3, #12
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <TIM_OC4_SetConfig+0x98>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d109      	bne.n	8003f98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e046      	b.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d009      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a10      	ldr	r2, [pc, #64]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10c      	bne.n	8004054 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4313      	orrs	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800

0800407c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004094:	2302      	movs	r3, #2
 8004096:	e03d      	b.n	8004114 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e042      	b.n	80041da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fd fad7 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2224      	movs	r2, #36	; 0x24
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004184:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f91c 	bl	80043c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08a      	sub	sp, #40	; 0x28
 80041e6:	af02      	add	r7, sp, #8
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d16d      	bne.n	80042de <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_Transmit+0x2c>
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e066      	b.n	80042e0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2221      	movs	r2, #33	; 0x21
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004220:	f7fd fc3c 	bl	8001a9c <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d108      	bne.n	800424e <HAL_UART_Transmit+0x6c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e003      	b.n	8004256 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004256:	e02a      	b.n	80042ae <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2200      	movs	r2, #0
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f840 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e036      	b.n	80042e0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004286:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3302      	adds	r3, #2
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e007      	b.n	80042a0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1cf      	bne.n	8004258 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f810 	bl	80042e8 <UART_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e006      	b.n	80042e0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b090      	sub	sp, #64	; 0x40
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	e050      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d04c      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
 8004308:	f7fd fbc8 	bl	8001a9c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004314:	429a      	cmp	r2, r3
 8004316:	d241      	bcs.n	800439c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004338:	637a      	str	r2, [r7, #52]	; 0x34
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	613b      	str	r3, [r7, #16]
   return(result);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800436c:	623a      	str	r2, [r7, #32]
 800436e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	61bb      	str	r3, [r7, #24]
   return(result);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e00f      	b.n	80043bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d09f      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	; 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043fe:	f023 030c 	bic.w	r3, r3, #12
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	430b      	orrs	r3, r1
 800440a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <UART_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7fe fb30 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	e002      	b.n	800443a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7fe fb18 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8004438:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009a      	lsls	r2, r3, #2
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <UART_SetConfig+0x118>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	0119      	lsls	r1, r3, #4
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	009a      	lsls	r2, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <UART_SetConfig+0x118>)
 8004472:	fba3 0302 	umull	r0, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2064      	movs	r0, #100	; 0x64
 800447a:	fb00 f303 	mul.w	r3, r0, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	3332      	adds	r3, #50	; 0x32
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <UART_SetConfig+0x118>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004490:	4419      	add	r1, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <UART_SetConfig+0x118>)
 80044aa:	fba3 0302 	umull	r0, r3, r3, r2
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2064      	movs	r0, #100	; 0x64
 80044b2:	fb00 f303 	mul.w	r3, r0, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	3332      	adds	r3, #50	; 0x32
 80044bc:	4a07      	ldr	r2, [pc, #28]	; (80044dc <UART_SetConfig+0x118>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	440a      	add	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d0:	bf00      	nop
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40013800 	.word	0x40013800
 80044dc:	51eb851f 	.word	0x51eb851f

080044e0 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6958      	ldr	r0, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	b29b      	uxth	r3, r3
 8004508:	2200      	movs	r2, #0
 800450a:	4619      	mov	r1, r3
 800450c:	f7fd fd86 	bl	800201c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6998      	ldr	r0, [r3, #24]
 8004516:	f107 010f 	add.w	r1, r7, #15
 800451a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800451e:	2201      	movs	r2, #1
 8004520:	f7fe fb6c 	bl	8002bfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8004524:	bf00      	nop
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe ff70 	bl	8003412 <HAL_SPI_GetState>
 8004532:	4603      	mov	r3, r0
 8004534:	2b01      	cmp	r3, #1
 8004536:	d1f6      	bne.n	8004526 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6998      	ldr	r0, [r3, #24]
 800453e:	f107 010e 	add.w	r1, r7, #14
 8004542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004546:	2201      	movs	r2, #1
 8004548:	f7fe fc9b 	bl	8002e82 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800454c:	bf00      	nop
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe ff5c 	bl	8003412 <HAL_SPI_GetState>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d1f6      	bne.n	800454e <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6958      	ldr	r0, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	b29b      	uxth	r3, r3
 800456e:	2201      	movs	r2, #1
 8004570:	4619      	mov	r1, r3
 8004572:	f7fd fd53 	bl	800201c <HAL_GPIO_WritePin>
	return rxByte;
 8004576:	7bbb      	ldrb	r3, [r7, #14]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	4613      	mov	r3, r2
 800458e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004596:	b2db      	uxtb	r3, r3
 8004598:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6958      	ldr	r0, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2200      	movs	r2, #0
 80045aa:	4619      	mov	r1, r3
 80045ac:	f7fd fd36 	bl	800201c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6998      	ldr	r0, [r3, #24]
 80045b6:	f107 010f 	add.w	r1, r7, #15
 80045ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045be:	2201      	movs	r2, #1
 80045c0:	f7fe fb1c 	bl	8002bfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045c4:	bf00      	nop
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe ff20 	bl	8003412 <HAL_SPI_GetState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d1f6      	bne.n	80045c6 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6998      	ldr	r0, [r3, #24]
 80045de:	1cb9      	adds	r1, r7, #2
 80045e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e4:	2201      	movs	r2, #1
 80045e6:	f7fe fb09 	bl	8002bfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045ea:	bf00      	nop
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff0d 	bl	8003412 <HAL_SPI_GetState>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d1f6      	bne.n	80045ec <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6958      	ldr	r0, [r3, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	b29b      	uxth	r3, r3
 800460c:	2201      	movs	r2, #1
 800460e:	4619      	mov	r1, r3
 8004610:	f7fd fd04 	bl	800201c <HAL_GPIO_WritePin>
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <lora_init>:

uint8_t lora_init(lora_t * module){
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6858      	ldr	r0, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	2200      	movs	r2, #0
 8004634:	4619      	mov	r1, r3
 8004636:	f7fd fcf1 	bl	800201c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800463a:	200a      	movs	r0, #10
 800463c:	f7fd fa38 	bl	8001ab0 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6858      	ldr	r0, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	2201      	movs	r2, #1
 8004650:	4619      	mov	r1, r3
 8004652:	f7fd fce3 	bl	800201c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8004656:	200a      	movs	r0, #10
 8004658:	f7fd fa2a 	bl	8001ab0 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 800465c:	2142      	movs	r1, #66	; 0x42
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff3e 	bl	80044e0 <lora_read_reg>
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b12      	cmp	r3, #18
 800466c:	d006      	beq.n	800467c <lora_init+0x60>
		printf("%d \n" ,ret );
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	4619      	mov	r1, r3
 8004672:	4820      	ldr	r0, [pc, #128]	; (80046f4 <lora_init+0xd8>)
 8004674:	f000 fda8 	bl	80051c8 <iprintf>
		return 1;
 8004678:	2301      	movs	r3, #1
 800467a:	e037      	b.n	80046ec <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	2101      	movs	r1, #1
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ff7d 	bl	8004580 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	791b      	ldrb	r3, [r3, #4]
 800468a:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <lora_init+0xdc>)
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4413      	add	r3, r2
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8bf 	bl	8004818 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	210e      	movs	r1, #14
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff6e 	bl	8004580 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 80046a4:	2200      	movs	r2, #0
 80046a6:	210f      	movs	r1, #15
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ff69 	bl	8004580 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 80046ae:	210c      	movs	r1, #12
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ff15 	bl	80044e0 <lora_read_reg>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	f043 0303 	orr.w	r3, r3, #3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	210c      	movs	r1, #12
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff5a 	bl	8004580 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 80046cc:	2204      	movs	r2, #4
 80046ce:	2126      	movs	r1, #38	; 0x26
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff55 	bl	8004580 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 80046d6:	228f      	movs	r2, #143	; 0x8f
 80046d8:	2109      	movs	r1, #9
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff50 	bl	8004580 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 80046e0:	2281      	movs	r2, #129	; 0x81
 80046e2:	2101      	movs	r1, #1
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff4b 	bl	8004580 <lora_write_reg>
	return 0;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	080074b8 	.word	0x080074b8
 80046f8:	080074f0 	.word	0x080074f0

080046fc <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8004708:	2112      	movs	r1, #18
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fee8 	bl	80044e0 <lora_read_reg>
 8004710:	4603      	mov	r3, r0
 8004712:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x92);
 8004714:	2292      	movs	r2, #146	; 0x92
 8004716:	211d      	movs	r1, #29
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff31 	bl	8004580 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	2112      	movs	r1, #18
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff2a 	bl	8004580 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01d      	beq.n	8004772 <lora_prasePacket+0x76>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d118      	bne.n	8004772 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 8004740:	2113      	movs	r1, #19
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fecc 	bl	80044e0 <lora_read_reg>
 8004748:	4603      	mov	r3, r0
 800474a:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 800474c:	2110      	movs	r1, #16
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fec6 	bl	80044e0 <lora_read_reg>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	210d      	movs	r1, #13
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff10 	bl	8004580 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8004760:	2281      	movs	r2, #129	; 0x81
 8004762:	2101      	movs	r1, #1
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff ff0b 	bl	8004580 <lora_write_reg>
		packetIndex = 0;
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <lora_prasePacket+0xb4>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e010      	b.n	8004794 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8004772:	2101      	movs	r1, #1
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff feb3 	bl	80044e0 <lora_read_reg>
 800477a:	4603      	mov	r3, r0
 800477c:	2b86      	cmp	r3, #134	; 0x86
 800477e:	d009      	beq.n	8004794 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	210d      	movs	r1, #13
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fefb 	bl	8004580 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800478a:	2286      	movs	r2, #134	; 0x86
 800478c:	2101      	movs	r1, #1
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff fef6 	bl	8004580 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <lora_prasePacket+0xa8>
		return -1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e000      	b.n	80047a6 <lora_prasePacket+0xaa>
	}
	return packetLength;
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000404 	.word	0x20000404

080047b4 <lora_available>:

uint8_t lora_available(lora_t * module){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 80047bc:	2113      	movs	r1, #19
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fe8e 	bl	80044e0 <lora_read_reg>
 80047c4:	4603      	mov	r3, r0
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <lora_available+0x24>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	b2db      	uxtb	r3, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000404 	.word	0x20000404

080047dc <lora_read>:

uint8_t lora_read(lora_t * module){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ffe5 	bl	80047b4 <lora_available>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <lora_read+0x18>
		return 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e00a      	b.n	800480a <lora_read+0x2e>
	packetIndex++;
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <lora_read+0x38>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <lora_read+0x38>)
 80047fe:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8004800:	2100      	movs	r1, #0
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fe6c 	bl	80044e0 <lora_read_reg>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000404 	.word	0x20000404

08004818 <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8004824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004828:	f04f 0000 	mov.w	r0, #0
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	04d9      	lsls	r1, r3, #19
 8004832:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8004836:	04d0      	lsls	r0, r2, #19
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <lora_set_frequency+0x88>)
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	f7fc f923 	bl	8000a88 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 800484a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	0c02      	lsrs	r2, r0, #16
 8004858:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800485c:	0c0b      	lsrs	r3, r1, #16
 800485e:	b2d3      	uxtb	r3, r2
 8004860:	461a      	mov	r2, r3
 8004862:	2106      	movs	r1, #6
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fe8b 	bl	8004580 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800486a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	0a02      	lsrs	r2, r0, #8
 8004878:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800487c:	0a0b      	lsrs	r3, r1, #8
 800487e:	b2d3      	uxtb	r3, r2
 8004880:	461a      	mov	r2, r3
 8004882:	2107      	movs	r1, #7
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fe7b 	bl	8004580 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800488a:	7c3b      	ldrb	r3, [r7, #16]
 800488c:	461a      	mov	r2, r3
 800488e:	2108      	movs	r1, #8
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff fe75 	bl	8004580 <lora_write_reg>
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	01e84800 	.word	0x01e84800

080048a4 <__errno>:
 80048a4:	4b01      	ldr	r3, [pc, #4]	; (80048ac <__errno+0x8>)
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	2000000c 	.word	0x2000000c

080048b0 <__libc_init_array>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	2600      	movs	r6, #0
 80048b4:	4d0c      	ldr	r5, [pc, #48]	; (80048e8 <__libc_init_array+0x38>)
 80048b6:	4c0d      	ldr	r4, [pc, #52]	; (80048ec <__libc_init_array+0x3c>)
 80048b8:	1b64      	subs	r4, r4, r5
 80048ba:	10a4      	asrs	r4, r4, #2
 80048bc:	42a6      	cmp	r6, r4
 80048be:	d109      	bne.n	80048d4 <__libc_init_array+0x24>
 80048c0:	f002 fdbc 	bl	800743c <_init>
 80048c4:	2600      	movs	r6, #0
 80048c6:	4d0a      	ldr	r5, [pc, #40]	; (80048f0 <__libc_init_array+0x40>)
 80048c8:	4c0a      	ldr	r4, [pc, #40]	; (80048f4 <__libc_init_array+0x44>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	42a6      	cmp	r6, r4
 80048d0:	d105      	bne.n	80048de <__libc_init_array+0x2e>
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d8:	4798      	blx	r3
 80048da:	3601      	adds	r6, #1
 80048dc:	e7ee      	b.n	80048bc <__libc_init_array+0xc>
 80048de:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e2:	4798      	blx	r3
 80048e4:	3601      	adds	r6, #1
 80048e6:	e7f2      	b.n	80048ce <__libc_init_array+0x1e>
 80048e8:	080078f4 	.word	0x080078f4
 80048ec:	080078f4 	.word	0x080078f4
 80048f0:	080078f4 	.word	0x080078f4
 80048f4:	080078f8 	.word	0x080078f8

080048f8 <memset>:
 80048f8:	4603      	mov	r3, r0
 80048fa:	4402      	add	r2, r0
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <memset+0xa>
 8004900:	4770      	bx	lr
 8004902:	f803 1b01 	strb.w	r1, [r3], #1
 8004906:	e7f9      	b.n	80048fc <memset+0x4>

08004908 <__cvt>:
 8004908:	2b00      	cmp	r3, #0
 800490a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490e:	461f      	mov	r7, r3
 8004910:	bfbb      	ittet	lt
 8004912:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004916:	461f      	movlt	r7, r3
 8004918:	2300      	movge	r3, #0
 800491a:	232d      	movlt	r3, #45	; 0x2d
 800491c:	b088      	sub	sp, #32
 800491e:	4614      	mov	r4, r2
 8004920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004922:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004924:	7013      	strb	r3, [r2, #0]
 8004926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004928:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800492c:	f023 0820 	bic.w	r8, r3, #32
 8004930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004934:	d005      	beq.n	8004942 <__cvt+0x3a>
 8004936:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800493a:	d100      	bne.n	800493e <__cvt+0x36>
 800493c:	3501      	adds	r5, #1
 800493e:	2302      	movs	r3, #2
 8004940:	e000      	b.n	8004944 <__cvt+0x3c>
 8004942:	2303      	movs	r3, #3
 8004944:	aa07      	add	r2, sp, #28
 8004946:	9204      	str	r2, [sp, #16]
 8004948:	aa06      	add	r2, sp, #24
 800494a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800494e:	e9cd 3500 	strd	r3, r5, [sp]
 8004952:	4622      	mov	r2, r4
 8004954:	463b      	mov	r3, r7
 8004956:	f000 fe13 	bl	8005580 <_dtoa_r>
 800495a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800495e:	4606      	mov	r6, r0
 8004960:	d102      	bne.n	8004968 <__cvt+0x60>
 8004962:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004964:	07db      	lsls	r3, r3, #31
 8004966:	d522      	bpl.n	80049ae <__cvt+0xa6>
 8004968:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800496c:	eb06 0905 	add.w	r9, r6, r5
 8004970:	d110      	bne.n	8004994 <__cvt+0x8c>
 8004972:	7833      	ldrb	r3, [r6, #0]
 8004974:	2b30      	cmp	r3, #48	; 0x30
 8004976:	d10a      	bne.n	800498e <__cvt+0x86>
 8004978:	2200      	movs	r2, #0
 800497a:	2300      	movs	r3, #0
 800497c:	4620      	mov	r0, r4
 800497e:	4639      	mov	r1, r7
 8004980:	f7fc f812 	bl	80009a8 <__aeabi_dcmpeq>
 8004984:	b918      	cbnz	r0, 800498e <__cvt+0x86>
 8004986:	f1c5 0501 	rsb	r5, r5, #1
 800498a:	f8ca 5000 	str.w	r5, [sl]
 800498e:	f8da 3000 	ldr.w	r3, [sl]
 8004992:	4499      	add	r9, r3
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4620      	mov	r0, r4
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f804 	bl	80009a8 <__aeabi_dcmpeq>
 80049a0:	b108      	cbz	r0, 80049a6 <__cvt+0x9e>
 80049a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80049a6:	2230      	movs	r2, #48	; 0x30
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	454b      	cmp	r3, r9
 80049ac:	d307      	bcc.n	80049be <__cvt+0xb6>
 80049ae:	4630      	mov	r0, r6
 80049b0:	9b07      	ldr	r3, [sp, #28]
 80049b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049b4:	1b9b      	subs	r3, r3, r6
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	b008      	add	sp, #32
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	9107      	str	r1, [sp, #28]
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	e7f0      	b.n	80049a8 <__cvt+0xa0>

080049c6 <__exponent>:
 80049c6:	4603      	mov	r3, r0
 80049c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ca:	2900      	cmp	r1, #0
 80049cc:	f803 2b02 	strb.w	r2, [r3], #2
 80049d0:	bfb6      	itet	lt
 80049d2:	222d      	movlt	r2, #45	; 0x2d
 80049d4:	222b      	movge	r2, #43	; 0x2b
 80049d6:	4249      	neglt	r1, r1
 80049d8:	2909      	cmp	r1, #9
 80049da:	7042      	strb	r2, [r0, #1]
 80049dc:	dd2b      	ble.n	8004a36 <__exponent+0x70>
 80049de:	f10d 0407 	add.w	r4, sp, #7
 80049e2:	46a4      	mov	ip, r4
 80049e4:	270a      	movs	r7, #10
 80049e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80049ea:	460a      	mov	r2, r1
 80049ec:	46a6      	mov	lr, r4
 80049ee:	fb07 1516 	mls	r5, r7, r6, r1
 80049f2:	2a63      	cmp	r2, #99	; 0x63
 80049f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80049f8:	4631      	mov	r1, r6
 80049fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80049fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a02:	dcf0      	bgt.n	80049e6 <__exponent+0x20>
 8004a04:	3130      	adds	r1, #48	; 0x30
 8004a06:	f1ae 0502 	sub.w	r5, lr, #2
 8004a0a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a0e:	4629      	mov	r1, r5
 8004a10:	1c44      	adds	r4, r0, #1
 8004a12:	4561      	cmp	r1, ip
 8004a14:	d30a      	bcc.n	8004a2c <__exponent+0x66>
 8004a16:	f10d 0209 	add.w	r2, sp, #9
 8004a1a:	eba2 020e 	sub.w	r2, r2, lr
 8004a1e:	4565      	cmp	r5, ip
 8004a20:	bf88      	it	hi
 8004a22:	2200      	movhi	r2, #0
 8004a24:	4413      	add	r3, r2
 8004a26:	1a18      	subs	r0, r3, r0
 8004a28:	b003      	add	sp, #12
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a30:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a34:	e7ed      	b.n	8004a12 <__exponent+0x4c>
 8004a36:	2330      	movs	r3, #48	; 0x30
 8004a38:	3130      	adds	r1, #48	; 0x30
 8004a3a:	7083      	strb	r3, [r0, #2]
 8004a3c:	70c1      	strb	r1, [r0, #3]
 8004a3e:	1d03      	adds	r3, r0, #4
 8004a40:	e7f1      	b.n	8004a26 <__exponent+0x60>
	...

08004a44 <_printf_float>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	b091      	sub	sp, #68	; 0x44
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a50:	4616      	mov	r6, r2
 8004a52:	461f      	mov	r7, r3
 8004a54:	4605      	mov	r5, r0
 8004a56:	f001 fd35 	bl	80064c4 <_localeconv_r>
 8004a5a:	6803      	ldr	r3, [r0, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a60:	f7fb fb76 	bl	8000150 <strlen>
 8004a64:	2300      	movs	r3, #0
 8004a66:	930e      	str	r3, [sp, #56]	; 0x38
 8004a68:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6c:	900a      	str	r0, [sp, #40]	; 0x28
 8004a6e:	3307      	adds	r3, #7
 8004a70:	f023 0307 	bic.w	r3, r3, #7
 8004a74:	f103 0208 	add.w	r2, r3, #8
 8004a78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a7c:	f8d4 b000 	ldr.w	fp, [r4]
 8004a80:	f8c8 2000 	str.w	r2, [r8]
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a8c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a90:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4b9c      	ldr	r3, [pc, #624]	; (8004d10 <_printf_float+0x2cc>)
 8004a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aa0:	f7fb ffb4 	bl	8000a0c <__aeabi_dcmpun>
 8004aa4:	bb70      	cbnz	r0, 8004b04 <_printf_float+0xc0>
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <_printf_float+0x2cc>)
 8004aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ab0:	f7fb ff8e 	bl	80009d0 <__aeabi_dcmple>
 8004ab4:	bb30      	cbnz	r0, 8004b04 <_printf_float+0xc0>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4640      	mov	r0, r8
 8004abc:	4651      	mov	r1, sl
 8004abe:	f7fb ff7d 	bl	80009bc <__aeabi_dcmplt>
 8004ac2:	b110      	cbz	r0, 8004aca <_printf_float+0x86>
 8004ac4:	232d      	movs	r3, #45	; 0x2d
 8004ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aca:	4b92      	ldr	r3, [pc, #584]	; (8004d14 <_printf_float+0x2d0>)
 8004acc:	4892      	ldr	r0, [pc, #584]	; (8004d18 <_printf_float+0x2d4>)
 8004ace:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004ad2:	bf94      	ite	ls
 8004ad4:	4698      	movls	r8, r3
 8004ad6:	4680      	movhi	r8, r0
 8004ad8:	2303      	movs	r3, #3
 8004ada:	f04f 0a00 	mov.w	sl, #0
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	f02b 0304 	bic.w	r3, fp, #4
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	4633      	mov	r3, r6
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	9700      	str	r7, [sp, #0]
 8004aee:	aa0f      	add	r2, sp, #60	; 0x3c
 8004af0:	f000 f9d4 	bl	8004e9c <_printf_common>
 8004af4:	3001      	adds	r0, #1
 8004af6:	f040 8090 	bne.w	8004c1a <_printf_float+0x1d6>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	b011      	add	sp, #68	; 0x44
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	4642      	mov	r2, r8
 8004b06:	4653      	mov	r3, sl
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4651      	mov	r1, sl
 8004b0c:	f7fb ff7e 	bl	8000a0c <__aeabi_dcmpun>
 8004b10:	b148      	cbz	r0, 8004b26 <_printf_float+0xe2>
 8004b12:	f1ba 0f00 	cmp.w	sl, #0
 8004b16:	bfb8      	it	lt
 8004b18:	232d      	movlt	r3, #45	; 0x2d
 8004b1a:	4880      	ldr	r0, [pc, #512]	; (8004d1c <_printf_float+0x2d8>)
 8004b1c:	bfb8      	it	lt
 8004b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b22:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <_printf_float+0x2dc>)
 8004b24:	e7d3      	b.n	8004ace <_printf_float+0x8a>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	d142      	bne.n	8004bb6 <_printf_float+0x172>
 8004b30:	2306      	movs	r3, #6
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	9206      	str	r2, [sp, #24]
 8004b38:	aa0e      	add	r2, sp, #56	; 0x38
 8004b3a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b3e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b40:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b44:	9203      	str	r2, [sp, #12]
 8004b46:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	4642      	mov	r2, r8
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	4628      	mov	r0, r5
 8004b58:	4653      	mov	r3, sl
 8004b5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b5c:	f7ff fed4 	bl	8004908 <__cvt>
 8004b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b62:	4680      	mov	r8, r0
 8004b64:	2947      	cmp	r1, #71	; 0x47
 8004b66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b68:	d108      	bne.n	8004b7c <_printf_float+0x138>
 8004b6a:	1cc8      	adds	r0, r1, #3
 8004b6c:	db02      	blt.n	8004b74 <_printf_float+0x130>
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	4299      	cmp	r1, r3
 8004b72:	dd40      	ble.n	8004bf6 <_printf_float+0x1b2>
 8004b74:	f1a9 0902 	sub.w	r9, r9, #2
 8004b78:	fa5f f989 	uxtb.w	r9, r9
 8004b7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b80:	d81f      	bhi.n	8004bc2 <_printf_float+0x17e>
 8004b82:	464a      	mov	r2, r9
 8004b84:	3901      	subs	r1, #1
 8004b86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b8a:	910d      	str	r1, [sp, #52]	; 0x34
 8004b8c:	f7ff ff1b 	bl	80049c6 <__exponent>
 8004b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b92:	4682      	mov	sl, r0
 8004b94:	1813      	adds	r3, r2, r0
 8004b96:	2a01      	cmp	r2, #1
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	dc02      	bgt.n	8004ba2 <_printf_float+0x15e>
 8004b9c:	6822      	ldr	r2, [r4, #0]
 8004b9e:	07d2      	lsls	r2, r2, #31
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_float+0x162>
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d09b      	beq.n	8004ae6 <_printf_float+0xa2>
 8004bae:	232d      	movs	r3, #45	; 0x2d
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb4:	e797      	b.n	8004ae6 <_printf_float+0xa2>
 8004bb6:	2947      	cmp	r1, #71	; 0x47
 8004bb8:	d1bc      	bne.n	8004b34 <_printf_float+0xf0>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ba      	bne.n	8004b34 <_printf_float+0xf0>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e7b7      	b.n	8004b32 <_printf_float+0xee>
 8004bc2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bc6:	d118      	bne.n	8004bfa <_printf_float+0x1b6>
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	dd0b      	ble.n	8004be6 <_printf_float+0x1a2>
 8004bce:	6121      	str	r1, [r4, #16]
 8004bd0:	b913      	cbnz	r3, 8004bd8 <_printf_float+0x194>
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	07d0      	lsls	r0, r2, #31
 8004bd6:	d502      	bpl.n	8004bde <_printf_float+0x19a>
 8004bd8:	3301      	adds	r3, #1
 8004bda:	440b      	add	r3, r1
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	f04f 0a00 	mov.w	sl, #0
 8004be2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004be4:	e7df      	b.n	8004ba6 <_printf_float+0x162>
 8004be6:	b913      	cbnz	r3, 8004bee <_printf_float+0x1aa>
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	07d2      	lsls	r2, r2, #31
 8004bec:	d501      	bpl.n	8004bf2 <_printf_float+0x1ae>
 8004bee:	3302      	adds	r3, #2
 8004bf0:	e7f4      	b.n	8004bdc <_printf_float+0x198>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7f2      	b.n	8004bdc <_printf_float+0x198>
 8004bf6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	db05      	blt.n	8004c0c <_printf_float+0x1c8>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	6121      	str	r1, [r4, #16]
 8004c04:	07d8      	lsls	r0, r3, #31
 8004c06:	d5ea      	bpl.n	8004bde <_printf_float+0x19a>
 8004c08:	1c4b      	adds	r3, r1, #1
 8004c0a:	e7e7      	b.n	8004bdc <_printf_float+0x198>
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	bfcc      	ite	gt
 8004c10:	2201      	movgt	r2, #1
 8004c12:	f1c1 0202 	rsble	r2, r1, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	e7e0      	b.n	8004bdc <_printf_float+0x198>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	055a      	lsls	r2, r3, #21
 8004c1e:	d407      	bmi.n	8004c30 <_printf_float+0x1ec>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	4642      	mov	r2, r8
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d12b      	bne.n	8004c86 <_printf_float+0x242>
 8004c2e:	e764      	b.n	8004afa <_printf_float+0xb6>
 8004c30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c34:	f240 80dd 	bls.w	8004df2 <_printf_float+0x3ae>
 8004c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f7fb feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d033      	beq.n	8004cb0 <_printf_float+0x26c>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	4a35      	ldr	r2, [pc, #212]	; (8004d24 <_printf_float+0x2e0>)
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af51 	beq.w	8004afa <_printf_float+0xb6>
 8004c58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	db02      	blt.n	8004c66 <_printf_float+0x222>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	07d8      	lsls	r0, r3, #31
 8004c64:	d50f      	bpl.n	8004c86 <_printf_float+0x242>
 8004c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	f43f af42 	beq.w	8004afa <_printf_float+0xb6>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	f104 091a 	add.w	r9, r4, #26
 8004c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4543      	cmp	r3, r8
 8004c84:	dc09      	bgt.n	8004c9a <_printf_float+0x256>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	079b      	lsls	r3, r3, #30
 8004c8a:	f100 8102 	bmi.w	8004e92 <_printf_float+0x44e>
 8004c8e:	68e0      	ldr	r0, [r4, #12]
 8004c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c92:	4298      	cmp	r0, r3
 8004c94:	bfb8      	it	lt
 8004c96:	4618      	movlt	r0, r3
 8004c98:	e731      	b.n	8004afe <_printf_float+0xba>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	464a      	mov	r2, r9
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f af28 	beq.w	8004afa <_printf_float+0xb6>
 8004caa:	f108 0801 	add.w	r8, r8, #1
 8004cae:	e7e6      	b.n	8004c7e <_printf_float+0x23a>
 8004cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dc38      	bgt.n	8004d28 <_printf_float+0x2e4>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <_printf_float+0x2e0>)
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f af1a 	beq.w	8004afa <_printf_float+0xb6>
 8004cc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d102      	bne.n	8004cd4 <_printf_float+0x290>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	07d9      	lsls	r1, r3, #31
 8004cd2:	d5d8      	bpl.n	8004c86 <_printf_float+0x242>
 8004cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f af0b 	beq.w	8004afa <_printf_float+0xb6>
 8004ce4:	f04f 0900 	mov.w	r9, #0
 8004ce8:	f104 0a1a 	add.w	sl, r4, #26
 8004cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cee:	425b      	negs	r3, r3
 8004cf0:	454b      	cmp	r3, r9
 8004cf2:	dc01      	bgt.n	8004cf8 <_printf_float+0x2b4>
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf6:	e794      	b.n	8004c22 <_printf_float+0x1de>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4652      	mov	r2, sl
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f aef9 	beq.w	8004afa <_printf_float+0xb6>
 8004d08:	f109 0901 	add.w	r9, r9, #1
 8004d0c:	e7ee      	b.n	8004cec <_printf_float+0x2a8>
 8004d0e:	bf00      	nop
 8004d10:	7fefffff 	.word	0x7fefffff
 8004d14:	08007514 	.word	0x08007514
 8004d18:	08007518 	.word	0x08007518
 8004d1c:	08007520 	.word	0x08007520
 8004d20:	0800751c 	.word	0x0800751c
 8004d24:	08007524 	.word	0x08007524
 8004d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bfa8      	it	ge
 8004d30:	461a      	movge	r2, r3
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	4691      	mov	r9, r2
 8004d36:	dc37      	bgt.n	8004da8 <_printf_float+0x364>
 8004d38:	f04f 0b00 	mov.w	fp, #0
 8004d3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d40:	f104 021a 	add.w	r2, r4, #26
 8004d44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d48:	ebaa 0309 	sub.w	r3, sl, r9
 8004d4c:	455b      	cmp	r3, fp
 8004d4e:	dc33      	bgt.n	8004db8 <_printf_float+0x374>
 8004d50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d54:	429a      	cmp	r2, r3
 8004d56:	db3b      	blt.n	8004dd0 <_printf_float+0x38c>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07da      	lsls	r2, r3, #31
 8004d5c:	d438      	bmi.n	8004dd0 <_printf_float+0x38c>
 8004d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d62:	eba3 020a 	sub.w	r2, r3, sl
 8004d66:	eba3 0901 	sub.w	r9, r3, r1
 8004d6a:	4591      	cmp	r9, r2
 8004d6c:	bfa8      	it	ge
 8004d6e:	4691      	movge	r9, r2
 8004d70:	f1b9 0f00 	cmp.w	r9, #0
 8004d74:	dc34      	bgt.n	8004de0 <_printf_float+0x39c>
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7e:	f104 0a1a 	add.w	sl, r4, #26
 8004d82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	eba3 0309 	sub.w	r3, r3, r9
 8004d8c:	4543      	cmp	r3, r8
 8004d8e:	f77f af7a 	ble.w	8004c86 <_printf_float+0x242>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f aeac 	beq.w	8004afa <_printf_float+0xb6>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	e7ec      	b.n	8004d82 <_printf_float+0x33e>
 8004da8:	4613      	mov	r3, r2
 8004daa:	4631      	mov	r1, r6
 8004dac:	4642      	mov	r2, r8
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c0      	bne.n	8004d38 <_printf_float+0x2f4>
 8004db6:	e6a0      	b.n	8004afa <_printf_float+0xb6>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f ae99 	beq.w	8004afa <_printf_float+0xb6>
 8004dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dca:	f10b 0b01 	add.w	fp, fp, #1
 8004dce:	e7b9      	b.n	8004d44 <_printf_float+0x300>
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d1bf      	bne.n	8004d5e <_printf_float+0x31a>
 8004dde:	e68c      	b.n	8004afa <_printf_float+0xb6>
 8004de0:	464b      	mov	r3, r9
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	eb08 020a 	add.w	r2, r8, sl
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	d1c2      	bne.n	8004d76 <_printf_float+0x332>
 8004df0:	e683      	b.n	8004afa <_printf_float+0xb6>
 8004df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df4:	2a01      	cmp	r2, #1
 8004df6:	dc01      	bgt.n	8004dfc <_printf_float+0x3b8>
 8004df8:	07db      	lsls	r3, r3, #31
 8004dfa:	d537      	bpl.n	8004e6c <_printf_float+0x428>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4642      	mov	r2, r8
 8004e00:	4631      	mov	r1, r6
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b8      	blx	r7
 8004e06:	3001      	adds	r0, #1
 8004e08:	f43f ae77 	beq.w	8004afa <_printf_float+0xb6>
 8004e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f ae6f 	beq.w	8004afa <_printf_float+0xb6>
 8004e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f7fb fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e28:	b9d8      	cbnz	r0, 8004e62 <_printf_float+0x41e>
 8004e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2c:	f108 0201 	add.w	r2, r8, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d10e      	bne.n	8004e5a <_printf_float+0x416>
 8004e3c:	e65d      	b.n	8004afa <_printf_float+0xb6>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae56 	beq.w	8004afa <_printf_float+0xb6>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e54:	3b01      	subs	r3, #1
 8004e56:	4543      	cmp	r3, r8
 8004e58:	dcf1      	bgt.n	8004e3e <_printf_float+0x3fa>
 8004e5a:	4653      	mov	r3, sl
 8004e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e60:	e6e0      	b.n	8004c24 <_printf_float+0x1e0>
 8004e62:	f04f 0800 	mov.w	r8, #0
 8004e66:	f104 091a 	add.w	r9, r4, #26
 8004e6a:	e7f2      	b.n	8004e52 <_printf_float+0x40e>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4642      	mov	r2, r8
 8004e70:	e7df      	b.n	8004e32 <_printf_float+0x3ee>
 8004e72:	2301      	movs	r3, #1
 8004e74:	464a      	mov	r2, r9
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae3c 	beq.w	8004afa <_printf_float+0xb6>
 8004e82:	f108 0801 	add.w	r8, r8, #1
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e8a:	1a5b      	subs	r3, r3, r1
 8004e8c:	4543      	cmp	r3, r8
 8004e8e:	dcf0      	bgt.n	8004e72 <_printf_float+0x42e>
 8004e90:	e6fd      	b.n	8004c8e <_printf_float+0x24a>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	f104 0919 	add.w	r9, r4, #25
 8004e9a:	e7f4      	b.n	8004e86 <_printf_float+0x442>

08004e9c <_printf_common>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	4616      	mov	r6, r2
 8004ea2:	4699      	mov	r9, r3
 8004ea4:	688a      	ldr	r2, [r1, #8]
 8004ea6:	690b      	ldr	r3, [r1, #16]
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	bfb8      	it	lt
 8004eae:	4613      	movlt	r3, r2
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ebc:	b10a      	cbz	r2, 8004ec2 <_printf_common+0x26>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	0699      	lsls	r1, r3, #26
 8004ec6:	bf42      	ittt	mi
 8004ec8:	6833      	ldrmi	r3, [r6, #0]
 8004eca:	3302      	addmi	r3, #2
 8004ecc:	6033      	strmi	r3, [r6, #0]
 8004ece:	6825      	ldr	r5, [r4, #0]
 8004ed0:	f015 0506 	ands.w	r5, r5, #6
 8004ed4:	d106      	bne.n	8004ee4 <_printf_common+0x48>
 8004ed6:	f104 0a19 	add.w	sl, r4, #25
 8004eda:	68e3      	ldr	r3, [r4, #12]
 8004edc:	6832      	ldr	r2, [r6, #0]
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	dc28      	bgt.n	8004f36 <_printf_common+0x9a>
 8004ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ee8:	1e13      	subs	r3, r2, #0
 8004eea:	6822      	ldr	r2, [r4, #0]
 8004eec:	bf18      	it	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	0692      	lsls	r2, r2, #26
 8004ef2:	d42d      	bmi.n	8004f50 <_printf_common+0xb4>
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004efc:	47c0      	blx	r8
 8004efe:	3001      	adds	r0, #1
 8004f00:	d020      	beq.n	8004f44 <_printf_common+0xa8>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	68e5      	ldr	r5, [r4, #12]
 8004f06:	f003 0306 	and.w	r3, r3, #6
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf18      	it	ne
 8004f0e:	2500      	movne	r5, #0
 8004f10:	6832      	ldr	r2, [r6, #0]
 8004f12:	f04f 0600 	mov.w	r6, #0
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	bf08      	it	eq
 8004f1a:	1aad      	subeq	r5, r5, r2
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	bf08      	it	eq
 8004f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfc4      	itt	gt
 8004f28:	1a9b      	subgt	r3, r3, r2
 8004f2a:	18ed      	addgt	r5, r5, r3
 8004f2c:	341a      	adds	r4, #26
 8004f2e:	42b5      	cmp	r5, r6
 8004f30:	d11a      	bne.n	8004f68 <_printf_common+0xcc>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e008      	b.n	8004f48 <_printf_common+0xac>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	47c0      	blx	r8
 8004f40:	3001      	adds	r0, #1
 8004f42:	d103      	bne.n	8004f4c <_printf_common+0xb0>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7c4      	b.n	8004eda <_printf_common+0x3e>
 8004f50:	2030      	movs	r0, #48	; 0x30
 8004f52:	18e1      	adds	r1, r4, r3
 8004f54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f5e:	4422      	add	r2, r4
 8004f60:	3302      	adds	r3, #2
 8004f62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f66:	e7c5      	b.n	8004ef4 <_printf_common+0x58>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0e6      	beq.n	8004f44 <_printf_common+0xa8>
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7d9      	b.n	8004f2e <_printf_common+0x92>
	...

08004f7c <_printf_i>:
 8004f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	7e0f      	ldrb	r7, [r1, #24]
 8004f82:	4691      	mov	r9, r2
 8004f84:	2f78      	cmp	r7, #120	; 0x78
 8004f86:	4680      	mov	r8, r0
 8004f88:	460c      	mov	r4, r1
 8004f8a:	469a      	mov	sl, r3
 8004f8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f92:	d807      	bhi.n	8004fa4 <_printf_i+0x28>
 8004f94:	2f62      	cmp	r7, #98	; 0x62
 8004f96:	d80a      	bhi.n	8004fae <_printf_i+0x32>
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	f000 80d9 	beq.w	8005150 <_printf_i+0x1d4>
 8004f9e:	2f58      	cmp	r7, #88	; 0x58
 8004fa0:	f000 80a4 	beq.w	80050ec <_printf_i+0x170>
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fac:	e03a      	b.n	8005024 <_printf_i+0xa8>
 8004fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb2:	2b15      	cmp	r3, #21
 8004fb4:	d8f6      	bhi.n	8004fa4 <_printf_i+0x28>
 8004fb6:	a101      	add	r1, pc, #4	; (adr r1, 8004fbc <_printf_i+0x40>)
 8004fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08004fa5 	.word	0x08004fa5
 8004fc8:	08004fa5 	.word	0x08004fa5
 8004fcc:	08004fa5 	.word	0x08004fa5
 8004fd0:	08004fa5 	.word	0x08004fa5
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004fa5 	.word	0x08004fa5
 8004fdc:	08004fa5 	.word	0x08004fa5
 8004fe0:	08004fa5 	.word	0x08004fa5
 8004fe4:	08004fa5 	.word	0x08004fa5
 8004fe8:	08005137 	.word	0x08005137
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005119 	.word	0x08005119
 8004ff4:	08004fa5 	.word	0x08004fa5
 8004ff8:	08004fa5 	.word	0x08004fa5
 8004ffc:	08005159 	.word	0x08005159
 8005000:	08004fa5 	.word	0x08004fa5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fa5 	.word	0x08004fa5
 800500c:	08004fa5 	.word	0x08004fa5
 8005010:	08005121 	.word	0x08005121
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005024:	2301      	movs	r3, #1
 8005026:	e0a4      	b.n	8005172 <_printf_i+0x1f6>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	6829      	ldr	r1, [r5, #0]
 800502c:	0606      	lsls	r6, r0, #24
 800502e:	f101 0304 	add.w	r3, r1, #4
 8005032:	d50a      	bpl.n	800504a <_printf_i+0xce>
 8005034:	680e      	ldr	r6, [r1, #0]
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	2e00      	cmp	r6, #0
 800503a:	da03      	bge.n	8005044 <_printf_i+0xc8>
 800503c:	232d      	movs	r3, #45	; 0x2d
 800503e:	4276      	negs	r6, r6
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	230a      	movs	r3, #10
 8005046:	485e      	ldr	r0, [pc, #376]	; (80051c0 <_printf_i+0x244>)
 8005048:	e019      	b.n	800507e <_printf_i+0x102>
 800504a:	680e      	ldr	r6, [r1, #0]
 800504c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	bf18      	it	ne
 8005054:	b236      	sxthne	r6, r6
 8005056:	e7ef      	b.n	8005038 <_printf_i+0xbc>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	1d19      	adds	r1, r3, #4
 800505e:	6029      	str	r1, [r5, #0]
 8005060:	0601      	lsls	r1, r0, #24
 8005062:	d501      	bpl.n	8005068 <_printf_i+0xec>
 8005064:	681e      	ldr	r6, [r3, #0]
 8005066:	e002      	b.n	800506e <_printf_i+0xf2>
 8005068:	0646      	lsls	r6, r0, #25
 800506a:	d5fb      	bpl.n	8005064 <_printf_i+0xe8>
 800506c:	881e      	ldrh	r6, [r3, #0]
 800506e:	2f6f      	cmp	r7, #111	; 0x6f
 8005070:	bf0c      	ite	eq
 8005072:	2308      	moveq	r3, #8
 8005074:	230a      	movne	r3, #10
 8005076:	4852      	ldr	r0, [pc, #328]	; (80051c0 <_printf_i+0x244>)
 8005078:	2100      	movs	r1, #0
 800507a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507e:	6865      	ldr	r5, [r4, #4]
 8005080:	2d00      	cmp	r5, #0
 8005082:	bfa8      	it	ge
 8005084:	6821      	ldrge	r1, [r4, #0]
 8005086:	60a5      	str	r5, [r4, #8]
 8005088:	bfa4      	itt	ge
 800508a:	f021 0104 	bicge.w	r1, r1, #4
 800508e:	6021      	strge	r1, [r4, #0]
 8005090:	b90e      	cbnz	r6, 8005096 <_printf_i+0x11a>
 8005092:	2d00      	cmp	r5, #0
 8005094:	d04d      	beq.n	8005132 <_printf_i+0x1b6>
 8005096:	4615      	mov	r5, r2
 8005098:	fbb6 f1f3 	udiv	r1, r6, r3
 800509c:	fb03 6711 	mls	r7, r3, r1, r6
 80050a0:	5dc7      	ldrb	r7, [r0, r7]
 80050a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a6:	4637      	mov	r7, r6
 80050a8:	42bb      	cmp	r3, r7
 80050aa:	460e      	mov	r6, r1
 80050ac:	d9f4      	bls.n	8005098 <_printf_i+0x11c>
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d10b      	bne.n	80050ca <_printf_i+0x14e>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	07de      	lsls	r6, r3, #31
 80050b6:	d508      	bpl.n	80050ca <_printf_i+0x14e>
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	6861      	ldr	r1, [r4, #4]
 80050bc:	4299      	cmp	r1, r3
 80050be:	bfde      	ittt	le
 80050c0:	2330      	movle	r3, #48	; 0x30
 80050c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050ca:	1b52      	subs	r2, r2, r5
 80050cc:	6122      	str	r2, [r4, #16]
 80050ce:	464b      	mov	r3, r9
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f8cd a000 	str.w	sl, [sp]
 80050d8:	aa03      	add	r2, sp, #12
 80050da:	f7ff fedf 	bl	8004e9c <_printf_common>
 80050de:	3001      	adds	r0, #1
 80050e0:	d14c      	bne.n	800517c <_printf_i+0x200>
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	b004      	add	sp, #16
 80050e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ec:	4834      	ldr	r0, [pc, #208]	; (80051c0 <_printf_i+0x244>)
 80050ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050f2:	6829      	ldr	r1, [r5, #0]
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80050fa:	6029      	str	r1, [r5, #0]
 80050fc:	061d      	lsls	r5, r3, #24
 80050fe:	d514      	bpl.n	800512a <_printf_i+0x1ae>
 8005100:	07df      	lsls	r7, r3, #31
 8005102:	bf44      	itt	mi
 8005104:	f043 0320 	orrmi.w	r3, r3, #32
 8005108:	6023      	strmi	r3, [r4, #0]
 800510a:	b91e      	cbnz	r6, 8005114 <_printf_i+0x198>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	f023 0320 	bic.w	r3, r3, #32
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	2310      	movs	r3, #16
 8005116:	e7af      	b.n	8005078 <_printf_i+0xfc>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	f043 0320 	orr.w	r3, r3, #32
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2378      	movs	r3, #120	; 0x78
 8005122:	4828      	ldr	r0, [pc, #160]	; (80051c4 <_printf_i+0x248>)
 8005124:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005128:	e7e3      	b.n	80050f2 <_printf_i+0x176>
 800512a:	0659      	lsls	r1, r3, #25
 800512c:	bf48      	it	mi
 800512e:	b2b6      	uxthmi	r6, r6
 8005130:	e7e6      	b.n	8005100 <_printf_i+0x184>
 8005132:	4615      	mov	r5, r2
 8005134:	e7bb      	b.n	80050ae <_printf_i+0x132>
 8005136:	682b      	ldr	r3, [r5, #0]
 8005138:	6826      	ldr	r6, [r4, #0]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6961      	ldr	r1, [r4, #20]
 800513e:	6028      	str	r0, [r5, #0]
 8005140:	0635      	lsls	r5, r6, #24
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	d501      	bpl.n	800514a <_printf_i+0x1ce>
 8005146:	6019      	str	r1, [r3, #0]
 8005148:	e002      	b.n	8005150 <_printf_i+0x1d4>
 800514a:	0670      	lsls	r0, r6, #25
 800514c:	d5fb      	bpl.n	8005146 <_printf_i+0x1ca>
 800514e:	8019      	strh	r1, [r3, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	4615      	mov	r5, r2
 8005154:	6123      	str	r3, [r4, #16]
 8005156:	e7ba      	b.n	80050ce <_printf_i+0x152>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	2100      	movs	r1, #0
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	602a      	str	r2, [r5, #0]
 8005160:	681d      	ldr	r5, [r3, #0]
 8005162:	6862      	ldr	r2, [r4, #4]
 8005164:	4628      	mov	r0, r5
 8005166:	f001 fa21 	bl	80065ac <memchr>
 800516a:	b108      	cbz	r0, 8005170 <_printf_i+0x1f4>
 800516c:	1b40      	subs	r0, r0, r5
 800516e:	6060      	str	r0, [r4, #4]
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2300      	movs	r3, #0
 8005176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517a:	e7a8      	b.n	80050ce <_printf_i+0x152>
 800517c:	462a      	mov	r2, r5
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	47d0      	blx	sl
 8005186:	3001      	adds	r0, #1
 8005188:	d0ab      	beq.n	80050e2 <_printf_i+0x166>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	079b      	lsls	r3, r3, #30
 800518e:	d413      	bmi.n	80051b8 <_printf_i+0x23c>
 8005190:	68e0      	ldr	r0, [r4, #12]
 8005192:	9b03      	ldr	r3, [sp, #12]
 8005194:	4298      	cmp	r0, r3
 8005196:	bfb8      	it	lt
 8005198:	4618      	movlt	r0, r3
 800519a:	e7a4      	b.n	80050e6 <_printf_i+0x16a>
 800519c:	2301      	movs	r3, #1
 800519e:	4632      	mov	r2, r6
 80051a0:	4649      	mov	r1, r9
 80051a2:	4640      	mov	r0, r8
 80051a4:	47d0      	blx	sl
 80051a6:	3001      	adds	r0, #1
 80051a8:	d09b      	beq.n	80050e2 <_printf_i+0x166>
 80051aa:	3501      	adds	r5, #1
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	9903      	ldr	r1, [sp, #12]
 80051b0:	1a5b      	subs	r3, r3, r1
 80051b2:	42ab      	cmp	r3, r5
 80051b4:	dcf2      	bgt.n	800519c <_printf_i+0x220>
 80051b6:	e7eb      	b.n	8005190 <_printf_i+0x214>
 80051b8:	2500      	movs	r5, #0
 80051ba:	f104 0619 	add.w	r6, r4, #25
 80051be:	e7f5      	b.n	80051ac <_printf_i+0x230>
 80051c0:	08007526 	.word	0x08007526
 80051c4:	08007537 	.word	0x08007537

080051c8 <iprintf>:
 80051c8:	b40f      	push	{r0, r1, r2, r3}
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <iprintf+0x2c>)
 80051cc:	b513      	push	{r0, r1, r4, lr}
 80051ce:	681c      	ldr	r4, [r3, #0]
 80051d0:	b124      	cbz	r4, 80051dc <iprintf+0x14>
 80051d2:	69a3      	ldr	r3, [r4, #24]
 80051d4:	b913      	cbnz	r3, 80051dc <iprintf+0x14>
 80051d6:	4620      	mov	r0, r4
 80051d8:	f001 f8d6 	bl	8006388 <__sinit>
 80051dc:	ab05      	add	r3, sp, #20
 80051de:	4620      	mov	r0, r4
 80051e0:	9a04      	ldr	r2, [sp, #16]
 80051e2:	68a1      	ldr	r1, [r4, #8]
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	f001 fe97 	bl	8006f18 <_vfiprintf_r>
 80051ea:	b002      	add	sp, #8
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	b004      	add	sp, #16
 80051f2:	4770      	bx	lr
 80051f4:	2000000c 	.word	0x2000000c

080051f8 <_puts_r>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	460e      	mov	r6, r1
 80051fc:	4605      	mov	r5, r0
 80051fe:	b118      	cbz	r0, 8005208 <_puts_r+0x10>
 8005200:	6983      	ldr	r3, [r0, #24]
 8005202:	b90b      	cbnz	r3, 8005208 <_puts_r+0x10>
 8005204:	f001 f8c0 	bl	8006388 <__sinit>
 8005208:	69ab      	ldr	r3, [r5, #24]
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	b913      	cbnz	r3, 8005214 <_puts_r+0x1c>
 800520e:	4628      	mov	r0, r5
 8005210:	f001 f8ba 	bl	8006388 <__sinit>
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <_puts_r+0xd0>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d120      	bne.n	800525c <_puts_r+0x64>
 800521a:	686c      	ldr	r4, [r5, #4]
 800521c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d405      	bmi.n	800522e <_puts_r+0x36>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	0598      	lsls	r0, r3, #22
 8005226:	d402      	bmi.n	800522e <_puts_r+0x36>
 8005228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522a:	f001 f950 	bl	80064ce <__retarget_lock_acquire_recursive>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	0719      	lsls	r1, r3, #28
 8005232:	d51d      	bpl.n	8005270 <_puts_r+0x78>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	b1db      	cbz	r3, 8005270 <_puts_r+0x78>
 8005238:	3e01      	subs	r6, #1
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005240:	3b01      	subs	r3, #1
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	bb39      	cbnz	r1, 8005296 <_puts_r+0x9e>
 8005246:	2b00      	cmp	r3, #0
 8005248:	da38      	bge.n	80052bc <_puts_r+0xc4>
 800524a:	4622      	mov	r2, r4
 800524c:	210a      	movs	r1, #10
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f848 	bl	80052e4 <__swbuf_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d011      	beq.n	800527c <_puts_r+0x84>
 8005258:	250a      	movs	r5, #10
 800525a:	e011      	b.n	8005280 <_puts_r+0x88>
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <_puts_r+0xd4>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d101      	bne.n	8005266 <_puts_r+0x6e>
 8005262:	68ac      	ldr	r4, [r5, #8]
 8005264:	e7da      	b.n	800521c <_puts_r+0x24>
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <_puts_r+0xd8>)
 8005268:	429c      	cmp	r4, r3
 800526a:	bf08      	it	eq
 800526c:	68ec      	ldreq	r4, [r5, #12]
 800526e:	e7d5      	b.n	800521c <_puts_r+0x24>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f888 	bl	8005388 <__swsetup_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d0dd      	beq.n	8005238 <_puts_r+0x40>
 800527c:	f04f 35ff 	mov.w	r5, #4294967295
 8005280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005282:	07da      	lsls	r2, r3, #31
 8005284:	d405      	bmi.n	8005292 <_puts_r+0x9a>
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	059b      	lsls	r3, r3, #22
 800528a:	d402      	bmi.n	8005292 <_puts_r+0x9a>
 800528c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800528e:	f001 f91f 	bl	80064d0 <__retarget_lock_release_recursive>
 8005292:	4628      	mov	r0, r5
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	2b00      	cmp	r3, #0
 8005298:	da04      	bge.n	80052a4 <_puts_r+0xac>
 800529a:	69a2      	ldr	r2, [r4, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	dc06      	bgt.n	80052ae <_puts_r+0xb6>
 80052a0:	290a      	cmp	r1, #10
 80052a2:	d004      	beq.n	80052ae <_puts_r+0xb6>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	6022      	str	r2, [r4, #0]
 80052aa:	7019      	strb	r1, [r3, #0]
 80052ac:	e7c5      	b.n	800523a <_puts_r+0x42>
 80052ae:	4622      	mov	r2, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f817 	bl	80052e4 <__swbuf_r>
 80052b6:	3001      	adds	r0, #1
 80052b8:	d1bf      	bne.n	800523a <_puts_r+0x42>
 80052ba:	e7df      	b.n	800527c <_puts_r+0x84>
 80052bc:	250a      	movs	r5, #10
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	6022      	str	r2, [r4, #0]
 80052c4:	701d      	strb	r5, [r3, #0]
 80052c6:	e7db      	b.n	8005280 <_puts_r+0x88>
 80052c8:	080075f8 	.word	0x080075f8
 80052cc:	08007618 	.word	0x08007618
 80052d0:	080075d8 	.word	0x080075d8

080052d4 <puts>:
 80052d4:	4b02      	ldr	r3, [pc, #8]	; (80052e0 <puts+0xc>)
 80052d6:	4601      	mov	r1, r0
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f7ff bf8d 	b.w	80051f8 <_puts_r>
 80052de:	bf00      	nop
 80052e0:	2000000c 	.word	0x2000000c

080052e4 <__swbuf_r>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	460e      	mov	r6, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	4605      	mov	r5, r0
 80052ec:	b118      	cbz	r0, 80052f6 <__swbuf_r+0x12>
 80052ee:	6983      	ldr	r3, [r0, #24]
 80052f0:	b90b      	cbnz	r3, 80052f6 <__swbuf_r+0x12>
 80052f2:	f001 f849 	bl	8006388 <__sinit>
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <__swbuf_r+0x98>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	d12b      	bne.n	8005354 <__swbuf_r+0x70>
 80052fc:	686c      	ldr	r4, [r5, #4]
 80052fe:	69a3      	ldr	r3, [r4, #24]
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	071a      	lsls	r2, r3, #28
 8005306:	d52f      	bpl.n	8005368 <__swbuf_r+0x84>
 8005308:	6923      	ldr	r3, [r4, #16]
 800530a:	b36b      	cbz	r3, 8005368 <__swbuf_r+0x84>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	6820      	ldr	r0, [r4, #0]
 8005310:	b2f6      	uxtb	r6, r6
 8005312:	1ac0      	subs	r0, r0, r3
 8005314:	6963      	ldr	r3, [r4, #20]
 8005316:	4637      	mov	r7, r6
 8005318:	4283      	cmp	r3, r0
 800531a:	dc04      	bgt.n	8005326 <__swbuf_r+0x42>
 800531c:	4621      	mov	r1, r4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 ff9e 	bl	8006260 <_fflush_r>
 8005324:	bb30      	cbnz	r0, 8005374 <__swbuf_r+0x90>
 8005326:	68a3      	ldr	r3, [r4, #8]
 8005328:	3001      	adds	r0, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	6022      	str	r2, [r4, #0]
 8005334:	701e      	strb	r6, [r3, #0]
 8005336:	6963      	ldr	r3, [r4, #20]
 8005338:	4283      	cmp	r3, r0
 800533a:	d004      	beq.n	8005346 <__swbuf_r+0x62>
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	07db      	lsls	r3, r3, #31
 8005340:	d506      	bpl.n	8005350 <__swbuf_r+0x6c>
 8005342:	2e0a      	cmp	r6, #10
 8005344:	d104      	bne.n	8005350 <__swbuf_r+0x6c>
 8005346:	4621      	mov	r1, r4
 8005348:	4628      	mov	r0, r5
 800534a:	f000 ff89 	bl	8006260 <_fflush_r>
 800534e:	b988      	cbnz	r0, 8005374 <__swbuf_r+0x90>
 8005350:	4638      	mov	r0, r7
 8005352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <__swbuf_r+0x9c>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d101      	bne.n	800535e <__swbuf_r+0x7a>
 800535a:	68ac      	ldr	r4, [r5, #8]
 800535c:	e7cf      	b.n	80052fe <__swbuf_r+0x1a>
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <__swbuf_r+0xa0>)
 8005360:	429c      	cmp	r4, r3
 8005362:	bf08      	it	eq
 8005364:	68ec      	ldreq	r4, [r5, #12]
 8005366:	e7ca      	b.n	80052fe <__swbuf_r+0x1a>
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f80c 	bl	8005388 <__swsetup_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	d0cb      	beq.n	800530c <__swbuf_r+0x28>
 8005374:	f04f 37ff 	mov.w	r7, #4294967295
 8005378:	e7ea      	b.n	8005350 <__swbuf_r+0x6c>
 800537a:	bf00      	nop
 800537c:	080075f8 	.word	0x080075f8
 8005380:	08007618 	.word	0x08007618
 8005384:	080075d8 	.word	0x080075d8

08005388 <__swsetup_r>:
 8005388:	4b32      	ldr	r3, [pc, #200]	; (8005454 <__swsetup_r+0xcc>)
 800538a:	b570      	push	{r4, r5, r6, lr}
 800538c:	681d      	ldr	r5, [r3, #0]
 800538e:	4606      	mov	r6, r0
 8005390:	460c      	mov	r4, r1
 8005392:	b125      	cbz	r5, 800539e <__swsetup_r+0x16>
 8005394:	69ab      	ldr	r3, [r5, #24]
 8005396:	b913      	cbnz	r3, 800539e <__swsetup_r+0x16>
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fff5 	bl	8006388 <__sinit>
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <__swsetup_r+0xd0>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	d10f      	bne.n	80053c4 <__swsetup_r+0x3c>
 80053a4:	686c      	ldr	r4, [r5, #4]
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053ac:	0719      	lsls	r1, r3, #28
 80053ae:	d42c      	bmi.n	800540a <__swsetup_r+0x82>
 80053b0:	06dd      	lsls	r5, r3, #27
 80053b2:	d411      	bmi.n	80053d8 <__swsetup_r+0x50>
 80053b4:	2309      	movs	r3, #9
 80053b6:	6033      	str	r3, [r6, #0]
 80053b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e03e      	b.n	8005442 <__swsetup_r+0xba>
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <__swsetup_r+0xd4>)
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d101      	bne.n	80053ce <__swsetup_r+0x46>
 80053ca:	68ac      	ldr	r4, [r5, #8]
 80053cc:	e7eb      	b.n	80053a6 <__swsetup_r+0x1e>
 80053ce:	4b24      	ldr	r3, [pc, #144]	; (8005460 <__swsetup_r+0xd8>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	bf08      	it	eq
 80053d4:	68ec      	ldreq	r4, [r5, #12]
 80053d6:	e7e6      	b.n	80053a6 <__swsetup_r+0x1e>
 80053d8:	0758      	lsls	r0, r3, #29
 80053da:	d512      	bpl.n	8005402 <__swsetup_r+0x7a>
 80053dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053de:	b141      	cbz	r1, 80053f2 <__swsetup_r+0x6a>
 80053e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e4:	4299      	cmp	r1, r3
 80053e6:	d002      	beq.n	80053ee <__swsetup_r+0x66>
 80053e8:	4630      	mov	r0, r6
 80053ea:	f001 fc91 	bl	8006d10 <_free_r>
 80053ee:	2300      	movs	r3, #0
 80053f0:	6363      	str	r3, [r4, #52]	; 0x34
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	2300      	movs	r3, #0
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	b94b      	cbnz	r3, 8005422 <__swsetup_r+0x9a>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005418:	d003      	beq.n	8005422 <__swsetup_r+0x9a>
 800541a:	4621      	mov	r1, r4
 800541c:	4630      	mov	r0, r6
 800541e:	f001 f87d 	bl	800651c <__smakebuf_r>
 8005422:	89a0      	ldrh	r0, [r4, #12]
 8005424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005428:	f010 0301 	ands.w	r3, r0, #1
 800542c:	d00a      	beq.n	8005444 <__swsetup_r+0xbc>
 800542e:	2300      	movs	r3, #0
 8005430:	60a3      	str	r3, [r4, #8]
 8005432:	6963      	ldr	r3, [r4, #20]
 8005434:	425b      	negs	r3, r3
 8005436:	61a3      	str	r3, [r4, #24]
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	b943      	cbnz	r3, 800544e <__swsetup_r+0xc6>
 800543c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005440:	d1ba      	bne.n	80053b8 <__swsetup_r+0x30>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	0781      	lsls	r1, r0, #30
 8005446:	bf58      	it	pl
 8005448:	6963      	ldrpl	r3, [r4, #20]
 800544a:	60a3      	str	r3, [r4, #8]
 800544c:	e7f4      	b.n	8005438 <__swsetup_r+0xb0>
 800544e:	2000      	movs	r0, #0
 8005450:	e7f7      	b.n	8005442 <__swsetup_r+0xba>
 8005452:	bf00      	nop
 8005454:	2000000c 	.word	0x2000000c
 8005458:	080075f8 	.word	0x080075f8
 800545c:	08007618 	.word	0x08007618
 8005460:	080075d8 	.word	0x080075d8

08005464 <quorem>:
 8005464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	6903      	ldr	r3, [r0, #16]
 800546a:	690c      	ldr	r4, [r1, #16]
 800546c:	4607      	mov	r7, r0
 800546e:	42a3      	cmp	r3, r4
 8005470:	f2c0 8082 	blt.w	8005578 <quorem+0x114>
 8005474:	3c01      	subs	r4, #1
 8005476:	f100 0514 	add.w	r5, r0, #20
 800547a:	f101 0814 	add.w	r8, r1, #20
 800547e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800548c:	3301      	adds	r3, #1
 800548e:	429a      	cmp	r2, r3
 8005490:	fbb2 f6f3 	udiv	r6, r2, r3
 8005494:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005498:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800549c:	d331      	bcc.n	8005502 <quorem+0x9e>
 800549e:	f04f 0e00 	mov.w	lr, #0
 80054a2:	4640      	mov	r0, r8
 80054a4:	46ac      	mov	ip, r5
 80054a6:	46f2      	mov	sl, lr
 80054a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054ac:	b293      	uxth	r3, r2
 80054ae:	fb06 e303 	mla	r3, r6, r3, lr
 80054b2:	0c12      	lsrs	r2, r2, #16
 80054b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	fb06 e202 	mla	r2, r6, r2, lr
 80054be:	ebaa 0303 	sub.w	r3, sl, r3
 80054c2:	f8dc a000 	ldr.w	sl, [ip]
 80054c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80054ca:	fa1f fa8a 	uxth.w	sl, sl
 80054ce:	4453      	add	r3, sl
 80054d0:	f8dc a000 	ldr.w	sl, [ip]
 80054d4:	b292      	uxth	r2, r2
 80054d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e4:	4581      	cmp	r9, r0
 80054e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054ea:	f84c 3b04 	str.w	r3, [ip], #4
 80054ee:	d2db      	bcs.n	80054a8 <quorem+0x44>
 80054f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80054f4:	b92b      	cbnz	r3, 8005502 <quorem+0x9e>
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	3b04      	subs	r3, #4
 80054fa:	429d      	cmp	r5, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	d32f      	bcc.n	8005560 <quorem+0xfc>
 8005500:	613c      	str	r4, [r7, #16]
 8005502:	4638      	mov	r0, r7
 8005504:	f001 faec 	bl	8006ae0 <__mcmp>
 8005508:	2800      	cmp	r0, #0
 800550a:	db25      	blt.n	8005558 <quorem+0xf4>
 800550c:	4628      	mov	r0, r5
 800550e:	f04f 0c00 	mov.w	ip, #0
 8005512:	3601      	adds	r6, #1
 8005514:	f858 1b04 	ldr.w	r1, [r8], #4
 8005518:	f8d0 e000 	ldr.w	lr, [r0]
 800551c:	b28b      	uxth	r3, r1
 800551e:	ebac 0303 	sub.w	r3, ip, r3
 8005522:	fa1f f28e 	uxth.w	r2, lr
 8005526:	4413      	add	r3, r2
 8005528:	0c0a      	lsrs	r2, r1, #16
 800552a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800552e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005532:	b29b      	uxth	r3, r3
 8005534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005538:	45c1      	cmp	r9, r8
 800553a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800553e:	f840 3b04 	str.w	r3, [r0], #4
 8005542:	d2e7      	bcs.n	8005514 <quorem+0xb0>
 8005544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554c:	b922      	cbnz	r2, 8005558 <quorem+0xf4>
 800554e:	3b04      	subs	r3, #4
 8005550:	429d      	cmp	r5, r3
 8005552:	461a      	mov	r2, r3
 8005554:	d30a      	bcc.n	800556c <quorem+0x108>
 8005556:	613c      	str	r4, [r7, #16]
 8005558:	4630      	mov	r0, r6
 800555a:	b003      	add	sp, #12
 800555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	3b04      	subs	r3, #4
 8005564:	2a00      	cmp	r2, #0
 8005566:	d1cb      	bne.n	8005500 <quorem+0x9c>
 8005568:	3c01      	subs	r4, #1
 800556a:	e7c6      	b.n	80054fa <quorem+0x96>
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	3b04      	subs	r3, #4
 8005570:	2a00      	cmp	r2, #0
 8005572:	d1f0      	bne.n	8005556 <quorem+0xf2>
 8005574:	3c01      	subs	r4, #1
 8005576:	e7eb      	b.n	8005550 <quorem+0xec>
 8005578:	2000      	movs	r0, #0
 800557a:	e7ee      	b.n	800555a <quorem+0xf6>
 800557c:	0000      	movs	r0, r0
	...

08005580 <_dtoa_r>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4616      	mov	r6, r2
 8005586:	461f      	mov	r7, r3
 8005588:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800558a:	b099      	sub	sp, #100	; 0x64
 800558c:	4605      	mov	r5, r0
 800558e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005592:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005596:	b974      	cbnz	r4, 80055b6 <_dtoa_r+0x36>
 8005598:	2010      	movs	r0, #16
 800559a:	f000 ffff 	bl	800659c <malloc>
 800559e:	4602      	mov	r2, r0
 80055a0:	6268      	str	r0, [r5, #36]	; 0x24
 80055a2:	b920      	cbnz	r0, 80055ae <_dtoa_r+0x2e>
 80055a4:	21ea      	movs	r1, #234	; 0xea
 80055a6:	4ba8      	ldr	r3, [pc, #672]	; (8005848 <_dtoa_r+0x2c8>)
 80055a8:	48a8      	ldr	r0, [pc, #672]	; (800584c <_dtoa_r+0x2cc>)
 80055aa:	f001 fe4b 	bl	8007244 <__assert_func>
 80055ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055b2:	6004      	str	r4, [r0, #0]
 80055b4:	60c4      	str	r4, [r0, #12]
 80055b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	b151      	cbz	r1, 80055d2 <_dtoa_r+0x52>
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	2301      	movs	r3, #1
 80055c0:	4093      	lsls	r3, r2
 80055c2:	604a      	str	r2, [r1, #4]
 80055c4:	608b      	str	r3, [r1, #8]
 80055c6:	4628      	mov	r0, r5
 80055c8:	f001 f84c 	bl	8006664 <_Bfree>
 80055cc:	2200      	movs	r2, #0
 80055ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	1e3b      	subs	r3, r7, #0
 80055d4:	bfaf      	iteee	ge
 80055d6:	2300      	movge	r3, #0
 80055d8:	2201      	movlt	r2, #1
 80055da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055de:	9305      	strlt	r3, [sp, #20]
 80055e0:	bfa8      	it	ge
 80055e2:	f8c8 3000 	strge.w	r3, [r8]
 80055e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80055ea:	4b99      	ldr	r3, [pc, #612]	; (8005850 <_dtoa_r+0x2d0>)
 80055ec:	bfb8      	it	lt
 80055ee:	f8c8 2000 	strlt.w	r2, [r8]
 80055f2:	ea33 0309 	bics.w	r3, r3, r9
 80055f6:	d119      	bne.n	800562c <_dtoa_r+0xac>
 80055f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80055fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005604:	4333      	orrs	r3, r6
 8005606:	f000 857f 	beq.w	8006108 <_dtoa_r+0xb88>
 800560a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800560c:	b953      	cbnz	r3, 8005624 <_dtoa_r+0xa4>
 800560e:	4b91      	ldr	r3, [pc, #580]	; (8005854 <_dtoa_r+0x2d4>)
 8005610:	e022      	b.n	8005658 <_dtoa_r+0xd8>
 8005612:	4b91      	ldr	r3, [pc, #580]	; (8005858 <_dtoa_r+0x2d8>)
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	3308      	adds	r3, #8
 8005618:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	9803      	ldr	r0, [sp, #12]
 800561e:	b019      	add	sp, #100	; 0x64
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	4b8b      	ldr	r3, [pc, #556]	; (8005854 <_dtoa_r+0x2d4>)
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	3303      	adds	r3, #3
 800562a:	e7f5      	b.n	8005618 <_dtoa_r+0x98>
 800562c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005630:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005638:	2200      	movs	r2, #0
 800563a:	2300      	movs	r3, #0
 800563c:	f7fb f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8005640:	4680      	mov	r8, r0
 8005642:	b158      	cbz	r0, 800565c <_dtoa_r+0xdc>
 8005644:	2301      	movs	r3, #1
 8005646:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8558 	beq.w	8006102 <_dtoa_r+0xb82>
 8005652:	4882      	ldr	r0, [pc, #520]	; (800585c <_dtoa_r+0x2dc>)
 8005654:	6018      	str	r0, [r3, #0]
 8005656:	1e43      	subs	r3, r0, #1
 8005658:	9303      	str	r3, [sp, #12]
 800565a:	e7df      	b.n	800561c <_dtoa_r+0x9c>
 800565c:	ab16      	add	r3, sp, #88	; 0x58
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	ab17      	add	r3, sp, #92	; 0x5c
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4628      	mov	r0, r5
 8005666:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800566a:	f001 fae1 	bl	8006c30 <__d2b>
 800566e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005672:	4683      	mov	fp, r0
 8005674:	2c00      	cmp	r4, #0
 8005676:	d07f      	beq.n	8005778 <_dtoa_r+0x1f8>
 8005678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800567c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800567e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005686:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800568a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800568e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005692:	2200      	movs	r2, #0
 8005694:	4b72      	ldr	r3, [pc, #456]	; (8005860 <_dtoa_r+0x2e0>)
 8005696:	f7fa fd67 	bl	8000168 <__aeabi_dsub>
 800569a:	a365      	add	r3, pc, #404	; (adr r3, 8005830 <_dtoa_r+0x2b0>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ff1a 	bl	80004d8 <__aeabi_dmul>
 80056a4:	a364      	add	r3, pc, #400	; (adr r3, 8005838 <_dtoa_r+0x2b8>)
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f7fa fd5f 	bl	800016c <__adddf3>
 80056ae:	4606      	mov	r6, r0
 80056b0:	4620      	mov	r0, r4
 80056b2:	460f      	mov	r7, r1
 80056b4:	f7fa fea6 	bl	8000404 <__aeabi_i2d>
 80056b8:	a361      	add	r3, pc, #388	; (adr r3, 8005840 <_dtoa_r+0x2c0>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4630      	mov	r0, r6
 80056c8:	4639      	mov	r1, r7
 80056ca:	f7fa fd4f 	bl	800016c <__adddf3>
 80056ce:	4606      	mov	r6, r0
 80056d0:	460f      	mov	r7, r1
 80056d2:	f7fb f9b1 	bl	8000a38 <__aeabi_d2iz>
 80056d6:	2200      	movs	r2, #0
 80056d8:	4682      	mov	sl, r0
 80056da:	2300      	movs	r3, #0
 80056dc:	4630      	mov	r0, r6
 80056de:	4639      	mov	r1, r7
 80056e0:	f7fb f96c 	bl	80009bc <__aeabi_dcmplt>
 80056e4:	b148      	cbz	r0, 80056fa <_dtoa_r+0x17a>
 80056e6:	4650      	mov	r0, sl
 80056e8:	f7fa fe8c 	bl	8000404 <__aeabi_i2d>
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	f7fb f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80056f4:	b908      	cbnz	r0, 80056fa <_dtoa_r+0x17a>
 80056f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056fa:	f1ba 0f16 	cmp.w	sl, #22
 80056fe:	d858      	bhi.n	80057b2 <_dtoa_r+0x232>
 8005700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <_dtoa_r+0x2e4>)
 8005706:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fb f955 	bl	80009bc <__aeabi_dcmplt>
 8005712:	2800      	cmp	r0, #0
 8005714:	d04f      	beq.n	80057b6 <_dtoa_r+0x236>
 8005716:	2300      	movs	r3, #0
 8005718:	f10a 3aff 	add.w	sl, sl, #4294967295
 800571c:	930f      	str	r3, [sp, #60]	; 0x3c
 800571e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005720:	1b1c      	subs	r4, r3, r4
 8005722:	1e63      	subs	r3, r4, #1
 8005724:	9309      	str	r3, [sp, #36]	; 0x24
 8005726:	bf49      	itett	mi
 8005728:	f1c4 0301 	rsbmi	r3, r4, #1
 800572c:	2300      	movpl	r3, #0
 800572e:	9306      	strmi	r3, [sp, #24]
 8005730:	2300      	movmi	r3, #0
 8005732:	bf54      	ite	pl
 8005734:	9306      	strpl	r3, [sp, #24]
 8005736:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	db3d      	blt.n	80057ba <_dtoa_r+0x23a>
 800573e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005740:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005744:	4453      	add	r3, sl
 8005746:	9309      	str	r3, [sp, #36]	; 0x24
 8005748:	2300      	movs	r3, #0
 800574a:	930a      	str	r3, [sp, #40]	; 0x28
 800574c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800574e:	2b09      	cmp	r3, #9
 8005750:	f200 808c 	bhi.w	800586c <_dtoa_r+0x2ec>
 8005754:	2b05      	cmp	r3, #5
 8005756:	bfc4      	itt	gt
 8005758:	3b04      	subgt	r3, #4
 800575a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800575c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800575e:	bfc8      	it	gt
 8005760:	2400      	movgt	r4, #0
 8005762:	f1a3 0302 	sub.w	r3, r3, #2
 8005766:	bfd8      	it	le
 8005768:	2401      	movle	r4, #1
 800576a:	2b03      	cmp	r3, #3
 800576c:	f200 808a 	bhi.w	8005884 <_dtoa_r+0x304>
 8005770:	e8df f003 	tbb	[pc, r3]
 8005774:	5b4d4f2d 	.word	0x5b4d4f2d
 8005778:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800577c:	441c      	add	r4, r3
 800577e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005782:	2b20      	cmp	r3, #32
 8005784:	bfc3      	ittte	gt
 8005786:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800578a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800578e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005792:	f1c3 0320 	rsble	r3, r3, #32
 8005796:	bfc6      	itte	gt
 8005798:	fa26 f000 	lsrgt.w	r0, r6, r0
 800579c:	4318      	orrgt	r0, r3
 800579e:	fa06 f003 	lslle.w	r0, r6, r3
 80057a2:	f7fa fe1f 	bl	80003e4 <__aeabi_ui2d>
 80057a6:	2301      	movs	r3, #1
 80057a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80057ac:	3c01      	subs	r4, #1
 80057ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80057b0:	e76f      	b.n	8005692 <_dtoa_r+0x112>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7b2      	b.n	800571c <_dtoa_r+0x19c>
 80057b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80057b8:	e7b1      	b.n	800571e <_dtoa_r+0x19e>
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	eba3 030a 	sub.w	r3, r3, sl
 80057c0:	9306      	str	r3, [sp, #24]
 80057c2:	f1ca 0300 	rsb	r3, sl, #0
 80057c6:	930a      	str	r3, [sp, #40]	; 0x28
 80057c8:	2300      	movs	r3, #0
 80057ca:	930e      	str	r3, [sp, #56]	; 0x38
 80057cc:	e7be      	b.n	800574c <_dtoa_r+0x1cc>
 80057ce:	2300      	movs	r3, #0
 80057d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc58      	bgt.n	800588a <_dtoa_r+0x30a>
 80057d8:	f04f 0901 	mov.w	r9, #1
 80057dc:	464b      	mov	r3, r9
 80057de:	f8cd 9020 	str.w	r9, [sp, #32]
 80057e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80057e6:	2200      	movs	r2, #0
 80057e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80057ea:	6042      	str	r2, [r0, #4]
 80057ec:	2204      	movs	r2, #4
 80057ee:	f102 0614 	add.w	r6, r2, #20
 80057f2:	429e      	cmp	r6, r3
 80057f4:	6841      	ldr	r1, [r0, #4]
 80057f6:	d94e      	bls.n	8005896 <_dtoa_r+0x316>
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 fef3 	bl	80065e4 <_Balloc>
 80057fe:	9003      	str	r0, [sp, #12]
 8005800:	2800      	cmp	r0, #0
 8005802:	d14c      	bne.n	800589e <_dtoa_r+0x31e>
 8005804:	4602      	mov	r2, r0
 8005806:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800580a:	4b17      	ldr	r3, [pc, #92]	; (8005868 <_dtoa_r+0x2e8>)
 800580c:	e6cc      	b.n	80055a8 <_dtoa_r+0x28>
 800580e:	2301      	movs	r3, #1
 8005810:	e7de      	b.n	80057d0 <_dtoa_r+0x250>
 8005812:	2300      	movs	r3, #0
 8005814:	930b      	str	r3, [sp, #44]	; 0x2c
 8005816:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005818:	eb0a 0903 	add.w	r9, sl, r3
 800581c:	f109 0301 	add.w	r3, r9, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	9308      	str	r3, [sp, #32]
 8005824:	bfb8      	it	lt
 8005826:	2301      	movlt	r3, #1
 8005828:	e7dd      	b.n	80057e6 <_dtoa_r+0x266>
 800582a:	2301      	movs	r3, #1
 800582c:	e7f2      	b.n	8005814 <_dtoa_r+0x294>
 800582e:	bf00      	nop
 8005830:	636f4361 	.word	0x636f4361
 8005834:	3fd287a7 	.word	0x3fd287a7
 8005838:	8b60c8b3 	.word	0x8b60c8b3
 800583c:	3fc68a28 	.word	0x3fc68a28
 8005840:	509f79fb 	.word	0x509f79fb
 8005844:	3fd34413 	.word	0x3fd34413
 8005848:	08007555 	.word	0x08007555
 800584c:	0800756c 	.word	0x0800756c
 8005850:	7ff00000 	.word	0x7ff00000
 8005854:	08007551 	.word	0x08007551
 8005858:	08007548 	.word	0x08007548
 800585c:	08007525 	.word	0x08007525
 8005860:	3ff80000 	.word	0x3ff80000
 8005864:	080076c0 	.word	0x080076c0
 8005868:	080075c7 	.word	0x080075c7
 800586c:	2401      	movs	r4, #1
 800586e:	2300      	movs	r3, #0
 8005870:	940b      	str	r4, [sp, #44]	; 0x2c
 8005872:	9322      	str	r3, [sp, #136]	; 0x88
 8005874:	f04f 39ff 	mov.w	r9, #4294967295
 8005878:	2200      	movs	r2, #0
 800587a:	2312      	movs	r3, #18
 800587c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005880:	9223      	str	r2, [sp, #140]	; 0x8c
 8005882:	e7b0      	b.n	80057e6 <_dtoa_r+0x266>
 8005884:	2301      	movs	r3, #1
 8005886:	930b      	str	r3, [sp, #44]	; 0x2c
 8005888:	e7f4      	b.n	8005874 <_dtoa_r+0x2f4>
 800588a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800588e:	464b      	mov	r3, r9
 8005890:	f8cd 9020 	str.w	r9, [sp, #32]
 8005894:	e7a7      	b.n	80057e6 <_dtoa_r+0x266>
 8005896:	3101      	adds	r1, #1
 8005898:	6041      	str	r1, [r0, #4]
 800589a:	0052      	lsls	r2, r2, #1
 800589c:	e7a7      	b.n	80057ee <_dtoa_r+0x26e>
 800589e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058a0:	9a03      	ldr	r2, [sp, #12]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	2b0e      	cmp	r3, #14
 80058a8:	f200 80a8 	bhi.w	80059fc <_dtoa_r+0x47c>
 80058ac:	2c00      	cmp	r4, #0
 80058ae:	f000 80a5 	beq.w	80059fc <_dtoa_r+0x47c>
 80058b2:	f1ba 0f00 	cmp.w	sl, #0
 80058b6:	dd34      	ble.n	8005922 <_dtoa_r+0x3a2>
 80058b8:	4a9a      	ldr	r2, [pc, #616]	; (8005b24 <_dtoa_r+0x5a4>)
 80058ba:	f00a 030f 	and.w	r3, sl, #15
 80058be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80058c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80058ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80058d2:	d016      	beq.n	8005902 <_dtoa_r+0x382>
 80058d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058d8:	4b93      	ldr	r3, [pc, #588]	; (8005b28 <_dtoa_r+0x5a8>)
 80058da:	2703      	movs	r7, #3
 80058dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058e0:	f7fa ff24 	bl	800072c <__aeabi_ddiv>
 80058e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058e8:	f004 040f 	and.w	r4, r4, #15
 80058ec:	4e8e      	ldr	r6, [pc, #568]	; (8005b28 <_dtoa_r+0x5a8>)
 80058ee:	b954      	cbnz	r4, 8005906 <_dtoa_r+0x386>
 80058f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058f8:	f7fa ff18 	bl	800072c <__aeabi_ddiv>
 80058fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005900:	e029      	b.n	8005956 <_dtoa_r+0x3d6>
 8005902:	2702      	movs	r7, #2
 8005904:	e7f2      	b.n	80058ec <_dtoa_r+0x36c>
 8005906:	07e1      	lsls	r1, r4, #31
 8005908:	d508      	bpl.n	800591c <_dtoa_r+0x39c>
 800590a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800590e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005912:	f7fa fde1 	bl	80004d8 <__aeabi_dmul>
 8005916:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800591a:	3701      	adds	r7, #1
 800591c:	1064      	asrs	r4, r4, #1
 800591e:	3608      	adds	r6, #8
 8005920:	e7e5      	b.n	80058ee <_dtoa_r+0x36e>
 8005922:	f000 80a5 	beq.w	8005a70 <_dtoa_r+0x4f0>
 8005926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800592a:	f1ca 0400 	rsb	r4, sl, #0
 800592e:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <_dtoa_r+0x5a4>)
 8005930:	f004 020f 	and.w	r2, r4, #15
 8005934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	2702      	movs	r7, #2
 8005942:	2300      	movs	r3, #0
 8005944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005948:	4e77      	ldr	r6, [pc, #476]	; (8005b28 <_dtoa_r+0x5a8>)
 800594a:	1124      	asrs	r4, r4, #4
 800594c:	2c00      	cmp	r4, #0
 800594e:	f040 8084 	bne.w	8005a5a <_dtoa_r+0x4da>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1d2      	bne.n	80058fc <_dtoa_r+0x37c>
 8005956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 808b 	beq.w	8005a74 <_dtoa_r+0x4f4>
 800595e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005962:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800596a:	2200      	movs	r2, #0
 800596c:	4b6f      	ldr	r3, [pc, #444]	; (8005b2c <_dtoa_r+0x5ac>)
 800596e:	f7fb f825 	bl	80009bc <__aeabi_dcmplt>
 8005972:	2800      	cmp	r0, #0
 8005974:	d07e      	beq.n	8005a74 <_dtoa_r+0x4f4>
 8005976:	9b08      	ldr	r3, [sp, #32]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d07b      	beq.n	8005a74 <_dtoa_r+0x4f4>
 800597c:	f1b9 0f00 	cmp.w	r9, #0
 8005980:	dd38      	ble.n	80059f4 <_dtoa_r+0x474>
 8005982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005986:	2200      	movs	r2, #0
 8005988:	4b69      	ldr	r3, [pc, #420]	; (8005b30 <_dtoa_r+0x5b0>)
 800598a:	f7fa fda5 	bl	80004d8 <__aeabi_dmul>
 800598e:	464c      	mov	r4, r9
 8005990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005994:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005998:	3701      	adds	r7, #1
 800599a:	4638      	mov	r0, r7
 800599c:	f7fa fd32 	bl	8000404 <__aeabi_i2d>
 80059a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a4:	f7fa fd98 	bl	80004d8 <__aeabi_dmul>
 80059a8:	2200      	movs	r2, #0
 80059aa:	4b62      	ldr	r3, [pc, #392]	; (8005b34 <_dtoa_r+0x5b4>)
 80059ac:	f7fa fbde 	bl	800016c <__adddf3>
 80059b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059b8:	9611      	str	r6, [sp, #68]	; 0x44
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d15d      	bne.n	8005a7a <_dtoa_r+0x4fa>
 80059be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c2:	2200      	movs	r2, #0
 80059c4:	4b5c      	ldr	r3, [pc, #368]	; (8005b38 <_dtoa_r+0x5b8>)
 80059c6:	f7fa fbcf 	bl	8000168 <__aeabi_dsub>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059d2:	4633      	mov	r3, r6
 80059d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059d6:	f7fb f80f 	bl	80009f8 <__aeabi_dcmpgt>
 80059da:	2800      	cmp	r0, #0
 80059dc:	f040 829c 	bne.w	8005f18 <_dtoa_r+0x998>
 80059e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059ea:	f7fa ffe7 	bl	80009bc <__aeabi_dcmplt>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f040 8290 	bne.w	8005f14 <_dtoa_r+0x994>
 80059f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80059f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f2c0 8152 	blt.w	8005ca8 <_dtoa_r+0x728>
 8005a04:	f1ba 0f0e 	cmp.w	sl, #14
 8005a08:	f300 814e 	bgt.w	8005ca8 <_dtoa_r+0x728>
 8005a0c:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <_dtoa_r+0x5a4>)
 8005a0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f280 80db 	bge.w	8005bd8 <_dtoa_r+0x658>
 8005a22:	9b08      	ldr	r3, [sp, #32]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f300 80d7 	bgt.w	8005bd8 <_dtoa_r+0x658>
 8005a2a:	f040 8272 	bne.w	8005f12 <_dtoa_r+0x992>
 8005a2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b40      	ldr	r3, [pc, #256]	; (8005b38 <_dtoa_r+0x5b8>)
 8005a36:	f7fa fd4f 	bl	80004d8 <__aeabi_dmul>
 8005a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a3e:	f7fa ffd1 	bl	80009e4 <__aeabi_dcmpge>
 8005a42:	9c08      	ldr	r4, [sp, #32]
 8005a44:	4626      	mov	r6, r4
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f040 8248 	bne.w	8005edc <_dtoa_r+0x95c>
 8005a4c:	2331      	movs	r3, #49	; 0x31
 8005a4e:	9f03      	ldr	r7, [sp, #12]
 8005a50:	f10a 0a01 	add.w	sl, sl, #1
 8005a54:	f807 3b01 	strb.w	r3, [r7], #1
 8005a58:	e244      	b.n	8005ee4 <_dtoa_r+0x964>
 8005a5a:	07e2      	lsls	r2, r4, #31
 8005a5c:	d505      	bpl.n	8005a6a <_dtoa_r+0x4ea>
 8005a5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a62:	f7fa fd39 	bl	80004d8 <__aeabi_dmul>
 8005a66:	2301      	movs	r3, #1
 8005a68:	3701      	adds	r7, #1
 8005a6a:	1064      	asrs	r4, r4, #1
 8005a6c:	3608      	adds	r6, #8
 8005a6e:	e76d      	b.n	800594c <_dtoa_r+0x3cc>
 8005a70:	2702      	movs	r7, #2
 8005a72:	e770      	b.n	8005956 <_dtoa_r+0x3d6>
 8005a74:	46d0      	mov	r8, sl
 8005a76:	9c08      	ldr	r4, [sp, #32]
 8005a78:	e78f      	b.n	800599a <_dtoa_r+0x41a>
 8005a7a:	9903      	ldr	r1, [sp, #12]
 8005a7c:	4b29      	ldr	r3, [pc, #164]	; (8005b24 <_dtoa_r+0x5a4>)
 8005a7e:	4421      	add	r1, r4
 8005a80:	9112      	str	r1, [sp, #72]	; 0x48
 8005a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d055      	beq.n	8005b40 <_dtoa_r+0x5c0>
 8005a94:	2000      	movs	r0, #0
 8005a96:	4929      	ldr	r1, [pc, #164]	; (8005b3c <_dtoa_r+0x5bc>)
 8005a98:	f7fa fe48 	bl	800072c <__aeabi_ddiv>
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	4632      	mov	r2, r6
 8005aa0:	f7fa fb62 	bl	8000168 <__aeabi_dsub>
 8005aa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aa8:	9f03      	ldr	r7, [sp, #12]
 8005aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aae:	f7fa ffc3 	bl	8000a38 <__aeabi_d2iz>
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f7fa fca6 	bl	8000404 <__aeabi_i2d>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ac0:	f7fa fb52 	bl	8000168 <__aeabi_dsub>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	3430      	adds	r4, #48	; 0x30
 8005aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ad2:	f807 4b01 	strb.w	r4, [r7], #1
 8005ad6:	f7fa ff71 	bl	80009bc <__aeabi_dcmplt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d174      	bne.n	8005bc8 <_dtoa_r+0x648>
 8005ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	4911      	ldr	r1, [pc, #68]	; (8005b2c <_dtoa_r+0x5ac>)
 8005ae6:	f7fa fb3f 	bl	8000168 <__aeabi_dsub>
 8005aea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aee:	f7fa ff65 	bl	80009bc <__aeabi_dcmplt>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f040 80b7 	bne.w	8005c66 <_dtoa_r+0x6e6>
 8005af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005afa:	429f      	cmp	r7, r3
 8005afc:	f43f af7a 	beq.w	80059f4 <_dtoa_r+0x474>
 8005b00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b04:	2200      	movs	r2, #0
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <_dtoa_r+0x5b0>)
 8005b08:	f7fa fce6 	bl	80004d8 <__aeabi_dmul>
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <_dtoa_r+0x5b0>)
 8005b18:	f7fa fcde 	bl	80004d8 <__aeabi_dmul>
 8005b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b20:	e7c3      	b.n	8005aaa <_dtoa_r+0x52a>
 8005b22:	bf00      	nop
 8005b24:	080076c0 	.word	0x080076c0
 8005b28:	08007698 	.word	0x08007698
 8005b2c:	3ff00000 	.word	0x3ff00000
 8005b30:	40240000 	.word	0x40240000
 8005b34:	401c0000 	.word	0x401c0000
 8005b38:	40140000 	.word	0x40140000
 8005b3c:	3fe00000 	.word	0x3fe00000
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa fcc8 	bl	80004d8 <__aeabi_dmul>
 8005b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b4e:	9c03      	ldr	r4, [sp, #12]
 8005b50:	9314      	str	r3, [sp, #80]	; 0x50
 8005b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b56:	f7fa ff6f 	bl	8000a38 <__aeabi_d2iz>
 8005b5a:	9015      	str	r0, [sp, #84]	; 0x54
 8005b5c:	f7fa fc52 	bl	8000404 <__aeabi_i2d>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b68:	f7fa fafe 	bl	8000168 <__aeabi_dsub>
 8005b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b6e:	4606      	mov	r6, r0
 8005b70:	3330      	adds	r3, #48	; 0x30
 8005b72:	f804 3b01 	strb.w	r3, [r4], #1
 8005b76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b78:	460f      	mov	r7, r1
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	d124      	bne.n	8005bcc <_dtoa_r+0x64c>
 8005b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b86:	4bb0      	ldr	r3, [pc, #704]	; (8005e48 <_dtoa_r+0x8c8>)
 8005b88:	f7fa faf0 	bl	800016c <__adddf3>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4630      	mov	r0, r6
 8005b92:	4639      	mov	r1, r7
 8005b94:	f7fa ff30 	bl	80009f8 <__aeabi_dcmpgt>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d163      	bne.n	8005c64 <_dtoa_r+0x6e4>
 8005b9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	49a9      	ldr	r1, [pc, #676]	; (8005e48 <_dtoa_r+0x8c8>)
 8005ba4:	f7fa fae0 	bl	8000168 <__aeabi_dsub>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4630      	mov	r0, r6
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f7fa ff04 	bl	80009bc <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f43f af1d 	beq.w	80059f4 <_dtoa_r+0x474>
 8005bba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bbc:	1e7b      	subs	r3, r7, #1
 8005bbe:	9314      	str	r3, [sp, #80]	; 0x50
 8005bc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d0f8      	beq.n	8005bba <_dtoa_r+0x63a>
 8005bc8:	46c2      	mov	sl, r8
 8005bca:	e03b      	b.n	8005c44 <_dtoa_r+0x6c4>
 8005bcc:	4b9f      	ldr	r3, [pc, #636]	; (8005e4c <_dtoa_r+0x8cc>)
 8005bce:	f7fa fc83 	bl	80004d8 <__aeabi_dmul>
 8005bd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bd6:	e7bc      	b.n	8005b52 <_dtoa_r+0x5d2>
 8005bd8:	9f03      	ldr	r7, [sp, #12]
 8005bda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005bde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa fda1 	bl	800072c <__aeabi_ddiv>
 8005bea:	f7fa ff25 	bl	8000a38 <__aeabi_d2iz>
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f7fa fc08 	bl	8000404 <__aeabi_i2d>
 8005bf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bf8:	f7fa fc6e 	bl	80004d8 <__aeabi_dmul>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fab0 	bl	8000168 <__aeabi_dsub>
 8005c08:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c0c:	f807 6b01 	strb.w	r6, [r7], #1
 8005c10:	9e03      	ldr	r6, [sp, #12]
 8005c12:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c16:	1bbe      	subs	r6, r7, r6
 8005c18:	45b4      	cmp	ip, r6
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	d136      	bne.n	8005c8e <_dtoa_r+0x70e>
 8005c20:	f7fa faa4 	bl	800016c <__adddf3>
 8005c24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c28:	4680      	mov	r8, r0
 8005c2a:	4689      	mov	r9, r1
 8005c2c:	f7fa fee4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c30:	bb58      	cbnz	r0, 8005c8a <_dtoa_r+0x70a>
 8005c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c36:	4640      	mov	r0, r8
 8005c38:	4649      	mov	r1, r9
 8005c3a:	f7fa feb5 	bl	80009a8 <__aeabi_dcmpeq>
 8005c3e:	b108      	cbz	r0, 8005c44 <_dtoa_r+0x6c4>
 8005c40:	07e1      	lsls	r1, r4, #31
 8005c42:	d422      	bmi.n	8005c8a <_dtoa_r+0x70a>
 8005c44:	4628      	mov	r0, r5
 8005c46:	4659      	mov	r1, fp
 8005c48:	f000 fd0c 	bl	8006664 <_Bfree>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	703b      	strb	r3, [r7, #0]
 8005c50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c52:	f10a 0001 	add.w	r0, sl, #1
 8005c56:	6018      	str	r0, [r3, #0]
 8005c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f43f acde 	beq.w	800561c <_dtoa_r+0x9c>
 8005c60:	601f      	str	r7, [r3, #0]
 8005c62:	e4db      	b.n	800561c <_dtoa_r+0x9c>
 8005c64:	4627      	mov	r7, r4
 8005c66:	463b      	mov	r3, r7
 8005c68:	461f      	mov	r7, r3
 8005c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c6e:	2a39      	cmp	r2, #57	; 0x39
 8005c70:	d107      	bne.n	8005c82 <_dtoa_r+0x702>
 8005c72:	9a03      	ldr	r2, [sp, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1f7      	bne.n	8005c68 <_dtoa_r+0x6e8>
 8005c78:	2230      	movs	r2, #48	; 0x30
 8005c7a:	9903      	ldr	r1, [sp, #12]
 8005c7c:	f108 0801 	add.w	r8, r8, #1
 8005c80:	700a      	strb	r2, [r1, #0]
 8005c82:	781a      	ldrb	r2, [r3, #0]
 8005c84:	3201      	adds	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e79e      	b.n	8005bc8 <_dtoa_r+0x648>
 8005c8a:	46d0      	mov	r8, sl
 8005c8c:	e7eb      	b.n	8005c66 <_dtoa_r+0x6e6>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4b6e      	ldr	r3, [pc, #440]	; (8005e4c <_dtoa_r+0x8cc>)
 8005c92:	f7fa fc21 	bl	80004d8 <__aeabi_dmul>
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4680      	mov	r8, r0
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	f7fa fe83 	bl	80009a8 <__aeabi_dcmpeq>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d09b      	beq.n	8005bde <_dtoa_r+0x65e>
 8005ca6:	e7cd      	b.n	8005c44 <_dtoa_r+0x6c4>
 8005ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	f000 80d0 	beq.w	8005e50 <_dtoa_r+0x8d0>
 8005cb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	f300 80ae 	bgt.w	8005e14 <_dtoa_r+0x894>
 8005cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	f000 80a6 	beq.w	8005e0c <_dtoa_r+0x88c>
 8005cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cc6:	9f06      	ldr	r7, [sp, #24]
 8005cc8:	9a06      	ldr	r2, [sp, #24]
 8005cca:	2101      	movs	r1, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	9206      	str	r2, [sp, #24]
 8005cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	441a      	add	r2, r3
 8005cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cd8:	f000 fd7a 	bl	80067d0 <__i2b>
 8005cdc:	4606      	mov	r6, r0
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	dd0c      	ble.n	8005cfc <_dtoa_r+0x77c>
 8005ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd09      	ble.n	8005cfc <_dtoa_r+0x77c>
 8005ce8:	42bb      	cmp	r3, r7
 8005cea:	bfa8      	it	ge
 8005cec:	463b      	movge	r3, r7
 8005cee:	9a06      	ldr	r2, [sp, #24]
 8005cf0:	1aff      	subs	r7, r7, r3
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	9206      	str	r2, [sp, #24]
 8005cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfe:	b1f3      	cbz	r3, 8005d3e <_dtoa_r+0x7be>
 8005d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80a8 	beq.w	8005e58 <_dtoa_r+0x8d8>
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	dd10      	ble.n	8005d2e <_dtoa_r+0x7ae>
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4622      	mov	r2, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 fe1b 	bl	800694c <__pow5mult>
 8005d16:	465a      	mov	r2, fp
 8005d18:	4601      	mov	r1, r0
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 fd6d 	bl	80067fc <__multiply>
 8005d22:	4680      	mov	r8, r0
 8005d24:	4659      	mov	r1, fp
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 fc9c 	bl	8006664 <_Bfree>
 8005d2c:	46c3      	mov	fp, r8
 8005d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d30:	1b1a      	subs	r2, r3, r4
 8005d32:	d004      	beq.n	8005d3e <_dtoa_r+0x7be>
 8005d34:	4659      	mov	r1, fp
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fe08 	bl	800694c <__pow5mult>
 8005d3c:	4683      	mov	fp, r0
 8005d3e:	2101      	movs	r1, #1
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 fd45 	bl	80067d0 <__i2b>
 8005d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d48:	4604      	mov	r4, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f340 8086 	ble.w	8005e5c <_dtoa_r+0x8dc>
 8005d50:	461a      	mov	r2, r3
 8005d52:	4601      	mov	r1, r0
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fdf9 	bl	800694c <__pow5mult>
 8005d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	dd7f      	ble.n	8005e62 <_dtoa_r+0x8e2>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d6c:	6918      	ldr	r0, [r3, #16]
 8005d6e:	f000 fce1 	bl	8006734 <__hi0bits>
 8005d72:	f1c0 0020 	rsb	r0, r0, #32
 8005d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d78:	4418      	add	r0, r3
 8005d7a:	f010 001f 	ands.w	r0, r0, #31
 8005d7e:	f000 8092 	beq.w	8005ea6 <_dtoa_r+0x926>
 8005d82:	f1c0 0320 	rsb	r3, r0, #32
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	f340 808a 	ble.w	8005ea0 <_dtoa_r+0x920>
 8005d8c:	f1c0 001c 	rsb	r0, r0, #28
 8005d90:	9b06      	ldr	r3, [sp, #24]
 8005d92:	4407      	add	r7, r0
 8005d94:	4403      	add	r3, r0
 8005d96:	9306      	str	r3, [sp, #24]
 8005d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9a:	4403      	add	r3, r0
 8005d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9e:	9b06      	ldr	r3, [sp, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dd05      	ble.n	8005db0 <_dtoa_r+0x830>
 8005da4:	4659      	mov	r1, fp
 8005da6:	461a      	mov	r2, r3
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 fe29 	bl	8006a00 <__lshift>
 8005dae:	4683      	mov	fp, r0
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	dd05      	ble.n	8005dc2 <_dtoa_r+0x842>
 8005db6:	4621      	mov	r1, r4
 8005db8:	461a      	mov	r2, r3
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 fe20 	bl	8006a00 <__lshift>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d070      	beq.n	8005eaa <_dtoa_r+0x92a>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4658      	mov	r0, fp
 8005dcc:	f000 fe88 	bl	8006ae0 <__mcmp>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	da6a      	bge.n	8005eaa <_dtoa_r+0x92a>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 fc64 	bl	80066a8 <__multadd>
 8005de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de2:	4683      	mov	fp, r0
 8005de4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8194 	beq.w	8006116 <_dtoa_r+0xb96>
 8005dee:	4631      	mov	r1, r6
 8005df0:	2300      	movs	r3, #0
 8005df2:	220a      	movs	r2, #10
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fc57 	bl	80066a8 <__multadd>
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	4606      	mov	r6, r0
 8005e00:	f300 8093 	bgt.w	8005f2a <_dtoa_r+0x9aa>
 8005e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	dc57      	bgt.n	8005eba <_dtoa_r+0x93a>
 8005e0a:	e08e      	b.n	8005f2a <_dtoa_r+0x9aa>
 8005e0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e12:	e757      	b.n	8005cc4 <_dtoa_r+0x744>
 8005e14:	9b08      	ldr	r3, [sp, #32]
 8005e16:	1e5c      	subs	r4, r3, #1
 8005e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	bfb7      	itett	lt
 8005e1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e20:	1b1c      	subge	r4, r3, r4
 8005e22:	1ae2      	sublt	r2, r4, r3
 8005e24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e26:	bfbe      	ittt	lt
 8005e28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e2a:	189b      	addlt	r3, r3, r2
 8005e2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e2e:	9b08      	ldr	r3, [sp, #32]
 8005e30:	bfb8      	it	lt
 8005e32:	2400      	movlt	r4, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfbb      	ittet	lt
 8005e38:	9b06      	ldrlt	r3, [sp, #24]
 8005e3a:	9a08      	ldrlt	r2, [sp, #32]
 8005e3c:	9f06      	ldrge	r7, [sp, #24]
 8005e3e:	1a9f      	sublt	r7, r3, r2
 8005e40:	bfac      	ite	ge
 8005e42:	9b08      	ldrge	r3, [sp, #32]
 8005e44:	2300      	movlt	r3, #0
 8005e46:	e73f      	b.n	8005cc8 <_dtoa_r+0x748>
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	40240000 	.word	0x40240000
 8005e50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e52:	9f06      	ldr	r7, [sp, #24]
 8005e54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e56:	e742      	b.n	8005cde <_dtoa_r+0x75e>
 8005e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5a:	e76b      	b.n	8005d34 <_dtoa_r+0x7b4>
 8005e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	dc19      	bgt.n	8005e96 <_dtoa_r+0x916>
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	b9bb      	cbnz	r3, 8005e96 <_dtoa_r+0x916>
 8005e66:	9b05      	ldr	r3, [sp, #20]
 8005e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e6c:	b99b      	cbnz	r3, 8005e96 <_dtoa_r+0x916>
 8005e6e:	9b05      	ldr	r3, [sp, #20]
 8005e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e74:	0d1b      	lsrs	r3, r3, #20
 8005e76:	051b      	lsls	r3, r3, #20
 8005e78:	b183      	cbz	r3, 8005e9c <_dtoa_r+0x91c>
 8005e7a:	f04f 0801 	mov.w	r8, #1
 8005e7e:	9b06      	ldr	r3, [sp, #24]
 8005e80:	3301      	adds	r3, #1
 8005e82:	9306      	str	r3, [sp, #24]
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	3301      	adds	r3, #1
 8005e88:	9309      	str	r3, [sp, #36]	; 0x24
 8005e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f af6a 	bne.w	8005d66 <_dtoa_r+0x7e6>
 8005e92:	2001      	movs	r0, #1
 8005e94:	e76f      	b.n	8005d76 <_dtoa_r+0x7f6>
 8005e96:	f04f 0800 	mov.w	r8, #0
 8005e9a:	e7f6      	b.n	8005e8a <_dtoa_r+0x90a>
 8005e9c:	4698      	mov	r8, r3
 8005e9e:	e7f4      	b.n	8005e8a <_dtoa_r+0x90a>
 8005ea0:	f43f af7d 	beq.w	8005d9e <_dtoa_r+0x81e>
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	301c      	adds	r0, #28
 8005ea8:	e772      	b.n	8005d90 <_dtoa_r+0x810>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dc36      	bgt.n	8005f1e <_dtoa_r+0x99e>
 8005eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	dd33      	ble.n	8005f1e <_dtoa_r+0x99e>
 8005eb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eba:	f1b9 0f00 	cmp.w	r9, #0
 8005ebe:	d10d      	bne.n	8005edc <_dtoa_r+0x95c>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 fbee 	bl	80066a8 <__multadd>
 8005ecc:	4601      	mov	r1, r0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4658      	mov	r0, fp
 8005ed2:	f000 fe05 	bl	8006ae0 <__mcmp>
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f73f adb8 	bgt.w	8005a4c <_dtoa_r+0x4cc>
 8005edc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ede:	9f03      	ldr	r7, [sp, #12]
 8005ee0:	ea6f 0a03 	mvn.w	sl, r3
 8005ee4:	f04f 0800 	mov.w	r8, #0
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 fbba 	bl	8006664 <_Bfree>
 8005ef0:	2e00      	cmp	r6, #0
 8005ef2:	f43f aea7 	beq.w	8005c44 <_dtoa_r+0x6c4>
 8005ef6:	f1b8 0f00 	cmp.w	r8, #0
 8005efa:	d005      	beq.n	8005f08 <_dtoa_r+0x988>
 8005efc:	45b0      	cmp	r8, r6
 8005efe:	d003      	beq.n	8005f08 <_dtoa_r+0x988>
 8005f00:	4641      	mov	r1, r8
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 fbae 	bl	8006664 <_Bfree>
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 fbaa 	bl	8006664 <_Bfree>
 8005f10:	e698      	b.n	8005c44 <_dtoa_r+0x6c4>
 8005f12:	2400      	movs	r4, #0
 8005f14:	4626      	mov	r6, r4
 8005f16:	e7e1      	b.n	8005edc <_dtoa_r+0x95c>
 8005f18:	46c2      	mov	sl, r8
 8005f1a:	4626      	mov	r6, r4
 8005f1c:	e596      	b.n	8005a4c <_dtoa_r+0x4cc>
 8005f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80fd 	beq.w	8006124 <_dtoa_r+0xba4>
 8005f2a:	2f00      	cmp	r7, #0
 8005f2c:	dd05      	ble.n	8005f3a <_dtoa_r+0x9ba>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	463a      	mov	r2, r7
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 fd64 	bl	8006a00 <__lshift>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	f1b8 0f00 	cmp.w	r8, #0
 8005f3e:	d05c      	beq.n	8005ffa <_dtoa_r+0xa7a>
 8005f40:	4628      	mov	r0, r5
 8005f42:	6871      	ldr	r1, [r6, #4]
 8005f44:	f000 fb4e 	bl	80065e4 <_Balloc>
 8005f48:	4607      	mov	r7, r0
 8005f4a:	b928      	cbnz	r0, 8005f58 <_dtoa_r+0x9d8>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f52:	4b7f      	ldr	r3, [pc, #508]	; (8006150 <_dtoa_r+0xbd0>)
 8005f54:	f7ff bb28 	b.w	80055a8 <_dtoa_r+0x28>
 8005f58:	6932      	ldr	r2, [r6, #16]
 8005f5a:	f106 010c 	add.w	r1, r6, #12
 8005f5e:	3202      	adds	r2, #2
 8005f60:	0092      	lsls	r2, r2, #2
 8005f62:	300c      	adds	r0, #12
 8005f64:	f000 fb30 	bl	80065c8 <memcpy>
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 fd47 	bl	8006a00 <__lshift>
 8005f72:	46b0      	mov	r8, r6
 8005f74:	4606      	mov	r6, r0
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	9b03      	ldr	r3, [sp, #12]
 8005f7e:	444b      	add	r3, r9
 8005f80:	930a      	str	r3, [sp, #40]	; 0x28
 8005f82:	9b04      	ldr	r3, [sp, #16]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	4658      	mov	r0, fp
 8005f92:	9304      	str	r3, [sp, #16]
 8005f94:	f7ff fa66 	bl	8005464 <quorem>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	3330      	adds	r3, #48	; 0x30
 8005f9e:	9006      	str	r0, [sp, #24]
 8005fa0:	4658      	mov	r0, fp
 8005fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa4:	f000 fd9c 	bl	8006ae0 <__mcmp>
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4681      	mov	r9, r0
 8005fac:	4621      	mov	r1, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fdb2 	bl	8006b18 <__mdiff>
 8005fb4:	68c2      	ldr	r2, [r0, #12]
 8005fb6:	4607      	mov	r7, r0
 8005fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fba:	bb02      	cbnz	r2, 8005ffe <_dtoa_r+0xa7e>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f000 fd8e 	bl	8006ae0 <__mcmp>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4628      	mov	r0, r5
 8005fcc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005fd0:	f000 fb48 	bl	8006664 <_Bfree>
 8005fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd8:	9f08      	ldr	r7, [sp, #32]
 8005fda:	ea43 0102 	orr.w	r1, r3, r2
 8005fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe4:	d10d      	bne.n	8006002 <_dtoa_r+0xa82>
 8005fe6:	2b39      	cmp	r3, #57	; 0x39
 8005fe8:	d029      	beq.n	800603e <_dtoa_r+0xabe>
 8005fea:	f1b9 0f00 	cmp.w	r9, #0
 8005fee:	dd01      	ble.n	8005ff4 <_dtoa_r+0xa74>
 8005ff0:	9b06      	ldr	r3, [sp, #24]
 8005ff2:	3331      	adds	r3, #49	; 0x31
 8005ff4:	9a04      	ldr	r2, [sp, #16]
 8005ff6:	7013      	strb	r3, [r2, #0]
 8005ff8:	e776      	b.n	8005ee8 <_dtoa_r+0x968>
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	e7b9      	b.n	8005f72 <_dtoa_r+0x9f2>
 8005ffe:	2201      	movs	r2, #1
 8006000:	e7e2      	b.n	8005fc8 <_dtoa_r+0xa48>
 8006002:	f1b9 0f00 	cmp.w	r9, #0
 8006006:	db06      	blt.n	8006016 <_dtoa_r+0xa96>
 8006008:	9922      	ldr	r1, [sp, #136]	; 0x88
 800600a:	ea41 0909 	orr.w	r9, r1, r9
 800600e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006010:	ea59 0101 	orrs.w	r1, r9, r1
 8006014:	d120      	bne.n	8006058 <_dtoa_r+0xad8>
 8006016:	2a00      	cmp	r2, #0
 8006018:	ddec      	ble.n	8005ff4 <_dtoa_r+0xa74>
 800601a:	4659      	mov	r1, fp
 800601c:	2201      	movs	r2, #1
 800601e:	4628      	mov	r0, r5
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	f000 fced 	bl	8006a00 <__lshift>
 8006026:	4621      	mov	r1, r4
 8006028:	4683      	mov	fp, r0
 800602a:	f000 fd59 	bl	8006ae0 <__mcmp>
 800602e:	2800      	cmp	r0, #0
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	dc02      	bgt.n	800603a <_dtoa_r+0xaba>
 8006034:	d1de      	bne.n	8005ff4 <_dtoa_r+0xa74>
 8006036:	07da      	lsls	r2, r3, #31
 8006038:	d5dc      	bpl.n	8005ff4 <_dtoa_r+0xa74>
 800603a:	2b39      	cmp	r3, #57	; 0x39
 800603c:	d1d8      	bne.n	8005ff0 <_dtoa_r+0xa70>
 800603e:	2339      	movs	r3, #57	; 0x39
 8006040:	9a04      	ldr	r2, [sp, #16]
 8006042:	7013      	strb	r3, [r2, #0]
 8006044:	463b      	mov	r3, r7
 8006046:	461f      	mov	r7, r3
 8006048:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800604c:	3b01      	subs	r3, #1
 800604e:	2a39      	cmp	r2, #57	; 0x39
 8006050:	d050      	beq.n	80060f4 <_dtoa_r+0xb74>
 8006052:	3201      	adds	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e747      	b.n	8005ee8 <_dtoa_r+0x968>
 8006058:	2a00      	cmp	r2, #0
 800605a:	dd03      	ble.n	8006064 <_dtoa_r+0xae4>
 800605c:	2b39      	cmp	r3, #57	; 0x39
 800605e:	d0ee      	beq.n	800603e <_dtoa_r+0xabe>
 8006060:	3301      	adds	r3, #1
 8006062:	e7c7      	b.n	8005ff4 <_dtoa_r+0xa74>
 8006064:	9a08      	ldr	r2, [sp, #32]
 8006066:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006068:	f802 3c01 	strb.w	r3, [r2, #-1]
 800606c:	428a      	cmp	r2, r1
 800606e:	d02a      	beq.n	80060c6 <_dtoa_r+0xb46>
 8006070:	4659      	mov	r1, fp
 8006072:	2300      	movs	r3, #0
 8006074:	220a      	movs	r2, #10
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fb16 	bl	80066a8 <__multadd>
 800607c:	45b0      	cmp	r8, r6
 800607e:	4683      	mov	fp, r0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f04f 020a 	mov.w	r2, #10
 8006088:	4641      	mov	r1, r8
 800608a:	4628      	mov	r0, r5
 800608c:	d107      	bne.n	800609e <_dtoa_r+0xb1e>
 800608e:	f000 fb0b 	bl	80066a8 <__multadd>
 8006092:	4680      	mov	r8, r0
 8006094:	4606      	mov	r6, r0
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	3301      	adds	r3, #1
 800609a:	9308      	str	r3, [sp, #32]
 800609c:	e775      	b.n	8005f8a <_dtoa_r+0xa0a>
 800609e:	f000 fb03 	bl	80066a8 <__multadd>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4680      	mov	r8, r0
 80060a6:	2300      	movs	r3, #0
 80060a8:	220a      	movs	r2, #10
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 fafc 	bl	80066a8 <__multadd>
 80060b0:	4606      	mov	r6, r0
 80060b2:	e7f0      	b.n	8006096 <_dtoa_r+0xb16>
 80060b4:	f1b9 0f00 	cmp.w	r9, #0
 80060b8:	bfcc      	ite	gt
 80060ba:	464f      	movgt	r7, r9
 80060bc:	2701      	movle	r7, #1
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	9a03      	ldr	r2, [sp, #12]
 80060c4:	4417      	add	r7, r2
 80060c6:	4659      	mov	r1, fp
 80060c8:	2201      	movs	r2, #1
 80060ca:	4628      	mov	r0, r5
 80060cc:	9308      	str	r3, [sp, #32]
 80060ce:	f000 fc97 	bl	8006a00 <__lshift>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4683      	mov	fp, r0
 80060d6:	f000 fd03 	bl	8006ae0 <__mcmp>
 80060da:	2800      	cmp	r0, #0
 80060dc:	dcb2      	bgt.n	8006044 <_dtoa_r+0xac4>
 80060de:	d102      	bne.n	80060e6 <_dtoa_r+0xb66>
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	07db      	lsls	r3, r3, #31
 80060e4:	d4ae      	bmi.n	8006044 <_dtoa_r+0xac4>
 80060e6:	463b      	mov	r3, r7
 80060e8:	461f      	mov	r7, r3
 80060ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060ee:	2a30      	cmp	r2, #48	; 0x30
 80060f0:	d0fa      	beq.n	80060e8 <_dtoa_r+0xb68>
 80060f2:	e6f9      	b.n	8005ee8 <_dtoa_r+0x968>
 80060f4:	9a03      	ldr	r2, [sp, #12]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d1a5      	bne.n	8006046 <_dtoa_r+0xac6>
 80060fa:	2331      	movs	r3, #49	; 0x31
 80060fc:	f10a 0a01 	add.w	sl, sl, #1
 8006100:	e779      	b.n	8005ff6 <_dtoa_r+0xa76>
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <_dtoa_r+0xbd4>)
 8006104:	f7ff baa8 	b.w	8005658 <_dtoa_r+0xd8>
 8006108:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f aa81 	bne.w	8005612 <_dtoa_r+0x92>
 8006110:	4b11      	ldr	r3, [pc, #68]	; (8006158 <_dtoa_r+0xbd8>)
 8006112:	f7ff baa1 	b.w	8005658 <_dtoa_r+0xd8>
 8006116:	f1b9 0f00 	cmp.w	r9, #0
 800611a:	dc03      	bgt.n	8006124 <_dtoa_r+0xba4>
 800611c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611e:	2b02      	cmp	r3, #2
 8006120:	f73f aecb 	bgt.w	8005eba <_dtoa_r+0x93a>
 8006124:	9f03      	ldr	r7, [sp, #12]
 8006126:	4621      	mov	r1, r4
 8006128:	4658      	mov	r0, fp
 800612a:	f7ff f99b 	bl	8005464 <quorem>
 800612e:	9a03      	ldr	r2, [sp, #12]
 8006130:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006134:	f807 3b01 	strb.w	r3, [r7], #1
 8006138:	1aba      	subs	r2, r7, r2
 800613a:	4591      	cmp	r9, r2
 800613c:	ddba      	ble.n	80060b4 <_dtoa_r+0xb34>
 800613e:	4659      	mov	r1, fp
 8006140:	2300      	movs	r3, #0
 8006142:	220a      	movs	r2, #10
 8006144:	4628      	mov	r0, r5
 8006146:	f000 faaf 	bl	80066a8 <__multadd>
 800614a:	4683      	mov	fp, r0
 800614c:	e7eb      	b.n	8006126 <_dtoa_r+0xba6>
 800614e:	bf00      	nop
 8006150:	080075c7 	.word	0x080075c7
 8006154:	08007524 	.word	0x08007524
 8006158:	08007548 	.word	0x08007548

0800615c <__sflush_r>:
 800615c:	898a      	ldrh	r2, [r1, #12]
 800615e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006160:	4605      	mov	r5, r0
 8006162:	0710      	lsls	r0, r2, #28
 8006164:	460c      	mov	r4, r1
 8006166:	d457      	bmi.n	8006218 <__sflush_r+0xbc>
 8006168:	684b      	ldr	r3, [r1, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dc04      	bgt.n	8006178 <__sflush_r+0x1c>
 800616e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc01      	bgt.n	8006178 <__sflush_r+0x1c>
 8006174:	2000      	movs	r0, #0
 8006176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800617a:	2e00      	cmp	r6, #0
 800617c:	d0fa      	beq.n	8006174 <__sflush_r+0x18>
 800617e:	2300      	movs	r3, #0
 8006180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006184:	682f      	ldr	r7, [r5, #0]
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	d032      	beq.n	80061f0 <__sflush_r+0x94>
 800618a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	075a      	lsls	r2, r3, #29
 8006190:	d505      	bpl.n	800619e <__sflush_r+0x42>
 8006192:	6863      	ldr	r3, [r4, #4]
 8006194:	1ac0      	subs	r0, r0, r3
 8006196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006198:	b10b      	cbz	r3, 800619e <__sflush_r+0x42>
 800619a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800619c:	1ac0      	subs	r0, r0, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	4602      	mov	r2, r0
 80061a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061a4:	4628      	mov	r0, r5
 80061a6:	6a21      	ldr	r1, [r4, #32]
 80061a8:	47b0      	blx	r6
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	d106      	bne.n	80061be <__sflush_r+0x62>
 80061b0:	6829      	ldr	r1, [r5, #0]
 80061b2:	291d      	cmp	r1, #29
 80061b4:	d82c      	bhi.n	8006210 <__sflush_r+0xb4>
 80061b6:	4a29      	ldr	r2, [pc, #164]	; (800625c <__sflush_r+0x100>)
 80061b8:	40ca      	lsrs	r2, r1
 80061ba:	07d6      	lsls	r6, r2, #31
 80061bc:	d528      	bpl.n	8006210 <__sflush_r+0xb4>
 80061be:	2200      	movs	r2, #0
 80061c0:	6062      	str	r2, [r4, #4]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	04d9      	lsls	r1, r3, #19
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	d504      	bpl.n	80061d4 <__sflush_r+0x78>
 80061ca:	1c42      	adds	r2, r0, #1
 80061cc:	d101      	bne.n	80061d2 <__sflush_r+0x76>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	b903      	cbnz	r3, 80061d4 <__sflush_r+0x78>
 80061d2:	6560      	str	r0, [r4, #84]	; 0x54
 80061d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061d6:	602f      	str	r7, [r5, #0]
 80061d8:	2900      	cmp	r1, #0
 80061da:	d0cb      	beq.n	8006174 <__sflush_r+0x18>
 80061dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e0:	4299      	cmp	r1, r3
 80061e2:	d002      	beq.n	80061ea <__sflush_r+0x8e>
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 fd93 	bl	8006d10 <_free_r>
 80061ea:	2000      	movs	r0, #0
 80061ec:	6360      	str	r0, [r4, #52]	; 0x34
 80061ee:	e7c2      	b.n	8006176 <__sflush_r+0x1a>
 80061f0:	6a21      	ldr	r1, [r4, #32]
 80061f2:	2301      	movs	r3, #1
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b0      	blx	r6
 80061f8:	1c41      	adds	r1, r0, #1
 80061fa:	d1c7      	bne.n	800618c <__sflush_r+0x30>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0c4      	beq.n	800618c <__sflush_r+0x30>
 8006202:	2b1d      	cmp	r3, #29
 8006204:	d001      	beq.n	800620a <__sflush_r+0xae>
 8006206:	2b16      	cmp	r3, #22
 8006208:	d101      	bne.n	800620e <__sflush_r+0xb2>
 800620a:	602f      	str	r7, [r5, #0]
 800620c:	e7b2      	b.n	8006174 <__sflush_r+0x18>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	e7ae      	b.n	8006176 <__sflush_r+0x1a>
 8006218:	690f      	ldr	r7, [r1, #16]
 800621a:	2f00      	cmp	r7, #0
 800621c:	d0aa      	beq.n	8006174 <__sflush_r+0x18>
 800621e:	0793      	lsls	r3, r2, #30
 8006220:	bf18      	it	ne
 8006222:	2300      	movne	r3, #0
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	bf08      	it	eq
 8006228:	694b      	ldreq	r3, [r1, #20]
 800622a:	1bf6      	subs	r6, r6, r7
 800622c:	600f      	str	r7, [r1, #0]
 800622e:	608b      	str	r3, [r1, #8]
 8006230:	2e00      	cmp	r6, #0
 8006232:	dd9f      	ble.n	8006174 <__sflush_r+0x18>
 8006234:	4633      	mov	r3, r6
 8006236:	463a      	mov	r2, r7
 8006238:	4628      	mov	r0, r5
 800623a:	6a21      	ldr	r1, [r4, #32]
 800623c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006240:	47e0      	blx	ip
 8006242:	2800      	cmp	r0, #0
 8006244:	dc06      	bgt.n	8006254 <__sflush_r+0xf8>
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	e790      	b.n	8006176 <__sflush_r+0x1a>
 8006254:	4407      	add	r7, r0
 8006256:	1a36      	subs	r6, r6, r0
 8006258:	e7ea      	b.n	8006230 <__sflush_r+0xd4>
 800625a:	bf00      	nop
 800625c:	20400001 	.word	0x20400001

08006260 <_fflush_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	690b      	ldr	r3, [r1, #16]
 8006264:	4605      	mov	r5, r0
 8006266:	460c      	mov	r4, r1
 8006268:	b913      	cbnz	r3, 8006270 <_fflush_r+0x10>
 800626a:	2500      	movs	r5, #0
 800626c:	4628      	mov	r0, r5
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	b118      	cbz	r0, 800627a <_fflush_r+0x1a>
 8006272:	6983      	ldr	r3, [r0, #24]
 8006274:	b90b      	cbnz	r3, 800627a <_fflush_r+0x1a>
 8006276:	f000 f887 	bl	8006388 <__sinit>
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <_fflush_r+0x6c>)
 800627c:	429c      	cmp	r4, r3
 800627e:	d11b      	bne.n	80062b8 <_fflush_r+0x58>
 8006280:	686c      	ldr	r4, [r5, #4]
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ef      	beq.n	800626a <_fflush_r+0xa>
 800628a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800628c:	07d0      	lsls	r0, r2, #31
 800628e:	d404      	bmi.n	800629a <_fflush_r+0x3a>
 8006290:	0599      	lsls	r1, r3, #22
 8006292:	d402      	bmi.n	800629a <_fflush_r+0x3a>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f000 f91a 	bl	80064ce <__retarget_lock_acquire_recursive>
 800629a:	4628      	mov	r0, r5
 800629c:	4621      	mov	r1, r4
 800629e:	f7ff ff5d 	bl	800615c <__sflush_r>
 80062a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062a4:	4605      	mov	r5, r0
 80062a6:	07da      	lsls	r2, r3, #31
 80062a8:	d4e0      	bmi.n	800626c <_fflush_r+0xc>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	059b      	lsls	r3, r3, #22
 80062ae:	d4dd      	bmi.n	800626c <_fflush_r+0xc>
 80062b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b2:	f000 f90d 	bl	80064d0 <__retarget_lock_release_recursive>
 80062b6:	e7d9      	b.n	800626c <_fflush_r+0xc>
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <_fflush_r+0x70>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d101      	bne.n	80062c2 <_fflush_r+0x62>
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	e7df      	b.n	8006282 <_fflush_r+0x22>
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <_fflush_r+0x74>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	bf08      	it	eq
 80062c8:	68ec      	ldreq	r4, [r5, #12]
 80062ca:	e7da      	b.n	8006282 <_fflush_r+0x22>
 80062cc:	080075f8 	.word	0x080075f8
 80062d0:	08007618 	.word	0x08007618
 80062d4:	080075d8 	.word	0x080075d8

080062d8 <std>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b510      	push	{r4, lr}
 80062dc:	4604      	mov	r4, r0
 80062de:	e9c0 3300 	strd	r3, r3, [r0]
 80062e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062e6:	6083      	str	r3, [r0, #8]
 80062e8:	8181      	strh	r1, [r0, #12]
 80062ea:	6643      	str	r3, [r0, #100]	; 0x64
 80062ec:	81c2      	strh	r2, [r0, #14]
 80062ee:	6183      	str	r3, [r0, #24]
 80062f0:	4619      	mov	r1, r3
 80062f2:	2208      	movs	r2, #8
 80062f4:	305c      	adds	r0, #92	; 0x5c
 80062f6:	f7fe faff 	bl	80048f8 <memset>
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <std+0x38>)
 80062fc:	6224      	str	r4, [r4, #32]
 80062fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <std+0x3c>)
 8006302:	62a3      	str	r3, [r4, #40]	; 0x28
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <std+0x40>)
 8006306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006308:	4b04      	ldr	r3, [pc, #16]	; (800631c <std+0x44>)
 800630a:	6323      	str	r3, [r4, #48]	; 0x30
 800630c:	bd10      	pop	{r4, pc}
 800630e:	bf00      	nop
 8006310:	08007199 	.word	0x08007199
 8006314:	080071bb 	.word	0x080071bb
 8006318:	080071f3 	.word	0x080071f3
 800631c:	08007217 	.word	0x08007217

08006320 <_cleanup_r>:
 8006320:	4901      	ldr	r1, [pc, #4]	; (8006328 <_cleanup_r+0x8>)
 8006322:	f000 b8af 	b.w	8006484 <_fwalk_reent>
 8006326:	bf00      	nop
 8006328:	08006261 	.word	0x08006261

0800632c <__sfmoreglue>:
 800632c:	2268      	movs	r2, #104	; 0x68
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	1e4d      	subs	r5, r1, #1
 8006332:	4355      	muls	r5, r2
 8006334:	460e      	mov	r6, r1
 8006336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800633a:	f000 fd51 	bl	8006de0 <_malloc_r>
 800633e:	4604      	mov	r4, r0
 8006340:	b140      	cbz	r0, 8006354 <__sfmoreglue+0x28>
 8006342:	2100      	movs	r1, #0
 8006344:	e9c0 1600 	strd	r1, r6, [r0]
 8006348:	300c      	adds	r0, #12
 800634a:	60a0      	str	r0, [r4, #8]
 800634c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006350:	f7fe fad2 	bl	80048f8 <memset>
 8006354:	4620      	mov	r0, r4
 8006356:	bd70      	pop	{r4, r5, r6, pc}

08006358 <__sfp_lock_acquire>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__sfp_lock_acquire+0x8>)
 800635a:	f000 b8b8 	b.w	80064ce <__retarget_lock_acquire_recursive>
 800635e:	bf00      	nop
 8006360:	20000406 	.word	0x20000406

08006364 <__sfp_lock_release>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sfp_lock_release+0x8>)
 8006366:	f000 b8b3 	b.w	80064d0 <__retarget_lock_release_recursive>
 800636a:	bf00      	nop
 800636c:	20000406 	.word	0x20000406

08006370 <__sinit_lock_acquire>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sinit_lock_acquire+0x8>)
 8006372:	f000 b8ac 	b.w	80064ce <__retarget_lock_acquire_recursive>
 8006376:	bf00      	nop
 8006378:	20000407 	.word	0x20000407

0800637c <__sinit_lock_release>:
 800637c:	4801      	ldr	r0, [pc, #4]	; (8006384 <__sinit_lock_release+0x8>)
 800637e:	f000 b8a7 	b.w	80064d0 <__retarget_lock_release_recursive>
 8006382:	bf00      	nop
 8006384:	20000407 	.word	0x20000407

08006388 <__sinit>:
 8006388:	b510      	push	{r4, lr}
 800638a:	4604      	mov	r4, r0
 800638c:	f7ff fff0 	bl	8006370 <__sinit_lock_acquire>
 8006390:	69a3      	ldr	r3, [r4, #24]
 8006392:	b11b      	cbz	r3, 800639c <__sinit+0x14>
 8006394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006398:	f7ff bff0 	b.w	800637c <__sinit_lock_release>
 800639c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063a0:	6523      	str	r3, [r4, #80]	; 0x50
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <__sinit+0x68>)
 80063a4:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <__sinit+0x6c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	bf08      	it	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	4620      	mov	r0, r4
 80063b2:	bf08      	it	eq
 80063b4:	61a3      	streq	r3, [r4, #24]
 80063b6:	f000 f81f 	bl	80063f8 <__sfp>
 80063ba:	6060      	str	r0, [r4, #4]
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 f81b 	bl	80063f8 <__sfp>
 80063c2:	60a0      	str	r0, [r4, #8]
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 f817 	bl	80063f8 <__sfp>
 80063ca:	2200      	movs	r2, #0
 80063cc:	2104      	movs	r1, #4
 80063ce:	60e0      	str	r0, [r4, #12]
 80063d0:	6860      	ldr	r0, [r4, #4]
 80063d2:	f7ff ff81 	bl	80062d8 <std>
 80063d6:	2201      	movs	r2, #1
 80063d8:	2109      	movs	r1, #9
 80063da:	68a0      	ldr	r0, [r4, #8]
 80063dc:	f7ff ff7c 	bl	80062d8 <std>
 80063e0:	2202      	movs	r2, #2
 80063e2:	2112      	movs	r1, #18
 80063e4:	68e0      	ldr	r0, [r4, #12]
 80063e6:	f7ff ff77 	bl	80062d8 <std>
 80063ea:	2301      	movs	r3, #1
 80063ec:	61a3      	str	r3, [r4, #24]
 80063ee:	e7d1      	b.n	8006394 <__sinit+0xc>
 80063f0:	08007510 	.word	0x08007510
 80063f4:	08006321 	.word	0x08006321

080063f8 <__sfp>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4607      	mov	r7, r0
 80063fc:	f7ff ffac 	bl	8006358 <__sfp_lock_acquire>
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <__sfp+0x84>)
 8006402:	681e      	ldr	r6, [r3, #0]
 8006404:	69b3      	ldr	r3, [r6, #24]
 8006406:	b913      	cbnz	r3, 800640e <__sfp+0x16>
 8006408:	4630      	mov	r0, r6
 800640a:	f7ff ffbd 	bl	8006388 <__sinit>
 800640e:	3648      	adds	r6, #72	; 0x48
 8006410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006414:	3b01      	subs	r3, #1
 8006416:	d503      	bpl.n	8006420 <__sfp+0x28>
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	b30b      	cbz	r3, 8006460 <__sfp+0x68>
 800641c:	6836      	ldr	r6, [r6, #0]
 800641e:	e7f7      	b.n	8006410 <__sfp+0x18>
 8006420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006424:	b9d5      	cbnz	r5, 800645c <__sfp+0x64>
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <__sfp+0x88>)
 8006428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800642c:	60e3      	str	r3, [r4, #12]
 800642e:	6665      	str	r5, [r4, #100]	; 0x64
 8006430:	f000 f84c 	bl	80064cc <__retarget_lock_init_recursive>
 8006434:	f7ff ff96 	bl	8006364 <__sfp_lock_release>
 8006438:	2208      	movs	r2, #8
 800643a:	4629      	mov	r1, r5
 800643c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006444:	6025      	str	r5, [r4, #0]
 8006446:	61a5      	str	r5, [r4, #24]
 8006448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800644c:	f7fe fa54 	bl	80048f8 <memset>
 8006450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006458:	4620      	mov	r0, r4
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645c:	3468      	adds	r4, #104	; 0x68
 800645e:	e7d9      	b.n	8006414 <__sfp+0x1c>
 8006460:	2104      	movs	r1, #4
 8006462:	4638      	mov	r0, r7
 8006464:	f7ff ff62 	bl	800632c <__sfmoreglue>
 8006468:	4604      	mov	r4, r0
 800646a:	6030      	str	r0, [r6, #0]
 800646c:	2800      	cmp	r0, #0
 800646e:	d1d5      	bne.n	800641c <__sfp+0x24>
 8006470:	f7ff ff78 	bl	8006364 <__sfp_lock_release>
 8006474:	230c      	movs	r3, #12
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	e7ee      	b.n	8006458 <__sfp+0x60>
 800647a:	bf00      	nop
 800647c:	08007510 	.word	0x08007510
 8006480:	ffff0001 	.word	0xffff0001

08006484 <_fwalk_reent>:
 8006484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006488:	4606      	mov	r6, r0
 800648a:	4688      	mov	r8, r1
 800648c:	2700      	movs	r7, #0
 800648e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006496:	f1b9 0901 	subs.w	r9, r9, #1
 800649a:	d505      	bpl.n	80064a8 <_fwalk_reent+0x24>
 800649c:	6824      	ldr	r4, [r4, #0]
 800649e:	2c00      	cmp	r4, #0
 80064a0:	d1f7      	bne.n	8006492 <_fwalk_reent+0xe>
 80064a2:	4638      	mov	r0, r7
 80064a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d907      	bls.n	80064be <_fwalk_reent+0x3a>
 80064ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b2:	3301      	adds	r3, #1
 80064b4:	d003      	beq.n	80064be <_fwalk_reent+0x3a>
 80064b6:	4629      	mov	r1, r5
 80064b8:	4630      	mov	r0, r6
 80064ba:	47c0      	blx	r8
 80064bc:	4307      	orrs	r7, r0
 80064be:	3568      	adds	r5, #104	; 0x68
 80064c0:	e7e9      	b.n	8006496 <_fwalk_reent+0x12>
	...

080064c4 <_localeconv_r>:
 80064c4:	4800      	ldr	r0, [pc, #0]	; (80064c8 <_localeconv_r+0x4>)
 80064c6:	4770      	bx	lr
 80064c8:	20000160 	.word	0x20000160

080064cc <__retarget_lock_init_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_acquire_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_release_recursive>:
 80064d0:	4770      	bx	lr

080064d2 <__swhatbuf_r>:
 80064d2:	b570      	push	{r4, r5, r6, lr}
 80064d4:	460e      	mov	r6, r1
 80064d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064da:	4614      	mov	r4, r2
 80064dc:	2900      	cmp	r1, #0
 80064de:	461d      	mov	r5, r3
 80064e0:	b096      	sub	sp, #88	; 0x58
 80064e2:	da08      	bge.n	80064f6 <__swhatbuf_r+0x24>
 80064e4:	2200      	movs	r2, #0
 80064e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ea:	602a      	str	r2, [r5, #0]
 80064ec:	061a      	lsls	r2, r3, #24
 80064ee:	d410      	bmi.n	8006512 <__swhatbuf_r+0x40>
 80064f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f4:	e00e      	b.n	8006514 <__swhatbuf_r+0x42>
 80064f6:	466a      	mov	r2, sp
 80064f8:	f000 fee4 	bl	80072c4 <_fstat_r>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	dbf1      	blt.n	80064e4 <__swhatbuf_r+0x12>
 8006500:	9a01      	ldr	r2, [sp, #4]
 8006502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800650a:	425a      	negs	r2, r3
 800650c:	415a      	adcs	r2, r3
 800650e:	602a      	str	r2, [r5, #0]
 8006510:	e7ee      	b.n	80064f0 <__swhatbuf_r+0x1e>
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2000      	movs	r0, #0
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	b016      	add	sp, #88	; 0x58
 800651a:	bd70      	pop	{r4, r5, r6, pc}

0800651c <__smakebuf_r>:
 800651c:	898b      	ldrh	r3, [r1, #12]
 800651e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006520:	079d      	lsls	r5, r3, #30
 8006522:	4606      	mov	r6, r0
 8006524:	460c      	mov	r4, r1
 8006526:	d507      	bpl.n	8006538 <__smakebuf_r+0x1c>
 8006528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	6123      	str	r3, [r4, #16]
 8006530:	2301      	movs	r3, #1
 8006532:	6163      	str	r3, [r4, #20]
 8006534:	b002      	add	sp, #8
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	466a      	mov	r2, sp
 800653a:	ab01      	add	r3, sp, #4
 800653c:	f7ff ffc9 	bl	80064d2 <__swhatbuf_r>
 8006540:	9900      	ldr	r1, [sp, #0]
 8006542:	4605      	mov	r5, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f000 fc4b 	bl	8006de0 <_malloc_r>
 800654a:	b948      	cbnz	r0, 8006560 <__smakebuf_r+0x44>
 800654c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006550:	059a      	lsls	r2, r3, #22
 8006552:	d4ef      	bmi.n	8006534 <__smakebuf_r+0x18>
 8006554:	f023 0303 	bic.w	r3, r3, #3
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e7e3      	b.n	8006528 <__smakebuf_r+0xc>
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <__smakebuf_r+0x7c>)
 8006562:	62b3      	str	r3, [r6, #40]	; 0x28
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	6020      	str	r0, [r4, #0]
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	6120      	str	r0, [r4, #16]
 8006572:	6163      	str	r3, [r4, #20]
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	b15b      	cbz	r3, 8006590 <__smakebuf_r+0x74>
 8006578:	4630      	mov	r0, r6
 800657a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800657e:	f000 feb3 	bl	80072e8 <_isatty_r>
 8006582:	b128      	cbz	r0, 8006590 <__smakebuf_r+0x74>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	89a0      	ldrh	r0, [r4, #12]
 8006592:	4305      	orrs	r5, r0
 8006594:	81a5      	strh	r5, [r4, #12]
 8006596:	e7cd      	b.n	8006534 <__smakebuf_r+0x18>
 8006598:	08006321 	.word	0x08006321

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 bc1d 	b.w	8006de0 <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c

080065ac <memchr>:
 80065ac:	4603      	mov	r3, r0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	b2c9      	uxtb	r1, r1
 80065b2:	4402      	add	r2, r0
 80065b4:	4293      	cmp	r3, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	d101      	bne.n	80065be <memchr+0x12>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e003      	b.n	80065c6 <memchr+0x1a>
 80065be:	7804      	ldrb	r4, [r0, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	428c      	cmp	r4, r1
 80065c4:	d1f6      	bne.n	80065b4 <memchr+0x8>
 80065c6:	bd10      	pop	{r4, pc}

080065c8 <memcpy>:
 80065c8:	440a      	add	r2, r1
 80065ca:	4291      	cmp	r1, r2
 80065cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d0:	d100      	bne.n	80065d4 <memcpy+0xc>
 80065d2:	4770      	bx	lr
 80065d4:	b510      	push	{r4, lr}
 80065d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065da:	4291      	cmp	r1, r2
 80065dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e0:	d1f9      	bne.n	80065d6 <memcpy+0xe>
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <_Balloc>:
 80065e4:	b570      	push	{r4, r5, r6, lr}
 80065e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065e8:	4604      	mov	r4, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	b976      	cbnz	r6, 800660c <_Balloc+0x28>
 80065ee:	2010      	movs	r0, #16
 80065f0:	f7ff ffd4 	bl	800659c <malloc>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6260      	str	r0, [r4, #36]	; 0x24
 80065f8:	b920      	cbnz	r0, 8006604 <_Balloc+0x20>
 80065fa:	2166      	movs	r1, #102	; 0x66
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <_Balloc+0x78>)
 80065fe:	4818      	ldr	r0, [pc, #96]	; (8006660 <_Balloc+0x7c>)
 8006600:	f000 fe20 	bl	8007244 <__assert_func>
 8006604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006608:	6006      	str	r6, [r0, #0]
 800660a:	60c6      	str	r6, [r0, #12]
 800660c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800660e:	68f3      	ldr	r3, [r6, #12]
 8006610:	b183      	cbz	r3, 8006634 <_Balloc+0x50>
 8006612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800661a:	b9b8      	cbnz	r0, 800664c <_Balloc+0x68>
 800661c:	2101      	movs	r1, #1
 800661e:	fa01 f605 	lsl.w	r6, r1, r5
 8006622:	1d72      	adds	r2, r6, #5
 8006624:	4620      	mov	r0, r4
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	f000 fb5e 	bl	8006ce8 <_calloc_r>
 800662c:	b160      	cbz	r0, 8006648 <_Balloc+0x64>
 800662e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006632:	e00e      	b.n	8006652 <_Balloc+0x6e>
 8006634:	2221      	movs	r2, #33	; 0x21
 8006636:	2104      	movs	r1, #4
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fb55 	bl	8006ce8 <_calloc_r>
 800663e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006640:	60f0      	str	r0, [r6, #12]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e4      	bne.n	8006612 <_Balloc+0x2e>
 8006648:	2000      	movs	r0, #0
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	6802      	ldr	r2, [r0, #0]
 800664e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006652:	2300      	movs	r3, #0
 8006654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006658:	e7f7      	b.n	800664a <_Balloc+0x66>
 800665a:	bf00      	nop
 800665c:	08007555 	.word	0x08007555
 8006660:	08007638 	.word	0x08007638

08006664 <_Bfree>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	b976      	cbnz	r6, 800668c <_Bfree+0x28>
 800666e:	2010      	movs	r0, #16
 8006670:	f7ff ff94 	bl	800659c <malloc>
 8006674:	4602      	mov	r2, r0
 8006676:	6268      	str	r0, [r5, #36]	; 0x24
 8006678:	b920      	cbnz	r0, 8006684 <_Bfree+0x20>
 800667a:	218a      	movs	r1, #138	; 0x8a
 800667c:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <_Bfree+0x3c>)
 800667e:	4809      	ldr	r0, [pc, #36]	; (80066a4 <_Bfree+0x40>)
 8006680:	f000 fde0 	bl	8007244 <__assert_func>
 8006684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006688:	6006      	str	r6, [r0, #0]
 800668a:	60c6      	str	r6, [r0, #12]
 800668c:	b13c      	cbz	r4, 800669e <_Bfree+0x3a>
 800668e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006690:	6862      	ldr	r2, [r4, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006698:	6021      	str	r1, [r4, #0]
 800669a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	08007555 	.word	0x08007555
 80066a4:	08007638 	.word	0x08007638

080066a8 <__multadd>:
 80066a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ac:	4607      	mov	r7, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	461e      	mov	r6, r3
 80066b2:	2000      	movs	r0, #0
 80066b4:	690d      	ldr	r5, [r1, #16]
 80066b6:	f101 0c14 	add.w	ip, r1, #20
 80066ba:	f8dc 3000 	ldr.w	r3, [ip]
 80066be:	3001      	adds	r0, #1
 80066c0:	b299      	uxth	r1, r3
 80066c2:	fb02 6101 	mla	r1, r2, r1, r6
 80066c6:	0c1e      	lsrs	r6, r3, #16
 80066c8:	0c0b      	lsrs	r3, r1, #16
 80066ca:	fb02 3306 	mla	r3, r2, r6, r3
 80066ce:	b289      	uxth	r1, r1
 80066d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066d4:	4285      	cmp	r5, r0
 80066d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066da:	f84c 1b04 	str.w	r1, [ip], #4
 80066de:	dcec      	bgt.n	80066ba <__multadd+0x12>
 80066e0:	b30e      	cbz	r6, 8006726 <__multadd+0x7e>
 80066e2:	68a3      	ldr	r3, [r4, #8]
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dc19      	bgt.n	800671c <__multadd+0x74>
 80066e8:	6861      	ldr	r1, [r4, #4]
 80066ea:	4638      	mov	r0, r7
 80066ec:	3101      	adds	r1, #1
 80066ee:	f7ff ff79 	bl	80065e4 <_Balloc>
 80066f2:	4680      	mov	r8, r0
 80066f4:	b928      	cbnz	r0, 8006702 <__multadd+0x5a>
 80066f6:	4602      	mov	r2, r0
 80066f8:	21b5      	movs	r1, #181	; 0xb5
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <__multadd+0x84>)
 80066fc:	480c      	ldr	r0, [pc, #48]	; (8006730 <__multadd+0x88>)
 80066fe:	f000 fda1 	bl	8007244 <__assert_func>
 8006702:	6922      	ldr	r2, [r4, #16]
 8006704:	f104 010c 	add.w	r1, r4, #12
 8006708:	3202      	adds	r2, #2
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	300c      	adds	r0, #12
 800670e:	f7ff ff5b 	bl	80065c8 <memcpy>
 8006712:	4621      	mov	r1, r4
 8006714:	4638      	mov	r0, r7
 8006716:	f7ff ffa5 	bl	8006664 <_Bfree>
 800671a:	4644      	mov	r4, r8
 800671c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006720:	3501      	adds	r5, #1
 8006722:	615e      	str	r6, [r3, #20]
 8006724:	6125      	str	r5, [r4, #16]
 8006726:	4620      	mov	r0, r4
 8006728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672c:	080075c7 	.word	0x080075c7
 8006730:	08007638 	.word	0x08007638

08006734 <__hi0bits>:
 8006734:	0c02      	lsrs	r2, r0, #16
 8006736:	0412      	lsls	r2, r2, #16
 8006738:	4603      	mov	r3, r0
 800673a:	b9ca      	cbnz	r2, 8006770 <__hi0bits+0x3c>
 800673c:	0403      	lsls	r3, r0, #16
 800673e:	2010      	movs	r0, #16
 8006740:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006744:	bf04      	itt	eq
 8006746:	021b      	lsleq	r3, r3, #8
 8006748:	3008      	addeq	r0, #8
 800674a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800674e:	bf04      	itt	eq
 8006750:	011b      	lsleq	r3, r3, #4
 8006752:	3004      	addeq	r0, #4
 8006754:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006758:	bf04      	itt	eq
 800675a:	009b      	lsleq	r3, r3, #2
 800675c:	3002      	addeq	r0, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	db05      	blt.n	800676e <__hi0bits+0x3a>
 8006762:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006766:	f100 0001 	add.w	r0, r0, #1
 800676a:	bf08      	it	eq
 800676c:	2020      	moveq	r0, #32
 800676e:	4770      	bx	lr
 8006770:	2000      	movs	r0, #0
 8006772:	e7e5      	b.n	8006740 <__hi0bits+0xc>

08006774 <__lo0bits>:
 8006774:	6803      	ldr	r3, [r0, #0]
 8006776:	4602      	mov	r2, r0
 8006778:	f013 0007 	ands.w	r0, r3, #7
 800677c:	d00b      	beq.n	8006796 <__lo0bits+0x22>
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d421      	bmi.n	80067c6 <__lo0bits+0x52>
 8006782:	0798      	lsls	r0, r3, #30
 8006784:	bf49      	itett	mi
 8006786:	085b      	lsrmi	r3, r3, #1
 8006788:	089b      	lsrpl	r3, r3, #2
 800678a:	2001      	movmi	r0, #1
 800678c:	6013      	strmi	r3, [r2, #0]
 800678e:	bf5c      	itt	pl
 8006790:	2002      	movpl	r0, #2
 8006792:	6013      	strpl	r3, [r2, #0]
 8006794:	4770      	bx	lr
 8006796:	b299      	uxth	r1, r3
 8006798:	b909      	cbnz	r1, 800679e <__lo0bits+0x2a>
 800679a:	2010      	movs	r0, #16
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	b2d9      	uxtb	r1, r3
 80067a0:	b909      	cbnz	r1, 80067a6 <__lo0bits+0x32>
 80067a2:	3008      	adds	r0, #8
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	0719      	lsls	r1, r3, #28
 80067a8:	bf04      	itt	eq
 80067aa:	091b      	lsreq	r3, r3, #4
 80067ac:	3004      	addeq	r0, #4
 80067ae:	0799      	lsls	r1, r3, #30
 80067b0:	bf04      	itt	eq
 80067b2:	089b      	lsreq	r3, r3, #2
 80067b4:	3002      	addeq	r0, #2
 80067b6:	07d9      	lsls	r1, r3, #31
 80067b8:	d403      	bmi.n	80067c2 <__lo0bits+0x4e>
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	f100 0001 	add.w	r0, r0, #1
 80067c0:	d003      	beq.n	80067ca <__lo0bits+0x56>
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4770      	bx	lr
 80067c6:	2000      	movs	r0, #0
 80067c8:	4770      	bx	lr
 80067ca:	2020      	movs	r0, #32
 80067cc:	4770      	bx	lr
	...

080067d0 <__i2b>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	460c      	mov	r4, r1
 80067d4:	2101      	movs	r1, #1
 80067d6:	f7ff ff05 	bl	80065e4 <_Balloc>
 80067da:	4602      	mov	r2, r0
 80067dc:	b928      	cbnz	r0, 80067ea <__i2b+0x1a>
 80067de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067e2:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <__i2b+0x24>)
 80067e4:	4804      	ldr	r0, [pc, #16]	; (80067f8 <__i2b+0x28>)
 80067e6:	f000 fd2d 	bl	8007244 <__assert_func>
 80067ea:	2301      	movs	r3, #1
 80067ec:	6144      	str	r4, [r0, #20]
 80067ee:	6103      	str	r3, [r0, #16]
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	080075c7 	.word	0x080075c7
 80067f8:	08007638 	.word	0x08007638

080067fc <__multiply>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	4691      	mov	r9, r2
 8006802:	690a      	ldr	r2, [r1, #16]
 8006804:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006808:	460c      	mov	r4, r1
 800680a:	429a      	cmp	r2, r3
 800680c:	bfbe      	ittt	lt
 800680e:	460b      	movlt	r3, r1
 8006810:	464c      	movlt	r4, r9
 8006812:	4699      	movlt	r9, r3
 8006814:	6927      	ldr	r7, [r4, #16]
 8006816:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	6861      	ldr	r1, [r4, #4]
 800681e:	eb07 060a 	add.w	r6, r7, sl
 8006822:	42b3      	cmp	r3, r6
 8006824:	b085      	sub	sp, #20
 8006826:	bfb8      	it	lt
 8006828:	3101      	addlt	r1, #1
 800682a:	f7ff fedb 	bl	80065e4 <_Balloc>
 800682e:	b930      	cbnz	r0, 800683e <__multiply+0x42>
 8006830:	4602      	mov	r2, r0
 8006832:	f240 115d 	movw	r1, #349	; 0x15d
 8006836:	4b43      	ldr	r3, [pc, #268]	; (8006944 <__multiply+0x148>)
 8006838:	4843      	ldr	r0, [pc, #268]	; (8006948 <__multiply+0x14c>)
 800683a:	f000 fd03 	bl	8007244 <__assert_func>
 800683e:	f100 0514 	add.w	r5, r0, #20
 8006842:	462b      	mov	r3, r5
 8006844:	2200      	movs	r2, #0
 8006846:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800684a:	4543      	cmp	r3, r8
 800684c:	d321      	bcc.n	8006892 <__multiply+0x96>
 800684e:	f104 0314 	add.w	r3, r4, #20
 8006852:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006856:	f109 0314 	add.w	r3, r9, #20
 800685a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	1b3a      	subs	r2, r7, r4
 8006862:	3a15      	subs	r2, #21
 8006864:	f022 0203 	bic.w	r2, r2, #3
 8006868:	3204      	adds	r2, #4
 800686a:	f104 0115 	add.w	r1, r4, #21
 800686e:	428f      	cmp	r7, r1
 8006870:	bf38      	it	cc
 8006872:	2204      	movcc	r2, #4
 8006874:	9201      	str	r2, [sp, #4]
 8006876:	9a02      	ldr	r2, [sp, #8]
 8006878:	9303      	str	r3, [sp, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d80c      	bhi.n	8006898 <__multiply+0x9c>
 800687e:	2e00      	cmp	r6, #0
 8006880:	dd03      	ble.n	800688a <__multiply+0x8e>
 8006882:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006886:	2b00      	cmp	r3, #0
 8006888:	d059      	beq.n	800693e <__multiply+0x142>
 800688a:	6106      	str	r6, [r0, #16]
 800688c:	b005      	add	sp, #20
 800688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006892:	f843 2b04 	str.w	r2, [r3], #4
 8006896:	e7d8      	b.n	800684a <__multiply+0x4e>
 8006898:	f8b3 a000 	ldrh.w	sl, [r3]
 800689c:	f1ba 0f00 	cmp.w	sl, #0
 80068a0:	d023      	beq.n	80068ea <__multiply+0xee>
 80068a2:	46a9      	mov	r9, r5
 80068a4:	f04f 0c00 	mov.w	ip, #0
 80068a8:	f104 0e14 	add.w	lr, r4, #20
 80068ac:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068b0:	f8d9 1000 	ldr.w	r1, [r9]
 80068b4:	fa1f fb82 	uxth.w	fp, r2
 80068b8:	b289      	uxth	r1, r1
 80068ba:	fb0a 110b 	mla	r1, sl, fp, r1
 80068be:	4461      	add	r1, ip
 80068c0:	f8d9 c000 	ldr.w	ip, [r9]
 80068c4:	0c12      	lsrs	r2, r2, #16
 80068c6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068ca:	fb0a c202 	mla	r2, sl, r2, ip
 80068ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068d2:	b289      	uxth	r1, r1
 80068d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068d8:	4577      	cmp	r7, lr
 80068da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068de:	f849 1b04 	str.w	r1, [r9], #4
 80068e2:	d8e3      	bhi.n	80068ac <__multiply+0xb0>
 80068e4:	9a01      	ldr	r2, [sp, #4]
 80068e6:	f845 c002 	str.w	ip, [r5, r2]
 80068ea:	9a03      	ldr	r2, [sp, #12]
 80068ec:	3304      	adds	r3, #4
 80068ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068f2:	f1b9 0f00 	cmp.w	r9, #0
 80068f6:	d020      	beq.n	800693a <__multiply+0x13e>
 80068f8:	46ae      	mov	lr, r5
 80068fa:	f04f 0a00 	mov.w	sl, #0
 80068fe:	6829      	ldr	r1, [r5, #0]
 8006900:	f104 0c14 	add.w	ip, r4, #20
 8006904:	f8bc b000 	ldrh.w	fp, [ip]
 8006908:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800690c:	b289      	uxth	r1, r1
 800690e:	fb09 220b 	mla	r2, r9, fp, r2
 8006912:	4492      	add	sl, r2
 8006914:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006918:	f84e 1b04 	str.w	r1, [lr], #4
 800691c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006920:	f8be 1000 	ldrh.w	r1, [lr]
 8006924:	0c12      	lsrs	r2, r2, #16
 8006926:	fb09 1102 	mla	r1, r9, r2, r1
 800692a:	4567      	cmp	r7, ip
 800692c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006930:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006934:	d8e6      	bhi.n	8006904 <__multiply+0x108>
 8006936:	9a01      	ldr	r2, [sp, #4]
 8006938:	50a9      	str	r1, [r5, r2]
 800693a:	3504      	adds	r5, #4
 800693c:	e79b      	b.n	8006876 <__multiply+0x7a>
 800693e:	3e01      	subs	r6, #1
 8006940:	e79d      	b.n	800687e <__multiply+0x82>
 8006942:	bf00      	nop
 8006944:	080075c7 	.word	0x080075c7
 8006948:	08007638 	.word	0x08007638

0800694c <__pow5mult>:
 800694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006950:	4615      	mov	r5, r2
 8006952:	f012 0203 	ands.w	r2, r2, #3
 8006956:	4606      	mov	r6, r0
 8006958:	460f      	mov	r7, r1
 800695a:	d007      	beq.n	800696c <__pow5mult+0x20>
 800695c:	4c25      	ldr	r4, [pc, #148]	; (80069f4 <__pow5mult+0xa8>)
 800695e:	3a01      	subs	r2, #1
 8006960:	2300      	movs	r3, #0
 8006962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006966:	f7ff fe9f 	bl	80066a8 <__multadd>
 800696a:	4607      	mov	r7, r0
 800696c:	10ad      	asrs	r5, r5, #2
 800696e:	d03d      	beq.n	80069ec <__pow5mult+0xa0>
 8006970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006972:	b97c      	cbnz	r4, 8006994 <__pow5mult+0x48>
 8006974:	2010      	movs	r0, #16
 8006976:	f7ff fe11 	bl	800659c <malloc>
 800697a:	4602      	mov	r2, r0
 800697c:	6270      	str	r0, [r6, #36]	; 0x24
 800697e:	b928      	cbnz	r0, 800698c <__pow5mult+0x40>
 8006980:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <__pow5mult+0xac>)
 8006986:	481d      	ldr	r0, [pc, #116]	; (80069fc <__pow5mult+0xb0>)
 8006988:	f000 fc5c 	bl	8007244 <__assert_func>
 800698c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006990:	6004      	str	r4, [r0, #0]
 8006992:	60c4      	str	r4, [r0, #12]
 8006994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800699c:	b94c      	cbnz	r4, 80069b2 <__pow5mult+0x66>
 800699e:	f240 2171 	movw	r1, #625	; 0x271
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ff14 	bl	80067d0 <__i2b>
 80069a8:	2300      	movs	r3, #0
 80069aa:	4604      	mov	r4, r0
 80069ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	f04f 0900 	mov.w	r9, #0
 80069b6:	07eb      	lsls	r3, r5, #31
 80069b8:	d50a      	bpl.n	80069d0 <__pow5mult+0x84>
 80069ba:	4639      	mov	r1, r7
 80069bc:	4622      	mov	r2, r4
 80069be:	4630      	mov	r0, r6
 80069c0:	f7ff ff1c 	bl	80067fc <__multiply>
 80069c4:	4680      	mov	r8, r0
 80069c6:	4639      	mov	r1, r7
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff fe4b 	bl	8006664 <_Bfree>
 80069ce:	4647      	mov	r7, r8
 80069d0:	106d      	asrs	r5, r5, #1
 80069d2:	d00b      	beq.n	80069ec <__pow5mult+0xa0>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	b938      	cbnz	r0, 80069e8 <__pow5mult+0x9c>
 80069d8:	4622      	mov	r2, r4
 80069da:	4621      	mov	r1, r4
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff ff0d 	bl	80067fc <__multiply>
 80069e2:	6020      	str	r0, [r4, #0]
 80069e4:	f8c0 9000 	str.w	r9, [r0]
 80069e8:	4604      	mov	r4, r0
 80069ea:	e7e4      	b.n	80069b6 <__pow5mult+0x6a>
 80069ec:	4638      	mov	r0, r7
 80069ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f2:	bf00      	nop
 80069f4:	08007788 	.word	0x08007788
 80069f8:	08007555 	.word	0x08007555
 80069fc:	08007638 	.word	0x08007638

08006a00 <__lshift>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	460c      	mov	r4, r1
 8006a06:	4607      	mov	r7, r0
 8006a08:	4691      	mov	r9, r2
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6849      	ldr	r1, [r1, #4]
 8006a0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a18:	f108 0601 	add.w	r6, r8, #1
 8006a1c:	42b3      	cmp	r3, r6
 8006a1e:	db0b      	blt.n	8006a38 <__lshift+0x38>
 8006a20:	4638      	mov	r0, r7
 8006a22:	f7ff fddf 	bl	80065e4 <_Balloc>
 8006a26:	4605      	mov	r5, r0
 8006a28:	b948      	cbnz	r0, 8006a3e <__lshift+0x3e>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a30:	4b29      	ldr	r3, [pc, #164]	; (8006ad8 <__lshift+0xd8>)
 8006a32:	482a      	ldr	r0, [pc, #168]	; (8006adc <__lshift+0xdc>)
 8006a34:	f000 fc06 	bl	8007244 <__assert_func>
 8006a38:	3101      	adds	r1, #1
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	e7ee      	b.n	8006a1c <__lshift+0x1c>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f100 0114 	add.w	r1, r0, #20
 8006a44:	f100 0210 	add.w	r2, r0, #16
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4553      	cmp	r3, sl
 8006a4c:	db37      	blt.n	8006abe <__lshift+0xbe>
 8006a4e:	6920      	ldr	r0, [r4, #16]
 8006a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a54:	f104 0314 	add.w	r3, r4, #20
 8006a58:	f019 091f 	ands.w	r9, r9, #31
 8006a5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a64:	d02f      	beq.n	8006ac6 <__lshift+0xc6>
 8006a66:	468a      	mov	sl, r1
 8006a68:	f04f 0c00 	mov.w	ip, #0
 8006a6c:	f1c9 0e20 	rsb	lr, r9, #32
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	fa02 f209 	lsl.w	r2, r2, r9
 8006a76:	ea42 020c 	orr.w	r2, r2, ip
 8006a7a:	f84a 2b04 	str.w	r2, [sl], #4
 8006a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a82:	4298      	cmp	r0, r3
 8006a84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a88:	d8f2      	bhi.n	8006a70 <__lshift+0x70>
 8006a8a:	1b03      	subs	r3, r0, r4
 8006a8c:	3b15      	subs	r3, #21
 8006a8e:	f023 0303 	bic.w	r3, r3, #3
 8006a92:	3304      	adds	r3, #4
 8006a94:	f104 0215 	add.w	r2, r4, #21
 8006a98:	4290      	cmp	r0, r2
 8006a9a:	bf38      	it	cc
 8006a9c:	2304      	movcc	r3, #4
 8006a9e:	f841 c003 	str.w	ip, [r1, r3]
 8006aa2:	f1bc 0f00 	cmp.w	ip, #0
 8006aa6:	d001      	beq.n	8006aac <__lshift+0xac>
 8006aa8:	f108 0602 	add.w	r6, r8, #2
 8006aac:	3e01      	subs	r6, #1
 8006aae:	4638      	mov	r0, r7
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	612e      	str	r6, [r5, #16]
 8006ab4:	f7ff fdd6 	bl	8006664 <_Bfree>
 8006ab8:	4628      	mov	r0, r5
 8006aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	e7c1      	b.n	8006a4a <__lshift+0x4a>
 8006ac6:	3904      	subs	r1, #4
 8006ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006acc:	4298      	cmp	r0, r3
 8006ace:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ad2:	d8f9      	bhi.n	8006ac8 <__lshift+0xc8>
 8006ad4:	e7ea      	b.n	8006aac <__lshift+0xac>
 8006ad6:	bf00      	nop
 8006ad8:	080075c7 	.word	0x080075c7
 8006adc:	08007638 	.word	0x08007638

08006ae0 <__mcmp>:
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	690a      	ldr	r2, [r1, #16]
 8006ae4:	6900      	ldr	r0, [r0, #16]
 8006ae6:	b530      	push	{r4, r5, lr}
 8006ae8:	1a80      	subs	r0, r0, r2
 8006aea:	d10d      	bne.n	8006b08 <__mcmp+0x28>
 8006aec:	3314      	adds	r3, #20
 8006aee:	3114      	adds	r1, #20
 8006af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b00:	4295      	cmp	r5, r2
 8006b02:	d002      	beq.n	8006b0a <__mcmp+0x2a>
 8006b04:	d304      	bcc.n	8006b10 <__mcmp+0x30>
 8006b06:	2001      	movs	r0, #1
 8006b08:	bd30      	pop	{r4, r5, pc}
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	d3f4      	bcc.n	8006af8 <__mcmp+0x18>
 8006b0e:	e7fb      	b.n	8006b08 <__mcmp+0x28>
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e7f8      	b.n	8006b08 <__mcmp+0x28>
	...

08006b18 <__mdiff>:
 8006b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	4607      	mov	r7, r0
 8006b20:	4611      	mov	r1, r2
 8006b22:	4628      	mov	r0, r5
 8006b24:	4614      	mov	r4, r2
 8006b26:	f7ff ffdb 	bl	8006ae0 <__mcmp>
 8006b2a:	1e06      	subs	r6, r0, #0
 8006b2c:	d111      	bne.n	8006b52 <__mdiff+0x3a>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff fd57 	bl	80065e4 <_Balloc>
 8006b36:	4602      	mov	r2, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <__mdiff+0x2e>
 8006b3a:	f240 2132 	movw	r1, #562	; 0x232
 8006b3e:	4b3a      	ldr	r3, [pc, #232]	; (8006c28 <__mdiff+0x110>)
 8006b40:	483a      	ldr	r0, [pc, #232]	; (8006c2c <__mdiff+0x114>)
 8006b42:	f000 fb7f 	bl	8007244 <__assert_func>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	bfa4      	itt	ge
 8006b54:	4623      	movge	r3, r4
 8006b56:	462c      	movge	r4, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	6861      	ldr	r1, [r4, #4]
 8006b5c:	bfa6      	itte	ge
 8006b5e:	461d      	movge	r5, r3
 8006b60:	2600      	movge	r6, #0
 8006b62:	2601      	movlt	r6, #1
 8006b64:	f7ff fd3e 	bl	80065e4 <_Balloc>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	b918      	cbnz	r0, 8006b74 <__mdiff+0x5c>
 8006b6c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b70:	4b2d      	ldr	r3, [pc, #180]	; (8006c28 <__mdiff+0x110>)
 8006b72:	e7e5      	b.n	8006b40 <__mdiff+0x28>
 8006b74:	f102 0814 	add.w	r8, r2, #20
 8006b78:	46c2      	mov	sl, r8
 8006b7a:	f04f 0c00 	mov.w	ip, #0
 8006b7e:	6927      	ldr	r7, [r4, #16]
 8006b80:	60c6      	str	r6, [r0, #12]
 8006b82:	692e      	ldr	r6, [r5, #16]
 8006b84:	f104 0014 	add.w	r0, r4, #20
 8006b88:	f105 0914 	add.w	r9, r5, #20
 8006b8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006b90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b94:	3410      	adds	r4, #16
 8006b96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006b9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b9e:	fa1f f18b 	uxth.w	r1, fp
 8006ba2:	448c      	add	ip, r1
 8006ba4:	b299      	uxth	r1, r3
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	ebac 0101 	sub.w	r1, ip, r1
 8006bac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bb0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bb4:	b289      	uxth	r1, r1
 8006bb6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bba:	454e      	cmp	r6, r9
 8006bbc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bc0:	f84a 3b04 	str.w	r3, [sl], #4
 8006bc4:	d8e7      	bhi.n	8006b96 <__mdiff+0x7e>
 8006bc6:	1b73      	subs	r3, r6, r5
 8006bc8:	3b15      	subs	r3, #21
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	3515      	adds	r5, #21
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	42ae      	cmp	r6, r5
 8006bd4:	bf38      	it	cc
 8006bd6:	2304      	movcc	r3, #4
 8006bd8:	4418      	add	r0, r3
 8006bda:	4443      	add	r3, r8
 8006bdc:	461e      	mov	r6, r3
 8006bde:	4605      	mov	r5, r0
 8006be0:	4575      	cmp	r5, lr
 8006be2:	d30e      	bcc.n	8006c02 <__mdiff+0xea>
 8006be4:	f10e 0103 	add.w	r1, lr, #3
 8006be8:	1a09      	subs	r1, r1, r0
 8006bea:	f021 0103 	bic.w	r1, r1, #3
 8006bee:	3803      	subs	r0, #3
 8006bf0:	4586      	cmp	lr, r0
 8006bf2:	bf38      	it	cc
 8006bf4:	2100      	movcc	r1, #0
 8006bf6:	4419      	add	r1, r3
 8006bf8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006bfc:	b18b      	cbz	r3, 8006c22 <__mdiff+0x10a>
 8006bfe:	6117      	str	r7, [r2, #16]
 8006c00:	e7a4      	b.n	8006b4c <__mdiff+0x34>
 8006c02:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c06:	fa1f f188 	uxth.w	r1, r8
 8006c0a:	4461      	add	r1, ip
 8006c0c:	140c      	asrs	r4, r1, #16
 8006c0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c12:	b289      	uxth	r1, r1
 8006c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c18:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c1c:	f846 1b04 	str.w	r1, [r6], #4
 8006c20:	e7de      	b.n	8006be0 <__mdiff+0xc8>
 8006c22:	3f01      	subs	r7, #1
 8006c24:	e7e8      	b.n	8006bf8 <__mdiff+0xe0>
 8006c26:	bf00      	nop
 8006c28:	080075c7 	.word	0x080075c7
 8006c2c:	08007638 	.word	0x08007638

08006c30 <__d2b>:
 8006c30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c34:	2101      	movs	r1, #1
 8006c36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c3a:	4690      	mov	r8, r2
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	f7ff fcd1 	bl	80065e4 <_Balloc>
 8006c42:	4604      	mov	r4, r0
 8006c44:	b930      	cbnz	r0, 8006c54 <__d2b+0x24>
 8006c46:	4602      	mov	r2, r0
 8006c48:	f240 310a 	movw	r1, #778	; 0x30a
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <__d2b+0xb0>)
 8006c4e:	4825      	ldr	r0, [pc, #148]	; (8006ce4 <__d2b+0xb4>)
 8006c50:	f000 faf8 	bl	8007244 <__assert_func>
 8006c54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c5c:	bb2d      	cbnz	r5, 8006caa <__d2b+0x7a>
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	f1b8 0300 	subs.w	r3, r8, #0
 8006c64:	d026      	beq.n	8006cb4 <__d2b+0x84>
 8006c66:	4668      	mov	r0, sp
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	f7ff fd83 	bl	8006774 <__lo0bits>
 8006c6e:	9900      	ldr	r1, [sp, #0]
 8006c70:	b1f0      	cbz	r0, 8006cb0 <__d2b+0x80>
 8006c72:	9a01      	ldr	r2, [sp, #4]
 8006c74:	f1c0 0320 	rsb	r3, r0, #32
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	40c2      	lsrs	r2, r0
 8006c80:	6163      	str	r3, [r4, #20]
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2102      	movne	r1, #2
 8006c8c:	2101      	moveq	r1, #1
 8006c8e:	61a3      	str	r3, [r4, #24]
 8006c90:	6121      	str	r1, [r4, #16]
 8006c92:	b1c5      	cbz	r5, 8006cc6 <__d2b+0x96>
 8006c94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c98:	4405      	add	r5, r0
 8006c9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c9e:	603d      	str	r5, [r7, #0]
 8006ca0:	6030      	str	r0, [r6, #0]
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	b002      	add	sp, #8
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cae:	e7d6      	b.n	8006c5e <__d2b+0x2e>
 8006cb0:	6161      	str	r1, [r4, #20]
 8006cb2:	e7e7      	b.n	8006c84 <__d2b+0x54>
 8006cb4:	a801      	add	r0, sp, #4
 8006cb6:	f7ff fd5d 	bl	8006774 <__lo0bits>
 8006cba:	2101      	movs	r1, #1
 8006cbc:	9b01      	ldr	r3, [sp, #4]
 8006cbe:	6121      	str	r1, [r4, #16]
 8006cc0:	6163      	str	r3, [r4, #20]
 8006cc2:	3020      	adds	r0, #32
 8006cc4:	e7e5      	b.n	8006c92 <__d2b+0x62>
 8006cc6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006cca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cce:	6038      	str	r0, [r7, #0]
 8006cd0:	6918      	ldr	r0, [r3, #16]
 8006cd2:	f7ff fd2f 	bl	8006734 <__hi0bits>
 8006cd6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006cda:	6031      	str	r1, [r6, #0]
 8006cdc:	e7e1      	b.n	8006ca2 <__d2b+0x72>
 8006cde:	bf00      	nop
 8006ce0:	080075c7 	.word	0x080075c7
 8006ce4:	08007638 	.word	0x08007638

08006ce8 <_calloc_r>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	fba1 5402 	umull	r5, r4, r1, r2
 8006cee:	b934      	cbnz	r4, 8006cfe <_calloc_r+0x16>
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f000 f875 	bl	8006de0 <_malloc_r>
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <_calloc_r+0x1e>
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	220c      	movs	r2, #12
 8006d00:	2600      	movs	r6, #0
 8006d02:	6002      	str	r2, [r0, #0]
 8006d04:	e7f9      	b.n	8006cfa <_calloc_r+0x12>
 8006d06:	462a      	mov	r2, r5
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f7fd fdf5 	bl	80048f8 <memset>
 8006d0e:	e7f4      	b.n	8006cfa <_calloc_r+0x12>

08006d10 <_free_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4605      	mov	r5, r0
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d040      	beq.n	8006d9a <_free_r+0x8a>
 8006d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1c:	1f0c      	subs	r4, r1, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfb8      	it	lt
 8006d22:	18e4      	addlt	r4, r4, r3
 8006d24:	f000 fb14 	bl	8007350 <__malloc_lock>
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <_free_r+0x8c>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	b933      	cbnz	r3, 8006d3c <_free_r+0x2c>
 8006d2e:	6063      	str	r3, [r4, #4]
 8006d30:	6014      	str	r4, [r2, #0]
 8006d32:	4628      	mov	r0, r5
 8006d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d38:	f000 bb10 	b.w	800735c <__malloc_unlock>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d908      	bls.n	8006d52 <_free_r+0x42>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	1821      	adds	r1, r4, r0
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf01      	itttt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	e7ed      	b.n	8006d2e <_free_r+0x1e>
 8006d52:	461a      	mov	r2, r3
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b10b      	cbz	r3, 8006d5c <_free_r+0x4c>
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d9fa      	bls.n	8006d52 <_free_r+0x42>
 8006d5c:	6811      	ldr	r1, [r2, #0]
 8006d5e:	1850      	adds	r0, r2, r1
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d10b      	bne.n	8006d7c <_free_r+0x6c>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	4401      	add	r1, r0
 8006d68:	1850      	adds	r0, r2, r1
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	d1e0      	bne.n	8006d32 <_free_r+0x22>
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4401      	add	r1, r0
 8006d76:	6011      	str	r1, [r2, #0]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	e7da      	b.n	8006d32 <_free_r+0x22>
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x74>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d6      	b.n	8006d32 <_free_r+0x22>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6054      	str	r4, [r2, #4]
 8006d98:	e7cb      	b.n	8006d32 <_free_r+0x22>
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000408 	.word	0x20000408

08006da0 <sbrk_aligned>:
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4e0e      	ldr	r6, [pc, #56]	; (8006ddc <sbrk_aligned+0x3c>)
 8006da4:	460c      	mov	r4, r1
 8006da6:	6831      	ldr	r1, [r6, #0]
 8006da8:	4605      	mov	r5, r0
 8006daa:	b911      	cbnz	r1, 8006db2 <sbrk_aligned+0x12>
 8006dac:	f000 f9e4 	bl	8007178 <_sbrk_r>
 8006db0:	6030      	str	r0, [r6, #0]
 8006db2:	4621      	mov	r1, r4
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 f9df 	bl	8007178 <_sbrk_r>
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	d00a      	beq.n	8006dd4 <sbrk_aligned+0x34>
 8006dbe:	1cc4      	adds	r4, r0, #3
 8006dc0:	f024 0403 	bic.w	r4, r4, #3
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d007      	beq.n	8006dd8 <sbrk_aligned+0x38>
 8006dc8:	1a21      	subs	r1, r4, r0
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f000 f9d4 	bl	8007178 <_sbrk_r>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d101      	bne.n	8006dd8 <sbrk_aligned+0x38>
 8006dd4:	f04f 34ff 	mov.w	r4, #4294967295
 8006dd8:	4620      	mov	r0, r4
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	2000040c 	.word	0x2000040c

08006de0 <_malloc_r>:
 8006de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de4:	1ccd      	adds	r5, r1, #3
 8006de6:	f025 0503 	bic.w	r5, r5, #3
 8006dea:	3508      	adds	r5, #8
 8006dec:	2d0c      	cmp	r5, #12
 8006dee:	bf38      	it	cc
 8006df0:	250c      	movcc	r5, #12
 8006df2:	2d00      	cmp	r5, #0
 8006df4:	4607      	mov	r7, r0
 8006df6:	db01      	blt.n	8006dfc <_malloc_r+0x1c>
 8006df8:	42a9      	cmp	r1, r5
 8006dfa:	d905      	bls.n	8006e08 <_malloc_r+0x28>
 8006dfc:	230c      	movs	r3, #12
 8006dfe:	2600      	movs	r6, #0
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	4630      	mov	r0, r6
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e08:	4e2e      	ldr	r6, [pc, #184]	; (8006ec4 <_malloc_r+0xe4>)
 8006e0a:	f000 faa1 	bl	8007350 <__malloc_lock>
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	461c      	mov	r4, r3
 8006e12:	bb34      	cbnz	r4, 8006e62 <_malloc_r+0x82>
 8006e14:	4629      	mov	r1, r5
 8006e16:	4638      	mov	r0, r7
 8006e18:	f7ff ffc2 	bl	8006da0 <sbrk_aligned>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	4604      	mov	r4, r0
 8006e20:	d14d      	bne.n	8006ebe <_malloc_r+0xde>
 8006e22:	6834      	ldr	r4, [r6, #0]
 8006e24:	4626      	mov	r6, r4
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d140      	bne.n	8006eac <_malloc_r+0xcc>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4638      	mov	r0, r7
 8006e30:	eb04 0803 	add.w	r8, r4, r3
 8006e34:	f000 f9a0 	bl	8007178 <_sbrk_r>
 8006e38:	4580      	cmp	r8, r0
 8006e3a:	d13a      	bne.n	8006eb2 <_malloc_r+0xd2>
 8006e3c:	6821      	ldr	r1, [r4, #0]
 8006e3e:	3503      	adds	r5, #3
 8006e40:	1a6d      	subs	r5, r5, r1
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	4638      	mov	r0, r7
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7ff ffa5 	bl	8006da0 <sbrk_aligned>
 8006e56:	3001      	adds	r0, #1
 8006e58:	d02b      	beq.n	8006eb2 <_malloc_r+0xd2>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	442b      	add	r3, r5
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	e00e      	b.n	8006e80 <_malloc_r+0xa0>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	1b52      	subs	r2, r2, r5
 8006e66:	d41e      	bmi.n	8006ea6 <_malloc_r+0xc6>
 8006e68:	2a0b      	cmp	r2, #11
 8006e6a:	d916      	bls.n	8006e9a <_malloc_r+0xba>
 8006e6c:	1961      	adds	r1, r4, r5
 8006e6e:	42a3      	cmp	r3, r4
 8006e70:	6025      	str	r5, [r4, #0]
 8006e72:	bf18      	it	ne
 8006e74:	6059      	strne	r1, [r3, #4]
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	bf08      	it	eq
 8006e7a:	6031      	streq	r1, [r6, #0]
 8006e7c:	5162      	str	r2, [r4, r5]
 8006e7e:	604b      	str	r3, [r1, #4]
 8006e80:	4638      	mov	r0, r7
 8006e82:	f104 060b 	add.w	r6, r4, #11
 8006e86:	f000 fa69 	bl	800735c <__malloc_unlock>
 8006e8a:	f026 0607 	bic.w	r6, r6, #7
 8006e8e:	1d23      	adds	r3, r4, #4
 8006e90:	1af2      	subs	r2, r6, r3
 8006e92:	d0b6      	beq.n	8006e02 <_malloc_r+0x22>
 8006e94:	1b9b      	subs	r3, r3, r6
 8006e96:	50a3      	str	r3, [r4, r2]
 8006e98:	e7b3      	b.n	8006e02 <_malloc_r+0x22>
 8006e9a:	6862      	ldr	r2, [r4, #4]
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	bf0c      	ite	eq
 8006ea0:	6032      	streq	r2, [r6, #0]
 8006ea2:	605a      	strne	r2, [r3, #4]
 8006ea4:	e7ec      	b.n	8006e80 <_malloc_r+0xa0>
 8006ea6:	4623      	mov	r3, r4
 8006ea8:	6864      	ldr	r4, [r4, #4]
 8006eaa:	e7b2      	b.n	8006e12 <_malloc_r+0x32>
 8006eac:	4634      	mov	r4, r6
 8006eae:	6876      	ldr	r6, [r6, #4]
 8006eb0:	e7b9      	b.n	8006e26 <_malloc_r+0x46>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	f000 fa50 	bl	800735c <__malloc_unlock>
 8006ebc:	e7a1      	b.n	8006e02 <_malloc_r+0x22>
 8006ebe:	6025      	str	r5, [r4, #0]
 8006ec0:	e7de      	b.n	8006e80 <_malloc_r+0xa0>
 8006ec2:	bf00      	nop
 8006ec4:	20000408 	.word	0x20000408

08006ec8 <__sfputc_r>:
 8006ec8:	6893      	ldr	r3, [r2, #8]
 8006eca:	b410      	push	{r4}
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	6093      	str	r3, [r2, #8]
 8006ed2:	da07      	bge.n	8006ee4 <__sfputc_r+0x1c>
 8006ed4:	6994      	ldr	r4, [r2, #24]
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	db01      	blt.n	8006ede <__sfputc_r+0x16>
 8006eda:	290a      	cmp	r1, #10
 8006edc:	d102      	bne.n	8006ee4 <__sfputc_r+0x1c>
 8006ede:	bc10      	pop	{r4}
 8006ee0:	f7fe ba00 	b.w	80052e4 <__swbuf_r>
 8006ee4:	6813      	ldr	r3, [r2, #0]
 8006ee6:	1c58      	adds	r0, r3, #1
 8006ee8:	6010      	str	r0, [r2, #0]
 8006eea:	7019      	strb	r1, [r3, #0]
 8006eec:	4608      	mov	r0, r1
 8006eee:	bc10      	pop	{r4}
 8006ef0:	4770      	bx	lr

08006ef2 <__sfputs_r>:
 8006ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	460f      	mov	r7, r1
 8006ef8:	4614      	mov	r4, r2
 8006efa:	18d5      	adds	r5, r2, r3
 8006efc:	42ac      	cmp	r4, r5
 8006efe:	d101      	bne.n	8006f04 <__sfputs_r+0x12>
 8006f00:	2000      	movs	r0, #0
 8006f02:	e007      	b.n	8006f14 <__sfputs_r+0x22>
 8006f04:	463a      	mov	r2, r7
 8006f06:	4630      	mov	r0, r6
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	f7ff ffdc 	bl	8006ec8 <__sfputc_r>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d1f3      	bne.n	8006efc <__sfputs_r+0xa>
 8006f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f18 <_vfiprintf_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	4614      	mov	r4, r2
 8006f20:	4698      	mov	r8, r3
 8006f22:	4606      	mov	r6, r0
 8006f24:	b09d      	sub	sp, #116	; 0x74
 8006f26:	b118      	cbz	r0, 8006f30 <_vfiprintf_r+0x18>
 8006f28:	6983      	ldr	r3, [r0, #24]
 8006f2a:	b90b      	cbnz	r3, 8006f30 <_vfiprintf_r+0x18>
 8006f2c:	f7ff fa2c 	bl	8006388 <__sinit>
 8006f30:	4b89      	ldr	r3, [pc, #548]	; (8007158 <_vfiprintf_r+0x240>)
 8006f32:	429d      	cmp	r5, r3
 8006f34:	d11b      	bne.n	8006f6e <_vfiprintf_r+0x56>
 8006f36:	6875      	ldr	r5, [r6, #4]
 8006f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d405      	bmi.n	8006f4a <_vfiprintf_r+0x32>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	059a      	lsls	r2, r3, #22
 8006f42:	d402      	bmi.n	8006f4a <_vfiprintf_r+0x32>
 8006f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f46:	f7ff fac2 	bl	80064ce <__retarget_lock_acquire_recursive>
 8006f4a:	89ab      	ldrh	r3, [r5, #12]
 8006f4c:	071b      	lsls	r3, r3, #28
 8006f4e:	d501      	bpl.n	8006f54 <_vfiprintf_r+0x3c>
 8006f50:	692b      	ldr	r3, [r5, #16]
 8006f52:	b9eb      	cbnz	r3, 8006f90 <_vfiprintf_r+0x78>
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7fe fa16 	bl	8005388 <__swsetup_r>
 8006f5c:	b1c0      	cbz	r0, 8006f90 <_vfiprintf_r+0x78>
 8006f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f60:	07dc      	lsls	r4, r3, #31
 8006f62:	d50e      	bpl.n	8006f82 <_vfiprintf_r+0x6a>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	b01d      	add	sp, #116	; 0x74
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	4b7b      	ldr	r3, [pc, #492]	; (800715c <_vfiprintf_r+0x244>)
 8006f70:	429d      	cmp	r5, r3
 8006f72:	d101      	bne.n	8006f78 <_vfiprintf_r+0x60>
 8006f74:	68b5      	ldr	r5, [r6, #8]
 8006f76:	e7df      	b.n	8006f38 <_vfiprintf_r+0x20>
 8006f78:	4b79      	ldr	r3, [pc, #484]	; (8007160 <_vfiprintf_r+0x248>)
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	bf08      	it	eq
 8006f7e:	68f5      	ldreq	r5, [r6, #12]
 8006f80:	e7da      	b.n	8006f38 <_vfiprintf_r+0x20>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	0598      	lsls	r0, r3, #22
 8006f86:	d4ed      	bmi.n	8006f64 <_vfiprintf_r+0x4c>
 8006f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f8a:	f7ff faa1 	bl	80064d0 <__retarget_lock_release_recursive>
 8006f8e:	e7e9      	b.n	8006f64 <_vfiprintf_r+0x4c>
 8006f90:	2300      	movs	r3, #0
 8006f92:	9309      	str	r3, [sp, #36]	; 0x24
 8006f94:	2320      	movs	r3, #32
 8006f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f9a:	2330      	movs	r3, #48	; 0x30
 8006f9c:	f04f 0901 	mov.w	r9, #1
 8006fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007164 <_vfiprintf_r+0x24c>
 8006fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fac:	4623      	mov	r3, r4
 8006fae:	469a      	mov	sl, r3
 8006fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb4:	b10a      	cbz	r2, 8006fba <_vfiprintf_r+0xa2>
 8006fb6:	2a25      	cmp	r2, #37	; 0x25
 8006fb8:	d1f9      	bne.n	8006fae <_vfiprintf_r+0x96>
 8006fba:	ebba 0b04 	subs.w	fp, sl, r4
 8006fbe:	d00b      	beq.n	8006fd8 <_vfiprintf_r+0xc0>
 8006fc0:	465b      	mov	r3, fp
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f7ff ff93 	bl	8006ef2 <__sfputs_r>
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f000 80aa 	beq.w	8007126 <_vfiprintf_r+0x20e>
 8006fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd4:	445a      	add	r2, fp
 8006fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80a2 	beq.w	8007126 <_vfiprintf_r+0x20e>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fec:	f10a 0a01 	add.w	sl, sl, #1
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	9307      	str	r3, [sp, #28]
 8006ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8006ffa:	4654      	mov	r4, sl
 8006ffc:	2205      	movs	r2, #5
 8006ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007002:	4858      	ldr	r0, [pc, #352]	; (8007164 <_vfiprintf_r+0x24c>)
 8007004:	f7ff fad2 	bl	80065ac <memchr>
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	b9d8      	cbnz	r0, 8007044 <_vfiprintf_r+0x12c>
 800700c:	06d1      	lsls	r1, r2, #27
 800700e:	bf44      	itt	mi
 8007010:	2320      	movmi	r3, #32
 8007012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007016:	0713      	lsls	r3, r2, #28
 8007018:	bf44      	itt	mi
 800701a:	232b      	movmi	r3, #43	; 0x2b
 800701c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007020:	f89a 3000 	ldrb.w	r3, [sl]
 8007024:	2b2a      	cmp	r3, #42	; 0x2a
 8007026:	d015      	beq.n	8007054 <_vfiprintf_r+0x13c>
 8007028:	4654      	mov	r4, sl
 800702a:	2000      	movs	r0, #0
 800702c:	f04f 0c0a 	mov.w	ip, #10
 8007030:	9a07      	ldr	r2, [sp, #28]
 8007032:	4621      	mov	r1, r4
 8007034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007038:	3b30      	subs	r3, #48	; 0x30
 800703a:	2b09      	cmp	r3, #9
 800703c:	d94e      	bls.n	80070dc <_vfiprintf_r+0x1c4>
 800703e:	b1b0      	cbz	r0, 800706e <_vfiprintf_r+0x156>
 8007040:	9207      	str	r2, [sp, #28]
 8007042:	e014      	b.n	800706e <_vfiprintf_r+0x156>
 8007044:	eba0 0308 	sub.w	r3, r0, r8
 8007048:	fa09 f303 	lsl.w	r3, r9, r3
 800704c:	4313      	orrs	r3, r2
 800704e:	46a2      	mov	sl, r4
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	e7d2      	b.n	8006ffa <_vfiprintf_r+0xe2>
 8007054:	9b03      	ldr	r3, [sp, #12]
 8007056:	1d19      	adds	r1, r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	9103      	str	r1, [sp, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	bfbb      	ittet	lt
 8007060:	425b      	neglt	r3, r3
 8007062:	f042 0202 	orrlt.w	r2, r2, #2
 8007066:	9307      	strge	r3, [sp, #28]
 8007068:	9307      	strlt	r3, [sp, #28]
 800706a:	bfb8      	it	lt
 800706c:	9204      	strlt	r2, [sp, #16]
 800706e:	7823      	ldrb	r3, [r4, #0]
 8007070:	2b2e      	cmp	r3, #46	; 0x2e
 8007072:	d10c      	bne.n	800708e <_vfiprintf_r+0x176>
 8007074:	7863      	ldrb	r3, [r4, #1]
 8007076:	2b2a      	cmp	r3, #42	; 0x2a
 8007078:	d135      	bne.n	80070e6 <_vfiprintf_r+0x1ce>
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	3402      	adds	r4, #2
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	9203      	str	r2, [sp, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	bfb8      	it	lt
 8007088:	f04f 33ff 	movlt.w	r3, #4294967295
 800708c:	9305      	str	r3, [sp, #20]
 800708e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007168 <_vfiprintf_r+0x250>
 8007092:	2203      	movs	r2, #3
 8007094:	4650      	mov	r0, sl
 8007096:	7821      	ldrb	r1, [r4, #0]
 8007098:	f7ff fa88 	bl	80065ac <memchr>
 800709c:	b140      	cbz	r0, 80070b0 <_vfiprintf_r+0x198>
 800709e:	2340      	movs	r3, #64	; 0x40
 80070a0:	eba0 000a 	sub.w	r0, r0, sl
 80070a4:	fa03 f000 	lsl.w	r0, r3, r0
 80070a8:	9b04      	ldr	r3, [sp, #16]
 80070aa:	3401      	adds	r4, #1
 80070ac:	4303      	orrs	r3, r0
 80070ae:	9304      	str	r3, [sp, #16]
 80070b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b4:	2206      	movs	r2, #6
 80070b6:	482d      	ldr	r0, [pc, #180]	; (800716c <_vfiprintf_r+0x254>)
 80070b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070bc:	f7ff fa76 	bl	80065ac <memchr>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d03f      	beq.n	8007144 <_vfiprintf_r+0x22c>
 80070c4:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <_vfiprintf_r+0x258>)
 80070c6:	bb1b      	cbnz	r3, 8007110 <_vfiprintf_r+0x1f8>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	3307      	adds	r3, #7
 80070cc:	f023 0307 	bic.w	r3, r3, #7
 80070d0:	3308      	adds	r3, #8
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d6:	443b      	add	r3, r7
 80070d8:	9309      	str	r3, [sp, #36]	; 0x24
 80070da:	e767      	b.n	8006fac <_vfiprintf_r+0x94>
 80070dc:	460c      	mov	r4, r1
 80070de:	2001      	movs	r0, #1
 80070e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80070e4:	e7a5      	b.n	8007032 <_vfiprintf_r+0x11a>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f04f 0c0a 	mov.w	ip, #10
 80070ec:	4619      	mov	r1, r3
 80070ee:	3401      	adds	r4, #1
 80070f0:	9305      	str	r3, [sp, #20]
 80070f2:	4620      	mov	r0, r4
 80070f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070f8:	3a30      	subs	r2, #48	; 0x30
 80070fa:	2a09      	cmp	r2, #9
 80070fc:	d903      	bls.n	8007106 <_vfiprintf_r+0x1ee>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0c5      	beq.n	800708e <_vfiprintf_r+0x176>
 8007102:	9105      	str	r1, [sp, #20]
 8007104:	e7c3      	b.n	800708e <_vfiprintf_r+0x176>
 8007106:	4604      	mov	r4, r0
 8007108:	2301      	movs	r3, #1
 800710a:	fb0c 2101 	mla	r1, ip, r1, r2
 800710e:	e7f0      	b.n	80070f2 <_vfiprintf_r+0x1da>
 8007110:	ab03      	add	r3, sp, #12
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	462a      	mov	r2, r5
 8007116:	4630      	mov	r0, r6
 8007118:	4b16      	ldr	r3, [pc, #88]	; (8007174 <_vfiprintf_r+0x25c>)
 800711a:	a904      	add	r1, sp, #16
 800711c:	f7fd fc92 	bl	8004a44 <_printf_float>
 8007120:	4607      	mov	r7, r0
 8007122:	1c78      	adds	r0, r7, #1
 8007124:	d1d6      	bne.n	80070d4 <_vfiprintf_r+0x1bc>
 8007126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	d405      	bmi.n	8007138 <_vfiprintf_r+0x220>
 800712c:	89ab      	ldrh	r3, [r5, #12]
 800712e:	059a      	lsls	r2, r3, #22
 8007130:	d402      	bmi.n	8007138 <_vfiprintf_r+0x220>
 8007132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007134:	f7ff f9cc 	bl	80064d0 <__retarget_lock_release_recursive>
 8007138:	89ab      	ldrh	r3, [r5, #12]
 800713a:	065b      	lsls	r3, r3, #25
 800713c:	f53f af12 	bmi.w	8006f64 <_vfiprintf_r+0x4c>
 8007140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007142:	e711      	b.n	8006f68 <_vfiprintf_r+0x50>
 8007144:	ab03      	add	r3, sp, #12
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	462a      	mov	r2, r5
 800714a:	4630      	mov	r0, r6
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <_vfiprintf_r+0x25c>)
 800714e:	a904      	add	r1, sp, #16
 8007150:	f7fd ff14 	bl	8004f7c <_printf_i>
 8007154:	e7e4      	b.n	8007120 <_vfiprintf_r+0x208>
 8007156:	bf00      	nop
 8007158:	080075f8 	.word	0x080075f8
 800715c:	08007618 	.word	0x08007618
 8007160:	080075d8 	.word	0x080075d8
 8007164:	08007794 	.word	0x08007794
 8007168:	0800779a 	.word	0x0800779a
 800716c:	0800779e 	.word	0x0800779e
 8007170:	08004a45 	.word	0x08004a45
 8007174:	08006ef3 	.word	0x08006ef3

08007178 <_sbrk_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	2300      	movs	r3, #0
 800717c:	4d05      	ldr	r5, [pc, #20]	; (8007194 <_sbrk_r+0x1c>)
 800717e:	4604      	mov	r4, r0
 8007180:	4608      	mov	r0, r1
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	f7fa fbd0 	bl	8001928 <_sbrk>
 8007188:	1c43      	adds	r3, r0, #1
 800718a:	d102      	bne.n	8007192 <_sbrk_r+0x1a>
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	b103      	cbz	r3, 8007192 <_sbrk_r+0x1a>
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	20000410 	.word	0x20000410

08007198 <__sread>:
 8007198:	b510      	push	{r4, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	f000 f8e2 	bl	8007368 <_read_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	bfab      	itete	ge
 80071a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071aa:	89a3      	ldrhlt	r3, [r4, #12]
 80071ac:	181b      	addge	r3, r3, r0
 80071ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b2:	bfac      	ite	ge
 80071b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071b6:	81a3      	strhlt	r3, [r4, #12]
 80071b8:	bd10      	pop	{r4, pc}

080071ba <__swrite>:
 80071ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	461f      	mov	r7, r3
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	4605      	mov	r5, r0
 80071c4:	05db      	lsls	r3, r3, #23
 80071c6:	460c      	mov	r4, r1
 80071c8:	4616      	mov	r6, r2
 80071ca:	d505      	bpl.n	80071d8 <__swrite+0x1e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	2200      	movs	r2, #0
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	f000 f898 	bl	8007308 <_lseek_r>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	4632      	mov	r2, r6
 80071dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	4628      	mov	r0, r5
 80071e4:	463b      	mov	r3, r7
 80071e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	f000 b817 	b.w	8007220 <_write_r>

080071f2 <__sseek>:
 80071f2:	b510      	push	{r4, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fa:	f000 f885 	bl	8007308 <_lseek_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	bf15      	itete	ne
 8007204:	6560      	strne	r0, [r4, #84]	; 0x54
 8007206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800720e:	81a3      	strheq	r3, [r4, #12]
 8007210:	bf18      	it	ne
 8007212:	81a3      	strhne	r3, [r4, #12]
 8007214:	bd10      	pop	{r4, pc}

08007216 <__sclose>:
 8007216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721a:	f000 b831 	b.w	8007280 <_close_r>
	...

08007220 <_write_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	2200      	movs	r2, #0
 800722a:	4d05      	ldr	r5, [pc, #20]	; (8007240 <_write_r+0x20>)
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fa fb2e 	bl	8001890 <_write>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_write_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_write_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20000410 	.word	0x20000410

08007244 <__assert_func>:
 8007244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007246:	4614      	mov	r4, r2
 8007248:	461a      	mov	r2, r3
 800724a:	4b09      	ldr	r3, [pc, #36]	; (8007270 <__assert_func+0x2c>)
 800724c:	4605      	mov	r5, r0
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68d8      	ldr	r0, [r3, #12]
 8007252:	b14c      	cbz	r4, 8007268 <__assert_func+0x24>
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <__assert_func+0x30>)
 8007256:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800725a:	9100      	str	r1, [sp, #0]
 800725c:	462b      	mov	r3, r5
 800725e:	4906      	ldr	r1, [pc, #24]	; (8007278 <__assert_func+0x34>)
 8007260:	f000 f81e 	bl	80072a0 <fiprintf>
 8007264:	f000 f89f 	bl	80073a6 <abort>
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <__assert_func+0x38>)
 800726a:	461c      	mov	r4, r3
 800726c:	e7f3      	b.n	8007256 <__assert_func+0x12>
 800726e:	bf00      	nop
 8007270:	2000000c 	.word	0x2000000c
 8007274:	080077a5 	.word	0x080077a5
 8007278:	080077b2 	.word	0x080077b2
 800727c:	080077e0 	.word	0x080077e0

08007280 <_close_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	2300      	movs	r3, #0
 8007284:	4d05      	ldr	r5, [pc, #20]	; (800729c <_close_r+0x1c>)
 8007286:	4604      	mov	r4, r0
 8007288:	4608      	mov	r0, r1
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	f7fa fb1c 	bl	80018c8 <_close>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_close_r+0x1a>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_close_r+0x1a>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000410 	.word	0x20000410

080072a0 <fiprintf>:
 80072a0:	b40e      	push	{r1, r2, r3}
 80072a2:	b503      	push	{r0, r1, lr}
 80072a4:	4601      	mov	r1, r0
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <fiprintf+0x20>)
 80072aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	f7ff fe31 	bl	8006f18 <_vfiprintf_r>
 80072b6:	b002      	add	sp, #8
 80072b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072bc:	b003      	add	sp, #12
 80072be:	4770      	bx	lr
 80072c0:	2000000c 	.word	0x2000000c

080072c4 <_fstat_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	2300      	movs	r3, #0
 80072c8:	4d06      	ldr	r5, [pc, #24]	; (80072e4 <_fstat_r+0x20>)
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	f7fa fb04 	bl	80018de <_fstat>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d102      	bne.n	80072e0 <_fstat_r+0x1c>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	b103      	cbz	r3, 80072e0 <_fstat_r+0x1c>
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
 80072e2:	bf00      	nop
 80072e4:	20000410 	.word	0x20000410

080072e8 <_isatty_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	2300      	movs	r3, #0
 80072ec:	4d05      	ldr	r5, [pc, #20]	; (8007304 <_isatty_r+0x1c>)
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa fb02 	bl	80018fc <_isatty>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_isatty_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_isatty_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	20000410 	.word	0x20000410

08007308 <_lseek_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	4611      	mov	r1, r2
 8007310:	2200      	movs	r2, #0
 8007312:	4d05      	ldr	r5, [pc, #20]	; (8007328 <_lseek_r+0x20>)
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f7fa fafa 	bl	8001910 <_lseek>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_lseek_r+0x1e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_lseek_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20000410 	.word	0x20000410

0800732c <__ascii_mbtowc>:
 800732c:	b082      	sub	sp, #8
 800732e:	b901      	cbnz	r1, 8007332 <__ascii_mbtowc+0x6>
 8007330:	a901      	add	r1, sp, #4
 8007332:	b142      	cbz	r2, 8007346 <__ascii_mbtowc+0x1a>
 8007334:	b14b      	cbz	r3, 800734a <__ascii_mbtowc+0x1e>
 8007336:	7813      	ldrb	r3, [r2, #0]
 8007338:	600b      	str	r3, [r1, #0]
 800733a:	7812      	ldrb	r2, [r2, #0]
 800733c:	1e10      	subs	r0, r2, #0
 800733e:	bf18      	it	ne
 8007340:	2001      	movne	r0, #1
 8007342:	b002      	add	sp, #8
 8007344:	4770      	bx	lr
 8007346:	4610      	mov	r0, r2
 8007348:	e7fb      	b.n	8007342 <__ascii_mbtowc+0x16>
 800734a:	f06f 0001 	mvn.w	r0, #1
 800734e:	e7f8      	b.n	8007342 <__ascii_mbtowc+0x16>

08007350 <__malloc_lock>:
 8007350:	4801      	ldr	r0, [pc, #4]	; (8007358 <__malloc_lock+0x8>)
 8007352:	f7ff b8bc 	b.w	80064ce <__retarget_lock_acquire_recursive>
 8007356:	bf00      	nop
 8007358:	20000405 	.word	0x20000405

0800735c <__malloc_unlock>:
 800735c:	4801      	ldr	r0, [pc, #4]	; (8007364 <__malloc_unlock+0x8>)
 800735e:	f7ff b8b7 	b.w	80064d0 <__retarget_lock_release_recursive>
 8007362:	bf00      	nop
 8007364:	20000405 	.word	0x20000405

08007368 <_read_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	4611      	mov	r1, r2
 8007370:	2200      	movs	r2, #0
 8007372:	4d05      	ldr	r5, [pc, #20]	; (8007388 <_read_r+0x20>)
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	f7fa fa6d 	bl	8001856 <_read>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_read_r+0x1e>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_read_r+0x1e>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000410 	.word	0x20000410

0800738c <__ascii_wctomb>:
 800738c:	4603      	mov	r3, r0
 800738e:	4608      	mov	r0, r1
 8007390:	b141      	cbz	r1, 80073a4 <__ascii_wctomb+0x18>
 8007392:	2aff      	cmp	r2, #255	; 0xff
 8007394:	d904      	bls.n	80073a0 <__ascii_wctomb+0x14>
 8007396:	228a      	movs	r2, #138	; 0x8a
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	4770      	bx	lr
 80073a0:	2001      	movs	r0, #1
 80073a2:	700a      	strb	r2, [r1, #0]
 80073a4:	4770      	bx	lr

080073a6 <abort>:
 80073a6:	2006      	movs	r0, #6
 80073a8:	b508      	push	{r3, lr}
 80073aa:	f000 f82b 	bl	8007404 <raise>
 80073ae:	2001      	movs	r0, #1
 80073b0:	f7fa fa47 	bl	8001842 <_exit>

080073b4 <_raise_r>:
 80073b4:	291f      	cmp	r1, #31
 80073b6:	b538      	push	{r3, r4, r5, lr}
 80073b8:	4604      	mov	r4, r0
 80073ba:	460d      	mov	r5, r1
 80073bc:	d904      	bls.n	80073c8 <_raise_r+0x14>
 80073be:	2316      	movs	r3, #22
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073ca:	b112      	cbz	r2, 80073d2 <_raise_r+0x1e>
 80073cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073d0:	b94b      	cbnz	r3, 80073e6 <_raise_r+0x32>
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 f830 	bl	8007438 <_getpid_r>
 80073d8:	462a      	mov	r2, r5
 80073da:	4601      	mov	r1, r0
 80073dc:	4620      	mov	r0, r4
 80073de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e2:	f000 b817 	b.w	8007414 <_kill_r>
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d00a      	beq.n	8007400 <_raise_r+0x4c>
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	d103      	bne.n	80073f6 <_raise_r+0x42>
 80073ee:	2316      	movs	r3, #22
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7e7      	b.n	80073c6 <_raise_r+0x12>
 80073f6:	2400      	movs	r4, #0
 80073f8:	4628      	mov	r0, r5
 80073fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073fe:	4798      	blx	r3
 8007400:	2000      	movs	r0, #0
 8007402:	e7e0      	b.n	80073c6 <_raise_r+0x12>

08007404 <raise>:
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <raise+0xc>)
 8007406:	4601      	mov	r1, r0
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f7ff bfd3 	b.w	80073b4 <_raise_r>
 800740e:	bf00      	nop
 8007410:	2000000c 	.word	0x2000000c

08007414 <_kill_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	2300      	movs	r3, #0
 8007418:	4d06      	ldr	r5, [pc, #24]	; (8007434 <_kill_r+0x20>)
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	f7fa f9fe 	bl	8001822 <_kill>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d102      	bne.n	8007430 <_kill_r+0x1c>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b103      	cbz	r3, 8007430 <_kill_r+0x1c>
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	20000410 	.word	0x20000410

08007438 <_getpid_r>:
 8007438:	f7fa b9ec 	b.w	8001814 <_getpid>

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
