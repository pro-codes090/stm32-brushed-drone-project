
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007388  08007388  00017388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077cc  080077cc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d4  080077d4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080077dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001d4  080079b0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080079b0  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e72  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  000310b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc9  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019763  00000000  00000000  000353d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d73  00000000  00000000  0004eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000913ca  00000000  00000000  000628af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b88  00000000  00000000  000f3c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f9804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800736c 	.word	0x0800736c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800736c 	.word	0x0800736c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b972 	b.w	8000d84 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14c      	bne.n	8000b62 <__udivmoddi4+0xaa>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d967      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	b153      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad8:	f1c3 0220 	rsb	r2, r3, #32
 8000adc:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ae0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fbbe f1f7 	udiv	r1, lr, r7
 8000af2:	fa1f f58c 	uxth.w	r5, ip
 8000af6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000afa:	fb01 f005 	mul.w	r0, r1, r5
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000b10:	f080 8119 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8116 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b24:	fb07 2210 	mls	r2, r7, r0, r2
 8000b28:	fb00 f505 	mul.w	r5, r0, r5
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8104 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8101 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	2100      	movs	r1, #0
 8000b52:	1b64      	subs	r4, r4, r5
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa6>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xc0>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ea 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d148      	bne.n	8000c12 <__udivmoddi4+0x15a>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xd2>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2c2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4696      	mov	lr, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa6>
 8000b98:	e9c6 4e00 	strd	r4, lr, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xea>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 808e 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000bac:	1a88      	subs	r0, r1, r2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0c17      	lsrs	r7, r2, #16
 8000bb2:	fa1f fe82 	uxth.w	lr, r2
 8000bb6:	fbb0 f5f7 	udiv	r5, r0, r7
 8000bba:	fb07 0015 	mls	r0, r7, r5, r0
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc4:	fb0e f005 	mul.w	r0, lr, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f200 80cc 	bhi.w	8000d74 <__udivmoddi4+0x2bc>
 8000bdc:	4645      	mov	r5, r8
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be4:	fb07 2210 	mls	r2, r7, r0, r2
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x150>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14e>
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	f200 80b4 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000c06:	4610      	mov	r0, r2
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c10:	e7a0      	b.n	8000b54 <__udivmoddi4+0x9c>
 8000c12:	f1c1 0720 	rsb	r7, r1, #32
 8000c16:	408b      	lsls	r3, r1
 8000c18:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c20:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c28:	fbba f8f9 	udiv	r8, sl, r9
 8000c2c:	408d      	lsls	r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	fa00 f501 	lsl.w	r5, r0, r1
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	0c1c      	lsrs	r4, r3, #16
 8000c46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c4a:	42a0      	cmp	r0, r4
 8000c4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c50:	d90b      	bls.n	8000c6a <__udivmoddi4+0x1b2>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5a:	f080 8086 	bcs.w	8000d6a <__udivmoddi4+0x2b2>
 8000c5e:	42a0      	cmp	r0, r4
 8000c60:	f240 8083 	bls.w	8000d6a <__udivmoddi4+0x2b2>
 8000c64:	f1a8 0802 	sub.w	r8, r8, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1a24      	subs	r4, r4, r0
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c72:	fb09 4413 	mls	r4, r9, r3, r4
 8000c76:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c7a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8a:	d26a      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d968      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000c90:	3b02      	subs	r3, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c98:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	46c8      	mov	r8, r9
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d067      	beq.n	8000d7e <__udivmoddi4+0x2c6>
 8000cae:	ebb5 0308 	subs.w	r3, r5, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	40cb      	lsrs	r3, r1
 8000cb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbc:	431f      	orrs	r7, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0020 	rsb	r0, r3, #32
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	409d      	lsls	r5, r3
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	4328      	orrs	r0, r5
 8000cde:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce2:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	0c02      	lsrs	r2, r0, #16
 8000cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf0:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf4:	4291      	cmp	r1, r2
 8000cf6:	fa04 f403 	lsl.w	r4, r4, r3
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x256>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d22f      	bcs.n	8000d66 <__udivmoddi4+0x2ae>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d92d      	bls.n	8000d66 <__udivmoddi4+0x2ae>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	fbb2 f1f7 	udiv	r1, r2, r7
 8000d14:	fb07 2211 	mls	r2, r7, r1, r2
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d1e:	fb01 f20e 	mul.w	r2, r1, lr
 8000d22:	4282      	cmp	r2, r0
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x280>
 8000d26:	eb1c 0000 	adds.w	r0, ip, r0
 8000d2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d2e:	d216      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d914      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000d34:	3902      	subs	r1, #2
 8000d36:	4460      	add	r0, ip
 8000d38:	1a80      	subs	r0, r0, r2
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4631      	mov	r1, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d46:	4671      	mov	r1, lr
 8000d48:	e6e9      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	e6fe      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb9 0802 	subs.w	r8, r9, r2
 8000d56:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a5      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	e7ea      	b.n	8000d38 <__udivmoddi4+0x280>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e796      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d66:	4645      	mov	r5, r8
 8000d68:	e7d1      	b.n	8000d0e <__udivmoddi4+0x256>
 8000d6a:	46d0      	mov	r8, sl
 8000d6c:	e77d      	b.n	8000c6a <__udivmoddi4+0x1b2>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e749      	b.n	8000c08 <__udivmoddi4+0x150>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e731      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xdc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	e6ed      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f000 fe7d 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f89b 	bl	8000ecc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Init();
 8000d96:	f000 fe79 	bl	8001a8c <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 fad1 	bl	8001340 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d9e:	f000 f8d5 	bl	8000f4c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000da2:	f000 faa3 	bl	80012ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000da6:	f000 f937 	bl	8001018 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000daa:	f000 fa37 	bl	800121c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000dae:	f000 f9df 	bl	8001170 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000db2:	f000 f8fb 	bl	8000fac <MX_SPI1_Init>
   //get_Accl(&hi2c1, &Accl_Data) ;
   //
   //printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);

   // config your wirelss module such as a lora module
   config_wireless();
 8000db6:	f000 fb1f 	bl	80013f8 <config_wireless>
   // recieve the channels
   printf("recieving dummy \n") ;
 8000dba:	483d      	ldr	r0, [pc, #244]	; (8000eb0 <main+0x128>)
 8000dbc:	f004 fb48 	bl	8005450 <puts>
   HAL_Delay(1000) ;
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f000 fec4 	bl	8001b50 <HAL_Delay>
   HAL_Delay(1000) ;
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fec0 	bl	8001b50 <HAL_Delay>

	for (uint8_t i = 0;  i < 10; i++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	e025      	b.n	8000e22 <main+0x9a>
	  ret = lora_prasePacket(&lora);
 8000dd6:	4837      	ldr	r0, [pc, #220]	; (8000eb4 <main+0x12c>)
 8000dd8:	f003 fce0 	bl	800479c <lora_prasePacket>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <main+0x130>)
 8000de2:	701a      	strb	r2, [r3, #0]
	  if(ret){
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <main+0x130>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d017      	beq.n	8000e1c <main+0x94>
		uint8_t i=0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	71bb      	strb	r3, [r7, #6]
		while( i <  8){
 8000df0:	e00a      	b.n	8000e08 <main+0x80>
		buff[i] = lora_read(&lora);
 8000df2:	79bc      	ldrb	r4, [r7, #6]
 8000df4:	482f      	ldr	r0, [pc, #188]	; (8000eb4 <main+0x12c>)
 8000df6:	f003 fd41 	bl	800487c <lora_read>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <main+0x134>)
 8000e00:	551a      	strb	r2, [r3, r4]
		i++;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	3301      	adds	r3, #1
 8000e06:	71bb      	strb	r3, [r7, #6]
		while( i <  8){
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9f1      	bls.n	8000df2 <main+0x6a>
		 }
		printf("%s \n" , buff);
 8000e0e:	492b      	ldr	r1, [pc, #172]	; (8000ebc <main+0x134>)
 8000e10:	482b      	ldr	r0, [pc, #172]	; (8000ec0 <main+0x138>)
 8000e12:	f004 fab7 	bl	8005384 <iprintf>
		HAL_Delay(10);
 8000e16:	200a      	movs	r0, #10
 8000e18:	f000 fe9a 	bl	8001b50 <HAL_Delay>
	for (uint8_t i = 0;  i < 10; i++) {
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	d9d6      	bls.n	8000dd6 <main+0x4e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rcv_channel();
 8000e28:	f000 fb26 	bl	8001478 <rcv_channel>

	recived_channels.Roll    = buff[1] << 8 | buff[0] ;
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <main+0x134>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <main+0x134>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <main+0x13c>)
 8000e40:	801a      	strh	r2, [r3, #0]
	recived_channels.Pitch   = buff[3] << 8 | buff[2] ;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <main+0x134>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <main+0x134>)
 8000e4c:	789b      	ldrb	r3, [r3, #2]
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b21a      	sxth	r2, r3
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <main+0x13c>)
 8000e56:	805a      	strh	r2, [r3, #2]
	recived_channels.Throtle = buff[5] << 8 | buff[4] ;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <main+0x134>)
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <main+0x134>)
 8000e62:	791b      	ldrb	r3, [r3, #4]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <main+0x13c>)
 8000e6e:	809a      	strh	r2, [r3, #4]
	recived_channels.Yaw     = buff[7] << 8 | buff[6] ;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <main+0x134>)
 8000e72:	79db      	ldrb	r3, [r3, #7]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b21a      	sxth	r2, r3
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <main+0x134>)
 8000e7a:	799b      	ldrb	r3, [r3, #6]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <main+0x13c>)
 8000e84:	80da      	strh	r2, [r3, #6]

	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <main+0x13c>)
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <main+0x13c>)
 8000e90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e94:	461a      	mov	r2, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <main+0x13c>)
 8000e98:	889b      	ldrh	r3, [r3, #4]
	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000e9a:	4618      	mov	r0, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <main+0x13c>)
 8000e9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <main+0x140>)
 8000ea8:	f004 fa6c 	bl	8005384 <iprintf>
	  rcv_channel();
 8000eac:	e7bc      	b.n	8000e28 <main+0xa0>
 8000eae:	bf00      	nop
 8000eb0:	08007388 	.word	0x08007388
 8000eb4:	200003d8 	.word	0x200003d8
 8000eb8:	200003e0 	.word	0x200003e0
 8000ebc:	200003e4 	.word	0x200003e4
 8000ec0:	0800739c 	.word	0x0800739c
 8000ec4:	200003f4 	.word	0x200003f4
 8000ec8:	080073a4 	.word	0x080073a4

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2228      	movs	r2, #40	; 0x28
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fb98 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efa:	2302      	movs	r3, #2
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000efe:	2300      	movs	r3, #0
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fa32 	bl	8002374 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000f16:	f000 faf5 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fca0 	bl	8002878 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000f3e:	f000 fae1 	bl	8001504 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3740      	adds	r7, #64	; 0x40
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f52:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <MX_I2C1_Init+0x58>)
 8000f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_I2C1_Init+0x5c>)
 8000f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f62:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_I2C1_Init+0x54>)
 8000f8c:	f001 f8ae 	bl	80020ec <HAL_I2C_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f96:	f000 fab5 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f0 	.word	0x200001f0
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	00061a80 	.word	0x00061a80

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f001 fdc9 	bl	8002b94 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 fa7c 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000244 	.word	0x20000244
 8001014:	40013000 	.word	0x40013000

08001018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b092      	sub	sp, #72	; 0x48
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800101e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]
 800103a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2220      	movs	r2, #32
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fae4 	bl	8005610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <MX_TIM1_Init+0x150>)
 800104a:	4a48      	ldr	r2, [pc, #288]	; (800116c <MX_TIM1_Init+0x154>)
 800104c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_TIM1_Init+0x150>)
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_TIM1_Init+0x150>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_TIM1_Init+0x150>)
 800105c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_TIM1_Init+0x150>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <MX_TIM1_Init+0x150>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_TIM1_Init+0x150>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001074:	483c      	ldr	r0, [pc, #240]	; (8001168 <MX_TIM1_Init+0x150>)
 8001076:	f002 fb70 	bl	800375a <HAL_TIM_PWM_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001080:	f000 fa40 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800108c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001090:	4619      	mov	r1, r3
 8001092:	4835      	ldr	r0, [pc, #212]	; (8001168 <MX_TIM1_Init+0x150>)
 8001094:	f002 ffe4 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 fa31 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	4828      	ldr	r0, [pc, #160]	; (8001168 <MX_TIM1_Init+0x150>)
 80010c8:	f002 fcfa 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80010d2:	f000 fa17 	bl	8001504 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 80010d6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	2204      	movs	r2, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	4820      	ldr	r0, [pc, #128]	; (8001168 <MX_TIM1_Init+0x150>)
 80010e6:	f002 fceb 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010f0:	f000 fa08 	bl	8001504 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	2208      	movs	r2, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <MX_TIM1_Init+0x150>)
 8001102:	f002 fcdd 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800110c:	f000 f9fa 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	220c      	movs	r2, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_TIM1_Init+0x150>)
 800111a:	f002 fcd1 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001124:	f000 f9ee 	bl	8001504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4619      	mov	r1, r3
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM1_Init+0x150>)
 800114c:	f002 ffe6 	bl	800411c <HAL_TIMEx_ConfigBreakDeadTime>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001156:	f000 f9d5 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM1_Init+0x150>)
 800115c:	f000 fad8 	bl	8001710 <HAL_TIM_MspPostInit>

}
 8001160:	bf00      	nop
 8001162:	3748      	adds	r7, #72	; 0x48
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000029c 	.word	0x2000029c
 800116c:	40012c00 	.word	0x40012c00

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_TIM2_Init+0xa8>)
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_TIM2_Init+0xa8>)
 800119c:	2264      	movs	r2, #100	; 0x64
 800119e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011a8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80011ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011bc:	f002 fa7e 	bl	80036bc <HAL_TIM_OC_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011c6:	f000 f99d 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	4619      	mov	r1, r3
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <MX_TIM2_Init+0xa8>)
 80011da:	f002 ff41 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011e4:	f000 f98e 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM2_Init+0xa8>)
 8001200:	f002 fc02 	bl	8003a08 <HAL_TIM_OC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800120a:	f000 f97b 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002e4 	.word	0x200002e4

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001240:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <MX_TIM3_Init+0xcc>)
 8001242:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001246:	2264      	movs	r2, #100	; 0x64
 8001248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_TIM3_Init+0xc8>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001252:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <MX_TIM3_Init+0xc8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001266:	f002 fa78 	bl	800375a <HAL_TIM_PWM_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 f948 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4619      	mov	r1, r3
 8001282:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_TIM3_Init+0xc8>)
 8001284:	f002 feec 	bl	8004060 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800128e:	f000 f939 	bl	8001504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001292:	2360      	movs	r3, #96	; 0x60
 8001294:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001296:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2208      	movs	r2, #8
 80012a8:	4619      	mov	r1, r3
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_TIM3_Init+0xc8>)
 80012ac:	f002 fc08 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012b6:	f000 f925 	bl	8001504 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	220c      	movs	r2, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM3_Init+0xc8>)
 80012c6:	f002 fbfb 	bl	8003ac0 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80012d0:	f000 f918 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM3_Init+0xc8>)
 80012d6:	f000 fa1b 	bl	8001710 <HAL_TIM_MspPostInit>

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000032c 	.word	0x2000032c
 80012e8:	40000400 	.word	0x40000400

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <MX_USART2_UART_Init+0x50>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART2_UART_Init+0x4c>)
 8001324:	f002 ff5d 	bl	80041e2 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132e:	f000 f8e9 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000374 	.word	0x20000374
 800133c:	40004400 	.word	0x40004400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_GPIO_Init+0xac>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <MX_GPIO_Init+0xac>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_GPIO_Init+0xac>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_GPIO_Init+0xac>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_GPIO_Init+0xac>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_GPIO_Init+0xac>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2110      	movs	r1, #16
 8001388:	4819      	ldr	r0, [pc, #100]	; (80013f0 <MX_GPIO_Init+0xb0>)
 800138a:	f000 fe97 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <MX_GPIO_Init+0xb4>)
 8001396:	f000 fe91 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139a:	2310      	movs	r3, #16
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2302      	movs	r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <MX_GPIO_Init+0xb0>)
 80013b2:	f000 fcff 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4809      	ldr	r0, [pc, #36]	; (80013f4 <MX_GPIO_Init+0xb4>)
 80013d0:	f000 fcf0 	bl	8001db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_GPIO_Init+0xb4>)
 80013e0:	f000 fce8 	bl	8001db4 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <config_wireless>:
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , RESET) ;
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 , RESET) ;

}

void config_wireless(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <config_wireless+0x64>)
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <config_wireless+0x68>)
 8001400:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <config_wireless+0x64>)
 8001404:	2220      	movs	r2, #32
 8001406:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <config_wireless+0x64>)
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <config_wireless+0x6c>)
 800140c:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <config_wireless+0x64>)
 8001410:	2210      	movs	r2, #16
 8001412:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <config_wireless+0x64>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <config_wireless+0x68>)
 8001418:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <config_wireless+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <config_wireless+0x64>)
 8001424:	4a10      	ldr	r2, [pc, #64]	; (8001468 <config_wireless+0x70>)
 8001426:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <config_wireless+0x74>)
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <config_wireless+0x64>)
 800142c:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <config_wireless+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 8001434:	e006      	b.n	8001444 <config_wireless+0x4c>
	printf("init Failed \n");
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <config_wireless+0x78>)
 8001438:	f004 f80a 	bl	8005450 <puts>
	HAL_Delay(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f000 fb86 	bl	8001b50 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <config_wireless+0x74>)
 8001446:	f003 f939 	bl	80046bc <lora_init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f2      	bne.n	8001436 <config_wireless+0x3e>
	}
	printf("init success \n");
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <config_wireless+0x7c>)
 8001452:	f003 fffd 	bl	8005450 <puts>

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200003bc 	.word	0x200003bc
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40010800 	.word	0x40010800
 8001468:	20000244 	.word	0x20000244
 800146c:	200003d8 	.word	0x200003d8
 8001470:	080073e0 	.word	0x080073e0
 8001474:	080073f0 	.word	0x080073f0

08001478 <rcv_channel>:

void rcv_channel(){
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

	  ret = lora_prasePacket(&lora);
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <rcv_channel+0x48>)
 8001480:	f003 f98c 	bl	800479c <lora_prasePacket>
 8001484:	4603      	mov	r3, r0
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <rcv_channel+0x4c>)
 800148a:	701a      	strb	r2, [r3, #0]
	  if(ret){
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <rcv_channel+0x4c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d010      	beq.n	80014b6 <rcv_channel+0x3e>
		uint8_t i=0;
 8001494:	2300      	movs	r3, #0
 8001496:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 8001498:	e00a      	b.n	80014b0 <rcv_channel+0x38>
		buff[i] = lora_read(&lora);
 800149a:	79fc      	ldrb	r4, [r7, #7]
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <rcv_channel+0x48>)
 800149e:	f003 f9ed 	bl	800487c <lora_read>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <rcv_channel+0x50>)
 80014a8:	551a      	strb	r2, [r3, r4]
		i++;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3301      	adds	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d9f1      	bls.n	800149a <rcv_channel+0x22>
	     }
	  }

}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003d8 	.word	0x200003d8
 80014c4:	200003e0 	.word	0x200003e0
 80014c8:	200003e4 	.word	0x200003e4

080014cc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <__io_putchar>:

void __io_putchar(int ch) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014e8:	1d39      	adds	r1, r7, #4
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2201      	movs	r2, #1
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <__io_putchar+0x20>)
 80014f2:	f002 fec6 	bl	8004282 <HAL_UART_Transmit>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000374 	.word	0x20000374

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_MspInit+0x40>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_MspInit+0x40>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_MspInit+0x40>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_MspInit+0x40>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_MspInit+0x40>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_MspInit+0x40>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x70>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d123      	bne.n	80015bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001590:	2312      	movs	r3, #18
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <HAL_I2C_MspInit+0x78>)
 80015a0:	f000 fc08 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_I2C_MspInit+0x74>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40005400 	.word	0x40005400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010c00 	.word	0x40010c00

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_SPI_MspInit+0x88>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d12f      	bne.n	8001650 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_SPI_MspInit+0x8c>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_SPI_MspInit+0x8c>)
 80015f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x8c>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_SPI_MspInit+0x8c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <HAL_SPI_MspInit+0x8c>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_SPI_MspInit+0x8c>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	4619      	mov	r1, r3
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <HAL_SPI_MspInit+0x90>)
 8001634:	f000 fbbe 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_SPI_MspInit+0x90>)
 800164c:	f000 fbb2 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800

08001664 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <HAL_TIM_PWM_MspInit+0x58>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10c      	bne.n	8001690 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800167c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001680:	6193      	str	r3, [r2, #24]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800168e:	e010      	b.n	80016b2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10b      	bne.n	80016b2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40000400 	.word	0x40000400

080016c8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d113      	bne.n	8001702 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_OC_MspInit+0x44>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_TIM_OC_MspInit+0x44>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_OC_MspInit+0x44>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201c      	movs	r0, #28
 80016f8:	f000 fb25 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 fb3e 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_TIM_MspPostInit+0x98>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d119      	bne.n	8001764 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001748:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800174c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <HAL_TIM_MspPostInit+0xa0>)
 800175e:	f000 fb29 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001762:	e01c      	b.n	800179e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_TIM_MspPostInit+0xa4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d117      	bne.n	800179e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_TIM_MspPostInit+0x9c>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001786:	2303      	movs	r3, #3
 8001788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2302      	movs	r3, #2
 8001790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	4619      	mov	r1, r3
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <HAL_TIM_MspPostInit+0xa8>)
 800179a:	f000 fb0b 	bl	8001db4 <HAL_GPIO_Init>
}
 800179e:	bf00      	nop
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40000400 	.word	0x40000400
 80017b8:	40010c00 	.word	0x40010c00

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x88>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d12f      	bne.n	800183c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e6:	61d3      	str	r3, [r2, #28]
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0x8c>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180c:	2304      	movs	r3, #4
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <HAL_UART_MspInit+0x90>)
 8001820:	f000 fac8 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001824:	2308      	movs	r3, #8
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_MspInit+0x90>)
 8001838:	f000 fabc 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40004400 	.word	0x40004400
 8001848:	40021000 	.word	0x40021000
 800184c:	40010800 	.word	0x40010800

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 f93f 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM2_IRQHandler+0x10>)
 80018a6:	f001 ffa7 	bl	80037f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002e4 	.word	0x200002e4

080018b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <_kill>:

int _kill(int pid, int sig)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018cc:	f003 fef2 	bl	80056b4 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2216      	movs	r2, #22
 80018d4:	601a      	str	r2, [r3, #0]
  return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_exit>:

void _exit (int status)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ea:	f04f 31ff 	mov.w	r1, #4294967295
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffe7 	bl	80018c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f4:	e7fe      	b.n	80018f4 <_exit+0x12>

080018f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e00a      	b.n	800191e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001908:	f3af 8000 	nop.w
 800190c:	4601      	mov	r1, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf0      	blt.n	8001908 <_read+0x12>
  }

  return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e009      	b.n	8001956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fdc8 	bl	80014e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf1      	blt.n	8001942 <_write+0x12>
  }
  return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_close>:

int _close(int file)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
  return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <_isatty>:

int _isatty(int file)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f003 fe5c 	bl	80056b4 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20005000 	.word	0x20005000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200003fc 	.word	0x200003fc
 8001a30:	20000558 	.word	0x20000558

08001a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff fff8 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a46:	490c      	ldr	r1, [pc, #48]	; (8001a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a5c:	4c09      	ldr	r4, [pc, #36]	; (8001a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 fe29 	bl	80056c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6e:	f7ff f98b 	bl	8000d88 <main>
  bx lr
 8001a72:	4770      	bx	lr
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a7c:	080077dc 	.word	0x080077dc
  ldr r2, =_sbss
 8001a80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a84:	20000554 	.word	0x20000554

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f947 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fd32 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f95f 	bl	8001d9a <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f927 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_IncTick+0x1c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_IncTick+0x20>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a03      	ldr	r2, [pc, #12]	; (8001b38 <HAL_IncTick+0x20>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000400 	.word	0x20000400

08001b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b40:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <HAL_GetTick+0x10>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000400 	.word	0x20000400

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_GetTick>
 8001b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d005      	beq.n	8001b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_Delay+0x44>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4413      	add	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b76:	bf00      	nop
 8001b78:	f7ff ffe0 	bl	8001b3c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d8f7      	bhi.n	8001b78 <HAL_Delay+0x28>
  {
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <__NVIC_EnableIRQ+0x34>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff2d 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff42 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff35 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e169      	b.n	800209c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8158 	bne.w	8002096 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a9a      	ldr	r2, [pc, #616]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d05e      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001df0:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d875      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001df6:	4a98      	ldr	r2, [pc, #608]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d058      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001dfc:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d86f      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e02:	4a96      	ldr	r2, [pc, #600]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d052      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e08:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d869      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a94      	ldr	r2, [pc, #592]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04c      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e14:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d863      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e1a:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d046      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
 8001e20:	4a90      	ldr	r2, [pc, #576]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d85d      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d82a      	bhi.n	8001e80 <HAL_GPIO_Init+0xcc>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d859      	bhi.n	8001ee2 <HAL_GPIO_Init+0x12e>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_GPIO_Init+0x80>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001e89 	.word	0x08001e89
 8001e3c:	08001e9b 	.word	0x08001e9b
 8001e40:	08001edd 	.word	0x08001edd
 8001e44:	08001ee3 	.word	0x08001ee3
 8001e48:	08001ee3 	.word	0x08001ee3
 8001e4c:	08001ee3 	.word	0x08001ee3
 8001e50:	08001ee3 	.word	0x08001ee3
 8001e54:	08001ee3 	.word	0x08001ee3
 8001e58:	08001ee3 	.word	0x08001ee3
 8001e5c:	08001ee3 	.word	0x08001ee3
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ee3 	.word	0x08001ee3
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ee3 	.word	0x08001ee3
 8001e70:	08001ee3 	.word	0x08001ee3
 8001e74:	08001ee3 	.word	0x08001ee3
 8001e78:	08001e91 	.word	0x08001e91
 8001e7c:	08001ea5 	.word	0x08001ea5
 8001e80:	4a79      	ldr	r2, [pc, #484]	; (8002068 <HAL_GPIO_Init+0x2b4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e86:	e02c      	b.n	8001ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	623b      	str	r3, [r7, #32]
          break;
 8001e8e:	e029      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	623b      	str	r3, [r7, #32]
          break;
 8001e98:	e024      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e01f      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	330c      	adds	r3, #12
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e01a      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e013      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	611a      	str	r2, [r3, #16]
          break;
 8001ece:	e009      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	615a      	str	r2, [r3, #20]
          break;
 8001eda:	e003      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_Init+0x130>
          break;
 8001ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d801      	bhi.n	8001eee <HAL_GPIO_Init+0x13a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_Init+0x13e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d802      	bhi.n	8001f00 <HAL_GPIO_Init+0x14c>
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x152>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3b08      	subs	r3, #8
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	210f      	movs	r1, #15
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80b1 	beq.w	8002096 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <HAL_GPIO_Init+0x2b8>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3f      	ldr	r2, [pc, #252]	; (8002078 <HAL_GPIO_Init+0x2c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00d      	beq.n	8001f9c <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	; (800207c <HAL_GPIO_Init+0x2c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d007      	beq.n	8001f98 <HAL_GPIO_Init+0x1e4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <HAL_GPIO_Init+0x2cc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_GPIO_Init+0x1e0>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb2:	492f      	ldr	r1, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x2bc>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	492c      	ldr	r1, [pc, #176]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4928      	ldr	r1, [pc, #160]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	4922      	ldr	r1, [pc, #136]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491e      	ldr	r1, [pc, #120]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4918      	ldr	r1, [pc, #96]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4914      	ldr	r1, [pc, #80]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	490e      	ldr	r1, [pc, #56]	; (8002084 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e021      	b.n	8002096 <HAL_GPIO_Init+0x2e2>
 8002052:	bf00      	nop
 8002054:	10320000 	.word	0x10320000
 8002058:	10310000 	.word	0x10310000
 800205c:	10220000 	.word	0x10220000
 8002060:	10210000 	.word	0x10210000
 8002064:	10120000 	.word	0x10120000
 8002068:	10110000 	.word	0x10110000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40011000 	.word	0x40011000
 8002080:	40011400 	.word	0x40011400
 8002084:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_GPIO_Init+0x304>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	43db      	mvns	r3, r3
 8002090:	4909      	ldr	r1, [pc, #36]	; (80020b8 <HAL_GPIO_Init+0x304>)
 8002092:	4013      	ands	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3301      	adds	r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae8e 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	372c      	adds	r7, #44	; 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e12b      	b.n	8002356 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fa1e 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800213e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002150:	f000 fcda 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a81      	ldr	r2, [pc, #516]	; (8002360 <HAL_I2C_Init+0x274>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d807      	bhi.n	8002170 <HAL_I2C_Init+0x84>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a80      	ldr	r2, [pc, #512]	; (8002364 <HAL_I2C_Init+0x278>)
 8002164:	4293      	cmp	r3, r2
 8002166:	bf94      	ite	ls
 8002168:	2301      	movls	r3, #1
 800216a:	2300      	movhi	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e006      	b.n	800217e <HAL_I2C_Init+0x92>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a7d      	ldr	r2, [pc, #500]	; (8002368 <HAL_I2C_Init+0x27c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0e7      	b.n	8002356 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a78      	ldr	r2, [pc, #480]	; (800236c <HAL_I2C_Init+0x280>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <HAL_I2C_Init+0x274>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d802      	bhi.n	80021c0 <HAL_I2C_Init+0xd4>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3301      	adds	r3, #1
 80021be:	e009      	b.n	80021d4 <HAL_I2C_Init+0xe8>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	4a69      	ldr	r2, [pc, #420]	; (8002370 <HAL_I2C_Init+0x284>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	3301      	adds	r3, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	430b      	orrs	r3, r1
 80021da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	495c      	ldr	r1, [pc, #368]	; (8002360 <HAL_I2C_Init+0x274>)
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d819      	bhi.n	8002228 <HAL_I2C_Init+0x13c>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e59      	subs	r1, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002202:	1c59      	adds	r1, r3, #1
 8002204:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002208:	400b      	ands	r3, r1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_I2C_Init+0x138>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1e59      	subs	r1, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb1 f3f3 	udiv	r3, r1, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	e051      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002224:	2304      	movs	r3, #4
 8002226:	e04f      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <HAL_I2C_Init+0x168>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e58      	subs	r0, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	440b      	add	r3, r1
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e012      	b.n	800227a <HAL_I2C_Init+0x18e>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e58      	subs	r0, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	0099      	lsls	r1, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Init+0x196>
 800227e:	2301      	movs	r3, #1
 8002280:	e022      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10e      	bne.n	80022a8 <HAL_I2C_Init+0x1bc>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e58      	subs	r0, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	440b      	add	r3, r1
 8002298:	fbb0 f3f3 	udiv	r3, r0, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a6:	e00f      	b.n	80022c8 <HAL_I2C_Init+0x1dc>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	6809      	ldr	r1, [r1, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6911      	ldr	r1, [r2, #16]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68d2      	ldr	r2, [r2, #12]
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	000186a0 	.word	0x000186a0
 8002364:	001e847f 	.word	0x001e847f
 8002368:	003d08ff 	.word	0x003d08ff
 800236c:	431bde83 	.word	0x431bde83
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e272      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a0:	4b8f      	ldr	r3, [pc, #572]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d112      	bne.n	80023d2 <HAL_RCC_OscConfig+0x5e>
 80023ac:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x12c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e24c      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x76>
 80023dc:	4b80      	ldr	r3, [pc, #512]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a7f      	ldr	r2, [pc, #508]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e02e      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b7b      	ldr	r3, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7a      	ldr	r2, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b78      	ldr	r3, [pc, #480]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a77      	ldr	r2, [pc, #476]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xbc>
 8002416:	4b72      	ldr	r3, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a71      	ldr	r2, [pc, #452]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 8002430:	4b6b      	ldr	r3, [pc, #428]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6a      	ldr	r2, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a67      	ldr	r2, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fb74 	bl	8001b3c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fb70 	bl	8001b3c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e200      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xe4>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff fb60 	bl	8001b3c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fb5c 	bl	8001b3c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1ec      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x10c>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ba:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x18c>
 80024c6:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x176>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1c0      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4939      	ldr	r1, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e03a      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fb15 	bl	8001b3c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff fb11 	bl	8001b3c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1a1      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x270>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff faf4 	bl	8001b3c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7ff faf0 	bl	8001b3c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e180      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03a      	beq.n	80025f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d019      	beq.n	80025be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7ff fad4 	bl	8001b3c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7ff fad0 	bl	8001b3c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e160      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 face 	bl	8002b58 <RCC_Delay>
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_OscConfig+0x274>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7ff faba 	bl	8001b3c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff fab6 	bl	8001b3c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e146      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	42420000 	.word	0x42420000
 80025e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e9      	bne.n	80025cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a6 	beq.w	8002752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a87      	ldr	r2, [pc, #540]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b82      	ldr	r3, [pc, #520]	; (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b7f      	ldr	r3, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7e      	ldr	r2, [pc, #504]	; (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7ff fa77 	bl	8001b3c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff fa73 	bl	8001b3c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	; 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e103      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x312>
 8002678:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	e02d      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x334>
 800268e:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6213      	str	r3, [r2, #32]
 800269a:	4b67      	ldr	r3, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a66      	ldr	r2, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	e01c      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d10c      	bne.n	80026ca <HAL_RCC_OscConfig+0x356>
 80026b0:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e00b      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d015      	beq.n	8002716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7ff fa27 	bl	8001b3c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7ff fa23 	bl	8001b3c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0b1      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ee      	beq.n	80026f2 <HAL_RCC_OscConfig+0x37e>
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7ff fa11 	bl	8001b3c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7ff fa0d 	bl	8001b3c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e09b      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ee      	bne.n	800271e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b3c      	ldr	r3, [pc, #240]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a3b      	ldr	r2, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d061      	beq.n	800282c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d146      	bne.n	80027fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x4cc>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff f9e1 	bl	8001b3c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7ff f9dd 	bl	8001b3c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e06d      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4921      	ldr	r1, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a19      	ldr	r1, [r3, #32]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	430b      	orrs	r3, r1
 80027ca:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff f9b1 	bl	8001b3c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7ff f9ad 	bl	8001b3c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e03d      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x46a>
 80027fc:	e035      	b.n	800286a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x4cc>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff f99a 	bl	8001b3c <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7ff f996 	bl	8001b3c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e026      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x498>
 800282a:	e01e      	b.n	800286a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e019      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_OscConfig+0x500>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0d0      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d910      	bls.n	80028bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4965      	ldr	r1, [pc, #404]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b8      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	494d      	ldr	r1, [pc, #308]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d040      	beq.n	8002998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d115      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e073      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06b      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4936      	ldr	r1, [pc, #216]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002968:	f7ff f8e8 	bl	8001b3c <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7ff f8e4 	bl	8001b3c <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e053      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d210      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4922      	ldr	r1, [pc, #136]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4916      	ldr	r1, [pc, #88]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	490a      	ldr	r1, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	5ccb      	ldrb	r3, [r1, r3]
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1cc>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1d0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f846 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08007408 	.word	0x08007408
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x30>
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x36>
 8002a7a:	e027      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7e:	613b      	str	r3, [r7, #16]
      break;
 8002a80:	e027      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0c9b      	lsrs	r3, r3, #18
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0c5b      	lsrs	r3, r3, #17
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	fb03 f202 	mul.w	r2, r3, r2
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	613b      	str	r3, [r7, #16]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	693b      	ldr	r3, [r7, #16]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	08007420 	.word	0x08007420
 8002aec:	08007430 	.word	0x08007430
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08007418 	.word	0x08007418

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffde 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08007418 	.word	0x08007418

08002b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RCC_Delay+0x34>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <RCC_Delay+0x38>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b74:	bf00      	nop
  }
  while (Delay --);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <RCC_Delay+0x1c>
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e076      	b.n	8002c94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb6:	d009      	beq.n	8002bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
 8002bbe:	e005      	b.n	8002bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fcf2 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	0c1a      	lsrs	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f002 0204 	and.w	r2, r2, #4
 8002c72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_SPI_Transmit+0x22>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e12d      	b.n	8002f1a <HAL_SPI_Transmit+0x27e>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc6:	f7fe ff39 	bl	8001b3c <HAL_GetTick>
 8002cca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d002      	beq.n	8002ce2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce0:	e116      	b.n	8002f10 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Transmit+0x52>
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf2:	e10d      	b.n	8002f10 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3a:	d10f      	bne.n	8002d5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d007      	beq.n	8002d7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d82:	d14f      	bne.n	8002e24 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_SPI_Transmit+0xf6>
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d142      	bne.n	8002e18 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	1c9a      	adds	r2, r3, #2
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db6:	e02f      	b.n	8002e18 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d112      	bne.n	8002dec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dea:	e015      	b.n	8002e18 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dec:	f7fe fea6 	bl	8001b3c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d803      	bhi.n	8002e04 <HAL_SPI_Transmit+0x168>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d102      	bne.n	8002e0a <HAL_SPI_Transmit+0x16e>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e16:	e07b      	b.n	8002f10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ca      	bne.n	8002db8 <HAL_SPI_Transmit+0x11c>
 8002e22:	e050      	b.n	8002ec6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_SPI_Transmit+0x196>
 8002e2c:	8afb      	ldrh	r3, [r7, #22]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d144      	bne.n	8002ebc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e58:	e030      	b.n	8002ebc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d113      	bne.n	8002e90 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e8e:	e015      	b.n	8002ebc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e90:	f7fe fe54 	bl	8001b3c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d803      	bhi.n	8002ea8 <HAL_SPI_Transmit+0x20c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d102      	bne.n	8002eae <HAL_SPI_Transmit+0x212>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002eba:	e029      	b.n	8002f10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1c9      	bne.n	8002e5a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	6839      	ldr	r1, [r7, #0]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fbd8 	bl	8003680 <SPI_EndRxTxTransaction>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e003      	b.n	8002f10 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b088      	sub	sp, #32
 8002f26:	af02      	add	r7, sp, #8
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f46:	e0fb      	b.n	8003140 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f50:	d112      	bne.n	8002f78 <HAL_SPI_Receive+0x56>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f8ef 	bl	8003152 <HAL_SPI_TransmitReceive>
 8002f74:	4603      	mov	r3, r0
 8002f76:	e0e8      	b.n	800314a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_SPI_Receive+0x64>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0e1      	b.n	800314a <HAL_SPI_Receive+0x228>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f8e:	f7fe fdd5 	bl	8001b3c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_Receive+0x7e>
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa4:	e0cc      	b.n	8003140 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fec:	d10f      	bne.n	800300e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d007      	beq.n	800302c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d16a      	bne.n	800310a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003034:	e032      	b.n	800309c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d115      	bne.n	8003070 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f103 020c 	add.w	r2, r3, #12
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800306e:	e015      	b.n	800309c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003070:	f7fe fd64 	bl	8001b3c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d803      	bhi.n	8003088 <HAL_SPI_Receive+0x166>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003086:	d102      	bne.n	800308e <HAL_SPI_Receive+0x16c>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800309a:	e051      	b.n	8003140 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1c7      	bne.n	8003036 <HAL_SPI_Receive+0x114>
 80030a6:	e035      	b.n	8003114 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d113      	bne.n	80030de <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	b292      	uxth	r2, r2
 80030c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030dc:	e015      	b.n	800310a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030de:	f7fe fd2d 	bl	8001b3c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d803      	bhi.n	80030f6 <HAL_SPI_Receive+0x1d4>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d102      	bne.n	80030fc <HAL_SPI_Receive+0x1da>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003108:	e01a      	b.n	8003140 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1c9      	bne.n	80030a8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fa5f 	bl	80035dc <SPI_EndRxTransaction>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
 8003136:	e003      	b.n	8003140 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003160:	2301      	movs	r3, #1
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_SPI_TransmitReceive+0x26>
 8003174:	2302      	movs	r3, #2
 8003176:	e198      	b.n	80034aa <HAL_SPI_TransmitReceive+0x358>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003180:	f7fe fcdc 	bl	8001b3c <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800319a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d00f      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x70>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a8:	d107      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x68>
 80031b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d003      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031c0:	e16d      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x82>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x82>
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031da:	e160      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d003      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2205      	movs	r2, #5
 80031ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d007      	beq.n	8003244 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d17c      	bne.n	8003348 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_TransmitReceive+0x10a>
 8003256:	8b7b      	ldrh	r3, [r7, #26]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d16a      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003280:	e057      	b.n	8003332 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d11b      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d113      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d119      	bne.n	800330a <HAL_SPI_TransmitReceive+0x1b8>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d014      	beq.n	800330a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	b292      	uxth	r2, r2
 80032ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800330a:	f7fe fc17 	bl	8001b3c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003316:	429a      	cmp	r2, r3
 8003318:	d80b      	bhi.n	8003332 <HAL_SPI_TransmitReceive+0x1e0>
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d007      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003330:	e0b5      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1a2      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x130>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d19d      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x130>
 8003346:	e080      	b.n	800344a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x204>
 8003350:	8b7b      	ldrh	r3, [r7, #26]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d16f      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337c:	e05b      	b.n	8003436 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b02      	cmp	r3, #2
 800338a:	d11c      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x274>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x274>
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d114      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d119      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x2b6>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d014      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003404:	2301      	movs	r3, #1
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003408:	f7fe fb98 	bl	8001b3c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003414:	429a      	cmp	r2, r3
 8003416:	d803      	bhi.n	8003420 <HAL_SPI_TransmitReceive+0x2ce>
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d102      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x2d4>
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003434:	e033      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d19e      	bne.n	800337e <HAL_SPI_TransmitReceive+0x22c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d199      	bne.n	800337e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f916 	bl	8003680 <SPI_EndRxTxTransaction>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003466:	e01a      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003494:	e003      	b.n	800349e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3730      	adds	r7, #48	; 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c0:	b2db      	uxtb	r3, r3
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034dc:	f7fe fb2e 	bl	8001b3c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ec:	f7fe fb26 	bl	8001b3c <HAL_GetTick>
 80034f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	0d1b      	lsrs	r3, r3, #20
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	e054      	b.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d050      	beq.n	80035ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800350c:	f7fe fb16 	bl	8001b3c <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	429a      	cmp	r2, r3
 800351a:	d902      	bls.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13d      	bne.n	800359e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353a:	d111      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d004      	beq.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d107      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003568:	d10f      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e017      	b.n	80035ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d19b      	bne.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f0:	d111      	bne.n	8003616 <SPI_EndRxTransaction+0x3a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fa:	d004      	beq.n	8003606 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d107      	bne.n	8003616 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361e:	d117      	bne.n	8003650 <SPI_EndRxTransaction+0x74>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003628:	d112      	bne.n	8003650 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	2101      	movs	r1, #1
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ff49 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e013      	b.n	8003678 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2200      	movs	r2, #0
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff ff36 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e000      	b.n	8003678 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f7ff ff18 	bl	80034cc <SPI_WaitFlagStateUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e000      	b.n	80036b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fff0 	bl	80016c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fac6 	bl	8003c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e041      	b.n	80037f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fd ff6f 	bl	8001664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fa77 	bl	8003c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b02      	cmp	r3, #2
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0202 	mvn.w	r2, #2
 8003824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa0b 	bl	8003c56 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9fe 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa0d 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0204 	mvn.w	r2, #4
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9e1 	bl	8003c56 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9d4 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9e3 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0208 	mvn.w	r2, #8
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9b7 	bl	8003c56 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9aa 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9b9 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b10      	cmp	r3, #16
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b10      	cmp	r3, #16
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0210 	mvn.w	r2, #16
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2208      	movs	r2, #8
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f98d 	bl	8003c56 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f980 	bl	8003c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f98f 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10e      	bne.n	800397c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0201 	mvn.w	r2, #1
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fda8 	bl	80014cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fc14 	bl	80041d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f953 	bl	8003c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0220 	mvn.w	r2, #32
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fbdf 	bl	80041be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e048      	b.n	8003ab8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d839      	bhi.n	8003aa8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003aa9 	.word	0x08003aa9
 8003a44:	08003aa9 	.word	0x08003aa9
 8003a48:	08003aa9 	.word	0x08003aa9
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003aa9 	.word	0x08003aa9
 8003a54:	08003aa9 	.word	0x08003aa9
 8003a58:	08003aa9 	.word	0x08003aa9
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003aa9 	.word	0x08003aa9
 8003a64:	08003aa9 	.word	0x08003aa9
 8003a68:	08003aa9 	.word	0x08003aa9
 8003a6c:	08003a9b 	.word	0x08003a9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f96a 	bl	8003d50 <TIM_OC1_SetConfig>
      break;
 8003a7c:	e017      	b.n	8003aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f9c9 	bl	8003e1c <TIM_OC2_SetConfig>
      break;
 8003a8a:	e010      	b.n	8003aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fa2c 	bl	8003ef0 <TIM_OC3_SetConfig>
      break;
 8003a98:	e009      	b.n	8003aae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fa8f 	bl	8003fc4 <TIM_OC4_SetConfig>
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e0ae      	b.n	8003c3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	f200 809f 	bhi.w	8003c2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003c2d 	.word	0x08003c2d
 8003afc:	08003c2d 	.word	0x08003c2d
 8003b00:	08003c2d 	.word	0x08003c2d
 8003b04:	08003b69 	.word	0x08003b69
 8003b08:	08003c2d 	.word	0x08003c2d
 8003b0c:	08003c2d 	.word	0x08003c2d
 8003b10:	08003c2d 	.word	0x08003c2d
 8003b14:	08003bab 	.word	0x08003bab
 8003b18:	08003c2d 	.word	0x08003c2d
 8003b1c:	08003c2d 	.word	0x08003c2d
 8003b20:	08003c2d 	.word	0x08003c2d
 8003b24:	08003beb 	.word	0x08003beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f90e 	bl	8003d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6999      	ldr	r1, [r3, #24]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	619a      	str	r2, [r3, #24]
      break;
 8003b66:	e064      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f954 	bl	8003e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	619a      	str	r2, [r3, #24]
      break;
 8003ba8:	e043      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f99d 	bl	8003ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0208 	orr.w	r2, r2, #8
 8003bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0204 	bic.w	r2, r2, #4
 8003bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69d9      	ldr	r1, [r3, #28]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
      break;
 8003be8:	e023      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f9e7 	bl	8003fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	61da      	str	r2, [r3, #28]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <TIM_Base_SetConfig+0xb8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <TIM_Base_SetConfig+0x30>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d007      	beq.n	8003cbc <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <TIM_Base_SetConfig+0xbc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_Base_SetConfig+0x30>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <TIM_Base_SetConfig+0xc0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_Base_SetConfig+0xb8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <TIM_Base_SetConfig+0xbc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <TIM_Base_SetConfig+0xc0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <TIM_Base_SetConfig+0xb8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d103      	bne.n	8003d34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	615a      	str	r2, [r3, #20]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800

08003d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f023 0201 	bic.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0302 	bic.w	r3, r3, #2
 8003d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <TIM_OC1_SetConfig+0xc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10c      	bne.n	8003dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0308 	bic.w	r3, r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <TIM_OC1_SetConfig+0xc8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d111      	bne.n	8003df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00

08003e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0210 	bic.w	r2, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0320 	bic.w	r3, r3, #32
 8003e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <TIM_OC2_SetConfig+0xd0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10d      	bne.n	8003e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <TIM_OC2_SetConfig+0xd0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d113      	bne.n	8003ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00

08003ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <TIM_OC3_SetConfig+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10d      	bne.n	8003f6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <TIM_OC3_SetConfig+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d113      	bne.n	8003f9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00

08003fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800400e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	031b      	lsls	r3, r3, #12
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0f      	ldr	r2, [pc, #60]	; (800405c <TIM_OC4_SetConfig+0x98>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d109      	bne.n	8004038 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800402a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00

08004060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e046      	b.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d009      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a10      	ldr	r2, [pc, #64]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10c      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800

0800411c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004134:	2302      	movs	r3, #2
 8004136:	e03d      	b.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e042      	b.n	800427a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fad7 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2224      	movs	r2, #36	; 0x24
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004224:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f91c 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800425a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b08a      	sub	sp, #40	; 0x28
 8004286:	af02      	add	r7, sp, #8
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	d16d      	bne.n	800437e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_UART_Transmit+0x2c>
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e066      	b.n	8004380 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c0:	f7fd fc3c 	bl	8001b3c <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d108      	bne.n	80042ee <HAL_UART_Transmit+0x6c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e003      	b.n	80042f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f6:	e02a      	b.n	800434e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f840 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e036      	b.n	8004380 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004326:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3302      	adds	r3, #2
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e007      	b.n	8004340 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1cf      	bne.n	80042f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f810 	bl	8004388 <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e006      	b.n	8004380 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b090      	sub	sp, #64	; 0x40
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004398:	e050      	b.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d04c      	beq.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a8:	f7fd fbc8 	bl	8001b3c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d241      	bcs.n	800443c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d8:	637a      	str	r2, [r7, #52]	; 0x34
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	613b      	str	r3, [r7, #16]
   return(result);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800440c:	623a      	str	r2, [r7, #32]
 800440e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	61bb      	str	r3, [r7, #24]
   return(result);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e00f      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	429a      	cmp	r2, r3
 8004458:	d09f      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3740      	adds	r7, #64	; 0x40
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800449e:	f023 030c 	bic.w	r3, r3, #12
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <UART_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fb30 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fb18 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <UART_SetConfig+0x118>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	0119      	lsls	r1, r3, #4
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <UART_SetConfig+0x118>)
 8004512:	fba3 0302 	umull	r0, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2064      	movs	r0, #100	; 0x64
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	; 0x32
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <UART_SetConfig+0x118>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	4419      	add	r1, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <UART_SetConfig+0x118>)
 800454a:	fba3 0302 	umull	r0, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2064      	movs	r0, #100	; 0x64
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <UART_SetConfig+0x118>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	440a      	add	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013800 	.word	0x40013800
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004592:	b2db      	uxtb	r3, r3
 8004594:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6958      	ldr	r0, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2200      	movs	r2, #0
 80045aa:	4619      	mov	r1, r3
 80045ac:	f7fd fd86 	bl	80020bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6998      	ldr	r0, [r3, #24]
 80045b6:	f107 010f 	add.w	r1, r7, #15
 80045ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045be:	2201      	movs	r2, #1
 80045c0:	f7fe fb6c 	bl	8002c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045c4:	bf00      	nop
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe ff70 	bl	80034b2 <HAL_SPI_GetState>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d1f6      	bne.n	80045c6 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6998      	ldr	r0, [r3, #24]
 80045de:	f107 010e 	add.w	r1, r7, #14
 80045e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e6:	2201      	movs	r2, #1
 80045e8:	f7fe fc9b 	bl	8002f22 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045ec:	bf00      	nop
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe ff5c 	bl	80034b2 <HAL_SPI_GetState>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d1f6      	bne.n	80045ee <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6958      	ldr	r0, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	b29b      	uxth	r3, r3
 800460e:	2201      	movs	r2, #1
 8004610:	4619      	mov	r1, r3
 8004612:	f7fd fd53 	bl	80020bc <HAL_GPIO_WritePin>
	return rxByte;
 8004616:	7bbb      	ldrb	r3, [r7, #14]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
 800462c:	4613      	mov	r3, r2
 800462e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004636:	b2db      	uxtb	r3, r3
 8004638:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6958      	ldr	r0, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	b29b      	uxth	r3, r3
 8004648:	2200      	movs	r2, #0
 800464a:	4619      	mov	r1, r3
 800464c:	f7fd fd36 	bl	80020bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6998      	ldr	r0, [r3, #24]
 8004656:	f107 010f 	add.w	r1, r7, #15
 800465a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800465e:	2201      	movs	r2, #1
 8004660:	f7fe fb1c 	bl	8002c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8004664:	bf00      	nop
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe ff20 	bl	80034b2 <HAL_SPI_GetState>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d1f6      	bne.n	8004666 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6998      	ldr	r0, [r3, #24]
 800467e:	1cb9      	adds	r1, r7, #2
 8004680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004684:	2201      	movs	r2, #1
 8004686:	f7fe fb09 	bl	8002c9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800468a:	bf00      	nop
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe ff0d 	bl	80034b2 <HAL_SPI_GetState>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d1f6      	bne.n	800468c <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6958      	ldr	r0, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2201      	movs	r2, #1
 80046ae:	4619      	mov	r1, r3
 80046b0:	f7fd fd04 	bl	80020bc <HAL_GPIO_WritePin>
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <lora_init>:

uint8_t lora_init(lora_t * module){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6858      	ldr	r0, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2200      	movs	r2, #0
 80046d4:	4619      	mov	r1, r3
 80046d6:	f7fd fcf1 	bl	80020bc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80046da:	200a      	movs	r0, #10
 80046dc:	f7fd fa38 	bl	8001b50 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6858      	ldr	r0, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2201      	movs	r2, #1
 80046f0:	4619      	mov	r1, r3
 80046f2:	f7fd fce3 	bl	80020bc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80046f6:	200a      	movs	r0, #10
 80046f8:	f7fd fa2a 	bl	8001b50 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 80046fc:	2142      	movs	r1, #66	; 0x42
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff3e 	bl	8004580 <lora_read_reg>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b12      	cmp	r3, #18
 800470c:	d006      	beq.n	800471c <lora_init+0x60>
		printf("%d \n" ,ret );
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	4619      	mov	r1, r3
 8004712:	4820      	ldr	r0, [pc, #128]	; (8004794 <lora_init+0xd8>)
 8004714:	f000 fe36 	bl	8005384 <iprintf>
		return 1;
 8004718:	2301      	movs	r3, #1
 800471a:	e037      	b.n	800478c <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	2101      	movs	r1, #1
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff7d 	bl	8004620 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	791b      	ldrb	r3, [r3, #4]
 800472a:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <lora_init+0xdc>)
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4413      	add	r3, r2
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8bf 	bl	80048b8 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	210e      	movs	r1, #14
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff6e 	bl	8004620 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	210f      	movs	r1, #15
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff69 	bl	8004620 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 800474e:	210c      	movs	r1, #12
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff15 	bl	8004580 <lora_read_reg>
 8004756:	4603      	mov	r3, r0
 8004758:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	f043 0303 	orr.w	r3, r3, #3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	210c      	movs	r1, #12
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ff5a 	bl	8004620 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 800476c:	2204      	movs	r2, #4
 800476e:	2126      	movs	r1, #38	; 0x26
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff ff55 	bl	8004620 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 8004776:	228f      	movs	r2, #143	; 0x8f
 8004778:	2109      	movs	r1, #9
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ff50 	bl	8004620 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8004780:	2281      	movs	r2, #129	; 0x81
 8004782:	2101      	movs	r1, #1
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ff4b 	bl	8004620 <lora_write_reg>
	return 0;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	08007400 	.word	0x08007400
 8004798:	08007438 	.word	0x08007438

0800479c <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 80047a8:	2112      	movs	r1, #18
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fee8 	bl	8004580 <lora_read_reg>
 80047b0:	4603      	mov	r3, r0
 80047b2:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x92);
 80047b4:	2292      	movs	r2, #146	; 0x92
 80047b6:	211d      	movs	r1, #29
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff31 	bl	8004620 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	2112      	movs	r1, #18
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ff2a 	bl	8004620 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01d      	beq.n	8004812 <lora_prasePacket+0x76>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d118      	bne.n	8004812 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 80047e0:	2113      	movs	r1, #19
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fecc 	bl	8004580 <lora_read_reg>
 80047e8:	4603      	mov	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 80047ec:	2110      	movs	r1, #16
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fec6 	bl	8004580 <lora_read_reg>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461a      	mov	r2, r3
 80047f8:	210d      	movs	r1, #13
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff10 	bl	8004620 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8004800:	2281      	movs	r2, #129	; 0x81
 8004802:	2101      	movs	r1, #1
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff0b 	bl	8004620 <lora_write_reg>
		packetIndex = 0;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <lora_prasePacket+0xb4>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e010      	b.n	8004834 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8004812:	2101      	movs	r1, #1
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff feb3 	bl	8004580 <lora_read_reg>
 800481a:	4603      	mov	r3, r0
 800481c:	2b86      	cmp	r3, #134	; 0x86
 800481e:	d009      	beq.n	8004834 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8004820:	2200      	movs	r2, #0
 8004822:	210d      	movs	r1, #13
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fefb 	bl	8004620 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800482a:	2286      	movs	r2, #134	; 0x86
 800482c:	2101      	movs	r1, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fef6 	bl	8004620 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <lora_prasePacket+0xa8>
		return -1;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	e000      	b.n	8004846 <lora_prasePacket+0xaa>
	}
	return packetLength;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000404 	.word	0x20000404

08004854 <lora_available>:

uint8_t lora_available(lora_t * module){
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 800485c:	2113      	movs	r1, #19
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fe8e 	bl	8004580 <lora_read_reg>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <lora_available+0x24>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b2db      	uxtb	r3, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000404 	.word	0x20000404

0800487c <lora_read>:

uint8_t lora_read(lora_t * module){
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ffe5 	bl	8004854 <lora_available>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <lora_read+0x18>
		return 0;
 8004890:	2300      	movs	r3, #0
 8004892:	e00a      	b.n	80048aa <lora_read+0x2e>
	packetIndex++;
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <lora_read+0x38>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <lora_read+0x38>)
 800489e:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 80048a0:	2100      	movs	r1, #0
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fe6c 	bl	8004580 <lora_read_reg>
 80048a8:	4603      	mov	r3, r0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000404 	.word	0x20000404

080048b8 <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80048c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	04d9      	lsls	r1, r3, #19
 80048d2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80048d6:	04d0      	lsls	r0, r2, #19
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <lora_set_frequency+0x88>)
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	f7fc f8d3 	bl	8000a88 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 80048ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	0c02      	lsrs	r2, r0, #16
 80048f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048fc:	0c0b      	lsrs	r3, r1, #16
 80048fe:	b2d3      	uxtb	r3, r2
 8004900:	461a      	mov	r2, r3
 8004902:	2106      	movs	r1, #6
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fe8b 	bl	8004620 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800490a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	0a02      	lsrs	r2, r0, #8
 8004918:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800491c:	0a0b      	lsrs	r3, r1, #8
 800491e:	b2d3      	uxtb	r3, r2
 8004920:	461a      	mov	r2, r3
 8004922:	2107      	movs	r1, #7
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fe7b 	bl	8004620 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800492a:	7c3b      	ldrb	r3, [r7, #16]
 800492c:	461a      	mov	r2, r3
 800492e:	2108      	movs	r1, #8
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fe75 	bl	8004620 <lora_write_reg>
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	01e84800 	.word	0x01e84800

08004944 <__cvt>:
 8004944:	2b00      	cmp	r3, #0
 8004946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494a:	461f      	mov	r7, r3
 800494c:	bfbb      	ittet	lt
 800494e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004952:	461f      	movlt	r7, r3
 8004954:	2300      	movge	r3, #0
 8004956:	232d      	movlt	r3, #45	; 0x2d
 8004958:	b088      	sub	sp, #32
 800495a:	4614      	mov	r4, r2
 800495c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800495e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004960:	7013      	strb	r3, [r2, #0]
 8004962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004964:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004968:	f023 0820 	bic.w	r8, r3, #32
 800496c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004970:	d005      	beq.n	800497e <__cvt+0x3a>
 8004972:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004976:	d100      	bne.n	800497a <__cvt+0x36>
 8004978:	3501      	adds	r5, #1
 800497a:	2302      	movs	r3, #2
 800497c:	e000      	b.n	8004980 <__cvt+0x3c>
 800497e:	2303      	movs	r3, #3
 8004980:	aa07      	add	r2, sp, #28
 8004982:	9204      	str	r2, [sp, #16]
 8004984:	aa06      	add	r2, sp, #24
 8004986:	e9cd a202 	strd	sl, r2, [sp, #8]
 800498a:	e9cd 3500 	strd	r3, r5, [sp]
 800498e:	4622      	mov	r2, r4
 8004990:	463b      	mov	r3, r7
 8004992:	f000 ff55 	bl	8005840 <_dtoa_r>
 8004996:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800499a:	4606      	mov	r6, r0
 800499c:	d102      	bne.n	80049a4 <__cvt+0x60>
 800499e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049a0:	07db      	lsls	r3, r3, #31
 80049a2:	d522      	bpl.n	80049ea <__cvt+0xa6>
 80049a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049a8:	eb06 0905 	add.w	r9, r6, r5
 80049ac:	d110      	bne.n	80049d0 <__cvt+0x8c>
 80049ae:	7833      	ldrb	r3, [r6, #0]
 80049b0:	2b30      	cmp	r3, #48	; 0x30
 80049b2:	d10a      	bne.n	80049ca <__cvt+0x86>
 80049b4:	2200      	movs	r2, #0
 80049b6:	2300      	movs	r3, #0
 80049b8:	4620      	mov	r0, r4
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fb fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80049c0:	b918      	cbnz	r0, 80049ca <__cvt+0x86>
 80049c2:	f1c5 0501 	rsb	r5, r5, #1
 80049c6:	f8ca 5000 	str.w	r5, [sl]
 80049ca:	f8da 3000 	ldr.w	r3, [sl]
 80049ce:	4499      	add	r9, r3
 80049d0:	2200      	movs	r2, #0
 80049d2:	2300      	movs	r3, #0
 80049d4:	4620      	mov	r0, r4
 80049d6:	4639      	mov	r1, r7
 80049d8:	f7fb ffe6 	bl	80009a8 <__aeabi_dcmpeq>
 80049dc:	b108      	cbz	r0, 80049e2 <__cvt+0x9e>
 80049de:	f8cd 901c 	str.w	r9, [sp, #28]
 80049e2:	2230      	movs	r2, #48	; 0x30
 80049e4:	9b07      	ldr	r3, [sp, #28]
 80049e6:	454b      	cmp	r3, r9
 80049e8:	d307      	bcc.n	80049fa <__cvt+0xb6>
 80049ea:	4630      	mov	r0, r6
 80049ec:	9b07      	ldr	r3, [sp, #28]
 80049ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049f0:	1b9b      	subs	r3, r3, r6
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	b008      	add	sp, #32
 80049f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	9107      	str	r1, [sp, #28]
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e7f0      	b.n	80049e4 <__cvt+0xa0>

08004a02 <__exponent>:
 8004a02:	4603      	mov	r3, r0
 8004a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a06:	2900      	cmp	r1, #0
 8004a08:	f803 2b02 	strb.w	r2, [r3], #2
 8004a0c:	bfb6      	itet	lt
 8004a0e:	222d      	movlt	r2, #45	; 0x2d
 8004a10:	222b      	movge	r2, #43	; 0x2b
 8004a12:	4249      	neglt	r1, r1
 8004a14:	2909      	cmp	r1, #9
 8004a16:	7042      	strb	r2, [r0, #1]
 8004a18:	dd2a      	ble.n	8004a70 <__exponent+0x6e>
 8004a1a:	f10d 0207 	add.w	r2, sp, #7
 8004a1e:	4617      	mov	r7, r2
 8004a20:	260a      	movs	r6, #10
 8004a22:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a26:	4694      	mov	ip, r2
 8004a28:	fb06 1415 	mls	r4, r6, r5, r1
 8004a2c:	3430      	adds	r4, #48	; 0x30
 8004a2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a32:	460c      	mov	r4, r1
 8004a34:	2c63      	cmp	r4, #99	; 0x63
 8004a36:	4629      	mov	r1, r5
 8004a38:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a3c:	dcf1      	bgt.n	8004a22 <__exponent+0x20>
 8004a3e:	3130      	adds	r1, #48	; 0x30
 8004a40:	f1ac 0402 	sub.w	r4, ip, #2
 8004a44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a48:	4622      	mov	r2, r4
 8004a4a:	1c41      	adds	r1, r0, #1
 8004a4c:	42ba      	cmp	r2, r7
 8004a4e:	d30a      	bcc.n	8004a66 <__exponent+0x64>
 8004a50:	f10d 0209 	add.w	r2, sp, #9
 8004a54:	eba2 020c 	sub.w	r2, r2, ip
 8004a58:	42bc      	cmp	r4, r7
 8004a5a:	bf88      	it	hi
 8004a5c:	2200      	movhi	r2, #0
 8004a5e:	4413      	add	r3, r2
 8004a60:	1a18      	subs	r0, r3, r0
 8004a62:	b003      	add	sp, #12
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a6e:	e7ed      	b.n	8004a4c <__exponent+0x4a>
 8004a70:	2330      	movs	r3, #48	; 0x30
 8004a72:	3130      	adds	r1, #48	; 0x30
 8004a74:	7083      	strb	r3, [r0, #2]
 8004a76:	70c1      	strb	r1, [r0, #3]
 8004a78:	1d03      	adds	r3, r0, #4
 8004a7a:	e7f1      	b.n	8004a60 <__exponent+0x5e>

08004a7c <_printf_float>:
 8004a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a80:	b091      	sub	sp, #68	; 0x44
 8004a82:	460c      	mov	r4, r1
 8004a84:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a88:	4616      	mov	r6, r2
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	f000 fdc7 	bl	8005620 <_localeconv_r>
 8004a92:	6803      	ldr	r3, [r0, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	9309      	str	r3, [sp, #36]	; 0x24
 8004a98:	f7fb fb5a 	bl	8000150 <strlen>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8004aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa4:	900a      	str	r0, [sp, #40]	; 0x28
 8004aa6:	3307      	adds	r3, #7
 8004aa8:	f023 0307 	bic.w	r3, r3, #7
 8004aac:	f103 0208 	add.w	r2, r3, #8
 8004ab0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ab4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ab8:	f8c8 2000 	str.w	r2, [r8]
 8004abc:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	4643      	mov	r3, r8
 8004ac4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ac8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ace:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	4b9c      	ldr	r3, [pc, #624]	; (8004d48 <_printf_float+0x2cc>)
 8004ad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ad8:	f7fb ff98 	bl	8000a0c <__aeabi_dcmpun>
 8004adc:	bb70      	cbnz	r0, 8004b3c <_printf_float+0xc0>
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	4b98      	ldr	r3, [pc, #608]	; (8004d48 <_printf_float+0x2cc>)
 8004ae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae8:	f7fb ff72 	bl	80009d0 <__aeabi_dcmple>
 8004aec:	bb30      	cbnz	r0, 8004b3c <_printf_float+0xc0>
 8004aee:	2200      	movs	r2, #0
 8004af0:	2300      	movs	r3, #0
 8004af2:	4650      	mov	r0, sl
 8004af4:	4641      	mov	r1, r8
 8004af6:	f7fb ff61 	bl	80009bc <__aeabi_dcmplt>
 8004afa:	b110      	cbz	r0, 8004b02 <_printf_float+0x86>
 8004afc:	232d      	movs	r3, #45	; 0x2d
 8004afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b02:	4a92      	ldr	r2, [pc, #584]	; (8004d4c <_printf_float+0x2d0>)
 8004b04:	4b92      	ldr	r3, [pc, #584]	; (8004d50 <_printf_float+0x2d4>)
 8004b06:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b0a:	bf94      	ite	ls
 8004b0c:	4690      	movls	r8, r2
 8004b0e:	4698      	movhi	r8, r3
 8004b10:	2303      	movs	r3, #3
 8004b12:	f04f 0a00 	mov.w	sl, #0
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	f02b 0304 	bic.w	r3, fp, #4
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	9700      	str	r7, [sp, #0]
 8004b26:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b28:	f000 f9d6 	bl	8004ed8 <_printf_common>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	f040 8090 	bne.w	8004c52 <_printf_float+0x1d6>
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295
 8004b36:	b011      	add	sp, #68	; 0x44
 8004b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	4643      	mov	r3, r8
 8004b40:	4650      	mov	r0, sl
 8004b42:	4641      	mov	r1, r8
 8004b44:	f7fb ff62 	bl	8000a0c <__aeabi_dcmpun>
 8004b48:	b148      	cbz	r0, 8004b5e <_printf_float+0xe2>
 8004b4a:	f1b8 0f00 	cmp.w	r8, #0
 8004b4e:	bfb8      	it	lt
 8004b50:	232d      	movlt	r3, #45	; 0x2d
 8004b52:	4a80      	ldr	r2, [pc, #512]	; (8004d54 <_printf_float+0x2d8>)
 8004b54:	bfb8      	it	lt
 8004b56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b5a:	4b7f      	ldr	r3, [pc, #508]	; (8004d58 <_printf_float+0x2dc>)
 8004b5c:	e7d3      	b.n	8004b06 <_printf_float+0x8a>
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	d142      	bne.n	8004bee <_printf_float+0x172>
 8004b68:	2306      	movs	r3, #6
 8004b6a:	6063      	str	r3, [r4, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	9206      	str	r2, [sp, #24]
 8004b70:	aa0e      	add	r2, sp, #56	; 0x38
 8004b72:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b76:	aa0d      	add	r2, sp, #52	; 0x34
 8004b78:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b7c:	9203      	str	r2, [sp, #12]
 8004b7e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	4643      	mov	r3, r8
 8004b92:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b94:	f7ff fed6 	bl	8004944 <__cvt>
 8004b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	2947      	cmp	r1, #71	; 0x47
 8004b9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ba0:	d108      	bne.n	8004bb4 <_printf_float+0x138>
 8004ba2:	1cc8      	adds	r0, r1, #3
 8004ba4:	db02      	blt.n	8004bac <_printf_float+0x130>
 8004ba6:	6863      	ldr	r3, [r4, #4]
 8004ba8:	4299      	cmp	r1, r3
 8004baa:	dd40      	ble.n	8004c2e <_printf_float+0x1b2>
 8004bac:	f1a9 0902 	sub.w	r9, r9, #2
 8004bb0:	fa5f f989 	uxtb.w	r9, r9
 8004bb4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bb8:	d81f      	bhi.n	8004bfa <_printf_float+0x17e>
 8004bba:	464a      	mov	r2, r9
 8004bbc:	3901      	subs	r1, #1
 8004bbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bc2:	910d      	str	r1, [sp, #52]	; 0x34
 8004bc4:	f7ff ff1d 	bl	8004a02 <__exponent>
 8004bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bca:	4682      	mov	sl, r0
 8004bcc:	1813      	adds	r3, r2, r0
 8004bce:	2a01      	cmp	r2, #1
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	dc02      	bgt.n	8004bda <_printf_float+0x15e>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	07d2      	lsls	r2, r2, #31
 8004bd8:	d501      	bpl.n	8004bde <_printf_float+0x162>
 8004bda:	3301      	adds	r3, #1
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d09b      	beq.n	8004b1e <_printf_float+0xa2>
 8004be6:	232d      	movs	r3, #45	; 0x2d
 8004be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bec:	e797      	b.n	8004b1e <_printf_float+0xa2>
 8004bee:	2947      	cmp	r1, #71	; 0x47
 8004bf0:	d1bc      	bne.n	8004b6c <_printf_float+0xf0>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1ba      	bne.n	8004b6c <_printf_float+0xf0>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e7b7      	b.n	8004b6a <_printf_float+0xee>
 8004bfa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bfe:	d118      	bne.n	8004c32 <_printf_float+0x1b6>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	dd0b      	ble.n	8004c1e <_printf_float+0x1a2>
 8004c06:	6121      	str	r1, [r4, #16]
 8004c08:	b913      	cbnz	r3, 8004c10 <_printf_float+0x194>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	07d0      	lsls	r0, r2, #31
 8004c0e:	d502      	bpl.n	8004c16 <_printf_float+0x19a>
 8004c10:	3301      	adds	r3, #1
 8004c12:	440b      	add	r3, r1
 8004c14:	6123      	str	r3, [r4, #16]
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c1c:	e7df      	b.n	8004bde <_printf_float+0x162>
 8004c1e:	b913      	cbnz	r3, 8004c26 <_printf_float+0x1aa>
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	07d2      	lsls	r2, r2, #31
 8004c24:	d501      	bpl.n	8004c2a <_printf_float+0x1ae>
 8004c26:	3302      	adds	r3, #2
 8004c28:	e7f4      	b.n	8004c14 <_printf_float+0x198>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f2      	b.n	8004c14 <_printf_float+0x198>
 8004c2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c34:	4299      	cmp	r1, r3
 8004c36:	db05      	blt.n	8004c44 <_printf_float+0x1c8>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	6121      	str	r1, [r4, #16]
 8004c3c:	07d8      	lsls	r0, r3, #31
 8004c3e:	d5ea      	bpl.n	8004c16 <_printf_float+0x19a>
 8004c40:	1c4b      	adds	r3, r1, #1
 8004c42:	e7e7      	b.n	8004c14 <_printf_float+0x198>
 8004c44:	2900      	cmp	r1, #0
 8004c46:	bfcc      	ite	gt
 8004c48:	2201      	movgt	r2, #1
 8004c4a:	f1c1 0202 	rsble	r2, r1, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	e7e0      	b.n	8004c14 <_printf_float+0x198>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	055a      	lsls	r2, r3, #21
 8004c56:	d407      	bmi.n	8004c68 <_printf_float+0x1ec>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	d12b      	bne.n	8004cbe <_printf_float+0x242>
 8004c66:	e764      	b.n	8004b32 <_printf_float+0xb6>
 8004c68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c6c:	f240 80dd 	bls.w	8004e2a <_printf_float+0x3ae>
 8004c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d033      	beq.n	8004ce8 <_printf_float+0x26c>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <_printf_float+0x2e0>)
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f af51 	beq.w	8004b32 <_printf_float+0xb6>
 8004c90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c94:	429a      	cmp	r2, r3
 8004c96:	db02      	blt.n	8004c9e <_printf_float+0x222>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	07d8      	lsls	r0, r3, #31
 8004c9c:	d50f      	bpl.n	8004cbe <_printf_float+0x242>
 8004c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f af42 	beq.w	8004b32 <_printf_float+0xb6>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	f104 091a 	add.w	r9, r4, #26
 8004cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	4543      	cmp	r3, r8
 8004cbc:	dc09      	bgt.n	8004cd2 <_printf_float+0x256>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	079b      	lsls	r3, r3, #30
 8004cc2:	f100 8104 	bmi.w	8004ece <_printf_float+0x452>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e731      	b.n	8004b36 <_printf_float+0xba>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	464a      	mov	r2, r9
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f43f af28 	beq.w	8004b32 <_printf_float+0xb6>
 8004ce2:	f108 0801 	add.w	r8, r8, #1
 8004ce6:	e7e6      	b.n	8004cb6 <_printf_float+0x23a>
 8004ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dc38      	bgt.n	8004d60 <_printf_float+0x2e4>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <_printf_float+0x2e0>)
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f af1a 	beq.w	8004b32 <_printf_float+0xb6>
 8004cfe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d02:	4313      	orrs	r3, r2
 8004d04:	d102      	bne.n	8004d0c <_printf_float+0x290>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	07d9      	lsls	r1, r3, #31
 8004d0a:	d5d8      	bpl.n	8004cbe <_printf_float+0x242>
 8004d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af0b 	beq.w	8004b32 <_printf_float+0xb6>
 8004d1c:	f04f 0900 	mov.w	r9, #0
 8004d20:	f104 0a1a 	add.w	sl, r4, #26
 8004d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d26:	425b      	negs	r3, r3
 8004d28:	454b      	cmp	r3, r9
 8004d2a:	dc01      	bgt.n	8004d30 <_printf_float+0x2b4>
 8004d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2e:	e794      	b.n	8004c5a <_printf_float+0x1de>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4652      	mov	r2, sl
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f43f aef9 	beq.w	8004b32 <_printf_float+0xb6>
 8004d40:	f109 0901 	add.w	r9, r9, #1
 8004d44:	e7ee      	b.n	8004d24 <_printf_float+0x2a8>
 8004d46:	bf00      	nop
 8004d48:	7fefffff 	.word	0x7fefffff
 8004d4c:	08007458 	.word	0x08007458
 8004d50:	0800745c 	.word	0x0800745c
 8004d54:	08007460 	.word	0x08007460
 8004d58:	08007464 	.word	0x08007464
 8004d5c:	08007468 	.word	0x08007468
 8004d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d64:	429a      	cmp	r2, r3
 8004d66:	bfa8      	it	ge
 8004d68:	461a      	movge	r2, r3
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	4691      	mov	r9, r2
 8004d6e:	dc37      	bgt.n	8004de0 <_printf_float+0x364>
 8004d70:	f04f 0b00 	mov.w	fp, #0
 8004d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d78:	f104 021a 	add.w	r2, r4, #26
 8004d7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d80:	ebaa 0309 	sub.w	r3, sl, r9
 8004d84:	455b      	cmp	r3, fp
 8004d86:	dc33      	bgt.n	8004df0 <_printf_float+0x374>
 8004d88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	db3b      	blt.n	8004e08 <_printf_float+0x38c>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	07da      	lsls	r2, r3, #31
 8004d94:	d438      	bmi.n	8004e08 <_printf_float+0x38c>
 8004d96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d9a:	eba2 0903 	sub.w	r9, r2, r3
 8004d9e:	eba2 020a 	sub.w	r2, r2, sl
 8004da2:	4591      	cmp	r9, r2
 8004da4:	bfa8      	it	ge
 8004da6:	4691      	movge	r9, r2
 8004da8:	f1b9 0f00 	cmp.w	r9, #0
 8004dac:	dc34      	bgt.n	8004e18 <_printf_float+0x39c>
 8004dae:	f04f 0800 	mov.w	r8, #0
 8004db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db6:	f104 0a1a 	add.w	sl, r4, #26
 8004dba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	eba3 0309 	sub.w	r3, r3, r9
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	f77f af7a 	ble.w	8004cbe <_printf_float+0x242>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f aeac 	beq.w	8004b32 <_printf_float+0xb6>
 8004dda:	f108 0801 	add.w	r8, r8, #1
 8004dde:	e7ec      	b.n	8004dba <_printf_float+0x33e>
 8004de0:	4613      	mov	r3, r2
 8004de2:	4631      	mov	r1, r6
 8004de4:	4642      	mov	r2, r8
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	d1c0      	bne.n	8004d70 <_printf_float+0x2f4>
 8004dee:	e6a0      	b.n	8004b32 <_printf_float+0xb6>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f ae99 	beq.w	8004b32 <_printf_float+0xb6>
 8004e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e02:	f10b 0b01 	add.w	fp, fp, #1
 8004e06:	e7b9      	b.n	8004d7c <_printf_float+0x300>
 8004e08:	4631      	mov	r1, r6
 8004e0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	d1bf      	bne.n	8004d96 <_printf_float+0x31a>
 8004e16:	e68c      	b.n	8004b32 <_printf_float+0xb6>
 8004e18:	464b      	mov	r3, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	eb08 020a 	add.w	r2, r8, sl
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	d1c2      	bne.n	8004dae <_printf_float+0x332>
 8004e28:	e683      	b.n	8004b32 <_printf_float+0xb6>
 8004e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2c:	2a01      	cmp	r2, #1
 8004e2e:	dc01      	bgt.n	8004e34 <_printf_float+0x3b8>
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d539      	bpl.n	8004ea8 <_printf_float+0x42c>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4642      	mov	r2, r8
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f ae77 	beq.w	8004b32 <_printf_float+0xb6>
 8004e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	f43f ae6f 	beq.w	8004b32 <_printf_float+0xb6>
 8004e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e60:	f7fb fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e64:	b9d8      	cbnz	r0, 8004e9e <_printf_float+0x422>
 8004e66:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e6a:	f108 0201 	add.w	r2, r8, #1
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	d10e      	bne.n	8004e96 <_printf_float+0x41a>
 8004e78:	e65b      	b.n	8004b32 <_printf_float+0xb6>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	464a      	mov	r2, r9
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f ae54 	beq.w	8004b32 <_printf_float+0xb6>
 8004e8a:	f108 0801 	add.w	r8, r8, #1
 8004e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e90:	3b01      	subs	r3, #1
 8004e92:	4543      	cmp	r3, r8
 8004e94:	dcf1      	bgt.n	8004e7a <_printf_float+0x3fe>
 8004e96:	4653      	mov	r3, sl
 8004e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e9c:	e6de      	b.n	8004c5c <_printf_float+0x1e0>
 8004e9e:	f04f 0800 	mov.w	r8, #0
 8004ea2:	f104 091a 	add.w	r9, r4, #26
 8004ea6:	e7f2      	b.n	8004e8e <_printf_float+0x412>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4642      	mov	r2, r8
 8004eac:	e7df      	b.n	8004e6e <_printf_float+0x3f2>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	464a      	mov	r2, r9
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f ae3a 	beq.w	8004b32 <_printf_float+0xb6>
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ec6:	1a5b      	subs	r3, r3, r1
 8004ec8:	4543      	cmp	r3, r8
 8004eca:	dcf0      	bgt.n	8004eae <_printf_float+0x432>
 8004ecc:	e6fb      	b.n	8004cc6 <_printf_float+0x24a>
 8004ece:	f04f 0800 	mov.w	r8, #0
 8004ed2:	f104 0919 	add.w	r9, r4, #25
 8004ed6:	e7f4      	b.n	8004ec2 <_printf_float+0x446>

08004ed8 <_printf_common>:
 8004ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004edc:	4616      	mov	r6, r2
 8004ede:	4699      	mov	r9, r3
 8004ee0:	688a      	ldr	r2, [r1, #8]
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bfb8      	it	lt
 8004eea:	4613      	movlt	r3, r2
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef8:	b10a      	cbz	r2, 8004efe <_printf_common+0x26>
 8004efa:	3301      	adds	r3, #1
 8004efc:	6033      	str	r3, [r6, #0]
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	0699      	lsls	r1, r3, #26
 8004f02:	bf42      	ittt	mi
 8004f04:	6833      	ldrmi	r3, [r6, #0]
 8004f06:	3302      	addmi	r3, #2
 8004f08:	6033      	strmi	r3, [r6, #0]
 8004f0a:	6825      	ldr	r5, [r4, #0]
 8004f0c:	f015 0506 	ands.w	r5, r5, #6
 8004f10:	d106      	bne.n	8004f20 <_printf_common+0x48>
 8004f12:	f104 0a19 	add.w	sl, r4, #25
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	6832      	ldr	r2, [r6, #0]
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	42ab      	cmp	r3, r5
 8004f1e:	dc2b      	bgt.n	8004f78 <_printf_common+0xa0>
 8004f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f24:	1e13      	subs	r3, r2, #0
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	0692      	lsls	r2, r2, #26
 8004f2e:	d430      	bmi.n	8004f92 <_printf_common+0xba>
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d023      	beq.n	8004f86 <_printf_common+0xae>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	6922      	ldr	r2, [r4, #16]
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	bf14      	ite	ne
 8004f4a:	2500      	movne	r5, #0
 8004f4c:	6833      	ldreq	r3, [r6, #0]
 8004f4e:	f04f 0600 	mov.w	r6, #0
 8004f52:	bf08      	it	eq
 8004f54:	68e5      	ldreq	r5, [r4, #12]
 8004f56:	f104 041a 	add.w	r4, r4, #26
 8004f5a:	bf08      	it	eq
 8004f5c:	1aed      	subeq	r5, r5, r3
 8004f5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f62:	bf08      	it	eq
 8004f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	bfc4      	itt	gt
 8004f6c:	1a9b      	subgt	r3, r3, r2
 8004f6e:	18ed      	addgt	r5, r5, r3
 8004f70:	42b5      	cmp	r5, r6
 8004f72:	d11a      	bne.n	8004faa <_printf_common+0xd2>
 8004f74:	2000      	movs	r0, #0
 8004f76:	e008      	b.n	8004f8a <_printf_common+0xb2>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4638      	mov	r0, r7
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d103      	bne.n	8004f8e <_printf_common+0xb6>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	3501      	adds	r5, #1
 8004f90:	e7c1      	b.n	8004f16 <_printf_common+0x3e>
 8004f92:	2030      	movs	r0, #48	; 0x30
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa0:	4422      	add	r2, r4
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa8:	e7c2      	b.n	8004f30 <_printf_common+0x58>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4622      	mov	r2, r4
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d0e6      	beq.n	8004f86 <_printf_common+0xae>
 8004fb8:	3601      	adds	r6, #1
 8004fba:	e7d9      	b.n	8004f70 <_printf_common+0x98>

08004fbc <_printf_i>:
 8004fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	7e0f      	ldrb	r7, [r1, #24]
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	2f78      	cmp	r7, #120	; 0x78
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	469a      	mov	sl, r3
 8004fcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fd2:	d807      	bhi.n	8004fe4 <_printf_i+0x28>
 8004fd4:	2f62      	cmp	r7, #98	; 0x62
 8004fd6:	d80a      	bhi.n	8004fee <_printf_i+0x32>
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	f000 80d5 	beq.w	8005188 <_printf_i+0x1cc>
 8004fde:	2f58      	cmp	r7, #88	; 0x58
 8004fe0:	f000 80c1 	beq.w	8005166 <_printf_i+0x1aa>
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fec:	e03a      	b.n	8005064 <_printf_i+0xa8>
 8004fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ff2:	2b15      	cmp	r3, #21
 8004ff4:	d8f6      	bhi.n	8004fe4 <_printf_i+0x28>
 8004ff6:	a101      	add	r1, pc, #4	; (adr r1, 8004ffc <_printf_i+0x40>)
 8004ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005069 	.word	0x08005069
 8005004:	08004fe5 	.word	0x08004fe5
 8005008:	08004fe5 	.word	0x08004fe5
 800500c:	08004fe5 	.word	0x08004fe5
 8005010:	08004fe5 	.word	0x08004fe5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fe5 	.word	0x08004fe5
 800501c:	08004fe5 	.word	0x08004fe5
 8005020:	08004fe5 	.word	0x08004fe5
 8005024:	08004fe5 	.word	0x08004fe5
 8005028:	0800516f 	.word	0x0800516f
 800502c:	08005095 	.word	0x08005095
 8005030:	08005129 	.word	0x08005129
 8005034:	08004fe5 	.word	0x08004fe5
 8005038:	08004fe5 	.word	0x08004fe5
 800503c:	08005191 	.word	0x08005191
 8005040:	08004fe5 	.word	0x08004fe5
 8005044:	08005095 	.word	0x08005095
 8005048:	08004fe5 	.word	0x08004fe5
 800504c:	08004fe5 	.word	0x08004fe5
 8005050:	08005131 	.word	0x08005131
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	1d1a      	adds	r2, r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	602a      	str	r2, [r5, #0]
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005064:	2301      	movs	r3, #1
 8005066:	e0a0      	b.n	80051aa <_printf_i+0x1ee>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	0607      	lsls	r7, r0, #24
 800506e:	f103 0104 	add.w	r1, r3, #4
 8005072:	6029      	str	r1, [r5, #0]
 8005074:	d501      	bpl.n	800507a <_printf_i+0xbe>
 8005076:	681e      	ldr	r6, [r3, #0]
 8005078:	e003      	b.n	8005082 <_printf_i+0xc6>
 800507a:	0646      	lsls	r6, r0, #25
 800507c:	d5fb      	bpl.n	8005076 <_printf_i+0xba>
 800507e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005082:	2e00      	cmp	r6, #0
 8005084:	da03      	bge.n	800508e <_printf_i+0xd2>
 8005086:	232d      	movs	r3, #45	; 0x2d
 8005088:	4276      	negs	r6, r6
 800508a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508e:	230a      	movs	r3, #10
 8005090:	4859      	ldr	r0, [pc, #356]	; (80051f8 <_printf_i+0x23c>)
 8005092:	e012      	b.n	80050ba <_printf_i+0xfe>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	6820      	ldr	r0, [r4, #0]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	6029      	str	r1, [r5, #0]
 800509c:	0605      	lsls	r5, r0, #24
 800509e:	d501      	bpl.n	80050a4 <_printf_i+0xe8>
 80050a0:	681e      	ldr	r6, [r3, #0]
 80050a2:	e002      	b.n	80050aa <_printf_i+0xee>
 80050a4:	0641      	lsls	r1, r0, #25
 80050a6:	d5fb      	bpl.n	80050a0 <_printf_i+0xe4>
 80050a8:	881e      	ldrh	r6, [r3, #0]
 80050aa:	2f6f      	cmp	r7, #111	; 0x6f
 80050ac:	bf0c      	ite	eq
 80050ae:	2308      	moveq	r3, #8
 80050b0:	230a      	movne	r3, #10
 80050b2:	4851      	ldr	r0, [pc, #324]	; (80051f8 <_printf_i+0x23c>)
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ba:	6865      	ldr	r5, [r4, #4]
 80050bc:	2d00      	cmp	r5, #0
 80050be:	bfa8      	it	ge
 80050c0:	6821      	ldrge	r1, [r4, #0]
 80050c2:	60a5      	str	r5, [r4, #8]
 80050c4:	bfa4      	itt	ge
 80050c6:	f021 0104 	bicge.w	r1, r1, #4
 80050ca:	6021      	strge	r1, [r4, #0]
 80050cc:	b90e      	cbnz	r6, 80050d2 <_printf_i+0x116>
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	d04b      	beq.n	800516a <_printf_i+0x1ae>
 80050d2:	4615      	mov	r5, r2
 80050d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d8:	fb03 6711 	mls	r7, r3, r1, r6
 80050dc:	5dc7      	ldrb	r7, [r0, r7]
 80050de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e2:	4637      	mov	r7, r6
 80050e4:	42bb      	cmp	r3, r7
 80050e6:	460e      	mov	r6, r1
 80050e8:	d9f4      	bls.n	80050d4 <_printf_i+0x118>
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d10b      	bne.n	8005106 <_printf_i+0x14a>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	07de      	lsls	r6, r3, #31
 80050f2:	d508      	bpl.n	8005106 <_printf_i+0x14a>
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	6861      	ldr	r1, [r4, #4]
 80050f8:	4299      	cmp	r1, r3
 80050fa:	bfde      	ittt	le
 80050fc:	2330      	movle	r3, #48	; 0x30
 80050fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005102:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005106:	1b52      	subs	r2, r2, r5
 8005108:	6122      	str	r2, [r4, #16]
 800510a:	464b      	mov	r3, r9
 800510c:	4621      	mov	r1, r4
 800510e:	4640      	mov	r0, r8
 8005110:	f8cd a000 	str.w	sl, [sp]
 8005114:	aa03      	add	r2, sp, #12
 8005116:	f7ff fedf 	bl	8004ed8 <_printf_common>
 800511a:	3001      	adds	r0, #1
 800511c:	d14a      	bne.n	80051b4 <_printf_i+0x1f8>
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	b004      	add	sp, #16
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	f043 0320 	orr.w	r3, r3, #32
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	2778      	movs	r7, #120	; 0x78
 8005132:	4832      	ldr	r0, [pc, #200]	; (80051fc <_printf_i+0x240>)
 8005134:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	6829      	ldr	r1, [r5, #0]
 800513c:	061f      	lsls	r7, r3, #24
 800513e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005142:	d402      	bmi.n	800514a <_printf_i+0x18e>
 8005144:	065f      	lsls	r7, r3, #25
 8005146:	bf48      	it	mi
 8005148:	b2b6      	uxthmi	r6, r6
 800514a:	07df      	lsls	r7, r3, #31
 800514c:	bf48      	it	mi
 800514e:	f043 0320 	orrmi.w	r3, r3, #32
 8005152:	6029      	str	r1, [r5, #0]
 8005154:	bf48      	it	mi
 8005156:	6023      	strmi	r3, [r4, #0]
 8005158:	b91e      	cbnz	r6, 8005162 <_printf_i+0x1a6>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f023 0320 	bic.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	2310      	movs	r3, #16
 8005164:	e7a6      	b.n	80050b4 <_printf_i+0xf8>
 8005166:	4824      	ldr	r0, [pc, #144]	; (80051f8 <_printf_i+0x23c>)
 8005168:	e7e4      	b.n	8005134 <_printf_i+0x178>
 800516a:	4615      	mov	r5, r2
 800516c:	e7bd      	b.n	80050ea <_printf_i+0x12e>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	6826      	ldr	r6, [r4, #0]
 8005172:	1d18      	adds	r0, r3, #4
 8005174:	6961      	ldr	r1, [r4, #20]
 8005176:	6028      	str	r0, [r5, #0]
 8005178:	0635      	lsls	r5, r6, #24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	d501      	bpl.n	8005182 <_printf_i+0x1c6>
 800517e:	6019      	str	r1, [r3, #0]
 8005180:	e002      	b.n	8005188 <_printf_i+0x1cc>
 8005182:	0670      	lsls	r0, r6, #25
 8005184:	d5fb      	bpl.n	800517e <_printf_i+0x1c2>
 8005186:	8019      	strh	r1, [r3, #0]
 8005188:	2300      	movs	r3, #0
 800518a:	4615      	mov	r5, r2
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	e7bc      	b.n	800510a <_printf_i+0x14e>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	2100      	movs	r1, #0
 8005194:	1d1a      	adds	r2, r3, #4
 8005196:	602a      	str	r2, [r5, #0]
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	6862      	ldr	r2, [r4, #4]
 800519c:	4628      	mov	r0, r5
 800519e:	f000 fab6 	bl	800570e <memchr>
 80051a2:	b108      	cbz	r0, 80051a8 <_printf_i+0x1ec>
 80051a4:	1b40      	subs	r0, r0, r5
 80051a6:	6060      	str	r0, [r4, #4]
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	2300      	movs	r3, #0
 80051ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b2:	e7aa      	b.n	800510a <_printf_i+0x14e>
 80051b4:	462a      	mov	r2, r5
 80051b6:	4649      	mov	r1, r9
 80051b8:	4640      	mov	r0, r8
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	47d0      	blx	sl
 80051be:	3001      	adds	r0, #1
 80051c0:	d0ad      	beq.n	800511e <_printf_i+0x162>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	079b      	lsls	r3, r3, #30
 80051c6:	d413      	bmi.n	80051f0 <_printf_i+0x234>
 80051c8:	68e0      	ldr	r0, [r4, #12]
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	4298      	cmp	r0, r3
 80051ce:	bfb8      	it	lt
 80051d0:	4618      	movlt	r0, r3
 80051d2:	e7a6      	b.n	8005122 <_printf_i+0x166>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4632      	mov	r2, r6
 80051d8:	4649      	mov	r1, r9
 80051da:	4640      	mov	r0, r8
 80051dc:	47d0      	blx	sl
 80051de:	3001      	adds	r0, #1
 80051e0:	d09d      	beq.n	800511e <_printf_i+0x162>
 80051e2:	3501      	adds	r5, #1
 80051e4:	68e3      	ldr	r3, [r4, #12]
 80051e6:	9903      	ldr	r1, [sp, #12]
 80051e8:	1a5b      	subs	r3, r3, r1
 80051ea:	42ab      	cmp	r3, r5
 80051ec:	dcf2      	bgt.n	80051d4 <_printf_i+0x218>
 80051ee:	e7eb      	b.n	80051c8 <_printf_i+0x20c>
 80051f0:	2500      	movs	r5, #0
 80051f2:	f104 0619 	add.w	r6, r4, #25
 80051f6:	e7f5      	b.n	80051e4 <_printf_i+0x228>
 80051f8:	0800746a 	.word	0x0800746a
 80051fc:	0800747b 	.word	0x0800747b

08005200 <std>:
 8005200:	2300      	movs	r3, #0
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	e9c0 3300 	strd	r3, r3, [r0]
 800520a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800520e:	6083      	str	r3, [r0, #8]
 8005210:	8181      	strh	r1, [r0, #12]
 8005212:	6643      	str	r3, [r0, #100]	; 0x64
 8005214:	81c2      	strh	r2, [r0, #14]
 8005216:	6183      	str	r3, [r0, #24]
 8005218:	4619      	mov	r1, r3
 800521a:	2208      	movs	r2, #8
 800521c:	305c      	adds	r0, #92	; 0x5c
 800521e:	f000 f9f7 	bl	8005610 <memset>
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <std+0x58>)
 8005224:	6224      	str	r4, [r4, #32]
 8005226:	6263      	str	r3, [r4, #36]	; 0x24
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <std+0x5c>)
 800522a:	62a3      	str	r3, [r4, #40]	; 0x28
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <std+0x60>)
 800522e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <std+0x64>)
 8005232:	6323      	str	r3, [r4, #48]	; 0x30
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <std+0x68>)
 8005236:	429c      	cmp	r4, r3
 8005238:	d006      	beq.n	8005248 <std+0x48>
 800523a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800523e:	4294      	cmp	r4, r2
 8005240:	d002      	beq.n	8005248 <std+0x48>
 8005242:	33d0      	adds	r3, #208	; 0xd0
 8005244:	429c      	cmp	r4, r3
 8005246:	d105      	bne.n	8005254 <std+0x54>
 8005248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005250:	f000 ba5a 	b.w	8005708 <__retarget_lock_init_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	bf00      	nop
 8005258:	08005461 	.word	0x08005461
 800525c:	08005483 	.word	0x08005483
 8005260:	080054bb 	.word	0x080054bb
 8005264:	080054df 	.word	0x080054df
 8005268:	20000408 	.word	0x20000408

0800526c <stdio_exit_handler>:
 800526c:	4a02      	ldr	r2, [pc, #8]	; (8005278 <stdio_exit_handler+0xc>)
 800526e:	4903      	ldr	r1, [pc, #12]	; (800527c <stdio_exit_handler+0x10>)
 8005270:	4803      	ldr	r0, [pc, #12]	; (8005280 <stdio_exit_handler+0x14>)
 8005272:	f000 b869 	b.w	8005348 <_fwalk_sglue>
 8005276:	bf00      	nop
 8005278:	2000000c 	.word	0x2000000c
 800527c:	08007079 	.word	0x08007079
 8005280:	20000018 	.word	0x20000018

08005284 <cleanup_stdio>:
 8005284:	6841      	ldr	r1, [r0, #4]
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <cleanup_stdio+0x34>)
 8005288:	b510      	push	{r4, lr}
 800528a:	4299      	cmp	r1, r3
 800528c:	4604      	mov	r4, r0
 800528e:	d001      	beq.n	8005294 <cleanup_stdio+0x10>
 8005290:	f001 fef2 	bl	8007078 <_fflush_r>
 8005294:	68a1      	ldr	r1, [r4, #8]
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <cleanup_stdio+0x38>)
 8005298:	4299      	cmp	r1, r3
 800529a:	d002      	beq.n	80052a2 <cleanup_stdio+0x1e>
 800529c:	4620      	mov	r0, r4
 800529e:	f001 feeb 	bl	8007078 <_fflush_r>
 80052a2:	68e1      	ldr	r1, [r4, #12]
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <cleanup_stdio+0x3c>)
 80052a6:	4299      	cmp	r1, r3
 80052a8:	d004      	beq.n	80052b4 <cleanup_stdio+0x30>
 80052aa:	4620      	mov	r0, r4
 80052ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b0:	f001 bee2 	b.w	8007078 <_fflush_r>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop
 80052b8:	20000408 	.word	0x20000408
 80052bc:	20000470 	.word	0x20000470
 80052c0:	200004d8 	.word	0x200004d8

080052c4 <global_stdio_init.part.0>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <global_stdio_init.part.0+0x30>)
 80052c8:	4c0b      	ldr	r4, [pc, #44]	; (80052f8 <global_stdio_init.part.0+0x34>)
 80052ca:	4a0c      	ldr	r2, [pc, #48]	; (80052fc <global_stdio_init.part.0+0x38>)
 80052cc:	4620      	mov	r0, r4
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	2104      	movs	r1, #4
 80052d2:	2200      	movs	r2, #0
 80052d4:	f7ff ff94 	bl	8005200 <std>
 80052d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052dc:	2201      	movs	r2, #1
 80052de:	2109      	movs	r1, #9
 80052e0:	f7ff ff8e 	bl	8005200 <std>
 80052e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052e8:	2202      	movs	r2, #2
 80052ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ee:	2112      	movs	r1, #18
 80052f0:	f7ff bf86 	b.w	8005200 <std>
 80052f4:	20000540 	.word	0x20000540
 80052f8:	20000408 	.word	0x20000408
 80052fc:	0800526d 	.word	0x0800526d

08005300 <__sfp_lock_acquire>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__sfp_lock_acquire+0x8>)
 8005302:	f000 ba02 	b.w	800570a <__retarget_lock_acquire_recursive>
 8005306:	bf00      	nop
 8005308:	20000549 	.word	0x20000549

0800530c <__sfp_lock_release>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__sfp_lock_release+0x8>)
 800530e:	f000 b9fd 	b.w	800570c <__retarget_lock_release_recursive>
 8005312:	bf00      	nop
 8005314:	20000549 	.word	0x20000549

08005318 <__sinit>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	f7ff fff0 	bl	8005300 <__sfp_lock_acquire>
 8005320:	6a23      	ldr	r3, [r4, #32]
 8005322:	b11b      	cbz	r3, 800532c <__sinit+0x14>
 8005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005328:	f7ff bff0 	b.w	800530c <__sfp_lock_release>
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <__sinit+0x28>)
 800532e:	6223      	str	r3, [r4, #32]
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <__sinit+0x2c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f5      	bne.n	8005324 <__sinit+0xc>
 8005338:	f7ff ffc4 	bl	80052c4 <global_stdio_init.part.0>
 800533c:	e7f2      	b.n	8005324 <__sinit+0xc>
 800533e:	bf00      	nop
 8005340:	08005285 	.word	0x08005285
 8005344:	20000540 	.word	0x20000540

08005348 <_fwalk_sglue>:
 8005348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800534c:	4607      	mov	r7, r0
 800534e:	4688      	mov	r8, r1
 8005350:	4614      	mov	r4, r2
 8005352:	2600      	movs	r6, #0
 8005354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005358:	f1b9 0901 	subs.w	r9, r9, #1
 800535c:	d505      	bpl.n	800536a <_fwalk_sglue+0x22>
 800535e:	6824      	ldr	r4, [r4, #0]
 8005360:	2c00      	cmp	r4, #0
 8005362:	d1f7      	bne.n	8005354 <_fwalk_sglue+0xc>
 8005364:	4630      	mov	r0, r6
 8005366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d907      	bls.n	8005380 <_fwalk_sglue+0x38>
 8005370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005374:	3301      	adds	r3, #1
 8005376:	d003      	beq.n	8005380 <_fwalk_sglue+0x38>
 8005378:	4629      	mov	r1, r5
 800537a:	4638      	mov	r0, r7
 800537c:	47c0      	blx	r8
 800537e:	4306      	orrs	r6, r0
 8005380:	3568      	adds	r5, #104	; 0x68
 8005382:	e7e9      	b.n	8005358 <_fwalk_sglue+0x10>

08005384 <iprintf>:
 8005384:	b40f      	push	{r0, r1, r2, r3}
 8005386:	b507      	push	{r0, r1, r2, lr}
 8005388:	4906      	ldr	r1, [pc, #24]	; (80053a4 <iprintf+0x20>)
 800538a:	ab04      	add	r3, sp, #16
 800538c:	6808      	ldr	r0, [r1, #0]
 800538e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005392:	6881      	ldr	r1, [r0, #8]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f001 fcd3 	bl	8006d40 <_vfiprintf_r>
 800539a:	b003      	add	sp, #12
 800539c:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	20000064 	.word	0x20000064

080053a8 <_puts_r>:
 80053a8:	6a03      	ldr	r3, [r0, #32]
 80053aa:	b570      	push	{r4, r5, r6, lr}
 80053ac:	4605      	mov	r5, r0
 80053ae:	460e      	mov	r6, r1
 80053b0:	6884      	ldr	r4, [r0, #8]
 80053b2:	b90b      	cbnz	r3, 80053b8 <_puts_r+0x10>
 80053b4:	f7ff ffb0 	bl	8005318 <__sinit>
 80053b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ba:	07db      	lsls	r3, r3, #31
 80053bc:	d405      	bmi.n	80053ca <_puts_r+0x22>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	0598      	lsls	r0, r3, #22
 80053c2:	d402      	bmi.n	80053ca <_puts_r+0x22>
 80053c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c6:	f000 f9a0 	bl	800570a <__retarget_lock_acquire_recursive>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	0719      	lsls	r1, r3, #28
 80053ce:	d513      	bpl.n	80053f8 <_puts_r+0x50>
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	b18b      	cbz	r3, 80053f8 <_puts_r+0x50>
 80053d4:	3e01      	subs	r6, #1
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053dc:	3b01      	subs	r3, #1
 80053de:	60a3      	str	r3, [r4, #8]
 80053e0:	b9e9      	cbnz	r1, 800541e <_puts_r+0x76>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da2e      	bge.n	8005444 <_puts_r+0x9c>
 80053e6:	4622      	mov	r2, r4
 80053e8:	210a      	movs	r1, #10
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f87b 	bl	80054e6 <__swbuf_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d007      	beq.n	8005404 <_puts_r+0x5c>
 80053f4:	250a      	movs	r5, #10
 80053f6:	e007      	b.n	8005408 <_puts_r+0x60>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 f8b0 	bl	8005560 <__swsetup_r>
 8005400:	2800      	cmp	r0, #0
 8005402:	d0e7      	beq.n	80053d4 <_puts_r+0x2c>
 8005404:	f04f 35ff 	mov.w	r5, #4294967295
 8005408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800540a:	07da      	lsls	r2, r3, #31
 800540c:	d405      	bmi.n	800541a <_puts_r+0x72>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	059b      	lsls	r3, r3, #22
 8005412:	d402      	bmi.n	800541a <_puts_r+0x72>
 8005414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005416:	f000 f979 	bl	800570c <__retarget_lock_release_recursive>
 800541a:	4628      	mov	r0, r5
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	2b00      	cmp	r3, #0
 8005420:	da04      	bge.n	800542c <_puts_r+0x84>
 8005422:	69a2      	ldr	r2, [r4, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	dc06      	bgt.n	8005436 <_puts_r+0x8e>
 8005428:	290a      	cmp	r1, #10
 800542a:	d004      	beq.n	8005436 <_puts_r+0x8e>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	7019      	strb	r1, [r3, #0]
 8005434:	e7cf      	b.n	80053d6 <_puts_r+0x2e>
 8005436:	4622      	mov	r2, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 f854 	bl	80054e6 <__swbuf_r>
 800543e:	3001      	adds	r0, #1
 8005440:	d1c9      	bne.n	80053d6 <_puts_r+0x2e>
 8005442:	e7df      	b.n	8005404 <_puts_r+0x5c>
 8005444:	250a      	movs	r5, #10
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	6022      	str	r2, [r4, #0]
 800544c:	701d      	strb	r5, [r3, #0]
 800544e:	e7db      	b.n	8005408 <_puts_r+0x60>

08005450 <puts>:
 8005450:	4b02      	ldr	r3, [pc, #8]	; (800545c <puts+0xc>)
 8005452:	4601      	mov	r1, r0
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	f7ff bfa7 	b.w	80053a8 <_puts_r>
 800545a:	bf00      	nop
 800545c:	20000064 	.word	0x20000064

08005460 <__sread>:
 8005460:	b510      	push	{r4, lr}
 8005462:	460c      	mov	r4, r1
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	f000 f900 	bl	800566c <_read_r>
 800546c:	2800      	cmp	r0, #0
 800546e:	bfab      	itete	ge
 8005470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005472:	89a3      	ldrhlt	r3, [r4, #12]
 8005474:	181b      	addge	r3, r3, r0
 8005476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800547a:	bfac      	ite	ge
 800547c:	6563      	strge	r3, [r4, #84]	; 0x54
 800547e:	81a3      	strhlt	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}

08005482 <__swrite>:
 8005482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	461f      	mov	r7, r3
 8005488:	898b      	ldrh	r3, [r1, #12]
 800548a:	4605      	mov	r5, r0
 800548c:	05db      	lsls	r3, r3, #23
 800548e:	460c      	mov	r4, r1
 8005490:	4616      	mov	r6, r2
 8005492:	d505      	bpl.n	80054a0 <__swrite+0x1e>
 8005494:	2302      	movs	r3, #2
 8005496:	2200      	movs	r2, #0
 8005498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549c:	f000 f8d4 	bl	8005648 <_lseek_r>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	4632      	mov	r2, r6
 80054a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	4628      	mov	r0, r5
 80054ac:	463b      	mov	r3, r7
 80054ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	f000 b8eb 	b.w	8005690 <_write_r>

080054ba <__sseek>:
 80054ba:	b510      	push	{r4, lr}
 80054bc:	460c      	mov	r4, r1
 80054be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c2:	f000 f8c1 	bl	8005648 <_lseek_r>
 80054c6:	1c43      	adds	r3, r0, #1
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	bf15      	itete	ne
 80054cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054d6:	81a3      	strheq	r3, [r4, #12]
 80054d8:	bf18      	it	ne
 80054da:	81a3      	strhne	r3, [r4, #12]
 80054dc:	bd10      	pop	{r4, pc}

080054de <__sclose>:
 80054de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e2:	f000 b8a1 	b.w	8005628 <_close_r>

080054e6 <__swbuf_r>:
 80054e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e8:	460e      	mov	r6, r1
 80054ea:	4614      	mov	r4, r2
 80054ec:	4605      	mov	r5, r0
 80054ee:	b118      	cbz	r0, 80054f8 <__swbuf_r+0x12>
 80054f0:	6a03      	ldr	r3, [r0, #32]
 80054f2:	b90b      	cbnz	r3, 80054f8 <__swbuf_r+0x12>
 80054f4:	f7ff ff10 	bl	8005318 <__sinit>
 80054f8:	69a3      	ldr	r3, [r4, #24]
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	071a      	lsls	r2, r3, #28
 8005500:	d525      	bpl.n	800554e <__swbuf_r+0x68>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	b31b      	cbz	r3, 800554e <__swbuf_r+0x68>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	b2f6      	uxtb	r6, r6
 800550c:	1a98      	subs	r0, r3, r2
 800550e:	6963      	ldr	r3, [r4, #20]
 8005510:	4637      	mov	r7, r6
 8005512:	4283      	cmp	r3, r0
 8005514:	dc04      	bgt.n	8005520 <__swbuf_r+0x3a>
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f001 fdad 	bl	8007078 <_fflush_r>
 800551e:	b9e0      	cbnz	r0, 800555a <__swbuf_r+0x74>
 8005520:	68a3      	ldr	r3, [r4, #8]
 8005522:	3b01      	subs	r3, #1
 8005524:	60a3      	str	r3, [r4, #8]
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	6022      	str	r2, [r4, #0]
 800552c:	701e      	strb	r6, [r3, #0]
 800552e:	6962      	ldr	r2, [r4, #20]
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	429a      	cmp	r2, r3
 8005534:	d004      	beq.n	8005540 <__swbuf_r+0x5a>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	07db      	lsls	r3, r3, #31
 800553a:	d506      	bpl.n	800554a <__swbuf_r+0x64>
 800553c:	2e0a      	cmp	r6, #10
 800553e:	d104      	bne.n	800554a <__swbuf_r+0x64>
 8005540:	4621      	mov	r1, r4
 8005542:	4628      	mov	r0, r5
 8005544:	f001 fd98 	bl	8007078 <_fflush_r>
 8005548:	b938      	cbnz	r0, 800555a <__swbuf_r+0x74>
 800554a:	4638      	mov	r0, r7
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f805 	bl	8005560 <__swsetup_r>
 8005556:	2800      	cmp	r0, #0
 8005558:	d0d5      	beq.n	8005506 <__swbuf_r+0x20>
 800555a:	f04f 37ff 	mov.w	r7, #4294967295
 800555e:	e7f4      	b.n	800554a <__swbuf_r+0x64>

08005560 <__swsetup_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4b2a      	ldr	r3, [pc, #168]	; (800560c <__swsetup_r+0xac>)
 8005564:	4605      	mov	r5, r0
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	460c      	mov	r4, r1
 800556a:	b118      	cbz	r0, 8005574 <__swsetup_r+0x14>
 800556c:	6a03      	ldr	r3, [r0, #32]
 800556e:	b90b      	cbnz	r3, 8005574 <__swsetup_r+0x14>
 8005570:	f7ff fed2 	bl	8005318 <__sinit>
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800557a:	0718      	lsls	r0, r3, #28
 800557c:	d422      	bmi.n	80055c4 <__swsetup_r+0x64>
 800557e:	06d9      	lsls	r1, r3, #27
 8005580:	d407      	bmi.n	8005592 <__swsetup_r+0x32>
 8005582:	2309      	movs	r3, #9
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	e034      	b.n	80055fc <__swsetup_r+0x9c>
 8005592:	0758      	lsls	r0, r3, #29
 8005594:	d512      	bpl.n	80055bc <__swsetup_r+0x5c>
 8005596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005598:	b141      	cbz	r1, 80055ac <__swsetup_r+0x4c>
 800559a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559e:	4299      	cmp	r1, r3
 80055a0:	d002      	beq.n	80055a8 <__swsetup_r+0x48>
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 ff30 	bl	8006408 <_free_r>
 80055a8:	2300      	movs	r3, #0
 80055aa:	6363      	str	r3, [r4, #52]	; 0x34
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	2300      	movs	r3, #0
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f043 0308 	orr.w	r3, r3, #8
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	b94b      	cbnz	r3, 80055dc <__swsetup_r+0x7c>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d2:	d003      	beq.n	80055dc <__swsetup_r+0x7c>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f001 fd9b 	bl	8007112 <__smakebuf_r>
 80055dc:	89a0      	ldrh	r0, [r4, #12]
 80055de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e2:	f010 0301 	ands.w	r3, r0, #1
 80055e6:	d00a      	beq.n	80055fe <__swsetup_r+0x9e>
 80055e8:	2300      	movs	r3, #0
 80055ea:	60a3      	str	r3, [r4, #8]
 80055ec:	6963      	ldr	r3, [r4, #20]
 80055ee:	425b      	negs	r3, r3
 80055f0:	61a3      	str	r3, [r4, #24]
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	b943      	cbnz	r3, 8005608 <__swsetup_r+0xa8>
 80055f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055fa:	d1c4      	bne.n	8005586 <__swsetup_r+0x26>
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	0781      	lsls	r1, r0, #30
 8005600:	bf58      	it	pl
 8005602:	6963      	ldrpl	r3, [r4, #20]
 8005604:	60a3      	str	r3, [r4, #8]
 8005606:	e7f4      	b.n	80055f2 <__swsetup_r+0x92>
 8005608:	2000      	movs	r0, #0
 800560a:	e7f7      	b.n	80055fc <__swsetup_r+0x9c>
 800560c:	20000064 	.word	0x20000064

08005610 <memset>:
 8005610:	4603      	mov	r3, r0
 8005612:	4402      	add	r2, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <_localeconv_r>:
 8005620:	4800      	ldr	r0, [pc, #0]	; (8005624 <_localeconv_r+0x4>)
 8005622:	4770      	bx	lr
 8005624:	20000158 	.word	0x20000158

08005628 <_close_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	2300      	movs	r3, #0
 800562c:	4d05      	ldr	r5, [pc, #20]	; (8005644 <_close_r+0x1c>)
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fc f998 	bl	8001968 <_close>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_close_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_close_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000544 	.word	0x20000544

08005648 <_lseek_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	2200      	movs	r2, #0
 8005652:	4d05      	ldr	r5, [pc, #20]	; (8005668 <_lseek_r+0x20>)
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fc f9aa 	bl	80019b0 <_lseek>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_lseek_r+0x1e>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_lseek_r+0x1e>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	20000544 	.word	0x20000544

0800566c <_read_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	2200      	movs	r2, #0
 8005676:	4d05      	ldr	r5, [pc, #20]	; (800568c <_read_r+0x20>)
 8005678:	602a      	str	r2, [r5, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	f7fc f93b 	bl	80018f6 <_read>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d102      	bne.n	800568a <_read_r+0x1e>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	b103      	cbz	r3, 800568a <_read_r+0x1e>
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	bd38      	pop	{r3, r4, r5, pc}
 800568c:	20000544 	.word	0x20000544

08005690 <_write_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	2200      	movs	r2, #0
 800569a:	4d05      	ldr	r5, [pc, #20]	; (80056b0 <_write_r+0x20>)
 800569c:	602a      	str	r2, [r5, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	f7fc f946 	bl	8001930 <_write>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_write_r+0x1e>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_write_r+0x1e>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20000544 	.word	0x20000544

080056b4 <__errno>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <__errno+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000064 	.word	0x20000064

080056c0 <__libc_init_array>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	2600      	movs	r6, #0
 80056c4:	4d0c      	ldr	r5, [pc, #48]	; (80056f8 <__libc_init_array+0x38>)
 80056c6:	4c0d      	ldr	r4, [pc, #52]	; (80056fc <__libc_init_array+0x3c>)
 80056c8:	1b64      	subs	r4, r4, r5
 80056ca:	10a4      	asrs	r4, r4, #2
 80056cc:	42a6      	cmp	r6, r4
 80056ce:	d109      	bne.n	80056e4 <__libc_init_array+0x24>
 80056d0:	f001 fe4c 	bl	800736c <_init>
 80056d4:	2600      	movs	r6, #0
 80056d6:	4d0a      	ldr	r5, [pc, #40]	; (8005700 <__libc_init_array+0x40>)
 80056d8:	4c0a      	ldr	r4, [pc, #40]	; (8005704 <__libc_init_array+0x44>)
 80056da:	1b64      	subs	r4, r4, r5
 80056dc:	10a4      	asrs	r4, r4, #2
 80056de:	42a6      	cmp	r6, r4
 80056e0:	d105      	bne.n	80056ee <__libc_init_array+0x2e>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e8:	4798      	blx	r3
 80056ea:	3601      	adds	r6, #1
 80056ec:	e7ee      	b.n	80056cc <__libc_init_array+0xc>
 80056ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f2:	4798      	blx	r3
 80056f4:	3601      	adds	r6, #1
 80056f6:	e7f2      	b.n	80056de <__libc_init_array+0x1e>
 80056f8:	080077d4 	.word	0x080077d4
 80056fc:	080077d4 	.word	0x080077d4
 8005700:	080077d4 	.word	0x080077d4
 8005704:	080077d8 	.word	0x080077d8

08005708 <__retarget_lock_init_recursive>:
 8005708:	4770      	bx	lr

0800570a <__retarget_lock_acquire_recursive>:
 800570a:	4770      	bx	lr

0800570c <__retarget_lock_release_recursive>:
 800570c:	4770      	bx	lr

0800570e <memchr>:
 800570e:	4603      	mov	r3, r0
 8005710:	b510      	push	{r4, lr}
 8005712:	b2c9      	uxtb	r1, r1
 8005714:	4402      	add	r2, r0
 8005716:	4293      	cmp	r3, r2
 8005718:	4618      	mov	r0, r3
 800571a:	d101      	bne.n	8005720 <memchr+0x12>
 800571c:	2000      	movs	r0, #0
 800571e:	e003      	b.n	8005728 <memchr+0x1a>
 8005720:	7804      	ldrb	r4, [r0, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	428c      	cmp	r4, r1
 8005726:	d1f6      	bne.n	8005716 <memchr+0x8>
 8005728:	bd10      	pop	{r4, pc}

0800572a <quorem>:
 800572a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572e:	6903      	ldr	r3, [r0, #16]
 8005730:	690c      	ldr	r4, [r1, #16]
 8005732:	4607      	mov	r7, r0
 8005734:	42a3      	cmp	r3, r4
 8005736:	db7f      	blt.n	8005838 <quorem+0x10e>
 8005738:	3c01      	subs	r4, #1
 800573a:	f100 0514 	add.w	r5, r0, #20
 800573e:	f101 0814 	add.w	r8, r1, #20
 8005742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800574c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005750:	3301      	adds	r3, #1
 8005752:	429a      	cmp	r2, r3
 8005754:	fbb2 f6f3 	udiv	r6, r2, r3
 8005758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800575c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005760:	d331      	bcc.n	80057c6 <quorem+0x9c>
 8005762:	f04f 0e00 	mov.w	lr, #0
 8005766:	4640      	mov	r0, r8
 8005768:	46ac      	mov	ip, r5
 800576a:	46f2      	mov	sl, lr
 800576c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005770:	b293      	uxth	r3, r2
 8005772:	fb06 e303 	mla	r3, r6, r3, lr
 8005776:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800577a:	0c1a      	lsrs	r2, r3, #16
 800577c:	b29b      	uxth	r3, r3
 800577e:	fb06 220e 	mla	r2, r6, lr, r2
 8005782:	ebaa 0303 	sub.w	r3, sl, r3
 8005786:	f8dc a000 	ldr.w	sl, [ip]
 800578a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800578e:	fa1f fa8a 	uxth.w	sl, sl
 8005792:	4453      	add	r3, sl
 8005794:	f8dc a000 	ldr.w	sl, [ip]
 8005798:	b292      	uxth	r2, r2
 800579a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800579e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a8:	4581      	cmp	r9, r0
 80057aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057ae:	f84c 3b04 	str.w	r3, [ip], #4
 80057b2:	d2db      	bcs.n	800576c <quorem+0x42>
 80057b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80057b8:	b92b      	cbnz	r3, 80057c6 <quorem+0x9c>
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	3b04      	subs	r3, #4
 80057be:	429d      	cmp	r5, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	d32d      	bcc.n	8005820 <quorem+0xf6>
 80057c4:	613c      	str	r4, [r7, #16]
 80057c6:	4638      	mov	r0, r7
 80057c8:	f001 f994 	bl	8006af4 <__mcmp>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	db23      	blt.n	8005818 <quorem+0xee>
 80057d0:	4629      	mov	r1, r5
 80057d2:	2000      	movs	r0, #0
 80057d4:	3601      	adds	r6, #1
 80057d6:	f858 2b04 	ldr.w	r2, [r8], #4
 80057da:	f8d1 c000 	ldr.w	ip, [r1]
 80057de:	b293      	uxth	r3, r2
 80057e0:	1ac3      	subs	r3, r0, r3
 80057e2:	0c12      	lsrs	r2, r2, #16
 80057e4:	fa1f f08c 	uxth.w	r0, ip
 80057e8:	4403      	add	r3, r0
 80057ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f8:	45c1      	cmp	r9, r8
 80057fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057fe:	f841 3b04 	str.w	r3, [r1], #4
 8005802:	d2e8      	bcs.n	80057d6 <quorem+0xac>
 8005804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800580c:	b922      	cbnz	r2, 8005818 <quorem+0xee>
 800580e:	3b04      	subs	r3, #4
 8005810:	429d      	cmp	r5, r3
 8005812:	461a      	mov	r2, r3
 8005814:	d30a      	bcc.n	800582c <quorem+0x102>
 8005816:	613c      	str	r4, [r7, #16]
 8005818:	4630      	mov	r0, r6
 800581a:	b003      	add	sp, #12
 800581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	3b04      	subs	r3, #4
 8005824:	2a00      	cmp	r2, #0
 8005826:	d1cd      	bne.n	80057c4 <quorem+0x9a>
 8005828:	3c01      	subs	r4, #1
 800582a:	e7c8      	b.n	80057be <quorem+0x94>
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	3b04      	subs	r3, #4
 8005830:	2a00      	cmp	r2, #0
 8005832:	d1f0      	bne.n	8005816 <quorem+0xec>
 8005834:	3c01      	subs	r4, #1
 8005836:	e7eb      	b.n	8005810 <quorem+0xe6>
 8005838:	2000      	movs	r0, #0
 800583a:	e7ee      	b.n	800581a <quorem+0xf0>
 800583c:	0000      	movs	r0, r0
	...

08005840 <_dtoa_r>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	4616      	mov	r6, r2
 8005846:	461f      	mov	r7, r3
 8005848:	69c4      	ldr	r4, [r0, #28]
 800584a:	b099      	sub	sp, #100	; 0x64
 800584c:	4605      	mov	r5, r0
 800584e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005852:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005856:	b974      	cbnz	r4, 8005876 <_dtoa_r+0x36>
 8005858:	2010      	movs	r0, #16
 800585a:	f000 fe1d 	bl	8006498 <malloc>
 800585e:	4602      	mov	r2, r0
 8005860:	61e8      	str	r0, [r5, #28]
 8005862:	b920      	cbnz	r0, 800586e <_dtoa_r+0x2e>
 8005864:	21ef      	movs	r1, #239	; 0xef
 8005866:	4bac      	ldr	r3, [pc, #688]	; (8005b18 <_dtoa_r+0x2d8>)
 8005868:	48ac      	ldr	r0, [pc, #688]	; (8005b1c <_dtoa_r+0x2dc>)
 800586a:	f001 fccf 	bl	800720c <__assert_func>
 800586e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005872:	6004      	str	r4, [r0, #0]
 8005874:	60c4      	str	r4, [r0, #12]
 8005876:	69eb      	ldr	r3, [r5, #28]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	b151      	cbz	r1, 8005892 <_dtoa_r+0x52>
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	2301      	movs	r3, #1
 8005880:	4093      	lsls	r3, r2
 8005882:	604a      	str	r2, [r1, #4]
 8005884:	608b      	str	r3, [r1, #8]
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fefa 	bl	8006680 <_Bfree>
 800588c:	2200      	movs	r2, #0
 800588e:	69eb      	ldr	r3, [r5, #28]
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	1e3b      	subs	r3, r7, #0
 8005894:	bfaf      	iteee	ge
 8005896:	2300      	movge	r3, #0
 8005898:	2201      	movlt	r2, #1
 800589a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800589e:	9305      	strlt	r3, [sp, #20]
 80058a0:	bfa8      	it	ge
 80058a2:	f8c8 3000 	strge.w	r3, [r8]
 80058a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80058aa:	4b9d      	ldr	r3, [pc, #628]	; (8005b20 <_dtoa_r+0x2e0>)
 80058ac:	bfb8      	it	lt
 80058ae:	f8c8 2000 	strlt.w	r2, [r8]
 80058b2:	ea33 0309 	bics.w	r3, r3, r9
 80058b6:	d119      	bne.n	80058ec <_dtoa_r+0xac>
 80058b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80058bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058c4:	4333      	orrs	r3, r6
 80058c6:	f000 8589 	beq.w	80063dc <_dtoa_r+0xb9c>
 80058ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058cc:	b953      	cbnz	r3, 80058e4 <_dtoa_r+0xa4>
 80058ce:	4b95      	ldr	r3, [pc, #596]	; (8005b24 <_dtoa_r+0x2e4>)
 80058d0:	e023      	b.n	800591a <_dtoa_r+0xda>
 80058d2:	4b95      	ldr	r3, [pc, #596]	; (8005b28 <_dtoa_r+0x2e8>)
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	3308      	adds	r3, #8
 80058d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	9803      	ldr	r0, [sp, #12]
 80058de:	b019      	add	sp, #100	; 0x64
 80058e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e4:	4b8f      	ldr	r3, [pc, #572]	; (8005b24 <_dtoa_r+0x2e4>)
 80058e6:	9303      	str	r3, [sp, #12]
 80058e8:	3303      	adds	r3, #3
 80058ea:	e7f5      	b.n	80058d8 <_dtoa_r+0x98>
 80058ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f7fb f854 	bl	80009a8 <__aeabi_dcmpeq>
 8005900:	4680      	mov	r8, r0
 8005902:	b160      	cbz	r0, 800591e <_dtoa_r+0xde>
 8005904:	2301      	movs	r3, #1
 8005906:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8562 	beq.w	80063d6 <_dtoa_r+0xb96>
 8005912:	4b86      	ldr	r3, [pc, #536]	; (8005b2c <_dtoa_r+0x2ec>)
 8005914:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	3b01      	subs	r3, #1
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	e7de      	b.n	80058dc <_dtoa_r+0x9c>
 800591e:	ab16      	add	r3, sp, #88	; 0x58
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	ab17      	add	r3, sp, #92	; 0x5c
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	4628      	mov	r0, r5
 8005928:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800592c:	f001 f98a 	bl	8006c44 <__d2b>
 8005930:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005934:	4682      	mov	sl, r0
 8005936:	2c00      	cmp	r4, #0
 8005938:	d07e      	beq.n	8005a38 <_dtoa_r+0x1f8>
 800593a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800593e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005940:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005948:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800594c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005950:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005954:	4619      	mov	r1, r3
 8005956:	2200      	movs	r2, #0
 8005958:	4b75      	ldr	r3, [pc, #468]	; (8005b30 <_dtoa_r+0x2f0>)
 800595a:	f7fa fc05 	bl	8000168 <__aeabi_dsub>
 800595e:	a368      	add	r3, pc, #416	; (adr r3, 8005b00 <_dtoa_r+0x2c0>)
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa fdb8 	bl	80004d8 <__aeabi_dmul>
 8005968:	a367      	add	r3, pc, #412	; (adr r3, 8005b08 <_dtoa_r+0x2c8>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fbfd 	bl	800016c <__adddf3>
 8005972:	4606      	mov	r6, r0
 8005974:	4620      	mov	r0, r4
 8005976:	460f      	mov	r7, r1
 8005978:	f7fa fd44 	bl	8000404 <__aeabi_i2d>
 800597c:	a364      	add	r3, pc, #400	; (adr r3, 8005b10 <_dtoa_r+0x2d0>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fda9 	bl	80004d8 <__aeabi_dmul>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4630      	mov	r0, r6
 800598c:	4639      	mov	r1, r7
 800598e:	f7fa fbed 	bl	800016c <__adddf3>
 8005992:	4606      	mov	r6, r0
 8005994:	460f      	mov	r7, r1
 8005996:	f7fb f84f 	bl	8000a38 <__aeabi_d2iz>
 800599a:	2200      	movs	r2, #0
 800599c:	4683      	mov	fp, r0
 800599e:	2300      	movs	r3, #0
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fb f80a 	bl	80009bc <__aeabi_dcmplt>
 80059a8:	b148      	cbz	r0, 80059be <_dtoa_r+0x17e>
 80059aa:	4658      	mov	r0, fp
 80059ac:	f7fa fd2a 	bl	8000404 <__aeabi_i2d>
 80059b0:	4632      	mov	r2, r6
 80059b2:	463b      	mov	r3, r7
 80059b4:	f7fa fff8 	bl	80009a8 <__aeabi_dcmpeq>
 80059b8:	b908      	cbnz	r0, 80059be <_dtoa_r+0x17e>
 80059ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059be:	f1bb 0f16 	cmp.w	fp, #22
 80059c2:	d857      	bhi.n	8005a74 <_dtoa_r+0x234>
 80059c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059c8:	4b5a      	ldr	r3, [pc, #360]	; (8005b34 <_dtoa_r+0x2f4>)
 80059ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fff3 	bl	80009bc <__aeabi_dcmplt>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d04e      	beq.n	8005a78 <_dtoa_r+0x238>
 80059da:	2300      	movs	r3, #0
 80059dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80059e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059e4:	1b1b      	subs	r3, r3, r4
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	bf46      	itte	mi
 80059ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80059ee:	2300      	movmi	r3, #0
 80059f0:	f04f 0900 	movpl.w	r9, #0
 80059f4:	9209      	str	r2, [sp, #36]	; 0x24
 80059f6:	bf48      	it	mi
 80059f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059fa:	f1bb 0f00 	cmp.w	fp, #0
 80059fe:	db3d      	blt.n	8005a7c <_dtoa_r+0x23c>
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005a06:	445b      	add	r3, fp
 8005a08:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d867      	bhi.n	8005ae4 <_dtoa_r+0x2a4>
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	bfc4      	itt	gt
 8005a18:	3b04      	subgt	r3, #4
 8005a1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a1e:	bfc8      	it	gt
 8005a20:	2400      	movgt	r4, #0
 8005a22:	f1a3 0302 	sub.w	r3, r3, #2
 8005a26:	bfd8      	it	le
 8005a28:	2401      	movle	r4, #1
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	f200 8086 	bhi.w	8005b3c <_dtoa_r+0x2fc>
 8005a30:	e8df f003 	tbb	[pc, r3]
 8005a34:	5637392c 	.word	0x5637392c
 8005a38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a3c:	441c      	add	r4, r3
 8005a3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	bfc1      	itttt	gt
 8005a46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a4a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005a4e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005a52:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a56:	bfd6      	itet	le
 8005a58:	f1c3 0320 	rsble	r3, r3, #32
 8005a5c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005a60:	fa06 f003 	lslle.w	r0, r6, r3
 8005a64:	f7fa fcbe 	bl	80003e4 <__aeabi_ui2d>
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005a6e:	3c01      	subs	r4, #1
 8005a70:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a72:	e76f      	b.n	8005954 <_dtoa_r+0x114>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e7b3      	b.n	80059e0 <_dtoa_r+0x1a0>
 8005a78:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a7a:	e7b2      	b.n	80059e2 <_dtoa_r+0x1a2>
 8005a7c:	f1cb 0300 	rsb	r3, fp, #0
 8005a80:	930a      	str	r3, [sp, #40]	; 0x28
 8005a82:	2300      	movs	r3, #0
 8005a84:	eba9 090b 	sub.w	r9, r9, fp
 8005a88:	930e      	str	r3, [sp, #56]	; 0x38
 8005a8a:	e7c0      	b.n	8005a0e <_dtoa_r+0x1ce>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dc55      	bgt.n	8005b42 <_dtoa_r+0x302>
 8005a96:	2301      	movs	r3, #1
 8005a98:	461a      	mov	r2, r3
 8005a9a:	9306      	str	r3, [sp, #24]
 8005a9c:	9308      	str	r3, [sp, #32]
 8005a9e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005aa0:	e00b      	b.n	8005aba <_dtoa_r+0x27a>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e7f3      	b.n	8005a8e <_dtoa_r+0x24e>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aac:	445b      	add	r3, fp
 8005aae:	9306      	str	r3, [sp, #24]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	9308      	str	r3, [sp, #32]
 8005ab6:	bfb8      	it	lt
 8005ab8:	2301      	movlt	r3, #1
 8005aba:	2100      	movs	r1, #0
 8005abc:	2204      	movs	r2, #4
 8005abe:	69e8      	ldr	r0, [r5, #28]
 8005ac0:	f102 0614 	add.w	r6, r2, #20
 8005ac4:	429e      	cmp	r6, r3
 8005ac6:	d940      	bls.n	8005b4a <_dtoa_r+0x30a>
 8005ac8:	6041      	str	r1, [r0, #4]
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fd98 	bl	8006600 <_Balloc>
 8005ad0:	9003      	str	r0, [sp, #12]
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d13c      	bne.n	8005b50 <_dtoa_r+0x310>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f240 11af 	movw	r1, #431	; 0x1af
 8005adc:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <_dtoa_r+0x2f8>)
 8005ade:	e6c3      	b.n	8005868 <_dtoa_r+0x28>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e7e1      	b.n	8005aa8 <_dtoa_r+0x268>
 8005ae4:	2401      	movs	r4, #1
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005aea:	9322      	str	r3, [sp, #136]	; 0x88
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
 8005af0:	2200      	movs	r2, #0
 8005af2:	9306      	str	r3, [sp, #24]
 8005af4:	9308      	str	r3, [sp, #32]
 8005af6:	2312      	movs	r3, #18
 8005af8:	e7d1      	b.n	8005a9e <_dtoa_r+0x25e>
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w
 8005b00:	636f4361 	.word	0x636f4361
 8005b04:	3fd287a7 	.word	0x3fd287a7
 8005b08:	8b60c8b3 	.word	0x8b60c8b3
 8005b0c:	3fc68a28 	.word	0x3fc68a28
 8005b10:	509f79fb 	.word	0x509f79fb
 8005b14:	3fd34413 	.word	0x3fd34413
 8005b18:	08007499 	.word	0x08007499
 8005b1c:	080074b0 	.word	0x080074b0
 8005b20:	7ff00000 	.word	0x7ff00000
 8005b24:	08007495 	.word	0x08007495
 8005b28:	0800748c 	.word	0x0800748c
 8005b2c:	08007469 	.word	0x08007469
 8005b30:	3ff80000 	.word	0x3ff80000
 8005b34:	080075a0 	.word	0x080075a0
 8005b38:	08007508 	.word	0x08007508
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b40:	e7d4      	b.n	8005aec <_dtoa_r+0x2ac>
 8005b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b44:	9306      	str	r3, [sp, #24]
 8005b46:	9308      	str	r3, [sp, #32]
 8005b48:	e7b7      	b.n	8005aba <_dtoa_r+0x27a>
 8005b4a:	3101      	adds	r1, #1
 8005b4c:	0052      	lsls	r2, r2, #1
 8005b4e:	e7b7      	b.n	8005ac0 <_dtoa_r+0x280>
 8005b50:	69eb      	ldr	r3, [r5, #28]
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	9b08      	ldr	r3, [sp, #32]
 8005b58:	2b0e      	cmp	r3, #14
 8005b5a:	f200 80a8 	bhi.w	8005cae <_dtoa_r+0x46e>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	f000 80a5 	beq.w	8005cae <_dtoa_r+0x46e>
 8005b64:	f1bb 0f00 	cmp.w	fp, #0
 8005b68:	dd34      	ble.n	8005bd4 <_dtoa_r+0x394>
 8005b6a:	4b9a      	ldr	r3, [pc, #616]	; (8005dd4 <_dtoa_r+0x594>)
 8005b6c:	f00b 020f 	and.w	r2, fp, #15
 8005b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b80:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005b84:	d016      	beq.n	8005bb4 <_dtoa_r+0x374>
 8005b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b8a:	4b93      	ldr	r3, [pc, #588]	; (8005dd8 <_dtoa_r+0x598>)
 8005b8c:	2703      	movs	r7, #3
 8005b8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b92:	f7fa fdcb 	bl	800072c <__aeabi_ddiv>
 8005b96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9a:	f004 040f 	and.w	r4, r4, #15
 8005b9e:	4e8e      	ldr	r6, [pc, #568]	; (8005dd8 <_dtoa_r+0x598>)
 8005ba0:	b954      	cbnz	r4, 8005bb8 <_dtoa_r+0x378>
 8005ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005baa:	f7fa fdbf 	bl	800072c <__aeabi_ddiv>
 8005bae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bb2:	e029      	b.n	8005c08 <_dtoa_r+0x3c8>
 8005bb4:	2702      	movs	r7, #2
 8005bb6:	e7f2      	b.n	8005b9e <_dtoa_r+0x35e>
 8005bb8:	07e1      	lsls	r1, r4, #31
 8005bba:	d508      	bpl.n	8005bce <_dtoa_r+0x38e>
 8005bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005bc4:	f7fa fc88 	bl	80004d8 <__aeabi_dmul>
 8005bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bcc:	3701      	adds	r7, #1
 8005bce:	1064      	asrs	r4, r4, #1
 8005bd0:	3608      	adds	r6, #8
 8005bd2:	e7e5      	b.n	8005ba0 <_dtoa_r+0x360>
 8005bd4:	f000 80a5 	beq.w	8005d22 <_dtoa_r+0x4e2>
 8005bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bdc:	f1cb 0400 	rsb	r4, fp, #0
 8005be0:	4b7c      	ldr	r3, [pc, #496]	; (8005dd4 <_dtoa_r+0x594>)
 8005be2:	f004 020f 	and.w	r2, r4, #15
 8005be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fc73 	bl	80004d8 <__aeabi_dmul>
 8005bf2:	2702      	movs	r7, #2
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bfa:	4e77      	ldr	r6, [pc, #476]	; (8005dd8 <_dtoa_r+0x598>)
 8005bfc:	1124      	asrs	r4, r4, #4
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	f040 8084 	bne.w	8005d0c <_dtoa_r+0x4cc>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1d2      	bne.n	8005bae <_dtoa_r+0x36e>
 8005c08:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8087 	beq.w	8005d26 <_dtoa_r+0x4e6>
 8005c18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4b6f      	ldr	r3, [pc, #444]	; (8005ddc <_dtoa_r+0x59c>)
 8005c20:	f7fa fecc 	bl	80009bc <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d07e      	beq.n	8005d26 <_dtoa_r+0x4e6>
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07b      	beq.n	8005d26 <_dtoa_r+0x4e6>
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dd38      	ble.n	8005ca6 <_dtoa_r+0x466>
 8005c34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b69      	ldr	r3, [pc, #420]	; (8005de0 <_dtoa_r+0x5a0>)
 8005c3c:	f7fa fc4c 	bl	80004d8 <__aeabi_dmul>
 8005c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c44:	9c06      	ldr	r4, [sp, #24]
 8005c46:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005c4a:	3701      	adds	r7, #1
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7fa fbd9 	bl	8000404 <__aeabi_i2d>
 8005c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c56:	f7fa fc3f 	bl	80004d8 <__aeabi_dmul>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <_dtoa_r+0x5a4>)
 8005c5e:	f7fa fa85 	bl	800016c <__adddf3>
 8005c62:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c6a:	9611      	str	r6, [sp, #68]	; 0x44
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	d15d      	bne.n	8005d2c <_dtoa_r+0x4ec>
 8005c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c74:	2200      	movs	r2, #0
 8005c76:	4b5c      	ldr	r3, [pc, #368]	; (8005de8 <_dtoa_r+0x5a8>)
 8005c78:	f7fa fa76 	bl	8000168 <__aeabi_dsub>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c84:	4633      	mov	r3, r6
 8005c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c88:	f7fa feb6 	bl	80009f8 <__aeabi_dcmpgt>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f040 8295 	bne.w	80061bc <_dtoa_r+0x97c>
 8005c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c9c:	f7fa fe8e 	bl	80009bc <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	f040 8289 	bne.w	80061b8 <_dtoa_r+0x978>
 8005ca6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005caa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f2c0 8151 	blt.w	8005f58 <_dtoa_r+0x718>
 8005cb6:	f1bb 0f0e 	cmp.w	fp, #14
 8005cba:	f300 814d 	bgt.w	8005f58 <_dtoa_r+0x718>
 8005cbe:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <_dtoa_r+0x594>)
 8005cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cc8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005ccc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f280 80da 	bge.w	8005e88 <_dtoa_r+0x648>
 8005cd4:	9b08      	ldr	r3, [sp, #32]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f300 80d6 	bgt.w	8005e88 <_dtoa_r+0x648>
 8005cdc:	f040 826b 	bne.w	80061b6 <_dtoa_r+0x976>
 8005ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	4b40      	ldr	r3, [pc, #256]	; (8005de8 <_dtoa_r+0x5a8>)
 8005ce8:	f7fa fbf6 	bl	80004d8 <__aeabi_dmul>
 8005cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf0:	f7fa fe78 	bl	80009e4 <__aeabi_dcmpge>
 8005cf4:	9c08      	ldr	r4, [sp, #32]
 8005cf6:	4626      	mov	r6, r4
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f040 8241 	bne.w	8006180 <_dtoa_r+0x940>
 8005cfe:	2331      	movs	r3, #49	; 0x31
 8005d00:	9f03      	ldr	r7, [sp, #12]
 8005d02:	f10b 0b01 	add.w	fp, fp, #1
 8005d06:	f807 3b01 	strb.w	r3, [r7], #1
 8005d0a:	e23d      	b.n	8006188 <_dtoa_r+0x948>
 8005d0c:	07e2      	lsls	r2, r4, #31
 8005d0e:	d505      	bpl.n	8005d1c <_dtoa_r+0x4dc>
 8005d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	3701      	adds	r7, #1
 8005d1c:	1064      	asrs	r4, r4, #1
 8005d1e:	3608      	adds	r6, #8
 8005d20:	e76d      	b.n	8005bfe <_dtoa_r+0x3be>
 8005d22:	2702      	movs	r7, #2
 8005d24:	e770      	b.n	8005c08 <_dtoa_r+0x3c8>
 8005d26:	46d8      	mov	r8, fp
 8005d28:	9c08      	ldr	r4, [sp, #32]
 8005d2a:	e78f      	b.n	8005c4c <_dtoa_r+0x40c>
 8005d2c:	9903      	ldr	r1, [sp, #12]
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <_dtoa_r+0x594>)
 8005d30:	4421      	add	r1, r4
 8005d32:	9112      	str	r1, [sp, #72]	; 0x48
 8005d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d3a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d054      	beq.n	8005df0 <_dtoa_r+0x5b0>
 8005d46:	2000      	movs	r0, #0
 8005d48:	4928      	ldr	r1, [pc, #160]	; (8005dec <_dtoa_r+0x5ac>)
 8005d4a:	f7fa fcef 	bl	800072c <__aeabi_ddiv>
 8005d4e:	463b      	mov	r3, r7
 8005d50:	4632      	mov	r2, r6
 8005d52:	f7fa fa09 	bl	8000168 <__aeabi_dsub>
 8005d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d5a:	9f03      	ldr	r7, [sp, #12]
 8005d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d60:	f7fa fe6a 	bl	8000a38 <__aeabi_d2iz>
 8005d64:	4604      	mov	r4, r0
 8005d66:	f7fa fb4d 	bl	8000404 <__aeabi_i2d>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d72:	f7fa f9f9 	bl	8000168 <__aeabi_dsub>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	3430      	adds	r4, #48	; 0x30
 8005d7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d84:	f807 4b01 	strb.w	r4, [r7], #1
 8005d88:	f7fa fe18 	bl	80009bc <__aeabi_dcmplt>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d173      	bne.n	8005e78 <_dtoa_r+0x638>
 8005d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d94:	2000      	movs	r0, #0
 8005d96:	4911      	ldr	r1, [pc, #68]	; (8005ddc <_dtoa_r+0x59c>)
 8005d98:	f7fa f9e6 	bl	8000168 <__aeabi_dsub>
 8005d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005da0:	f7fa fe0c 	bl	80009bc <__aeabi_dcmplt>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f040 80b6 	bne.w	8005f16 <_dtoa_r+0x6d6>
 8005daa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dac:	429f      	cmp	r7, r3
 8005dae:	f43f af7a 	beq.w	8005ca6 <_dtoa_r+0x466>
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005db6:	2200      	movs	r2, #0
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <_dtoa_r+0x5a0>)
 8005dba:	f7fa fb8d 	bl	80004d8 <__aeabi_dmul>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <_dtoa_r+0x5a0>)
 8005dca:	f7fa fb85 	bl	80004d8 <__aeabi_dmul>
 8005dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dd2:	e7c3      	b.n	8005d5c <_dtoa_r+0x51c>
 8005dd4:	080075a0 	.word	0x080075a0
 8005dd8:	08007578 	.word	0x08007578
 8005ddc:	3ff00000 	.word	0x3ff00000
 8005de0:	40240000 	.word	0x40240000
 8005de4:	401c0000 	.word	0x401c0000
 8005de8:	40140000 	.word	0x40140000
 8005dec:	3fe00000 	.word	0x3fe00000
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa fb70 	bl	80004d8 <__aeabi_dmul>
 8005df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dfe:	9c03      	ldr	r4, [sp, #12]
 8005e00:	9314      	str	r3, [sp, #80]	; 0x50
 8005e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e06:	f7fa fe17 	bl	8000a38 <__aeabi_d2iz>
 8005e0a:	9015      	str	r0, [sp, #84]	; 0x54
 8005e0c:	f7fa fafa 	bl	8000404 <__aeabi_i2d>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e18:	f7fa f9a6 	bl	8000168 <__aeabi_dsub>
 8005e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e1e:	4606      	mov	r6, r0
 8005e20:	3330      	adds	r3, #48	; 0x30
 8005e22:	f804 3b01 	strb.w	r3, [r4], #1
 8005e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e28:	460f      	mov	r7, r1
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	d124      	bne.n	8005e7c <_dtoa_r+0x63c>
 8005e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e36:	4baf      	ldr	r3, [pc, #700]	; (80060f4 <_dtoa_r+0x8b4>)
 8005e38:	f7fa f998 	bl	800016c <__adddf3>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa fdd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d163      	bne.n	8005f14 <_dtoa_r+0x6d4>
 8005e4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e50:	2000      	movs	r0, #0
 8005e52:	49a8      	ldr	r1, [pc, #672]	; (80060f4 <_dtoa_r+0x8b4>)
 8005e54:	f7fa f988 	bl	8000168 <__aeabi_dsub>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa fdac 	bl	80009bc <__aeabi_dcmplt>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f43f af1e 	beq.w	8005ca6 <_dtoa_r+0x466>
 8005e6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e6c:	1e7b      	subs	r3, r7, #1
 8005e6e:	9314      	str	r3, [sp, #80]	; 0x50
 8005e70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d0f8      	beq.n	8005e6a <_dtoa_r+0x62a>
 8005e78:	46c3      	mov	fp, r8
 8005e7a:	e03b      	b.n	8005ef4 <_dtoa_r+0x6b4>
 8005e7c:	4b9e      	ldr	r3, [pc, #632]	; (80060f8 <_dtoa_r+0x8b8>)
 8005e7e:	f7fa fb2b 	bl	80004d8 <__aeabi_dmul>
 8005e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e86:	e7bc      	b.n	8005e02 <_dtoa_r+0x5c2>
 8005e88:	9f03      	ldr	r7, [sp, #12]
 8005e8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e92:	4640      	mov	r0, r8
 8005e94:	4649      	mov	r1, r9
 8005e96:	f7fa fc49 	bl	800072c <__aeabi_ddiv>
 8005e9a:	f7fa fdcd 	bl	8000a38 <__aeabi_d2iz>
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7fa fab0 	bl	8000404 <__aeabi_i2d>
 8005ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ea8:	f7fa fb16 	bl	80004d8 <__aeabi_dmul>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	f7fa f958 	bl	8000168 <__aeabi_dsub>
 8005eb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ebc:	f807 6b01 	strb.w	r6, [r7], #1
 8005ec0:	9e03      	ldr	r6, [sp, #12]
 8005ec2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ec6:	1bbe      	subs	r6, r7, r6
 8005ec8:	45b4      	cmp	ip, r6
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	d136      	bne.n	8005f3e <_dtoa_r+0x6fe>
 8005ed0:	f7fa f94c 	bl	800016c <__adddf3>
 8005ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4689      	mov	r9, r1
 8005edc:	f7fa fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee0:	bb58      	cbnz	r0, 8005f3a <_dtoa_r+0x6fa>
 8005ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	4649      	mov	r1, r9
 8005eea:	f7fa fd5d 	bl	80009a8 <__aeabi_dcmpeq>
 8005eee:	b108      	cbz	r0, 8005ef4 <_dtoa_r+0x6b4>
 8005ef0:	07e3      	lsls	r3, r4, #31
 8005ef2:	d422      	bmi.n	8005f3a <_dtoa_r+0x6fa>
 8005ef4:	4651      	mov	r1, sl
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 fbc2 	bl	8006680 <_Bfree>
 8005efc:	2300      	movs	r3, #0
 8005efe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f00:	703b      	strb	r3, [r7, #0]
 8005f02:	f10b 0301 	add.w	r3, fp, #1
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f43f ace6 	beq.w	80058dc <_dtoa_r+0x9c>
 8005f10:	601f      	str	r7, [r3, #0]
 8005f12:	e4e3      	b.n	80058dc <_dtoa_r+0x9c>
 8005f14:	4627      	mov	r7, r4
 8005f16:	463b      	mov	r3, r7
 8005f18:	461f      	mov	r7, r3
 8005f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f1e:	2a39      	cmp	r2, #57	; 0x39
 8005f20:	d107      	bne.n	8005f32 <_dtoa_r+0x6f2>
 8005f22:	9a03      	ldr	r2, [sp, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1f7      	bne.n	8005f18 <_dtoa_r+0x6d8>
 8005f28:	2230      	movs	r2, #48	; 0x30
 8005f2a:	9903      	ldr	r1, [sp, #12]
 8005f2c:	f108 0801 	add.w	r8, r8, #1
 8005f30:	700a      	strb	r2, [r1, #0]
 8005f32:	781a      	ldrb	r2, [r3, #0]
 8005f34:	3201      	adds	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e79e      	b.n	8005e78 <_dtoa_r+0x638>
 8005f3a:	46d8      	mov	r8, fp
 8005f3c:	e7eb      	b.n	8005f16 <_dtoa_r+0x6d6>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4b6d      	ldr	r3, [pc, #436]	; (80060f8 <_dtoa_r+0x8b8>)
 8005f42:	f7fa fac9 	bl	80004d8 <__aeabi_dmul>
 8005f46:	2200      	movs	r2, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	4689      	mov	r9, r1
 8005f4e:	f7fa fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d09b      	beq.n	8005e8e <_dtoa_r+0x64e>
 8005f56:	e7cd      	b.n	8005ef4 <_dtoa_r+0x6b4>
 8005f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	f000 80c4 	beq.w	80060e8 <_dtoa_r+0x8a8>
 8005f60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f62:	2a01      	cmp	r2, #1
 8005f64:	f300 80a8 	bgt.w	80060b8 <_dtoa_r+0x878>
 8005f68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	f000 80a0 	beq.w	80060b0 <_dtoa_r+0x870>
 8005f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f74:	464f      	mov	r7, r9
 8005f76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	4628      	mov	r0, r5
 8005f80:	4499      	add	r9, r3
 8005f82:	9209      	str	r2, [sp, #36]	; 0x24
 8005f84:	f000 fc32 	bl	80067ec <__i2b>
 8005f88:	4606      	mov	r6, r0
 8005f8a:	b15f      	cbz	r7, 8005fa4 <_dtoa_r+0x764>
 8005f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd08      	ble.n	8005fa4 <_dtoa_r+0x764>
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	bfa8      	it	ge
 8005f96:	463b      	movge	r3, r7
 8005f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f9a:	eba9 0903 	sub.w	r9, r9, r3
 8005f9e:	1aff      	subs	r7, r7, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa6:	b1f3      	cbz	r3, 8005fe6 <_dtoa_r+0x7a6>
 8005fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 80a0 	beq.w	80060f0 <_dtoa_r+0x8b0>
 8005fb0:	2c00      	cmp	r4, #0
 8005fb2:	dd10      	ble.n	8005fd6 <_dtoa_r+0x796>
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 fcd5 	bl	8006968 <__pow5mult>
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fc27 	bl	8006818 <__multiply>
 8005fca:	4680      	mov	r8, r0
 8005fcc:	4651      	mov	r1, sl
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fb56 	bl	8006680 <_Bfree>
 8005fd4:	46c2      	mov	sl, r8
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	1b1a      	subs	r2, r3, r4
 8005fda:	d004      	beq.n	8005fe6 <_dtoa_r+0x7a6>
 8005fdc:	4651      	mov	r1, sl
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 fcc2 	bl	8006968 <__pow5mult>
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f000 fbff 	bl	80067ec <__i2b>
 8005fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f340 8082 	ble.w	80060fc <_dtoa_r+0x8bc>
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 fcb3 	bl	8006968 <__pow5mult>
 8006002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006004:	4604      	mov	r4, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	dd7b      	ble.n	8006102 <_dtoa_r+0x8c2>
 800600a:	f04f 0800 	mov.w	r8, #0
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006014:	6918      	ldr	r0, [r3, #16]
 8006016:	f000 fb9b 	bl	8006750 <__hi0bits>
 800601a:	f1c0 0020 	rsb	r0, r0, #32
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	4418      	add	r0, r3
 8006022:	f010 001f 	ands.w	r0, r0, #31
 8006026:	f000 8092 	beq.w	800614e <_dtoa_r+0x90e>
 800602a:	f1c0 0320 	rsb	r3, r0, #32
 800602e:	2b04      	cmp	r3, #4
 8006030:	f340 8085 	ble.w	800613e <_dtoa_r+0x8fe>
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	f1c0 001c 	rsb	r0, r0, #28
 800603a:	4403      	add	r3, r0
 800603c:	4481      	add	r9, r0
 800603e:	4407      	add	r7, r0
 8006040:	9309      	str	r3, [sp, #36]	; 0x24
 8006042:	f1b9 0f00 	cmp.w	r9, #0
 8006046:	dd05      	ble.n	8006054 <_dtoa_r+0x814>
 8006048:	4651      	mov	r1, sl
 800604a:	464a      	mov	r2, r9
 800604c:	4628      	mov	r0, r5
 800604e:	f000 fce5 	bl	8006a1c <__lshift>
 8006052:	4682      	mov	sl, r0
 8006054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd05      	ble.n	8006066 <_dtoa_r+0x826>
 800605a:	4621      	mov	r1, r4
 800605c:	461a      	mov	r2, r3
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fcdc 	bl	8006a1c <__lshift>
 8006064:	4604      	mov	r4, r0
 8006066:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d072      	beq.n	8006152 <_dtoa_r+0x912>
 800606c:	4621      	mov	r1, r4
 800606e:	4650      	mov	r0, sl
 8006070:	f000 fd40 	bl	8006af4 <__mcmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	da6c      	bge.n	8006152 <_dtoa_r+0x912>
 8006078:	2300      	movs	r3, #0
 800607a:	4651      	mov	r1, sl
 800607c:	220a      	movs	r2, #10
 800607e:	4628      	mov	r0, r5
 8006080:	f000 fb20 	bl	80066c4 <__multadd>
 8006084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006086:	4682      	mov	sl, r0
 8006088:	f10b 3bff 	add.w	fp, fp, #4294967295
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 81ac 	beq.w	80063ea <_dtoa_r+0xbaa>
 8006092:	2300      	movs	r3, #0
 8006094:	4631      	mov	r1, r6
 8006096:	220a      	movs	r2, #10
 8006098:	4628      	mov	r0, r5
 800609a:	f000 fb13 	bl	80066c4 <__multadd>
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	4606      	mov	r6, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f300 8093 	bgt.w	80061ce <_dtoa_r+0x98e>
 80060a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	dc59      	bgt.n	8006162 <_dtoa_r+0x922>
 80060ae:	e08e      	b.n	80061ce <_dtoa_r+0x98e>
 80060b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060b6:	e75d      	b.n	8005f74 <_dtoa_r+0x734>
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	1e5c      	subs	r4, r3, #1
 80060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060be:	42a3      	cmp	r3, r4
 80060c0:	bfbf      	itttt	lt
 80060c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80060c6:	1ae3      	sublt	r3, r4, r3
 80060c8:	18d2      	addlt	r2, r2, r3
 80060ca:	bfa8      	it	ge
 80060cc:	1b1c      	subge	r4, r3, r4
 80060ce:	9b08      	ldr	r3, [sp, #32]
 80060d0:	bfbe      	ittt	lt
 80060d2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80060d4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80060d6:	2400      	movlt	r4, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bfb5      	itete	lt
 80060dc:	eba9 0703 	sublt.w	r7, r9, r3
 80060e0:	464f      	movge	r7, r9
 80060e2:	2300      	movlt	r3, #0
 80060e4:	9b08      	ldrge	r3, [sp, #32]
 80060e6:	e747      	b.n	8005f78 <_dtoa_r+0x738>
 80060e8:	464f      	mov	r7, r9
 80060ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060ee:	e74c      	b.n	8005f8a <_dtoa_r+0x74a>
 80060f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f2:	e773      	b.n	8005fdc <_dtoa_r+0x79c>
 80060f4:	3fe00000 	.word	0x3fe00000
 80060f8:	40240000 	.word	0x40240000
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	2b01      	cmp	r3, #1
 8006100:	dc18      	bgt.n	8006134 <_dtoa_r+0x8f4>
 8006102:	9b04      	ldr	r3, [sp, #16]
 8006104:	b9b3      	cbnz	r3, 8006134 <_dtoa_r+0x8f4>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800610c:	b993      	cbnz	r3, 8006134 <_dtoa_r+0x8f4>
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006114:	0d1b      	lsrs	r3, r3, #20
 8006116:	051b      	lsls	r3, r3, #20
 8006118:	b17b      	cbz	r3, 800613a <_dtoa_r+0x8fa>
 800611a:	f04f 0801 	mov.w	r8, #1
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	f109 0901 	add.w	r9, r9, #1
 8006124:	3301      	adds	r3, #1
 8006126:	9309      	str	r3, [sp, #36]	; 0x24
 8006128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800612a:	2b00      	cmp	r3, #0
 800612c:	f47f af6f 	bne.w	800600e <_dtoa_r+0x7ce>
 8006130:	2001      	movs	r0, #1
 8006132:	e774      	b.n	800601e <_dtoa_r+0x7de>
 8006134:	f04f 0800 	mov.w	r8, #0
 8006138:	e7f6      	b.n	8006128 <_dtoa_r+0x8e8>
 800613a:	4698      	mov	r8, r3
 800613c:	e7f4      	b.n	8006128 <_dtoa_r+0x8e8>
 800613e:	d080      	beq.n	8006042 <_dtoa_r+0x802>
 8006140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006142:	331c      	adds	r3, #28
 8006144:	441a      	add	r2, r3
 8006146:	4499      	add	r9, r3
 8006148:	441f      	add	r7, r3
 800614a:	9209      	str	r2, [sp, #36]	; 0x24
 800614c:	e779      	b.n	8006042 <_dtoa_r+0x802>
 800614e:	4603      	mov	r3, r0
 8006150:	e7f6      	b.n	8006140 <_dtoa_r+0x900>
 8006152:	9b08      	ldr	r3, [sp, #32]
 8006154:	2b00      	cmp	r3, #0
 8006156:	dc34      	bgt.n	80061c2 <_dtoa_r+0x982>
 8006158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615a:	2b02      	cmp	r3, #2
 800615c:	dd31      	ble.n	80061c2 <_dtoa_r+0x982>
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	9306      	str	r3, [sp, #24]
 8006162:	9b06      	ldr	r3, [sp, #24]
 8006164:	b963      	cbnz	r3, 8006180 <_dtoa_r+0x940>
 8006166:	4621      	mov	r1, r4
 8006168:	2205      	movs	r2, #5
 800616a:	4628      	mov	r0, r5
 800616c:	f000 faaa 	bl	80066c4 <__multadd>
 8006170:	4601      	mov	r1, r0
 8006172:	4604      	mov	r4, r0
 8006174:	4650      	mov	r0, sl
 8006176:	f000 fcbd 	bl	8006af4 <__mcmp>
 800617a:	2800      	cmp	r0, #0
 800617c:	f73f adbf 	bgt.w	8005cfe <_dtoa_r+0x4be>
 8006180:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006182:	9f03      	ldr	r7, [sp, #12]
 8006184:	ea6f 0b03 	mvn.w	fp, r3
 8006188:	f04f 0800 	mov.w	r8, #0
 800618c:	4621      	mov	r1, r4
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fa76 	bl	8006680 <_Bfree>
 8006194:	2e00      	cmp	r6, #0
 8006196:	f43f aead 	beq.w	8005ef4 <_dtoa_r+0x6b4>
 800619a:	f1b8 0f00 	cmp.w	r8, #0
 800619e:	d005      	beq.n	80061ac <_dtoa_r+0x96c>
 80061a0:	45b0      	cmp	r8, r6
 80061a2:	d003      	beq.n	80061ac <_dtoa_r+0x96c>
 80061a4:	4641      	mov	r1, r8
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fa6a 	bl	8006680 <_Bfree>
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 fa66 	bl	8006680 <_Bfree>
 80061b4:	e69e      	b.n	8005ef4 <_dtoa_r+0x6b4>
 80061b6:	2400      	movs	r4, #0
 80061b8:	4626      	mov	r6, r4
 80061ba:	e7e1      	b.n	8006180 <_dtoa_r+0x940>
 80061bc:	46c3      	mov	fp, r8
 80061be:	4626      	mov	r6, r4
 80061c0:	e59d      	b.n	8005cfe <_dtoa_r+0x4be>
 80061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80c8 	beq.w	800635a <_dtoa_r+0xb1a>
 80061ca:	9b08      	ldr	r3, [sp, #32]
 80061cc:	9306      	str	r3, [sp, #24]
 80061ce:	2f00      	cmp	r7, #0
 80061d0:	dd05      	ble.n	80061de <_dtoa_r+0x99e>
 80061d2:	4631      	mov	r1, r6
 80061d4:	463a      	mov	r2, r7
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fc20 	bl	8006a1c <__lshift>
 80061dc:	4606      	mov	r6, r0
 80061de:	f1b8 0f00 	cmp.w	r8, #0
 80061e2:	d05b      	beq.n	800629c <_dtoa_r+0xa5c>
 80061e4:	4628      	mov	r0, r5
 80061e6:	6871      	ldr	r1, [r6, #4]
 80061e8:	f000 fa0a 	bl	8006600 <_Balloc>
 80061ec:	4607      	mov	r7, r0
 80061ee:	b928      	cbnz	r0, 80061fc <_dtoa_r+0x9bc>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80061f6:	4b81      	ldr	r3, [pc, #516]	; (80063fc <_dtoa_r+0xbbc>)
 80061f8:	f7ff bb36 	b.w	8005868 <_dtoa_r+0x28>
 80061fc:	6932      	ldr	r2, [r6, #16]
 80061fe:	f106 010c 	add.w	r1, r6, #12
 8006202:	3202      	adds	r2, #2
 8006204:	0092      	lsls	r2, r2, #2
 8006206:	300c      	adds	r0, #12
 8006208:	f000 fff2 	bl	80071f0 <memcpy>
 800620c:	2201      	movs	r2, #1
 800620e:	4639      	mov	r1, r7
 8006210:	4628      	mov	r0, r5
 8006212:	f000 fc03 	bl	8006a1c <__lshift>
 8006216:	46b0      	mov	r8, r6
 8006218:	4606      	mov	r6, r0
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	9a03      	ldr	r2, [sp, #12]
 800621e:	3301      	adds	r3, #1
 8006220:	9308      	str	r3, [sp, #32]
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	4413      	add	r3, r2
 8006226:	930b      	str	r3, [sp, #44]	; 0x2c
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	930a      	str	r3, [sp, #40]	; 0x28
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	4621      	mov	r1, r4
 8006234:	3b01      	subs	r3, #1
 8006236:	4650      	mov	r0, sl
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	f7ff fa76 	bl	800572a <quorem>
 800623e:	4641      	mov	r1, r8
 8006240:	9006      	str	r0, [sp, #24]
 8006242:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006246:	4650      	mov	r0, sl
 8006248:	f000 fc54 	bl	8006af4 <__mcmp>
 800624c:	4632      	mov	r2, r6
 800624e:	9009      	str	r0, [sp, #36]	; 0x24
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	f000 fc6a 	bl	8006b2c <__mdiff>
 8006258:	68c2      	ldr	r2, [r0, #12]
 800625a:	4607      	mov	r7, r0
 800625c:	bb02      	cbnz	r2, 80062a0 <_dtoa_r+0xa60>
 800625e:	4601      	mov	r1, r0
 8006260:	4650      	mov	r0, sl
 8006262:	f000 fc47 	bl	8006af4 <__mcmp>
 8006266:	4602      	mov	r2, r0
 8006268:	4639      	mov	r1, r7
 800626a:	4628      	mov	r0, r5
 800626c:	920c      	str	r2, [sp, #48]	; 0x30
 800626e:	f000 fa07 	bl	8006680 <_Bfree>
 8006272:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006276:	9f08      	ldr	r7, [sp, #32]
 8006278:	ea43 0102 	orr.w	r1, r3, r2
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	4319      	orrs	r1, r3
 8006280:	d110      	bne.n	80062a4 <_dtoa_r+0xa64>
 8006282:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006286:	d029      	beq.n	80062dc <_dtoa_r+0xa9c>
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd02      	ble.n	8006294 <_dtoa_r+0xa54>
 800628e:	9b06      	ldr	r3, [sp, #24]
 8006290:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	f883 9000 	strb.w	r9, [r3]
 800629a:	e777      	b.n	800618c <_dtoa_r+0x94c>
 800629c:	4630      	mov	r0, r6
 800629e:	e7ba      	b.n	8006216 <_dtoa_r+0x9d6>
 80062a0:	2201      	movs	r2, #1
 80062a2:	e7e1      	b.n	8006268 <_dtoa_r+0xa28>
 80062a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db04      	blt.n	80062b4 <_dtoa_r+0xa74>
 80062aa:	9922      	ldr	r1, [sp, #136]	; 0x88
 80062ac:	430b      	orrs	r3, r1
 80062ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062b0:	430b      	orrs	r3, r1
 80062b2:	d120      	bne.n	80062f6 <_dtoa_r+0xab6>
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	dded      	ble.n	8006294 <_dtoa_r+0xa54>
 80062b8:	4651      	mov	r1, sl
 80062ba:	2201      	movs	r2, #1
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 fbad 	bl	8006a1c <__lshift>
 80062c2:	4621      	mov	r1, r4
 80062c4:	4682      	mov	sl, r0
 80062c6:	f000 fc15 	bl	8006af4 <__mcmp>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	dc03      	bgt.n	80062d6 <_dtoa_r+0xa96>
 80062ce:	d1e1      	bne.n	8006294 <_dtoa_r+0xa54>
 80062d0:	f019 0f01 	tst.w	r9, #1
 80062d4:	d0de      	beq.n	8006294 <_dtoa_r+0xa54>
 80062d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062da:	d1d8      	bne.n	800628e <_dtoa_r+0xa4e>
 80062dc:	2339      	movs	r3, #57	; 0x39
 80062de:	9a04      	ldr	r2, [sp, #16]
 80062e0:	7013      	strb	r3, [r2, #0]
 80062e2:	463b      	mov	r3, r7
 80062e4:	461f      	mov	r7, r3
 80062e6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2a39      	cmp	r2, #57	; 0x39
 80062ee:	d06b      	beq.n	80063c8 <_dtoa_r+0xb88>
 80062f0:	3201      	adds	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e74a      	b.n	800618c <_dtoa_r+0x94c>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	dd07      	ble.n	800630a <_dtoa_r+0xaca>
 80062fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062fe:	d0ed      	beq.n	80062dc <_dtoa_r+0xa9c>
 8006300:	9a04      	ldr	r2, [sp, #16]
 8006302:	f109 0301 	add.w	r3, r9, #1
 8006306:	7013      	strb	r3, [r2, #0]
 8006308:	e740      	b.n	800618c <_dtoa_r+0x94c>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800630e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006312:	4293      	cmp	r3, r2
 8006314:	d042      	beq.n	800639c <_dtoa_r+0xb5c>
 8006316:	4651      	mov	r1, sl
 8006318:	2300      	movs	r3, #0
 800631a:	220a      	movs	r2, #10
 800631c:	4628      	mov	r0, r5
 800631e:	f000 f9d1 	bl	80066c4 <__multadd>
 8006322:	45b0      	cmp	r8, r6
 8006324:	4682      	mov	sl, r0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	f04f 020a 	mov.w	r2, #10
 800632e:	4641      	mov	r1, r8
 8006330:	4628      	mov	r0, r5
 8006332:	d107      	bne.n	8006344 <_dtoa_r+0xb04>
 8006334:	f000 f9c6 	bl	80066c4 <__multadd>
 8006338:	4680      	mov	r8, r0
 800633a:	4606      	mov	r6, r0
 800633c:	9b08      	ldr	r3, [sp, #32]
 800633e:	3301      	adds	r3, #1
 8006340:	9308      	str	r3, [sp, #32]
 8006342:	e775      	b.n	8006230 <_dtoa_r+0x9f0>
 8006344:	f000 f9be 	bl	80066c4 <__multadd>
 8006348:	4631      	mov	r1, r6
 800634a:	4680      	mov	r8, r0
 800634c:	2300      	movs	r3, #0
 800634e:	220a      	movs	r2, #10
 8006350:	4628      	mov	r0, r5
 8006352:	f000 f9b7 	bl	80066c4 <__multadd>
 8006356:	4606      	mov	r6, r0
 8006358:	e7f0      	b.n	800633c <_dtoa_r+0xafc>
 800635a:	9b08      	ldr	r3, [sp, #32]
 800635c:	9306      	str	r3, [sp, #24]
 800635e:	9f03      	ldr	r7, [sp, #12]
 8006360:	4621      	mov	r1, r4
 8006362:	4650      	mov	r0, sl
 8006364:	f7ff f9e1 	bl	800572a <quorem>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800636e:	f807 9b01 	strb.w	r9, [r7], #1
 8006372:	1afa      	subs	r2, r7, r3
 8006374:	9b06      	ldr	r3, [sp, #24]
 8006376:	4293      	cmp	r3, r2
 8006378:	dd07      	ble.n	800638a <_dtoa_r+0xb4a>
 800637a:	4651      	mov	r1, sl
 800637c:	2300      	movs	r3, #0
 800637e:	220a      	movs	r2, #10
 8006380:	4628      	mov	r0, r5
 8006382:	f000 f99f 	bl	80066c4 <__multadd>
 8006386:	4682      	mov	sl, r0
 8006388:	e7ea      	b.n	8006360 <_dtoa_r+0xb20>
 800638a:	9b06      	ldr	r3, [sp, #24]
 800638c:	f04f 0800 	mov.w	r8, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfcc      	ite	gt
 8006394:	461f      	movgt	r7, r3
 8006396:	2701      	movle	r7, #1
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	441f      	add	r7, r3
 800639c:	4651      	mov	r1, sl
 800639e:	2201      	movs	r2, #1
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 fb3b 	bl	8006a1c <__lshift>
 80063a6:	4621      	mov	r1, r4
 80063a8:	4682      	mov	sl, r0
 80063aa:	f000 fba3 	bl	8006af4 <__mcmp>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	dc97      	bgt.n	80062e2 <_dtoa_r+0xaa2>
 80063b2:	d102      	bne.n	80063ba <_dtoa_r+0xb7a>
 80063b4:	f019 0f01 	tst.w	r9, #1
 80063b8:	d193      	bne.n	80062e2 <_dtoa_r+0xaa2>
 80063ba:	463b      	mov	r3, r7
 80063bc:	461f      	mov	r7, r3
 80063be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c2:	2a30      	cmp	r2, #48	; 0x30
 80063c4:	d0fa      	beq.n	80063bc <_dtoa_r+0xb7c>
 80063c6:	e6e1      	b.n	800618c <_dtoa_r+0x94c>
 80063c8:	9a03      	ldr	r2, [sp, #12]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d18a      	bne.n	80062e4 <_dtoa_r+0xaa4>
 80063ce:	2331      	movs	r3, #49	; 0x31
 80063d0:	f10b 0b01 	add.w	fp, fp, #1
 80063d4:	e797      	b.n	8006306 <_dtoa_r+0xac6>
 80063d6:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <_dtoa_r+0xbc0>)
 80063d8:	f7ff ba9f 	b.w	800591a <_dtoa_r+0xda>
 80063dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f47f aa77 	bne.w	80058d2 <_dtoa_r+0x92>
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <_dtoa_r+0xbc4>)
 80063e6:	f7ff ba98 	b.w	800591a <_dtoa_r+0xda>
 80063ea:	9b06      	ldr	r3, [sp, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dcb6      	bgt.n	800635e <_dtoa_r+0xb1e>
 80063f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	f73f aeb5 	bgt.w	8006162 <_dtoa_r+0x922>
 80063f8:	e7b1      	b.n	800635e <_dtoa_r+0xb1e>
 80063fa:	bf00      	nop
 80063fc:	08007508 	.word	0x08007508
 8006400:	08007468 	.word	0x08007468
 8006404:	0800748c 	.word	0x0800748c

08006408 <_free_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4605      	mov	r5, r0
 800640c:	2900      	cmp	r1, #0
 800640e:	d040      	beq.n	8006492 <_free_r+0x8a>
 8006410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006414:	1f0c      	subs	r4, r1, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	bfb8      	it	lt
 800641a:	18e4      	addlt	r4, r4, r3
 800641c:	f000 f8e4 	bl	80065e8 <__malloc_lock>
 8006420:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <_free_r+0x8c>)
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	b933      	cbnz	r3, 8006434 <_free_r+0x2c>
 8006426:	6063      	str	r3, [r4, #4]
 8006428:	6014      	str	r4, [r2, #0]
 800642a:	4628      	mov	r0, r5
 800642c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006430:	f000 b8e0 	b.w	80065f4 <__malloc_unlock>
 8006434:	42a3      	cmp	r3, r4
 8006436:	d908      	bls.n	800644a <_free_r+0x42>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	1821      	adds	r1, r4, r0
 800643c:	428b      	cmp	r3, r1
 800643e:	bf01      	itttt	eq
 8006440:	6819      	ldreq	r1, [r3, #0]
 8006442:	685b      	ldreq	r3, [r3, #4]
 8006444:	1809      	addeq	r1, r1, r0
 8006446:	6021      	streq	r1, [r4, #0]
 8006448:	e7ed      	b.n	8006426 <_free_r+0x1e>
 800644a:	461a      	mov	r2, r3
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	b10b      	cbz	r3, 8006454 <_free_r+0x4c>
 8006450:	42a3      	cmp	r3, r4
 8006452:	d9fa      	bls.n	800644a <_free_r+0x42>
 8006454:	6811      	ldr	r1, [r2, #0]
 8006456:	1850      	adds	r0, r2, r1
 8006458:	42a0      	cmp	r0, r4
 800645a:	d10b      	bne.n	8006474 <_free_r+0x6c>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	4401      	add	r1, r0
 8006460:	1850      	adds	r0, r2, r1
 8006462:	4283      	cmp	r3, r0
 8006464:	6011      	str	r1, [r2, #0]
 8006466:	d1e0      	bne.n	800642a <_free_r+0x22>
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4408      	add	r0, r1
 800646e:	6010      	str	r0, [r2, #0]
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	e7da      	b.n	800642a <_free_r+0x22>
 8006474:	d902      	bls.n	800647c <_free_r+0x74>
 8006476:	230c      	movs	r3, #12
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	e7d6      	b.n	800642a <_free_r+0x22>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	1821      	adds	r1, r4, r0
 8006480:	428b      	cmp	r3, r1
 8006482:	bf01      	itttt	eq
 8006484:	6819      	ldreq	r1, [r3, #0]
 8006486:	685b      	ldreq	r3, [r3, #4]
 8006488:	1809      	addeq	r1, r1, r0
 800648a:	6021      	streq	r1, [r4, #0]
 800648c:	6063      	str	r3, [r4, #4]
 800648e:	6054      	str	r4, [r2, #4]
 8006490:	e7cb      	b.n	800642a <_free_r+0x22>
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	2000054c 	.word	0x2000054c

08006498 <malloc>:
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <malloc+0xc>)
 800649a:	4601      	mov	r1, r0
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f000 b823 	b.w	80064e8 <_malloc_r>
 80064a2:	bf00      	nop
 80064a4:	20000064 	.word	0x20000064

080064a8 <sbrk_aligned>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0e      	ldr	r6, [pc, #56]	; (80064e4 <sbrk_aligned+0x3c>)
 80064ac:	460c      	mov	r4, r1
 80064ae:	6831      	ldr	r1, [r6, #0]
 80064b0:	4605      	mov	r5, r0
 80064b2:	b911      	cbnz	r1, 80064ba <sbrk_aligned+0x12>
 80064b4:	f000 fe8c 	bl	80071d0 <_sbrk_r>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fe87 	bl	80071d0 <_sbrk_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <sbrk_aligned+0x34>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d007      	beq.n	80064e0 <sbrk_aligned+0x38>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 fe7c 	bl	80071d0 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d101      	bne.n	80064e0 <sbrk_aligned+0x38>
 80064dc:	f04f 34ff 	mov.w	r4, #4294967295
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	20000550 	.word	0x20000550

080064e8 <_malloc_r>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4607      	mov	r7, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d905      	bls.n	8006510 <_malloc_r+0x28>
 8006504:	230c      	movs	r3, #12
 8006506:	2600      	movs	r6, #0
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4630      	mov	r0, r6
 800650c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006510:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065e4 <_malloc_r+0xfc>
 8006514:	f000 f868 	bl	80065e8 <__malloc_lock>
 8006518:	f8d8 3000 	ldr.w	r3, [r8]
 800651c:	461c      	mov	r4, r3
 800651e:	bb5c      	cbnz	r4, 8006578 <_malloc_r+0x90>
 8006520:	4629      	mov	r1, r5
 8006522:	4638      	mov	r0, r7
 8006524:	f7ff ffc0 	bl	80064a8 <sbrk_aligned>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	4604      	mov	r4, r0
 800652c:	d155      	bne.n	80065da <_malloc_r+0xf2>
 800652e:	f8d8 4000 	ldr.w	r4, [r8]
 8006532:	4626      	mov	r6, r4
 8006534:	2e00      	cmp	r6, #0
 8006536:	d145      	bne.n	80065c4 <_malloc_r+0xdc>
 8006538:	2c00      	cmp	r4, #0
 800653a:	d048      	beq.n	80065ce <_malloc_r+0xe6>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	4631      	mov	r1, r6
 8006540:	4638      	mov	r0, r7
 8006542:	eb04 0903 	add.w	r9, r4, r3
 8006546:	f000 fe43 	bl	80071d0 <_sbrk_r>
 800654a:	4581      	cmp	r9, r0
 800654c:	d13f      	bne.n	80065ce <_malloc_r+0xe6>
 800654e:	6821      	ldr	r1, [r4, #0]
 8006550:	4638      	mov	r0, r7
 8006552:	1a6d      	subs	r5, r5, r1
 8006554:	4629      	mov	r1, r5
 8006556:	f7ff ffa7 	bl	80064a8 <sbrk_aligned>
 800655a:	3001      	adds	r0, #1
 800655c:	d037      	beq.n	80065ce <_malloc_r+0xe6>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	442b      	add	r3, r5
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	f8d8 3000 	ldr.w	r3, [r8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d038      	beq.n	80065de <_malloc_r+0xf6>
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	42a2      	cmp	r2, r4
 8006570:	d12b      	bne.n	80065ca <_malloc_r+0xe2>
 8006572:	2200      	movs	r2, #0
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	e00f      	b.n	8006598 <_malloc_r+0xb0>
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	1b52      	subs	r2, r2, r5
 800657c:	d41f      	bmi.n	80065be <_malloc_r+0xd6>
 800657e:	2a0b      	cmp	r2, #11
 8006580:	d917      	bls.n	80065b2 <_malloc_r+0xca>
 8006582:	1961      	adds	r1, r4, r5
 8006584:	42a3      	cmp	r3, r4
 8006586:	6025      	str	r5, [r4, #0]
 8006588:	bf18      	it	ne
 800658a:	6059      	strne	r1, [r3, #4]
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	bf08      	it	eq
 8006590:	f8c8 1000 	streq.w	r1, [r8]
 8006594:	5162      	str	r2, [r4, r5]
 8006596:	604b      	str	r3, [r1, #4]
 8006598:	4638      	mov	r0, r7
 800659a:	f104 060b 	add.w	r6, r4, #11
 800659e:	f000 f829 	bl	80065f4 <__malloc_unlock>
 80065a2:	f026 0607 	bic.w	r6, r6, #7
 80065a6:	1d23      	adds	r3, r4, #4
 80065a8:	1af2      	subs	r2, r6, r3
 80065aa:	d0ae      	beq.n	800650a <_malloc_r+0x22>
 80065ac:	1b9b      	subs	r3, r3, r6
 80065ae:	50a3      	str	r3, [r4, r2]
 80065b0:	e7ab      	b.n	800650a <_malloc_r+0x22>
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	6862      	ldr	r2, [r4, #4]
 80065b6:	d1dd      	bne.n	8006574 <_malloc_r+0x8c>
 80065b8:	f8c8 2000 	str.w	r2, [r8]
 80065bc:	e7ec      	b.n	8006598 <_malloc_r+0xb0>
 80065be:	4623      	mov	r3, r4
 80065c0:	6864      	ldr	r4, [r4, #4]
 80065c2:	e7ac      	b.n	800651e <_malloc_r+0x36>
 80065c4:	4634      	mov	r4, r6
 80065c6:	6876      	ldr	r6, [r6, #4]
 80065c8:	e7b4      	b.n	8006534 <_malloc_r+0x4c>
 80065ca:	4613      	mov	r3, r2
 80065cc:	e7cc      	b.n	8006568 <_malloc_r+0x80>
 80065ce:	230c      	movs	r3, #12
 80065d0:	4638      	mov	r0, r7
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	f000 f80e 	bl	80065f4 <__malloc_unlock>
 80065d8:	e797      	b.n	800650a <_malloc_r+0x22>
 80065da:	6025      	str	r5, [r4, #0]
 80065dc:	e7dc      	b.n	8006598 <_malloc_r+0xb0>
 80065de:	605b      	str	r3, [r3, #4]
 80065e0:	deff      	udf	#255	; 0xff
 80065e2:	bf00      	nop
 80065e4:	2000054c 	.word	0x2000054c

080065e8 <__malloc_lock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	; (80065f0 <__malloc_lock+0x8>)
 80065ea:	f7ff b88e 	b.w	800570a <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	20000548 	.word	0x20000548

080065f4 <__malloc_unlock>:
 80065f4:	4801      	ldr	r0, [pc, #4]	; (80065fc <__malloc_unlock+0x8>)
 80065f6:	f7ff b889 	b.w	800570c <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	20000548 	.word	0x20000548

08006600 <_Balloc>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	69c6      	ldr	r6, [r0, #28]
 8006604:	4604      	mov	r4, r0
 8006606:	460d      	mov	r5, r1
 8006608:	b976      	cbnz	r6, 8006628 <_Balloc+0x28>
 800660a:	2010      	movs	r0, #16
 800660c:	f7ff ff44 	bl	8006498 <malloc>
 8006610:	4602      	mov	r2, r0
 8006612:	61e0      	str	r0, [r4, #28]
 8006614:	b920      	cbnz	r0, 8006620 <_Balloc+0x20>
 8006616:	216b      	movs	r1, #107	; 0x6b
 8006618:	4b17      	ldr	r3, [pc, #92]	; (8006678 <_Balloc+0x78>)
 800661a:	4818      	ldr	r0, [pc, #96]	; (800667c <_Balloc+0x7c>)
 800661c:	f000 fdf6 	bl	800720c <__assert_func>
 8006620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006624:	6006      	str	r6, [r0, #0]
 8006626:	60c6      	str	r6, [r0, #12]
 8006628:	69e6      	ldr	r6, [r4, #28]
 800662a:	68f3      	ldr	r3, [r6, #12]
 800662c:	b183      	cbz	r3, 8006650 <_Balloc+0x50>
 800662e:	69e3      	ldr	r3, [r4, #28]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006636:	b9b8      	cbnz	r0, 8006668 <_Balloc+0x68>
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f605 	lsl.w	r6, r1, r5
 800663e:	1d72      	adds	r2, r6, #5
 8006640:	4620      	mov	r0, r4
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	f000 fe00 	bl	8007248 <_calloc_r>
 8006648:	b160      	cbz	r0, 8006664 <_Balloc+0x64>
 800664a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800664e:	e00e      	b.n	800666e <_Balloc+0x6e>
 8006650:	2221      	movs	r2, #33	; 0x21
 8006652:	2104      	movs	r1, #4
 8006654:	4620      	mov	r0, r4
 8006656:	f000 fdf7 	bl	8007248 <_calloc_r>
 800665a:	69e3      	ldr	r3, [r4, #28]
 800665c:	60f0      	str	r0, [r6, #12]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e4      	bne.n	800662e <_Balloc+0x2e>
 8006664:	2000      	movs	r0, #0
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	6802      	ldr	r2, [r0, #0]
 800666a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800666e:	2300      	movs	r3, #0
 8006670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006674:	e7f7      	b.n	8006666 <_Balloc+0x66>
 8006676:	bf00      	nop
 8006678:	08007499 	.word	0x08007499
 800667c:	08007519 	.word	0x08007519

08006680 <_Bfree>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	69c6      	ldr	r6, [r0, #28]
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	b976      	cbnz	r6, 80066a8 <_Bfree+0x28>
 800668a:	2010      	movs	r0, #16
 800668c:	f7ff ff04 	bl	8006498 <malloc>
 8006690:	4602      	mov	r2, r0
 8006692:	61e8      	str	r0, [r5, #28]
 8006694:	b920      	cbnz	r0, 80066a0 <_Bfree+0x20>
 8006696:	218f      	movs	r1, #143	; 0x8f
 8006698:	4b08      	ldr	r3, [pc, #32]	; (80066bc <_Bfree+0x3c>)
 800669a:	4809      	ldr	r0, [pc, #36]	; (80066c0 <_Bfree+0x40>)
 800669c:	f000 fdb6 	bl	800720c <__assert_func>
 80066a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066a4:	6006      	str	r6, [r0, #0]
 80066a6:	60c6      	str	r6, [r0, #12]
 80066a8:	b13c      	cbz	r4, 80066ba <_Bfree+0x3a>
 80066aa:	69eb      	ldr	r3, [r5, #28]
 80066ac:	6862      	ldr	r2, [r4, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066b4:	6021      	str	r1, [r4, #0]
 80066b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	08007499 	.word	0x08007499
 80066c0:	08007519 	.word	0x08007519

080066c4 <__multadd>:
 80066c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c8:	4607      	mov	r7, r0
 80066ca:	460c      	mov	r4, r1
 80066cc:	461e      	mov	r6, r3
 80066ce:	2000      	movs	r0, #0
 80066d0:	690d      	ldr	r5, [r1, #16]
 80066d2:	f101 0c14 	add.w	ip, r1, #20
 80066d6:	f8dc 3000 	ldr.w	r3, [ip]
 80066da:	3001      	adds	r0, #1
 80066dc:	b299      	uxth	r1, r3
 80066de:	fb02 6101 	mla	r1, r2, r1, r6
 80066e2:	0c1e      	lsrs	r6, r3, #16
 80066e4:	0c0b      	lsrs	r3, r1, #16
 80066e6:	fb02 3306 	mla	r3, r2, r6, r3
 80066ea:	b289      	uxth	r1, r1
 80066ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066f0:	4285      	cmp	r5, r0
 80066f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066f6:	f84c 1b04 	str.w	r1, [ip], #4
 80066fa:	dcec      	bgt.n	80066d6 <__multadd+0x12>
 80066fc:	b30e      	cbz	r6, 8006742 <__multadd+0x7e>
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	42ab      	cmp	r3, r5
 8006702:	dc19      	bgt.n	8006738 <__multadd+0x74>
 8006704:	6861      	ldr	r1, [r4, #4]
 8006706:	4638      	mov	r0, r7
 8006708:	3101      	adds	r1, #1
 800670a:	f7ff ff79 	bl	8006600 <_Balloc>
 800670e:	4680      	mov	r8, r0
 8006710:	b928      	cbnz	r0, 800671e <__multadd+0x5a>
 8006712:	4602      	mov	r2, r0
 8006714:	21ba      	movs	r1, #186	; 0xba
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <__multadd+0x84>)
 8006718:	480c      	ldr	r0, [pc, #48]	; (800674c <__multadd+0x88>)
 800671a:	f000 fd77 	bl	800720c <__assert_func>
 800671e:	6922      	ldr	r2, [r4, #16]
 8006720:	f104 010c 	add.w	r1, r4, #12
 8006724:	3202      	adds	r2, #2
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	300c      	adds	r0, #12
 800672a:	f000 fd61 	bl	80071f0 <memcpy>
 800672e:	4621      	mov	r1, r4
 8006730:	4638      	mov	r0, r7
 8006732:	f7ff ffa5 	bl	8006680 <_Bfree>
 8006736:	4644      	mov	r4, r8
 8006738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800673c:	3501      	adds	r5, #1
 800673e:	615e      	str	r6, [r3, #20]
 8006740:	6125      	str	r5, [r4, #16]
 8006742:	4620      	mov	r0, r4
 8006744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006748:	08007508 	.word	0x08007508
 800674c:	08007519 	.word	0x08007519

08006750 <__hi0bits>:
 8006750:	0c02      	lsrs	r2, r0, #16
 8006752:	0412      	lsls	r2, r2, #16
 8006754:	4603      	mov	r3, r0
 8006756:	b9ca      	cbnz	r2, 800678c <__hi0bits+0x3c>
 8006758:	0403      	lsls	r3, r0, #16
 800675a:	2010      	movs	r0, #16
 800675c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006760:	bf04      	itt	eq
 8006762:	021b      	lsleq	r3, r3, #8
 8006764:	3008      	addeq	r0, #8
 8006766:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800676a:	bf04      	itt	eq
 800676c:	011b      	lsleq	r3, r3, #4
 800676e:	3004      	addeq	r0, #4
 8006770:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006774:	bf04      	itt	eq
 8006776:	009b      	lsleq	r3, r3, #2
 8006778:	3002      	addeq	r0, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	db05      	blt.n	800678a <__hi0bits+0x3a>
 800677e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006782:	f100 0001 	add.w	r0, r0, #1
 8006786:	bf08      	it	eq
 8006788:	2020      	moveq	r0, #32
 800678a:	4770      	bx	lr
 800678c:	2000      	movs	r0, #0
 800678e:	e7e5      	b.n	800675c <__hi0bits+0xc>

08006790 <__lo0bits>:
 8006790:	6803      	ldr	r3, [r0, #0]
 8006792:	4602      	mov	r2, r0
 8006794:	f013 0007 	ands.w	r0, r3, #7
 8006798:	d00b      	beq.n	80067b2 <__lo0bits+0x22>
 800679a:	07d9      	lsls	r1, r3, #31
 800679c:	d421      	bmi.n	80067e2 <__lo0bits+0x52>
 800679e:	0798      	lsls	r0, r3, #30
 80067a0:	bf49      	itett	mi
 80067a2:	085b      	lsrmi	r3, r3, #1
 80067a4:	089b      	lsrpl	r3, r3, #2
 80067a6:	2001      	movmi	r0, #1
 80067a8:	6013      	strmi	r3, [r2, #0]
 80067aa:	bf5c      	itt	pl
 80067ac:	2002      	movpl	r0, #2
 80067ae:	6013      	strpl	r3, [r2, #0]
 80067b0:	4770      	bx	lr
 80067b2:	b299      	uxth	r1, r3
 80067b4:	b909      	cbnz	r1, 80067ba <__lo0bits+0x2a>
 80067b6:	2010      	movs	r0, #16
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2d9      	uxtb	r1, r3
 80067bc:	b909      	cbnz	r1, 80067c2 <__lo0bits+0x32>
 80067be:	3008      	adds	r0, #8
 80067c0:	0a1b      	lsrs	r3, r3, #8
 80067c2:	0719      	lsls	r1, r3, #28
 80067c4:	bf04      	itt	eq
 80067c6:	091b      	lsreq	r3, r3, #4
 80067c8:	3004      	addeq	r0, #4
 80067ca:	0799      	lsls	r1, r3, #30
 80067cc:	bf04      	itt	eq
 80067ce:	089b      	lsreq	r3, r3, #2
 80067d0:	3002      	addeq	r0, #2
 80067d2:	07d9      	lsls	r1, r3, #31
 80067d4:	d403      	bmi.n	80067de <__lo0bits+0x4e>
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	f100 0001 	add.w	r0, r0, #1
 80067dc:	d003      	beq.n	80067e6 <__lo0bits+0x56>
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4770      	bx	lr
 80067e2:	2000      	movs	r0, #0
 80067e4:	4770      	bx	lr
 80067e6:	2020      	movs	r0, #32
 80067e8:	4770      	bx	lr
	...

080067ec <__i2b>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	460c      	mov	r4, r1
 80067f0:	2101      	movs	r1, #1
 80067f2:	f7ff ff05 	bl	8006600 <_Balloc>
 80067f6:	4602      	mov	r2, r0
 80067f8:	b928      	cbnz	r0, 8006806 <__i2b+0x1a>
 80067fa:	f240 1145 	movw	r1, #325	; 0x145
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <__i2b+0x24>)
 8006800:	4804      	ldr	r0, [pc, #16]	; (8006814 <__i2b+0x28>)
 8006802:	f000 fd03 	bl	800720c <__assert_func>
 8006806:	2301      	movs	r3, #1
 8006808:	6144      	str	r4, [r0, #20]
 800680a:	6103      	str	r3, [r0, #16]
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	08007508 	.word	0x08007508
 8006814:	08007519 	.word	0x08007519

08006818 <__multiply>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	4691      	mov	r9, r2
 800681e:	690a      	ldr	r2, [r1, #16]
 8006820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006824:	460c      	mov	r4, r1
 8006826:	429a      	cmp	r2, r3
 8006828:	bfbe      	ittt	lt
 800682a:	460b      	movlt	r3, r1
 800682c:	464c      	movlt	r4, r9
 800682e:	4699      	movlt	r9, r3
 8006830:	6927      	ldr	r7, [r4, #16]
 8006832:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006836:	68a3      	ldr	r3, [r4, #8]
 8006838:	6861      	ldr	r1, [r4, #4]
 800683a:	eb07 060a 	add.w	r6, r7, sl
 800683e:	42b3      	cmp	r3, r6
 8006840:	b085      	sub	sp, #20
 8006842:	bfb8      	it	lt
 8006844:	3101      	addlt	r1, #1
 8006846:	f7ff fedb 	bl	8006600 <_Balloc>
 800684a:	b930      	cbnz	r0, 800685a <__multiply+0x42>
 800684c:	4602      	mov	r2, r0
 800684e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006852:	4b43      	ldr	r3, [pc, #268]	; (8006960 <__multiply+0x148>)
 8006854:	4843      	ldr	r0, [pc, #268]	; (8006964 <__multiply+0x14c>)
 8006856:	f000 fcd9 	bl	800720c <__assert_func>
 800685a:	f100 0514 	add.w	r5, r0, #20
 800685e:	462b      	mov	r3, r5
 8006860:	2200      	movs	r2, #0
 8006862:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006866:	4543      	cmp	r3, r8
 8006868:	d321      	bcc.n	80068ae <__multiply+0x96>
 800686a:	f104 0314 	add.w	r3, r4, #20
 800686e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006872:	f109 0314 	add.w	r3, r9, #20
 8006876:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800687a:	9202      	str	r2, [sp, #8]
 800687c:	1b3a      	subs	r2, r7, r4
 800687e:	3a15      	subs	r2, #21
 8006880:	f022 0203 	bic.w	r2, r2, #3
 8006884:	3204      	adds	r2, #4
 8006886:	f104 0115 	add.w	r1, r4, #21
 800688a:	428f      	cmp	r7, r1
 800688c:	bf38      	it	cc
 800688e:	2204      	movcc	r2, #4
 8006890:	9201      	str	r2, [sp, #4]
 8006892:	9a02      	ldr	r2, [sp, #8]
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	429a      	cmp	r2, r3
 8006898:	d80c      	bhi.n	80068b4 <__multiply+0x9c>
 800689a:	2e00      	cmp	r6, #0
 800689c:	dd03      	ble.n	80068a6 <__multiply+0x8e>
 800689e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d05a      	beq.n	800695c <__multiply+0x144>
 80068a6:	6106      	str	r6, [r0, #16]
 80068a8:	b005      	add	sp, #20
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	f843 2b04 	str.w	r2, [r3], #4
 80068b2:	e7d8      	b.n	8006866 <__multiply+0x4e>
 80068b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	d023      	beq.n	8006906 <__multiply+0xee>
 80068be:	46a9      	mov	r9, r5
 80068c0:	f04f 0c00 	mov.w	ip, #0
 80068c4:	f104 0e14 	add.w	lr, r4, #20
 80068c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068cc:	f8d9 1000 	ldr.w	r1, [r9]
 80068d0:	fa1f fb82 	uxth.w	fp, r2
 80068d4:	b289      	uxth	r1, r1
 80068d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80068da:	4461      	add	r1, ip
 80068dc:	f8d9 c000 	ldr.w	ip, [r9]
 80068e0:	0c12      	lsrs	r2, r2, #16
 80068e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068e6:	fb0a c202 	mla	r2, sl, r2, ip
 80068ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068ee:	b289      	uxth	r1, r1
 80068f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068f4:	4577      	cmp	r7, lr
 80068f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068fa:	f849 1b04 	str.w	r1, [r9], #4
 80068fe:	d8e3      	bhi.n	80068c8 <__multiply+0xb0>
 8006900:	9a01      	ldr	r2, [sp, #4]
 8006902:	f845 c002 	str.w	ip, [r5, r2]
 8006906:	9a03      	ldr	r2, [sp, #12]
 8006908:	3304      	adds	r3, #4
 800690a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800690e:	f1b9 0f00 	cmp.w	r9, #0
 8006912:	d021      	beq.n	8006958 <__multiply+0x140>
 8006914:	46ae      	mov	lr, r5
 8006916:	f04f 0a00 	mov.w	sl, #0
 800691a:	6829      	ldr	r1, [r5, #0]
 800691c:	f104 0c14 	add.w	ip, r4, #20
 8006920:	f8bc b000 	ldrh.w	fp, [ip]
 8006924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006928:	b289      	uxth	r1, r1
 800692a:	fb09 220b 	mla	r2, r9, fp, r2
 800692e:	4452      	add	r2, sl
 8006930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006934:	f84e 1b04 	str.w	r1, [lr], #4
 8006938:	f85c 1b04 	ldr.w	r1, [ip], #4
 800693c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006940:	f8be 1000 	ldrh.w	r1, [lr]
 8006944:	4567      	cmp	r7, ip
 8006946:	fb09 110a 	mla	r1, r9, sl, r1
 800694a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800694e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006952:	d8e5      	bhi.n	8006920 <__multiply+0x108>
 8006954:	9a01      	ldr	r2, [sp, #4]
 8006956:	50a9      	str	r1, [r5, r2]
 8006958:	3504      	adds	r5, #4
 800695a:	e79a      	b.n	8006892 <__multiply+0x7a>
 800695c:	3e01      	subs	r6, #1
 800695e:	e79c      	b.n	800689a <__multiply+0x82>
 8006960:	08007508 	.word	0x08007508
 8006964:	08007519 	.word	0x08007519

08006968 <__pow5mult>:
 8006968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800696c:	4615      	mov	r5, r2
 800696e:	f012 0203 	ands.w	r2, r2, #3
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	d007      	beq.n	8006988 <__pow5mult+0x20>
 8006978:	4c25      	ldr	r4, [pc, #148]	; (8006a10 <__pow5mult+0xa8>)
 800697a:	3a01      	subs	r2, #1
 800697c:	2300      	movs	r3, #0
 800697e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006982:	f7ff fe9f 	bl	80066c4 <__multadd>
 8006986:	4607      	mov	r7, r0
 8006988:	10ad      	asrs	r5, r5, #2
 800698a:	d03d      	beq.n	8006a08 <__pow5mult+0xa0>
 800698c:	69f4      	ldr	r4, [r6, #28]
 800698e:	b97c      	cbnz	r4, 80069b0 <__pow5mult+0x48>
 8006990:	2010      	movs	r0, #16
 8006992:	f7ff fd81 	bl	8006498 <malloc>
 8006996:	4602      	mov	r2, r0
 8006998:	61f0      	str	r0, [r6, #28]
 800699a:	b928      	cbnz	r0, 80069a8 <__pow5mult+0x40>
 800699c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80069a0:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <__pow5mult+0xac>)
 80069a2:	481d      	ldr	r0, [pc, #116]	; (8006a18 <__pow5mult+0xb0>)
 80069a4:	f000 fc32 	bl	800720c <__assert_func>
 80069a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069ac:	6004      	str	r4, [r0, #0]
 80069ae:	60c4      	str	r4, [r0, #12]
 80069b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80069b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069b8:	b94c      	cbnz	r4, 80069ce <__pow5mult+0x66>
 80069ba:	f240 2171 	movw	r1, #625	; 0x271
 80069be:	4630      	mov	r0, r6
 80069c0:	f7ff ff14 	bl	80067ec <__i2b>
 80069c4:	2300      	movs	r3, #0
 80069c6:	4604      	mov	r4, r0
 80069c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80069cc:	6003      	str	r3, [r0, #0]
 80069ce:	f04f 0900 	mov.w	r9, #0
 80069d2:	07eb      	lsls	r3, r5, #31
 80069d4:	d50a      	bpl.n	80069ec <__pow5mult+0x84>
 80069d6:	4639      	mov	r1, r7
 80069d8:	4622      	mov	r2, r4
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff ff1c 	bl	8006818 <__multiply>
 80069e0:	4680      	mov	r8, r0
 80069e2:	4639      	mov	r1, r7
 80069e4:	4630      	mov	r0, r6
 80069e6:	f7ff fe4b 	bl	8006680 <_Bfree>
 80069ea:	4647      	mov	r7, r8
 80069ec:	106d      	asrs	r5, r5, #1
 80069ee:	d00b      	beq.n	8006a08 <__pow5mult+0xa0>
 80069f0:	6820      	ldr	r0, [r4, #0]
 80069f2:	b938      	cbnz	r0, 8006a04 <__pow5mult+0x9c>
 80069f4:	4622      	mov	r2, r4
 80069f6:	4621      	mov	r1, r4
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff ff0d 	bl	8006818 <__multiply>
 80069fe:	6020      	str	r0, [r4, #0]
 8006a00:	f8c0 9000 	str.w	r9, [r0]
 8006a04:	4604      	mov	r4, r0
 8006a06:	e7e4      	b.n	80069d2 <__pow5mult+0x6a>
 8006a08:	4638      	mov	r0, r7
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	bf00      	nop
 8006a10:	08007668 	.word	0x08007668
 8006a14:	08007499 	.word	0x08007499
 8006a18:	08007519 	.word	0x08007519

08006a1c <__lshift>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	460c      	mov	r4, r1
 8006a22:	4607      	mov	r7, r0
 8006a24:	4691      	mov	r9, r2
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	6849      	ldr	r1, [r1, #4]
 8006a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a34:	f108 0601 	add.w	r6, r8, #1
 8006a38:	42b3      	cmp	r3, r6
 8006a3a:	db0b      	blt.n	8006a54 <__lshift+0x38>
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff fddf 	bl	8006600 <_Balloc>
 8006a42:	4605      	mov	r5, r0
 8006a44:	b948      	cbnz	r0, 8006a5a <__lshift+0x3e>
 8006a46:	4602      	mov	r2, r0
 8006a48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a4c:	4b27      	ldr	r3, [pc, #156]	; (8006aec <__lshift+0xd0>)
 8006a4e:	4828      	ldr	r0, [pc, #160]	; (8006af0 <__lshift+0xd4>)
 8006a50:	f000 fbdc 	bl	800720c <__assert_func>
 8006a54:	3101      	adds	r1, #1
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	e7ee      	b.n	8006a38 <__lshift+0x1c>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f100 0114 	add.w	r1, r0, #20
 8006a60:	f100 0210 	add.w	r2, r0, #16
 8006a64:	4618      	mov	r0, r3
 8006a66:	4553      	cmp	r3, sl
 8006a68:	db33      	blt.n	8006ad2 <__lshift+0xb6>
 8006a6a:	6920      	ldr	r0, [r4, #16]
 8006a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a70:	f104 0314 	add.w	r3, r4, #20
 8006a74:	f019 091f 	ands.w	r9, r9, #31
 8006a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a80:	d02b      	beq.n	8006ada <__lshift+0xbe>
 8006a82:	468a      	mov	sl, r1
 8006a84:	2200      	movs	r2, #0
 8006a86:	f1c9 0e20 	rsb	lr, r9, #32
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a90:	4310      	orrs	r0, r2
 8006a92:	f84a 0b04 	str.w	r0, [sl], #4
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	459c      	cmp	ip, r3
 8006a9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006aa0:	d8f3      	bhi.n	8006a8a <__lshift+0x6e>
 8006aa2:	ebac 0304 	sub.w	r3, ip, r4
 8006aa6:	3b15      	subs	r3, #21
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	3304      	adds	r3, #4
 8006aae:	f104 0015 	add.w	r0, r4, #21
 8006ab2:	4584      	cmp	ip, r0
 8006ab4:	bf38      	it	cc
 8006ab6:	2304      	movcc	r3, #4
 8006ab8:	50ca      	str	r2, [r1, r3]
 8006aba:	b10a      	cbz	r2, 8006ac0 <__lshift+0xa4>
 8006abc:	f108 0602 	add.w	r6, r8, #2
 8006ac0:	3e01      	subs	r6, #1
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	612e      	str	r6, [r5, #16]
 8006ac8:	f7ff fdda 	bl	8006680 <_Bfree>
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	e7c5      	b.n	8006a66 <__lshift+0x4a>
 8006ada:	3904      	subs	r1, #4
 8006adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae0:	459c      	cmp	ip, r3
 8006ae2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ae6:	d8f9      	bhi.n	8006adc <__lshift+0xc0>
 8006ae8:	e7ea      	b.n	8006ac0 <__lshift+0xa4>
 8006aea:	bf00      	nop
 8006aec:	08007508 	.word	0x08007508
 8006af0:	08007519 	.word	0x08007519

08006af4 <__mcmp>:
 8006af4:	4603      	mov	r3, r0
 8006af6:	690a      	ldr	r2, [r1, #16]
 8006af8:	6900      	ldr	r0, [r0, #16]
 8006afa:	b530      	push	{r4, r5, lr}
 8006afc:	1a80      	subs	r0, r0, r2
 8006afe:	d10d      	bne.n	8006b1c <__mcmp+0x28>
 8006b00:	3314      	adds	r3, #20
 8006b02:	3114      	adds	r1, #20
 8006b04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b14:	4295      	cmp	r5, r2
 8006b16:	d002      	beq.n	8006b1e <__mcmp+0x2a>
 8006b18:	d304      	bcc.n	8006b24 <__mcmp+0x30>
 8006b1a:	2001      	movs	r0, #1
 8006b1c:	bd30      	pop	{r4, r5, pc}
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	d3f4      	bcc.n	8006b0c <__mcmp+0x18>
 8006b22:	e7fb      	b.n	8006b1c <__mcmp+0x28>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	e7f8      	b.n	8006b1c <__mcmp+0x28>
	...

08006b2c <__mdiff>:
 8006b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	460d      	mov	r5, r1
 8006b32:	4607      	mov	r7, r0
 8006b34:	4611      	mov	r1, r2
 8006b36:	4628      	mov	r0, r5
 8006b38:	4614      	mov	r4, r2
 8006b3a:	f7ff ffdb 	bl	8006af4 <__mcmp>
 8006b3e:	1e06      	subs	r6, r0, #0
 8006b40:	d111      	bne.n	8006b66 <__mdiff+0x3a>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff fd5b 	bl	8006600 <_Balloc>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	b928      	cbnz	r0, 8006b5a <__mdiff+0x2e>
 8006b4e:	f240 2137 	movw	r1, #567	; 0x237
 8006b52:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <__mdiff+0x110>)
 8006b54:	483a      	ldr	r0, [pc, #232]	; (8006c40 <__mdiff+0x114>)
 8006b56:	f000 fb59 	bl	800720c <__assert_func>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b60:	4610      	mov	r0, r2
 8006b62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	bfa4      	itt	ge
 8006b68:	4623      	movge	r3, r4
 8006b6a:	462c      	movge	r4, r5
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	6861      	ldr	r1, [r4, #4]
 8006b70:	bfa6      	itte	ge
 8006b72:	461d      	movge	r5, r3
 8006b74:	2600      	movge	r6, #0
 8006b76:	2601      	movlt	r6, #1
 8006b78:	f7ff fd42 	bl	8006600 <_Balloc>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	b918      	cbnz	r0, 8006b88 <__mdiff+0x5c>
 8006b80:	f240 2145 	movw	r1, #581	; 0x245
 8006b84:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <__mdiff+0x110>)
 8006b86:	e7e5      	b.n	8006b54 <__mdiff+0x28>
 8006b88:	f102 0814 	add.w	r8, r2, #20
 8006b8c:	46c2      	mov	sl, r8
 8006b8e:	f04f 0c00 	mov.w	ip, #0
 8006b92:	6927      	ldr	r7, [r4, #16]
 8006b94:	60c6      	str	r6, [r0, #12]
 8006b96:	692e      	ldr	r6, [r5, #16]
 8006b98:	f104 0014 	add.w	r0, r4, #20
 8006b9c:	f105 0914 	add.w	r9, r5, #20
 8006ba0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006ba4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ba8:	3410      	adds	r4, #16
 8006baa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bae:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bb2:	fa1f f18b 	uxth.w	r1, fp
 8006bb6:	4461      	add	r1, ip
 8006bb8:	fa1f fc83 	uxth.w	ip, r3
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	eba1 010c 	sub.w	r1, r1, ip
 8006bc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bc6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bca:	b289      	uxth	r1, r1
 8006bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006bd0:	454e      	cmp	r6, r9
 8006bd2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bd6:	f84a 1b04 	str.w	r1, [sl], #4
 8006bda:	d8e6      	bhi.n	8006baa <__mdiff+0x7e>
 8006bdc:	1b73      	subs	r3, r6, r5
 8006bde:	3b15      	subs	r3, #21
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	3515      	adds	r5, #21
 8006be6:	3304      	adds	r3, #4
 8006be8:	42ae      	cmp	r6, r5
 8006bea:	bf38      	it	cc
 8006bec:	2304      	movcc	r3, #4
 8006bee:	4418      	add	r0, r3
 8006bf0:	4443      	add	r3, r8
 8006bf2:	461e      	mov	r6, r3
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	4575      	cmp	r5, lr
 8006bf8:	d30e      	bcc.n	8006c18 <__mdiff+0xec>
 8006bfa:	f10e 0103 	add.w	r1, lr, #3
 8006bfe:	1a09      	subs	r1, r1, r0
 8006c00:	f021 0103 	bic.w	r1, r1, #3
 8006c04:	3803      	subs	r0, #3
 8006c06:	4586      	cmp	lr, r0
 8006c08:	bf38      	it	cc
 8006c0a:	2100      	movcc	r1, #0
 8006c0c:	440b      	add	r3, r1
 8006c0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c12:	b189      	cbz	r1, 8006c38 <__mdiff+0x10c>
 8006c14:	6117      	str	r7, [r2, #16]
 8006c16:	e7a3      	b.n	8006b60 <__mdiff+0x34>
 8006c18:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c1c:	fa1f f188 	uxth.w	r1, r8
 8006c20:	4461      	add	r1, ip
 8006c22:	140c      	asrs	r4, r1, #16
 8006c24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c28:	b289      	uxth	r1, r1
 8006c2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c2e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c32:	f846 1b04 	str.w	r1, [r6], #4
 8006c36:	e7de      	b.n	8006bf6 <__mdiff+0xca>
 8006c38:	3f01      	subs	r7, #1
 8006c3a:	e7e8      	b.n	8006c0e <__mdiff+0xe2>
 8006c3c:	08007508 	.word	0x08007508
 8006c40:	08007519 	.word	0x08007519

08006c44 <__d2b>:
 8006c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c46:	2101      	movs	r1, #1
 8006c48:	4617      	mov	r7, r2
 8006c4a:	461c      	mov	r4, r3
 8006c4c:	9e08      	ldr	r6, [sp, #32]
 8006c4e:	f7ff fcd7 	bl	8006600 <_Balloc>
 8006c52:	4605      	mov	r5, r0
 8006c54:	b930      	cbnz	r0, 8006c64 <__d2b+0x20>
 8006c56:	4602      	mov	r2, r0
 8006c58:	f240 310f 	movw	r1, #783	; 0x30f
 8006c5c:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <__d2b+0xa4>)
 8006c5e:	4823      	ldr	r0, [pc, #140]	; (8006cec <__d2b+0xa8>)
 8006c60:	f000 fad4 	bl	800720c <__assert_func>
 8006c64:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006c68:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006c6c:	bb24      	cbnz	r4, 8006cb8 <__d2b+0x74>
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	d026      	beq.n	8006cc2 <__d2b+0x7e>
 8006c74:	4668      	mov	r0, sp
 8006c76:	9700      	str	r7, [sp, #0]
 8006c78:	f7ff fd8a 	bl	8006790 <__lo0bits>
 8006c7c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c80:	b1e8      	cbz	r0, 8006cbe <__d2b+0x7a>
 8006c82:	f1c0 0320 	rsb	r3, r0, #32
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	40c2      	lsrs	r2, r0
 8006c8e:	616b      	str	r3, [r5, #20]
 8006c90:	9201      	str	r2, [sp, #4]
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bf14      	ite	ne
 8006c98:	2102      	movne	r1, #2
 8006c9a:	2101      	moveq	r1, #1
 8006c9c:	61ab      	str	r3, [r5, #24]
 8006c9e:	6129      	str	r1, [r5, #16]
 8006ca0:	b1bc      	cbz	r4, 8006cd2 <__d2b+0x8e>
 8006ca2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ca6:	4404      	add	r4, r0
 8006ca8:	6034      	str	r4, [r6, #0]
 8006caa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	6018      	str	r0, [r3, #0]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	b003      	add	sp, #12
 8006cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cbc:	e7d7      	b.n	8006c6e <__d2b+0x2a>
 8006cbe:	6169      	str	r1, [r5, #20]
 8006cc0:	e7e7      	b.n	8006c92 <__d2b+0x4e>
 8006cc2:	a801      	add	r0, sp, #4
 8006cc4:	f7ff fd64 	bl	8006790 <__lo0bits>
 8006cc8:	9b01      	ldr	r3, [sp, #4]
 8006cca:	2101      	movs	r1, #1
 8006ccc:	616b      	str	r3, [r5, #20]
 8006cce:	3020      	adds	r0, #32
 8006cd0:	e7e5      	b.n	8006c9e <__d2b+0x5a>
 8006cd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cd6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006cda:	6030      	str	r0, [r6, #0]
 8006cdc:	6918      	ldr	r0, [r3, #16]
 8006cde:	f7ff fd37 	bl	8006750 <__hi0bits>
 8006ce2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ce6:	e7e2      	b.n	8006cae <__d2b+0x6a>
 8006ce8:	08007508 	.word	0x08007508
 8006cec:	08007519 	.word	0x08007519

08006cf0 <__sfputc_r>:
 8006cf0:	6893      	ldr	r3, [r2, #8]
 8006cf2:	b410      	push	{r4}
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	6093      	str	r3, [r2, #8]
 8006cfa:	da07      	bge.n	8006d0c <__sfputc_r+0x1c>
 8006cfc:	6994      	ldr	r4, [r2, #24]
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	db01      	blt.n	8006d06 <__sfputc_r+0x16>
 8006d02:	290a      	cmp	r1, #10
 8006d04:	d102      	bne.n	8006d0c <__sfputc_r+0x1c>
 8006d06:	bc10      	pop	{r4}
 8006d08:	f7fe bbed 	b.w	80054e6 <__swbuf_r>
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	1c58      	adds	r0, r3, #1
 8006d10:	6010      	str	r0, [r2, #0]
 8006d12:	7019      	strb	r1, [r3, #0]
 8006d14:	4608      	mov	r0, r1
 8006d16:	bc10      	pop	{r4}
 8006d18:	4770      	bx	lr

08006d1a <__sfputs_r>:
 8006d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	18d5      	adds	r5, r2, r3
 8006d24:	42ac      	cmp	r4, r5
 8006d26:	d101      	bne.n	8006d2c <__sfputs_r+0x12>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e007      	b.n	8006d3c <__sfputs_r+0x22>
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d34:	f7ff ffdc 	bl	8006cf0 <__sfputc_r>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d1f3      	bne.n	8006d24 <__sfputs_r+0xa>
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d40 <_vfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	460d      	mov	r5, r1
 8006d46:	4614      	mov	r4, r2
 8006d48:	4698      	mov	r8, r3
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	b09d      	sub	sp, #116	; 0x74
 8006d4e:	b118      	cbz	r0, 8006d58 <_vfiprintf_r+0x18>
 8006d50:	6a03      	ldr	r3, [r0, #32]
 8006d52:	b90b      	cbnz	r3, 8006d58 <_vfiprintf_r+0x18>
 8006d54:	f7fe fae0 	bl	8005318 <__sinit>
 8006d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	d405      	bmi.n	8006d6a <_vfiprintf_r+0x2a>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d402      	bmi.n	8006d6a <_vfiprintf_r+0x2a>
 8006d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d66:	f7fe fcd0 	bl	800570a <__retarget_lock_acquire_recursive>
 8006d6a:	89ab      	ldrh	r3, [r5, #12]
 8006d6c:	071b      	lsls	r3, r3, #28
 8006d6e:	d501      	bpl.n	8006d74 <_vfiprintf_r+0x34>
 8006d70:	692b      	ldr	r3, [r5, #16]
 8006d72:	b99b      	cbnz	r3, 8006d9c <_vfiprintf_r+0x5c>
 8006d74:	4629      	mov	r1, r5
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7fe fbf2 	bl	8005560 <__swsetup_r>
 8006d7c:	b170      	cbz	r0, 8006d9c <_vfiprintf_r+0x5c>
 8006d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d80:	07dc      	lsls	r4, r3, #31
 8006d82:	d504      	bpl.n	8006d8e <_vfiprintf_r+0x4e>
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	b01d      	add	sp, #116	; 0x74
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	0598      	lsls	r0, r3, #22
 8006d92:	d4f7      	bmi.n	8006d84 <_vfiprintf_r+0x44>
 8006d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d96:	f7fe fcb9 	bl	800570c <__retarget_lock_release_recursive>
 8006d9a:	e7f3      	b.n	8006d84 <_vfiprintf_r+0x44>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	2320      	movs	r3, #32
 8006da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006da6:	2330      	movs	r3, #48	; 0x30
 8006da8:	f04f 0901 	mov.w	r9, #1
 8006dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f60 <_vfiprintf_r+0x220>
 8006db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006db8:	4623      	mov	r3, r4
 8006dba:	469a      	mov	sl, r3
 8006dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc0:	b10a      	cbz	r2, 8006dc6 <_vfiprintf_r+0x86>
 8006dc2:	2a25      	cmp	r2, #37	; 0x25
 8006dc4:	d1f9      	bne.n	8006dba <_vfiprintf_r+0x7a>
 8006dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8006dca:	d00b      	beq.n	8006de4 <_vfiprintf_r+0xa4>
 8006dcc:	465b      	mov	r3, fp
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffa1 	bl	8006d1a <__sfputs_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f000 80a9 	beq.w	8006f30 <_vfiprintf_r+0x1f0>
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	445a      	add	r2, fp
 8006de2:	9209      	str	r2, [sp, #36]	; 0x24
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a1 	beq.w	8006f30 <_vfiprintf_r+0x1f0>
 8006dee:	2300      	movs	r3, #0
 8006df0:	f04f 32ff 	mov.w	r2, #4294967295
 8006df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df8:	f10a 0a01 	add.w	sl, sl, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	9307      	str	r3, [sp, #28]
 8006e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e04:	931a      	str	r3, [sp, #104]	; 0x68
 8006e06:	4654      	mov	r4, sl
 8006e08:	2205      	movs	r2, #5
 8006e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0e:	4854      	ldr	r0, [pc, #336]	; (8006f60 <_vfiprintf_r+0x220>)
 8006e10:	f7fe fc7d 	bl	800570e <memchr>
 8006e14:	9a04      	ldr	r2, [sp, #16]
 8006e16:	b9d8      	cbnz	r0, 8006e50 <_vfiprintf_r+0x110>
 8006e18:	06d1      	lsls	r1, r2, #27
 8006e1a:	bf44      	itt	mi
 8006e1c:	2320      	movmi	r3, #32
 8006e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e22:	0713      	lsls	r3, r2, #28
 8006e24:	bf44      	itt	mi
 8006e26:	232b      	movmi	r3, #43	; 0x2b
 8006e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d015      	beq.n	8006e60 <_vfiprintf_r+0x120>
 8006e34:	4654      	mov	r4, sl
 8006e36:	2000      	movs	r0, #0
 8006e38:	f04f 0c0a 	mov.w	ip, #10
 8006e3c:	9a07      	ldr	r2, [sp, #28]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e44:	3b30      	subs	r3, #48	; 0x30
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d94d      	bls.n	8006ee6 <_vfiprintf_r+0x1a6>
 8006e4a:	b1b0      	cbz	r0, 8006e7a <_vfiprintf_r+0x13a>
 8006e4c:	9207      	str	r2, [sp, #28]
 8006e4e:	e014      	b.n	8006e7a <_vfiprintf_r+0x13a>
 8006e50:	eba0 0308 	sub.w	r3, r0, r8
 8006e54:	fa09 f303 	lsl.w	r3, r9, r3
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	46a2      	mov	sl, r4
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	e7d2      	b.n	8006e06 <_vfiprintf_r+0xc6>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	1d19      	adds	r1, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9103      	str	r1, [sp, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbb      	ittet	lt
 8006e6c:	425b      	neglt	r3, r3
 8006e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e72:	9307      	strge	r3, [sp, #28]
 8006e74:	9307      	strlt	r3, [sp, #28]
 8006e76:	bfb8      	it	lt
 8006e78:	9204      	strlt	r2, [sp, #16]
 8006e7a:	7823      	ldrb	r3, [r4, #0]
 8006e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7e:	d10c      	bne.n	8006e9a <_vfiprintf_r+0x15a>
 8006e80:	7863      	ldrb	r3, [r4, #1]
 8006e82:	2b2a      	cmp	r3, #42	; 0x2a
 8006e84:	d134      	bne.n	8006ef0 <_vfiprintf_r+0x1b0>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3402      	adds	r4, #2
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9203      	str	r2, [sp, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bfb8      	it	lt
 8006e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e98:	9305      	str	r3, [sp, #20]
 8006e9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f64 <_vfiprintf_r+0x224>
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	7821      	ldrb	r1, [r4, #0]
 8006ea4:	f7fe fc33 	bl	800570e <memchr>
 8006ea8:	b138      	cbz	r0, 8006eba <_vfiprintf_r+0x17a>
 8006eaa:	2240      	movs	r2, #64	; 0x40
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	eba0 000a 	sub.w	r0, r0, sl
 8006eb2:	4082      	lsls	r2, r0
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebe:	2206      	movs	r2, #6
 8006ec0:	4829      	ldr	r0, [pc, #164]	; (8006f68 <_vfiprintf_r+0x228>)
 8006ec2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ec6:	f7fe fc22 	bl	800570e <memchr>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d03f      	beq.n	8006f4e <_vfiprintf_r+0x20e>
 8006ece:	4b27      	ldr	r3, [pc, #156]	; (8006f6c <_vfiprintf_r+0x22c>)
 8006ed0:	bb1b      	cbnz	r3, 8006f1a <_vfiprintf_r+0x1da>
 8006ed2:	9b03      	ldr	r3, [sp, #12]
 8006ed4:	3307      	adds	r3, #7
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	3308      	adds	r3, #8
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee0:	443b      	add	r3, r7
 8006ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee4:	e768      	b.n	8006db8 <_vfiprintf_r+0x78>
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2001      	movs	r0, #1
 8006eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eee:	e7a6      	b.n	8006e3e <_vfiprintf_r+0xfe>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f04f 0c0a 	mov.w	ip, #10
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	3401      	adds	r4, #1
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	4620      	mov	r0, r4
 8006efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f02:	3a30      	subs	r2, #48	; 0x30
 8006f04:	2a09      	cmp	r2, #9
 8006f06:	d903      	bls.n	8006f10 <_vfiprintf_r+0x1d0>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0c6      	beq.n	8006e9a <_vfiprintf_r+0x15a>
 8006f0c:	9105      	str	r1, [sp, #20]
 8006f0e:	e7c4      	b.n	8006e9a <_vfiprintf_r+0x15a>
 8006f10:	4604      	mov	r4, r0
 8006f12:	2301      	movs	r3, #1
 8006f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f18:	e7f0      	b.n	8006efc <_vfiprintf_r+0x1bc>
 8006f1a:	ab03      	add	r3, sp, #12
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <_vfiprintf_r+0x230>)
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	f7fd fda9 	bl	8004a7c <_printf_float>
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	1c78      	adds	r0, r7, #1
 8006f2e:	d1d6      	bne.n	8006ede <_vfiprintf_r+0x19e>
 8006f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f32:	07d9      	lsls	r1, r3, #31
 8006f34:	d405      	bmi.n	8006f42 <_vfiprintf_r+0x202>
 8006f36:	89ab      	ldrh	r3, [r5, #12]
 8006f38:	059a      	lsls	r2, r3, #22
 8006f3a:	d402      	bmi.n	8006f42 <_vfiprintf_r+0x202>
 8006f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f3e:	f7fe fbe5 	bl	800570c <__retarget_lock_release_recursive>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	065b      	lsls	r3, r3, #25
 8006f46:	f53f af1d 	bmi.w	8006d84 <_vfiprintf_r+0x44>
 8006f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f4c:	e71c      	b.n	8006d88 <_vfiprintf_r+0x48>
 8006f4e:	ab03      	add	r3, sp, #12
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	462a      	mov	r2, r5
 8006f54:	4630      	mov	r0, r6
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <_vfiprintf_r+0x230>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	f7fe f82f 	bl	8004fbc <_printf_i>
 8006f5e:	e7e4      	b.n	8006f2a <_vfiprintf_r+0x1ea>
 8006f60:	08007674 	.word	0x08007674
 8006f64:	0800767a 	.word	0x0800767a
 8006f68:	0800767e 	.word	0x0800767e
 8006f6c:	08004a7d 	.word	0x08004a7d
 8006f70:	08006d1b 	.word	0x08006d1b

08006f74 <__sflush_r>:
 8006f74:	898a      	ldrh	r2, [r1, #12]
 8006f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f78:	4605      	mov	r5, r0
 8006f7a:	0710      	lsls	r0, r2, #28
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d457      	bmi.n	8007030 <__sflush_r+0xbc>
 8006f80:	684b      	ldr	r3, [r1, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dc04      	bgt.n	8006f90 <__sflush_r+0x1c>
 8006f86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dc01      	bgt.n	8006f90 <__sflush_r+0x1c>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	d0fa      	beq.n	8006f8c <__sflush_r+0x18>
 8006f96:	2300      	movs	r3, #0
 8006f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f9c:	682f      	ldr	r7, [r5, #0]
 8006f9e:	6a21      	ldr	r1, [r4, #32]
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	d032      	beq.n	800700a <__sflush_r+0x96>
 8006fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	075a      	lsls	r2, r3, #29
 8006faa:	d505      	bpl.n	8006fb8 <__sflush_r+0x44>
 8006fac:	6863      	ldr	r3, [r4, #4]
 8006fae:	1ac0      	subs	r0, r0, r3
 8006fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fb2:	b10b      	cbz	r3, 8006fb8 <__sflush_r+0x44>
 8006fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fb6:	1ac0      	subs	r0, r0, r3
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	6a21      	ldr	r1, [r4, #32]
 8006fc2:	47b0      	blx	r6
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	d106      	bne.n	8006fd8 <__sflush_r+0x64>
 8006fca:	6829      	ldr	r1, [r5, #0]
 8006fcc:	291d      	cmp	r1, #29
 8006fce:	d82b      	bhi.n	8007028 <__sflush_r+0xb4>
 8006fd0:	4a28      	ldr	r2, [pc, #160]	; (8007074 <__sflush_r+0x100>)
 8006fd2:	410a      	asrs	r2, r1
 8006fd4:	07d6      	lsls	r6, r2, #31
 8006fd6:	d427      	bmi.n	8007028 <__sflush_r+0xb4>
 8006fd8:	2200      	movs	r2, #0
 8006fda:	6062      	str	r2, [r4, #4]
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	04d9      	lsls	r1, r3, #19
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	d504      	bpl.n	8006fee <__sflush_r+0x7a>
 8006fe4:	1c42      	adds	r2, r0, #1
 8006fe6:	d101      	bne.n	8006fec <__sflush_r+0x78>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b903      	cbnz	r3, 8006fee <__sflush_r+0x7a>
 8006fec:	6560      	str	r0, [r4, #84]	; 0x54
 8006fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff0:	602f      	str	r7, [r5, #0]
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d0ca      	beq.n	8006f8c <__sflush_r+0x18>
 8006ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	d002      	beq.n	8007004 <__sflush_r+0x90>
 8006ffe:	4628      	mov	r0, r5
 8007000:	f7ff fa02 	bl	8006408 <_free_r>
 8007004:	2000      	movs	r0, #0
 8007006:	6360      	str	r0, [r4, #52]	; 0x34
 8007008:	e7c1      	b.n	8006f8e <__sflush_r+0x1a>
 800700a:	2301      	movs	r3, #1
 800700c:	4628      	mov	r0, r5
 800700e:	47b0      	blx	r6
 8007010:	1c41      	adds	r1, r0, #1
 8007012:	d1c8      	bne.n	8006fa6 <__sflush_r+0x32>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0c5      	beq.n	8006fa6 <__sflush_r+0x32>
 800701a:	2b1d      	cmp	r3, #29
 800701c:	d001      	beq.n	8007022 <__sflush_r+0xae>
 800701e:	2b16      	cmp	r3, #22
 8007020:	d101      	bne.n	8007026 <__sflush_r+0xb2>
 8007022:	602f      	str	r7, [r5, #0]
 8007024:	e7b2      	b.n	8006f8c <__sflush_r+0x18>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	e7ae      	b.n	8006f8e <__sflush_r+0x1a>
 8007030:	690f      	ldr	r7, [r1, #16]
 8007032:	2f00      	cmp	r7, #0
 8007034:	d0aa      	beq.n	8006f8c <__sflush_r+0x18>
 8007036:	0793      	lsls	r3, r2, #30
 8007038:	bf18      	it	ne
 800703a:	2300      	movne	r3, #0
 800703c:	680e      	ldr	r6, [r1, #0]
 800703e:	bf08      	it	eq
 8007040:	694b      	ldreq	r3, [r1, #20]
 8007042:	1bf6      	subs	r6, r6, r7
 8007044:	600f      	str	r7, [r1, #0]
 8007046:	608b      	str	r3, [r1, #8]
 8007048:	2e00      	cmp	r6, #0
 800704a:	dd9f      	ble.n	8006f8c <__sflush_r+0x18>
 800704c:	4633      	mov	r3, r6
 800704e:	463a      	mov	r2, r7
 8007050:	4628      	mov	r0, r5
 8007052:	6a21      	ldr	r1, [r4, #32]
 8007054:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007058:	47e0      	blx	ip
 800705a:	2800      	cmp	r0, #0
 800705c:	dc06      	bgt.n	800706c <__sflush_r+0xf8>
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	e790      	b.n	8006f8e <__sflush_r+0x1a>
 800706c:	4407      	add	r7, r0
 800706e:	1a36      	subs	r6, r6, r0
 8007070:	e7ea      	b.n	8007048 <__sflush_r+0xd4>
 8007072:	bf00      	nop
 8007074:	dfbffffe 	.word	0xdfbffffe

08007078 <_fflush_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	690b      	ldr	r3, [r1, #16]
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b913      	cbnz	r3, 8007088 <_fflush_r+0x10>
 8007082:	2500      	movs	r5, #0
 8007084:	4628      	mov	r0, r5
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	b118      	cbz	r0, 8007092 <_fflush_r+0x1a>
 800708a:	6a03      	ldr	r3, [r0, #32]
 800708c:	b90b      	cbnz	r3, 8007092 <_fflush_r+0x1a>
 800708e:	f7fe f943 	bl	8005318 <__sinit>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f3      	beq.n	8007082 <_fflush_r+0xa>
 800709a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d404      	bmi.n	80070aa <_fflush_r+0x32>
 80070a0:	0599      	lsls	r1, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_fflush_r+0x32>
 80070a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070a6:	f7fe fb30 	bl	800570a <__retarget_lock_acquire_recursive>
 80070aa:	4628      	mov	r0, r5
 80070ac:	4621      	mov	r1, r4
 80070ae:	f7ff ff61 	bl	8006f74 <__sflush_r>
 80070b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070b4:	4605      	mov	r5, r0
 80070b6:	07da      	lsls	r2, r3, #31
 80070b8:	d4e4      	bmi.n	8007084 <_fflush_r+0xc>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	059b      	lsls	r3, r3, #22
 80070be:	d4e1      	bmi.n	8007084 <_fflush_r+0xc>
 80070c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c2:	f7fe fb23 	bl	800570c <__retarget_lock_release_recursive>
 80070c6:	e7dd      	b.n	8007084 <_fflush_r+0xc>

080070c8 <__swhatbuf_r>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	4615      	mov	r5, r2
 80070d2:	2900      	cmp	r1, #0
 80070d4:	461e      	mov	r6, r3
 80070d6:	b096      	sub	sp, #88	; 0x58
 80070d8:	da0c      	bge.n	80070f4 <__swhatbuf_r+0x2c>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	2100      	movs	r1, #0
 80070de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070e2:	bf0c      	ite	eq
 80070e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80070e8:	2340      	movne	r3, #64	; 0x40
 80070ea:	2000      	movs	r0, #0
 80070ec:	6031      	str	r1, [r6, #0]
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	b016      	add	sp, #88	; 0x58
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	466a      	mov	r2, sp
 80070f6:	f000 f849 	bl	800718c <_fstat_r>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dbed      	blt.n	80070da <__swhatbuf_r+0x12>
 80070fe:	9901      	ldr	r1, [sp, #4]
 8007100:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007104:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007108:	4259      	negs	r1, r3
 800710a:	4159      	adcs	r1, r3
 800710c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007110:	e7eb      	b.n	80070ea <__swhatbuf_r+0x22>

08007112 <__smakebuf_r>:
 8007112:	898b      	ldrh	r3, [r1, #12]
 8007114:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007116:	079d      	lsls	r5, r3, #30
 8007118:	4606      	mov	r6, r0
 800711a:	460c      	mov	r4, r1
 800711c:	d507      	bpl.n	800712e <__smakebuf_r+0x1c>
 800711e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	2301      	movs	r3, #1
 8007128:	6163      	str	r3, [r4, #20]
 800712a:	b002      	add	sp, #8
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	466a      	mov	r2, sp
 8007130:	ab01      	add	r3, sp, #4
 8007132:	f7ff ffc9 	bl	80070c8 <__swhatbuf_r>
 8007136:	9900      	ldr	r1, [sp, #0]
 8007138:	4605      	mov	r5, r0
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff f9d4 	bl	80064e8 <_malloc_r>
 8007140:	b948      	cbnz	r0, 8007156 <__smakebuf_r+0x44>
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	059a      	lsls	r2, r3, #22
 8007148:	d4ef      	bmi.n	800712a <__smakebuf_r+0x18>
 800714a:	f023 0303 	bic.w	r3, r3, #3
 800714e:	f043 0302 	orr.w	r3, r3, #2
 8007152:	81a3      	strh	r3, [r4, #12]
 8007154:	e7e3      	b.n	800711e <__smakebuf_r+0xc>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	6020      	str	r0, [r4, #0]
 800715a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	6120      	str	r0, [r4, #16]
 8007164:	6163      	str	r3, [r4, #20]
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	b15b      	cbz	r3, 8007182 <__smakebuf_r+0x70>
 800716a:	4630      	mov	r0, r6
 800716c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007170:	f000 f81e 	bl	80071b0 <_isatty_r>
 8007174:	b128      	cbz	r0, 8007182 <__smakebuf_r+0x70>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	431d      	orrs	r5, r3
 8007186:	81a5      	strh	r5, [r4, #12]
 8007188:	e7cf      	b.n	800712a <__smakebuf_r+0x18>
	...

0800718c <_fstat_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	2300      	movs	r3, #0
 8007190:	4d06      	ldr	r5, [pc, #24]	; (80071ac <_fstat_r+0x20>)
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	4611      	mov	r1, r2
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	f7fa fbf0 	bl	800197e <_fstat>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d102      	bne.n	80071a8 <_fstat_r+0x1c>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b103      	cbz	r3, 80071a8 <_fstat_r+0x1c>
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	bd38      	pop	{r3, r4, r5, pc}
 80071aa:	bf00      	nop
 80071ac:	20000544 	.word	0x20000544

080071b0 <_isatty_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	2300      	movs	r3, #0
 80071b4:	4d05      	ldr	r5, [pc, #20]	; (80071cc <_isatty_r+0x1c>)
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fa fbee 	bl	800199c <_isatty>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_isatty_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_isatty_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000544 	.word	0x20000544

080071d0 <_sbrk_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	2300      	movs	r3, #0
 80071d4:	4d05      	ldr	r5, [pc, #20]	; (80071ec <_sbrk_r+0x1c>)
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	f7fa fbf4 	bl	80019c8 <_sbrk>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_sbrk_r+0x1a>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_sbrk_r+0x1a>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20000544 	.word	0x20000544

080071f0 <memcpy>:
 80071f0:	440a      	add	r2, r1
 80071f2:	4291      	cmp	r1, r2
 80071f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071f8:	d100      	bne.n	80071fc <memcpy+0xc>
 80071fa:	4770      	bx	lr
 80071fc:	b510      	push	{r4, lr}
 80071fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007202:	4291      	cmp	r1, r2
 8007204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007208:	d1f9      	bne.n	80071fe <memcpy+0xe>
 800720a:	bd10      	pop	{r4, pc}

0800720c <__assert_func>:
 800720c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800720e:	4614      	mov	r4, r2
 8007210:	461a      	mov	r2, r3
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <__assert_func+0x2c>)
 8007214:	4605      	mov	r5, r0
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68d8      	ldr	r0, [r3, #12]
 800721a:	b14c      	cbz	r4, 8007230 <__assert_func+0x24>
 800721c:	4b07      	ldr	r3, [pc, #28]	; (800723c <__assert_func+0x30>)
 800721e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007222:	9100      	str	r1, [sp, #0]
 8007224:	462b      	mov	r3, r5
 8007226:	4906      	ldr	r1, [pc, #24]	; (8007240 <__assert_func+0x34>)
 8007228:	f000 f842 	bl	80072b0 <fiprintf>
 800722c:	f000 f852 	bl	80072d4 <abort>
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <__assert_func+0x38>)
 8007232:	461c      	mov	r4, r3
 8007234:	e7f3      	b.n	800721e <__assert_func+0x12>
 8007236:	bf00      	nop
 8007238:	20000064 	.word	0x20000064
 800723c:	0800768f 	.word	0x0800768f
 8007240:	0800769c 	.word	0x0800769c
 8007244:	080076ca 	.word	0x080076ca

08007248 <_calloc_r>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	fba1 5402 	umull	r5, r4, r1, r2
 800724e:	b934      	cbnz	r4, 800725e <_calloc_r+0x16>
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff f949 	bl	80064e8 <_malloc_r>
 8007256:	4606      	mov	r6, r0
 8007258:	b928      	cbnz	r0, 8007266 <_calloc_r+0x1e>
 800725a:	4630      	mov	r0, r6
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	220c      	movs	r2, #12
 8007260:	2600      	movs	r6, #0
 8007262:	6002      	str	r2, [r0, #0]
 8007264:	e7f9      	b.n	800725a <_calloc_r+0x12>
 8007266:	462a      	mov	r2, r5
 8007268:	4621      	mov	r1, r4
 800726a:	f7fe f9d1 	bl	8005610 <memset>
 800726e:	e7f4      	b.n	800725a <_calloc_r+0x12>

08007270 <__ascii_mbtowc>:
 8007270:	b082      	sub	sp, #8
 8007272:	b901      	cbnz	r1, 8007276 <__ascii_mbtowc+0x6>
 8007274:	a901      	add	r1, sp, #4
 8007276:	b142      	cbz	r2, 800728a <__ascii_mbtowc+0x1a>
 8007278:	b14b      	cbz	r3, 800728e <__ascii_mbtowc+0x1e>
 800727a:	7813      	ldrb	r3, [r2, #0]
 800727c:	600b      	str	r3, [r1, #0]
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	1e10      	subs	r0, r2, #0
 8007282:	bf18      	it	ne
 8007284:	2001      	movne	r0, #1
 8007286:	b002      	add	sp, #8
 8007288:	4770      	bx	lr
 800728a:	4610      	mov	r0, r2
 800728c:	e7fb      	b.n	8007286 <__ascii_mbtowc+0x16>
 800728e:	f06f 0001 	mvn.w	r0, #1
 8007292:	e7f8      	b.n	8007286 <__ascii_mbtowc+0x16>

08007294 <__ascii_wctomb>:
 8007294:	4603      	mov	r3, r0
 8007296:	4608      	mov	r0, r1
 8007298:	b141      	cbz	r1, 80072ac <__ascii_wctomb+0x18>
 800729a:	2aff      	cmp	r2, #255	; 0xff
 800729c:	d904      	bls.n	80072a8 <__ascii_wctomb+0x14>
 800729e:	228a      	movs	r2, #138	; 0x8a
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	4770      	bx	lr
 80072a8:	2001      	movs	r0, #1
 80072aa:	700a      	strb	r2, [r1, #0]
 80072ac:	4770      	bx	lr
	...

080072b0 <fiprintf>:
 80072b0:	b40e      	push	{r1, r2, r3}
 80072b2:	b503      	push	{r0, r1, lr}
 80072b4:	4601      	mov	r1, r0
 80072b6:	ab03      	add	r3, sp, #12
 80072b8:	4805      	ldr	r0, [pc, #20]	; (80072d0 <fiprintf+0x20>)
 80072ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	f7ff fd3d 	bl	8006d40 <_vfiprintf_r>
 80072c6:	b002      	add	sp, #8
 80072c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072cc:	b003      	add	sp, #12
 80072ce:	4770      	bx	lr
 80072d0:	20000064 	.word	0x20000064

080072d4 <abort>:
 80072d4:	2006      	movs	r0, #6
 80072d6:	b508      	push	{r3, lr}
 80072d8:	f000 f82c 	bl	8007334 <raise>
 80072dc:	2001      	movs	r0, #1
 80072de:	f7fa fb00 	bl	80018e2 <_exit>

080072e2 <_raise_r>:
 80072e2:	291f      	cmp	r1, #31
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	d904      	bls.n	80072f6 <_raise_r+0x14>
 80072ec:	2316      	movs	r3, #22
 80072ee:	6003      	str	r3, [r0, #0]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	bd38      	pop	{r3, r4, r5, pc}
 80072f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80072f8:	b112      	cbz	r2, 8007300 <_raise_r+0x1e>
 80072fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072fe:	b94b      	cbnz	r3, 8007314 <_raise_r+0x32>
 8007300:	4620      	mov	r0, r4
 8007302:	f000 f831 	bl	8007368 <_getpid_r>
 8007306:	462a      	mov	r2, r5
 8007308:	4601      	mov	r1, r0
 800730a:	4620      	mov	r0, r4
 800730c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007310:	f000 b818 	b.w	8007344 <_kill_r>
 8007314:	2b01      	cmp	r3, #1
 8007316:	d00a      	beq.n	800732e <_raise_r+0x4c>
 8007318:	1c59      	adds	r1, r3, #1
 800731a:	d103      	bne.n	8007324 <_raise_r+0x42>
 800731c:	2316      	movs	r3, #22
 800731e:	6003      	str	r3, [r0, #0]
 8007320:	2001      	movs	r0, #1
 8007322:	e7e7      	b.n	80072f4 <_raise_r+0x12>
 8007324:	2400      	movs	r4, #0
 8007326:	4628      	mov	r0, r5
 8007328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800732c:	4798      	blx	r3
 800732e:	2000      	movs	r0, #0
 8007330:	e7e0      	b.n	80072f4 <_raise_r+0x12>
	...

08007334 <raise>:
 8007334:	4b02      	ldr	r3, [pc, #8]	; (8007340 <raise+0xc>)
 8007336:	4601      	mov	r1, r0
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	f7ff bfd2 	b.w	80072e2 <_raise_r>
 800733e:	bf00      	nop
 8007340:	20000064 	.word	0x20000064

08007344 <_kill_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	2300      	movs	r3, #0
 8007348:	4d06      	ldr	r5, [pc, #24]	; (8007364 <_kill_r+0x20>)
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	f7fa fab6 	bl	80018c2 <_kill>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d102      	bne.n	8007360 <_kill_r+0x1c>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	b103      	cbz	r3, 8007360 <_kill_r+0x1c>
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	bf00      	nop
 8007364:	20000544 	.word	0x20000544

08007368 <_getpid_r>:
 8007368:	f7fa baa4 	b.w	80018b4 <_getpid>

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
