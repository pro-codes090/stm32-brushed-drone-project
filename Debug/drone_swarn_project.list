
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08008b48  08008b48  00018b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d4  080091d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080091d4  080091d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d4  080091d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080091dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001dc  080093b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080093b8  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dd8  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225c  00000000  00000000  00031fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196d0  00000000  00000000  000363f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135d4  00000000  00000000  0004fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f03  00000000  00000000  00063094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3f97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  000f3fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b2c 	.word	0x08008b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008b2c 	.word	0x08008b2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void __io_putchar(int ch) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	2201      	movs	r2, #1
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <__io_putchar+0x20>)
 800110e:	f003 fc32 	bl	8004976 <HAL_UART_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000037c 	.word	0x2000037c

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fd78 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f822 	bl	8001170 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Init();
 800112c:	f000 fd74 	bl	8001c18 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 fa5a 	bl	80015e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001134:	f000 f85e 	bl	80011f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001138:	f000 fa2c 	bl	8001594 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800113c:	f000 f8c0 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001140:	f000 f9c0 	bl	80014c4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001144:	f000 f968 	bl	8001418 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001148:	f000 f884 	bl	8001254 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 800114c:	f000 fd64 	bl	8001c18 <HAL_Init>

//  fc_powerup();
   Self_test_mpu6050(&hi2c1) ;
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <main+0x48>)
 8001152:	f003 fd91 	bl	8004c78 <Self_test_mpu6050>
   Mpu6050_Init(&hi2c1) ;			//initalise gyroscope
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <main+0x48>)
 8001158:	f004 f80e 	bl	8005178 <Mpu6050_Init>
   gyro_calibrate(&hi2c1,  &Gyro_Calib);
 800115c:	4903      	ldr	r1, [pc, #12]	; (800116c <main+0x4c>)
 800115e:	4802      	ldr	r0, [pc, #8]	; (8001168 <main+0x48>)
 8001160:	f004 f95e 	bl	8005420 <gyro_calibrate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x44>
 8001166:	bf00      	nop
 8001168:	200001f8 	.word	0x200001f8
 800116c:	200003c4 	.word	0x200003c4

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	; 0x40
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2228      	movs	r2, #40	; 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fab8 	bl	80056f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119a:	2310      	movs	r3, #16
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f8a3 	bl	80032fc <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011bc:	f000 fa5d 	bl	800167a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011cc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011d2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2102      	movs	r1, #2
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fb0f 	bl	8003800 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80011e8:	f000 fa47 	bl	800167a <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3740      	adds	r7, #64	; 0x40
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <MX_I2C1_Init+0x58>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x54>)
 8001200:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x5c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_I2C1_Init+0x54>)
 8001206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x54>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_I2C1_Init+0x54>)
 8001214:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001218:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_I2C1_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x54>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_I2C1_Init+0x54>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x54>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_I2C1_Init+0x54>)
 8001234:	f001 f808 	bl	8002248 <HAL_I2C_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800123e:	f000 fa1c 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200001f8 	.word	0x200001f8
 800124c:	40005400 	.word	0x40005400
 8001250:	00061a80 	.word	0x00061a80

08001254 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI1_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_SPI1_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001280:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001284:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001288:	2208      	movs	r2, #8
 800128a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI1_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI1_Init+0x64>)
 80012a6:	f002 fc39 	bl	8003b1c <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 f9e3 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000024c 	.word	0x2000024c
 80012bc:	40013000 	.word	0x40013000

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b092      	sub	sp, #72	; 0x48
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2220      	movs	r2, #32
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fa02 	bl	80056f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f0:	4b47      	ldr	r3, [pc, #284]	; (8001410 <MX_TIM1_Init+0x150>)
 80012f2:	4a48      	ldr	r2, [pc, #288]	; (8001414 <MX_TIM1_Init+0x154>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <MX_TIM1_Init+0x150>)
 80012f8:	2264      	movs	r2, #100	; 0x64
 80012fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <MX_TIM1_Init+0x150>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <MX_TIM1_Init+0x150>)
 8001304:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001308:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <MX_TIM1_Init+0x150>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_TIM1_Init+0x150>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <MX_TIM1_Init+0x150>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800131c:	483c      	ldr	r0, [pc, #240]	; (8001410 <MX_TIM1_Init+0x150>)
 800131e:	f002 fcd0 	bl	8003cc2 <HAL_TIM_PWM_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001328:	f000 f9a7 	bl	800167a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001338:	4619      	mov	r1, r3
 800133a:	4835      	ldr	r0, [pc, #212]	; (8001410 <MX_TIM1_Init+0x150>)
 800133c:	f003 fa0a 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001346:	f000 f998 	bl	800167a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	4619      	mov	r1, r3
 800136e:	4828      	ldr	r0, [pc, #160]	; (8001410 <MX_TIM1_Init+0x150>)
 8001370:	f002 fefc 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800137a:	f000 f97e 	bl	800167a <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 800137e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	2204      	movs	r2, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4820      	ldr	r0, [pc, #128]	; (8001410 <MX_TIM1_Init+0x150>)
 800138e:	f002 feed 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001398:	f000 f96f 	bl	800167a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	2208      	movs	r2, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <MX_TIM1_Init+0x150>)
 80013aa:	f002 fedf 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013b4:	f000 f961 	bl	800167a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	220c      	movs	r2, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <MX_TIM1_Init+0x150>)
 80013c2:	f002 fed3 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013cc:	f000 f955 	bl	800167a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM1_Init+0x150>)
 80013f4:	f003 fa0c 	bl	8004810 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013fe:	f000 f93c 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM1_Init+0x150>)
 8001404:	f000 fa4a 	bl	800189c <HAL_TIM_MspPostInit>

}
 8001408:	bf00      	nop
 800140a:	3748      	adds	r7, #72	; 0x48
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002a4 	.word	0x200002a4
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_TIM2_Init+0xa8>)
 800143c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001440:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_TIM2_Init+0xa8>)
 8001444:	2264      	movs	r2, #100	; 0x64
 8001446:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM2_Init+0xa8>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_TIM2_Init+0xa8>)
 8001450:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001454:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM2_Init+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_TIM2_Init+0xa8>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <MX_TIM2_Init+0xa8>)
 8001464:	f002 fbde 	bl	8003c24 <HAL_TIM_OC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800146e:	f000 f904 	bl	800167a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4619      	mov	r1, r3
 8001480:	480f      	ldr	r0, [pc, #60]	; (80014c0 <MX_TIM2_Init+0xa8>)
 8001482:	f003 f967 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800148c:	f000 f8f5 	bl	800167a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_TIM2_Init+0xa8>)
 80014a8:	f002 fe04 	bl	80040b4 <HAL_TIM_OC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80014b2:	f000 f8e2 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200002ec 	.word	0x200002ec

080014c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_TIM3_Init+0xc8>)
 80014e8:	4a29      	ldr	r2, [pc, #164]	; (8001590 <MX_TIM3_Init+0xcc>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <MX_TIM3_Init+0xc8>)
 80014ee:	2264      	movs	r2, #100	; 0x64
 80014f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_TIM3_Init+0xc8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_TIM3_Init+0xc8>)
 80014fa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80014fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <MX_TIM3_Init+0xc8>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_TIM3_Init+0xc8>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150c:	481f      	ldr	r0, [pc, #124]	; (800158c <MX_TIM3_Init+0xc8>)
 800150e:	f002 fbd8 	bl	8003cc2 <HAL_TIM_PWM_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001518:	f000 f8af 	bl	800167a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001524:	f107 0320 	add.w	r3, r7, #32
 8001528:	4619      	mov	r1, r3
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM3_Init+0xc8>)
 800152c:	f003 f912 	bl	8004754 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001536:	f000 f8a0 	bl	800167a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153a:	2360      	movs	r3, #96	; 0x60
 800153c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 800153e:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2208      	movs	r2, #8
 8001550:	4619      	mov	r1, r3
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <MX_TIM3_Init+0xc8>)
 8001554:	f002 fe0a 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800155e:	f000 f88c 	bl	800167a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	220c      	movs	r2, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM3_Init+0xc8>)
 800156e:	f002 fdfd 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001578:	f000 f87f 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM3_Init+0xc8>)
 800157e:	f000 f98d 	bl	800189c <HAL_TIM_MspPostInit>

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	; 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000334 	.word	0x20000334
 8001590:	40000400 	.word	0x40000400

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART2_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015cc:	f003 f983 	bl	80048d6 <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f850 	bl	800167a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000037c 	.word	0x2000037c
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_GPIO_Init+0x78>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a17      	ldr	r2, [pc, #92]	; (8001660 <MX_GPIO_Init+0x78>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_GPIO_Init+0x78>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_GPIO_Init+0x78>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <MX_GPIO_Init+0x78>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_GPIO_Init+0x78>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4619      	mov	r1, r3
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_GPIO_Init+0x7c>)
 8001642:	f000 fc7d 	bl	8001f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0x7c>)
 8001652:	f000 fc75 	bl	8001f40 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010c00 	.word	0x40010c00

08001668 <HAL_TIM_PeriodElapsedCallback>:
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , RESET) ;
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 , RESET) ;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]


}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167e:	b672      	cpsid	i
}
 8001680:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001682:	e7fe      	b.n	8001682 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_MspInit+0x40>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_MspInit+0x40>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_MspInit+0x40>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_MspInit+0x40>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_MspInit+0x40>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_MspInit+0x40>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <HAL_I2C_MspInit+0x70>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d123      	bne.n	8001730 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_I2C_MspInit+0x74>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_I2C_MspInit+0x74>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_I2C_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001700:	23c0      	movs	r3, #192	; 0xc0
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	2312      	movs	r3, #18
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <HAL_I2C_MspInit+0x78>)
 8001714:	f000 fc14 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_I2C_MspInit+0x74>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_I2C_MspInit+0x74>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001722:	61d3      	str	r3, [r2, #28]
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_I2C_MspInit+0x74>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40005400 	.word	0x40005400
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00

08001744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_SPI_MspInit+0xa0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d13b      	bne.n	80017dc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 800176a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 8001782:	f043 0304 	orr.w	r3, r3, #4
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_SPI_MspInit+0xa4>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001794:	2310      	movs	r3, #16
 8001796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2302      	movs	r3, #2
 800179e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0xa8>)
 80017a8:	f000 fbca 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017ac:	23a0      	movs	r3, #160	; 0xa0
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_SPI_MspInit+0xa8>)
 80017c0:	f000 fbbe 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_SPI_MspInit+0xa8>)
 80017d8:	f000 fbb2 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <HAL_TIM_PWM_MspInit+0x58>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d10c      	bne.n	800181c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 8001808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181a:	e010      	b.n	800183e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_TIM_PWM_MspInit+0x60>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	61d3      	str	r3, [r2, #28]
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_TIM_PWM_MspInit+0x5c>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40000400 	.word	0x40000400

08001854 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d113      	bne.n	800188e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_OC_MspInit+0x44>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_TIM_OC_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_TIM_OC_MspInit+0x44>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201c      	movs	r0, #28
 8001884:	f000 fb25 	bl	8001ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001888:	201c      	movs	r0, #28
 800188a:	f000 fb3e 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <HAL_TIM_MspPostInit+0x98>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d119      	bne.n	80018f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80018d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2302      	movs	r3, #2
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4619      	mov	r1, r3
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <HAL_TIM_MspPostInit+0xa0>)
 80018ea:	f000 fb29 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018ee:	e01c      	b.n	800192a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a12      	ldr	r2, [pc, #72]	; (8001940 <HAL_TIM_MspPostInit+0xa4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d117      	bne.n	800192a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6193      	str	r3, [r2, #24]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_MspPostInit+0x9c>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001912:	2303      	movs	r3, #3
 8001914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2302      	movs	r3, #2
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	4619      	mov	r1, r3
 8001924:	4807      	ldr	r0, [pc, #28]	; (8001944 <HAL_TIM_MspPostInit+0xa8>)
 8001926:	f000 fb0b 	bl	8001f40 <HAL_GPIO_Init>
}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40010800 	.word	0x40010800
 8001940:	40000400 	.word	0x40000400
 8001944:	40010c00 	.word	0x40010c00

08001948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_UART_MspInit+0x88>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d12f      	bne.n	80019c8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 800196e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001972:	61d3      	str	r3, [r2, #28]
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_UART_MspInit+0x8c>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001998:	2304      	movs	r3, #4
 800199a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4619      	mov	r1, r3
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <HAL_UART_MspInit+0x90>)
 80019ac:	f000 fac8 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b0:	2308      	movs	r3, #8
 80019b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_UART_MspInit+0x90>)
 80019c4:	f000 fabc 	bl	8001f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40004400 	.word	0x40004400
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010800 	.word	0x40010800

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f000 f93f 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM2_IRQHandler+0x10>)
 8001a32:	f002 fa37 	bl	8003ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002ec 	.word	0x200002ec

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <_kill>:

int _kill(int pid, int sig)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a58:	f003 fe22 	bl	80056a0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2216      	movs	r2, #22
 8001a60:	601a      	str	r2, [r3, #0]
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_exit>:

void _exit (int status)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a76:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffe7 	bl	8001a4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a80:	e7fe      	b.n	8001a80 <_exit+0x12>

08001a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e00a      	b.n	8001aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a94:	f3af 8000 	nop.w
 8001a98:	4601      	mov	r1, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	60ba      	str	r2, [r7, #8]
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf0      	blt.n	8001a94 <_read+0x12>
  }

  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e009      	b.n	8001ae2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb10 	bl	80010fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf1      	blt.n	8001ace <_write+0x12>
  }
  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_close>:

int _close(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <_isatty>:

int _isatty(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	; (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f003 fd8c 	bl	80056a0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20005000 	.word	0x20005000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	200003d0 	.word	0x200003d0
 8001bbc:	200003e8 	.word	0x200003e8

08001bc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bcc:	f7ff fff8 	bl	8001bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be8:	4c09      	ldr	r4, [pc, #36]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f003 fd59 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fa91 	bl	8001120 <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c08:	080091dc 	.word	0x080091dc
  ldr r2, =_sbss
 8001c0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c10:	200003e8 	.word	0x200003e8

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f947 	bl	8001ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fd26 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f95f 	bl	8001f26 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f927 	bl	8001ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	200003d4 	.word	0x200003d4

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	200003d4 	.word	0x200003d4

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffe0 	bl	8001cc8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4906      	ldr	r1, [pc, #24]	; (8001dbc <__NVIC_EnableIRQ+0x34>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e88:	d301      	bcc.n	8001e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00f      	b.n	8001eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <SysTick_Config+0x40>)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e96:	210f      	movs	r1, #15
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f7ff ff90 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <SysTick_Config+0x40>)
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010

08001ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff2d 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff42 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff90 	bl	8001e14 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5f 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff35 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa2 	bl	8001e78 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	; 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e169      	b.n	8002228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8158 	bne.w	8002222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a9a      	ldr	r2, [pc, #616]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a98      	ldr	r2, [pc, #608]	; (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d875      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f82:	4a98      	ldr	r2, [pc, #608]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d058      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f88:	4a96      	ldr	r2, [pc, #600]	; (80021e4 <HAL_GPIO_Init+0x2a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d86f      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f8e:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d052      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f94:	4a94      	ldr	r2, [pc, #592]	; (80021e8 <HAL_GPIO_Init+0x2a8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d869      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f9a:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04c      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fa0:	4a92      	ldr	r2, [pc, #584]	; (80021ec <HAL_GPIO_Init+0x2ac>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d863      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fa6:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d046      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fac:	4a90      	ldr	r2, [pc, #576]	; (80021f0 <HAL_GPIO_Init+0x2b0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d85d      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d82a      	bhi.n	800200c <HAL_GPIO_Init+0xcc>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d859      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <HAL_GPIO_Init+0x80>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002027 	.word	0x08002027
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	0800206f 	.word	0x0800206f
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	0800206f 	.word	0x0800206f
 8001fe0:	0800206f 	.word	0x0800206f
 8001fe4:	0800206f 	.word	0x0800206f
 8001fe8:	0800206f 	.word	0x0800206f
 8001fec:	0800206f 	.word	0x0800206f
 8001ff0:	0800206f 	.word	0x0800206f
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800206f 	.word	0x0800206f
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002031 	.word	0x08002031
 800200c:	4a79      	ldr	r2, [pc, #484]	; (80021f4 <HAL_GPIO_Init+0x2b4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e029      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e024      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01f      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e01a      	b.n	8002070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e013      	b.n	8002070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e009      	b.n	8002070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e003      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x130>
          break;
 800206e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	; 0xff
 8002074:	d801      	bhi.n	800207a <HAL_GPIO_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	e001      	b.n	800207e <HAL_GPIO_Init+0x13e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d802      	bhi.n	800208c <HAL_GPIO_Init+0x14c>
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x152>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	3b08      	subs	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	210f      	movs	r1, #15
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b1 	beq.w	8002222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c0:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	4a48      	ldr	r2, [pc, #288]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <HAL_GPIO_Init+0x2c0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <HAL_GPIO_Init+0x2c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00d      	beq.n	8002128 <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3e      	ldr	r2, [pc, #248]	; (8002208 <HAL_GPIO_Init+0x2c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d007      	beq.n	8002124 <HAL_GPIO_Init+0x1e4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3d      	ldr	r2, [pc, #244]	; (800220c <HAL_GPIO_Init+0x2cc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_GPIO_Init+0x1e0>
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002120:	2304      	movs	r3, #4
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1ee>
 800212c:	2300      	movs	r3, #0
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213e:	492f      	ldr	r1, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x2bc>)
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	492c      	ldr	r1, [pc, #176]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	43db      	mvns	r3, r3
 800216e:	4928      	ldr	r1, [pc, #160]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002170:	4013      	ands	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4922      	ldr	r1, [pc, #136]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	43db      	mvns	r3, r3
 8002196:	491e      	ldr	r1, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 8002198:	4013      	ands	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4918      	ldr	r1, [pc, #96]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	43db      	mvns	r3, r3
 80021be:	4914      	ldr	r1, [pc, #80]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d021      	beq.n	8002214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	490e      	ldr	r1, [pc, #56]	; (8002210 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e021      	b.n	8002222 <HAL_GPIO_Init+0x2e2>
 80021de:	bf00      	nop
 80021e0:	10320000 	.word	0x10320000
 80021e4:	10310000 	.word	0x10310000
 80021e8:	10220000 	.word	0x10220000
 80021ec:	10210000 	.word	0x10210000
 80021f0:	10120000 	.word	0x10120000
 80021f4:	10110000 	.word	0x10110000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010800 	.word	0x40010800
 8002204:	40010c00 	.word	0x40010c00
 8002208:	40011000 	.word	0x40011000
 800220c:	40011400 	.word	0x40011400
 8002210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_GPIO_Init+0x304>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	4909      	ldr	r1, [pc, #36]	; (8002244 <HAL_GPIO_Init+0x304>)
 800221e:	4013      	ands	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	3301      	adds	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f47f ae8e 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	372c      	adds	r7, #44	; 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e12b      	b.n	80024b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fa2a 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800229a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ac:	f001 fbf0 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 80022b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a81      	ldr	r2, [pc, #516]	; (80024bc <HAL_I2C_Init+0x274>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d807      	bhi.n	80022cc <HAL_I2C_Init+0x84>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a80      	ldr	r2, [pc, #512]	; (80024c0 <HAL_I2C_Init+0x278>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e006      	b.n	80022da <HAL_I2C_Init+0x92>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a7d      	ldr	r2, [pc, #500]	; (80024c4 <HAL_I2C_Init+0x27c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0e7      	b.n	80024b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a78      	ldr	r2, [pc, #480]	; (80024c8 <HAL_I2C_Init+0x280>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a6a      	ldr	r2, [pc, #424]	; (80024bc <HAL_I2C_Init+0x274>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d802      	bhi.n	800231c <HAL_I2C_Init+0xd4>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3301      	adds	r3, #1
 800231a:	e009      	b.n	8002330 <HAL_I2C_Init+0xe8>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_I2C_Init+0x284>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	3301      	adds	r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	430b      	orrs	r3, r1
 8002336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	495c      	ldr	r1, [pc, #368]	; (80024bc <HAL_I2C_Init+0x274>)
 800234c:	428b      	cmp	r3, r1
 800234e:	d819      	bhi.n	8002384 <HAL_I2C_Init+0x13c>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e59      	subs	r1, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fbb1 f3f3 	udiv	r3, r1, r3
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002364:	400b      	ands	r3, r1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_I2C_Init+0x138>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1e59      	subs	r1, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fbb1 f3f3 	udiv	r3, r1, r3
 8002378:	3301      	adds	r3, #1
 800237a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237e:	e051      	b.n	8002424 <HAL_I2C_Init+0x1dc>
 8002380:	2304      	movs	r3, #4
 8002382:	e04f      	b.n	8002424 <HAL_I2C_Init+0x1dc>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d111      	bne.n	80023b0 <HAL_I2C_Init+0x168>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e58      	subs	r0, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	440b      	add	r3, r1
 800239a:	fbb0 f3f3 	udiv	r3, r0, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e012      	b.n	80023d6 <HAL_I2C_Init+0x18e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	0099      	lsls	r1, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Init+0x196>
 80023da:	2301      	movs	r3, #1
 80023dc:	e022      	b.n	8002424 <HAL_I2C_Init+0x1dc>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10e      	bne.n	8002404 <HAL_I2C_Init+0x1bc>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e58      	subs	r0, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	440b      	add	r3, r1
 80023f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002402:	e00f      	b.n	8002424 <HAL_I2C_Init+0x1dc>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	0099      	lsls	r1, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	6809      	ldr	r1, [r1, #0]
 8002428:	4313      	orrs	r3, r2
 800242a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6911      	ldr	r1, [r2, #16]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68d2      	ldr	r2, [r2, #12]
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	000186a0 	.word	0x000186a0
 80024c0:	001e847f 	.word	0x001e847f
 80024c4:	003d08ff 	.word	0x003d08ff
 80024c8:	431bde83 	.word	0x431bde83
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ea:	f7ff fbed 	bl	8001cc8 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	f040 80d9 	bne.w	80026b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2319      	movs	r3, #25
 8002504:	2201      	movs	r2, #1
 8002506:	496d      	ldr	r1, [pc, #436]	; (80026bc <HAL_I2C_Mem_Write+0x1ec>)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fcc1 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
 8002516:	e0cc      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Mem_Write+0x56>
 8002522:	2302      	movs	r3, #2
 8002524:	e0c5      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d007      	beq.n	800254c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2221      	movs	r2, #33	; 0x21
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <HAL_I2C_Mem_Write+0x1f0>)
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800258e:	88f8      	ldrh	r0, [r7, #6]
 8002590:	893a      	ldrh	r2, [r7, #8]
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4603      	mov	r3, r0
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 faf8 	bl	8002b94 <I2C_RequestMemoryWrite>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d052      	beq.n	8002650 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e081      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fd86 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06b      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11b      	bne.n	8002650 <HAL_I2C_Mem_Write+0x180>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d017      	beq.n	8002650 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1aa      	bne.n	80025ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fd79 	bl	8003154 <I2C_WaitOnBTFFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2b04      	cmp	r3, #4
 800266e:	d107      	bne.n	8002680 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e016      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00100002 	.word	0x00100002
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	4608      	mov	r0, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	817b      	strh	r3, [r7, #10]
 80026d6:	460b      	mov	r3, r1
 80026d8:	813b      	strh	r3, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e2:	f7ff faf1 	bl	8001cc8 <HAL_GetTick>
 80026e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	f040 8244 	bne.w	8002b7e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2319      	movs	r3, #25
 80026fc:	2201      	movs	r2, #1
 80026fe:	4982      	ldr	r1, [pc, #520]	; (8002908 <HAL_I2C_Mem_Read+0x244>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fbc5 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
 800270e:	e237      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_I2C_Mem_Read+0x5a>
 800271a:	2302      	movs	r3, #2
 800271c:	e230      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d007      	beq.n	8002744 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2222      	movs	r2, #34	; 0x22
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a62      	ldr	r2, [pc, #392]	; (800290c <HAL_I2C_Mem_Read+0x248>)
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002786:	88f8      	ldrh	r0, [r7, #6]
 8002788:	893a      	ldrh	r2, [r7, #8]
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4603      	mov	r3, r0
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa92 	bl	8002cc0 <I2C_RequestMemoryRead>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e1ec      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d113      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e1c0      	b.n	8002b58 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d11e      	bne.n	800281c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ee:	b672      	cpsid	i
}
 80027f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002818:	b662      	cpsie	i
}
 800281a:	e035      	b.n	8002888 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b02      	cmp	r3, #2
 8002822:	d11e      	bne.n	8002862 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002832:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800285e:	b662      	cpsie	i
}
 8002860:	e012      	b.n	8002888 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002870:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002888:	e166      	b.n	8002b58 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b03      	cmp	r3, #3
 8002890:	f200 811f 	bhi.w	8002ad2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b01      	cmp	r3, #1
 800289a:	d123      	bne.n	80028e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fc9f 	bl	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e167      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028e2:	e139      	b.n	8002b58 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d152      	bne.n	8002992 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	2200      	movs	r2, #0
 80028f4:	4906      	ldr	r1, [pc, #24]	; (8002910 <HAL_I2C_Mem_Read+0x24c>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 faca 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e13c      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
 8002906:	bf00      	nop
 8002908:	00100002 	.word	0x00100002
 800290c:	ffff0000 	.word	0xffff0000
 8002910:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002914:	b672      	cpsid	i
}
 8002916:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800295a:	b662      	cpsie	i
}
 800295c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002990:	e0e2      	b.n	8002b58 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2200      	movs	r2, #0
 800299a:	497b      	ldr	r1, [pc, #492]	; (8002b88 <HAL_I2C_Mem_Read+0x4c4>)
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fa77 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0e9      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029f2:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_I2C_Mem_Read+0x4c8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	08db      	lsrs	r3, r3, #3
 80029f8:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_I2C_Mem_Read+0x4cc>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a1a      	lsrs	r2, r3, #8
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00da      	lsls	r2, r3, #3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d118      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a3a:	b662      	cpsie	i
}
 8002a3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09a      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d1d9      	bne.n	8002a0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a9a:	b662      	cpsie	i
}
 8002a9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ad0:	e042      	b.n	8002b58 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fb84 	bl	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e04c      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d118      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae94 	bne.w	800288a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00010004 	.word	0x00010004
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	14f8b589 	.word	0x14f8b589

08002b94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f960 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d103      	bne.n	8002bee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e05f      	b.n	8002cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	492d      	ldr	r1, [pc, #180]	; (8002cbc <I2C_RequestMemoryWrite+0x128>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f9bb 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e04c      	b.n	8002cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa46 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e02b      	b.n	8002cb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c60:	893b      	ldrh	r3, [r7, #8]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]
 8002c6a:	e021      	b.n	8002cb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa20 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e005      	b.n	8002cb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	00010002 	.word	0x00010002

08002cc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	817b      	strh	r3, [r7, #10]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	813b      	strh	r3, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f8c2 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d103      	bne.n	8002d2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0aa      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	4952      	ldr	r1, [pc, #328]	; (8002e8c <I2C_RequestMemoryRead+0x1cc>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f91d 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e097      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6a39      	ldr	r1, [r7, #32]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f9a8 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d107      	bne.n	8002d92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e076      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e021      	b.n	8002dec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002da8:	893b      	ldrh	r3, [r7, #8]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f982 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d107      	bne.n	8002dde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e050      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de2:	893b      	ldrh	r3, [r7, #8]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	6a39      	ldr	r1, [r7, #32]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f967 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d107      	bne.n	8002e14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e035      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f82b 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00d      	beq.n	8002e5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d103      	bne.n	8002e58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e013      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	6a3a      	ldr	r2, [r7, #32]
 8002e70:	4906      	ldr	r1, [pc, #24]	; (8002e8c <I2C_RequestMemoryRead+0x1cc>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f886 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	e048      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d044      	beq.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7fe ff0d 	bl	8001cc8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d139      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10d      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	e00c      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d116      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e023      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	e00c      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d093      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f92:	e071      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d123      	bne.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e067      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d041      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe fe68 	bl	8001cc8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d136      	bne.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10c      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e00b      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e021      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10c      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	43da      	mvns	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e00b      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f af6d 	bne.w	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e034      	b.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8e3 	bl	800329e <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e034      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d028      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fded 	bl	8001cc8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11d      	bne.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d016      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e007      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d1c3      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003160:	e034      	b.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f89b 	bl	800329e <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e034      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d028      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fda5 	bl	8001cc8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d1c3      	bne.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031f0:	e049      	b.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d119      	bne.n	8003234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0210 	mvn.w	r2, #16
 8003208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e030      	b.n	8003296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003234:	f7fe fd48 	bl	8001cc8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11d      	bne.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d016      	beq.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e007      	b.n	8003296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d1ae      	bne.n	80031f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b4:	d11b      	bne.n	80032ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e272      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8087 	beq.w	800342a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800331c:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00c      	beq.n	8003342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d112      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06c      	beq.n	8003428 <HAL_RCC_OscConfig+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d168      	bne.n	8003428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e24c      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x76>
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b7b      	ldr	r3, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7a      	ldr	r2, [pc, #488]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b78      	ldr	r3, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a77      	ldr	r2, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xbc>
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a71      	ldr	r2, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 80033b8:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6a      	ldr	r2, [pc, #424]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fc76 	bl	8001cc8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe fc72 	bl	8001cc8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e200      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe4>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fc62 	bl	8001cc8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fc5e 	bl	8001cc8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1ec      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x10c>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
 800344e:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1c0      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4939      	ldr	r1, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe fc17 	bl	8001cc8 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fc13 	bl	8001cc8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1a1      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4927      	ldr	r1, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fbf6 	bl	8001cc8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fe fbf2 	bl	8001cc8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e180      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03a      	beq.n	8003580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe fbd6 	bl	8001cc8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fe fbd2 	bl	8001cc8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e160      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f000 face 	bl	8003ae0 <RCC_Delay>
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7fe fbbc 	bl	8001cc8 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003552:	e00f      	b.n	8003574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fe fbb8 	bl	8001cc8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e146      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	42420000 	.word	0x42420000
 8003570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e9      	bne.n	8003554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a6 	beq.w	80036da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b8b      	ldr	r3, [pc, #556]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a87      	ldr	r2, [pc, #540]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]
 80035aa:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b82      	ldr	r3, [pc, #520]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7e      	ldr	r2, [pc, #504]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fb79 	bl	8001cc8 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fe fb75 	bl	8001cc8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e103      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b75      	ldr	r3, [pc, #468]	; (80037c4 <HAL_RCC_OscConfig+0x4c8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x312>
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e02d      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4a66      	ldr	r2, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x356>
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a60      	ldr	r2, [pc, #384]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4b5e      	ldr	r3, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a5d      	ldr	r2, [pc, #372]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a5a      	ldr	r2, [pc, #360]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe fb29 	bl	8001cc8 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fb25 	bl	8001cc8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0b1      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x37e>
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fb13 	bl	8001cc8 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fe fb0f 	bl	8001cc8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e09b      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d061      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d146      	bne.n	8003786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe fae3 	bl	8001cc8 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fe fadf 	bl	8001cc8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e06d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4921      	ldr	r1, [pc, #132]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a19      	ldr	r1, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	430b      	orrs	r3, r1
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe fab3 	bl	8001cc8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe faaf 	bl	8001cc8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x46a>
 8003784:	e035      	b.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fa9c 	bl	8001cc8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fa98 	bl	8001cc8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e026      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x498>
 80037b2:	e01e      	b.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e019      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x500>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0d0      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d910      	bls.n	8003844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	4965      	ldr	r1, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800387e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d040      	beq.n	8003920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e073      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06b      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4936      	ldr	r1, [pc, #216]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fe f9ea 	bl	8001cc8 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fe f9e6 	bl	8001cc8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e053      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d210      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4922      	ldr	r1, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1cc>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1d0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe f948 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40022000 	.word	0x40022000
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08008db8 	.word	0x08008db8
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x30>
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x36>
 8003a02:	e027      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a06:	613b      	str	r3, [r7, #16]
      break;
 8003a08:	e027      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0c9b      	lsrs	r3, r3, #18
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0c5b      	lsrs	r3, r3, #17
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e004      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	613b      	str	r3, [r7, #16]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a56:	613b      	str	r3, [r7, #16]
      break;
 8003a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5a:	693b      	ldr	r3, [r7, #16]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	007a1200 	.word	0x007a1200
 8003a70:	08008dd0 	.word	0x08008dd0
 8003a74:	08008de0 	.word	0x08008de0
 8003a78:	003d0900 	.word	0x003d0900

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b02      	ldr	r3, [pc, #8]	; (8003a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff2 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08008dc8 	.word	0x08008dc8

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffde 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	0adb      	lsrs	r3, r3, #11
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	08008dc8 	.word	0x08008dc8

08003ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCC_Delay+0x34>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <RCC_Delay+0x38>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	0a5b      	lsrs	r3, r3, #9
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003afc:	bf00      	nop
  }
  while (Delay --);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1e5a      	subs	r2, r3, #1
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f9      	bne.n	8003afc <RCC_Delay+0x1c>
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	20000000 	.word	0x20000000
 8003b18:	10624dd3 	.word	0x10624dd3

08003b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e076      	b.n	8003c1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d009      	beq.n	8003b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	e005      	b.n	8003b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fde8 	bl	8001744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	ea42 0103 	orr.w	r1, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	0c1a      	lsrs	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f002 0204 	and.w	r2, r2, #4
 8003bfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e041      	b.n	8003cba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fe02 	bl	8001854 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fb68 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e041      	b.n	8003d58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd fd81 	bl	80017f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f000 fb19 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start+0x24>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e022      	b.n	8003dca <HAL_TIM_PWM_Start+0x6a>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d109      	bne.n	8003d9e <HAL_TIM_PWM_Start+0x3e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	e015      	b.n	8003dca <HAL_TIM_PWM_Start+0x6a>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start+0x58>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e008      	b.n	8003dca <HAL_TIM_PWM_Start+0x6a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e05e      	b.n	8003e90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0x82>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	e013      	b.n	8003e0a <HAL_TIM_PWM_Start+0xaa>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x92>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df0:	e00b      	b.n	8003e0a <HAL_TIM_PWM_Start+0xaa>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_PWM_Start+0xa2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e00:	e003      	b.n	8003e0a <HAL_TIM_PWM_Start+0xaa>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fc7a 	bl	800470c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_TIM_PWM_Start+0x138>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d107      	bne.n	8003e32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_TIM_PWM_Start+0x138>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_PWM_Start+0xfa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_PWM_Start+0xfa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <HAL_TIM_PWM_Start+0x13c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_PWM_Start+0xfa>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <HAL_TIM_PWM_Start+0x140>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d111      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d010      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	e007      	b.n	8003e8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0202 	mvn.w	r2, #2
 8003ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa0b 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9fe 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa0d 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0204 	mvn.w	r2, #4
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9e1 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9d4 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f9e3 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0208 	mvn.w	r2, #8
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9b7 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9aa 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9b9 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d122      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d11b      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0210 	mvn.w	r2, #16
 8003fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f98d 	bl	8004302 <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f980 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f98f 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fb20 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b80      	cmp	r3, #128	; 0x80
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fc38 	bl	80048c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d10e      	bne.n	8004080 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d107      	bne.n	8004080 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f953 	bl	8004326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b20      	cmp	r3, #32
 800408c:	d10e      	bne.n	80040ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d107      	bne.n	80040ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0220 	mvn.w	r2, #32
 80040a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fc03 	bl	80048b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e048      	b.n	8004164 <HAL_TIM_OC_ConfigChannel+0xb0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	d839      	bhi.n	8004154 <HAL_TIM_OC_ConfigChannel+0xa0>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004155 	.word	0x08004155
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004155 	.word	0x08004155
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	08004155 	.word	0x08004155
 8004100:	08004155 	.word	0x08004155
 8004104:	08004155 	.word	0x08004155
 8004108:	08004139 	.word	0x08004139
 800410c:	08004155 	.word	0x08004155
 8004110:	08004155 	.word	0x08004155
 8004114:	08004155 	.word	0x08004155
 8004118:	08004147 	.word	0x08004147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f96a 	bl	80043fc <TIM_OC1_SetConfig>
      break;
 8004128:	e017      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f9c9 	bl	80044c8 <TIM_OC2_SetConfig>
      break;
 8004136:	e010      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa2c 	bl	800459c <TIM_OC3_SetConfig>
      break;
 8004144:	e009      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa8f 	bl	8004670 <TIM_OC4_SetConfig>
      break;
 8004152:	e002      	b.n	800415a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
      break;
 8004158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e0ae      	b.n	80042e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	f200 809f 	bhi.w	80042d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080042d9 	.word	0x080042d9
 80041a8:	080042d9 	.word	0x080042d9
 80041ac:	080042d9 	.word	0x080042d9
 80041b0:	08004215 	.word	0x08004215
 80041b4:	080042d9 	.word	0x080042d9
 80041b8:	080042d9 	.word	0x080042d9
 80041bc:	080042d9 	.word	0x080042d9
 80041c0:	08004257 	.word	0x08004257
 80041c4:	080042d9 	.word	0x080042d9
 80041c8:	080042d9 	.word	0x080042d9
 80041cc:	080042d9 	.word	0x080042d9
 80041d0:	08004297 	.word	0x08004297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f90e 	bl	80043fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e064      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f954 	bl	80044c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
      break;
 8004254:	e043      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f99d 	bl	800459c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
      break;
 8004294:	e023      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f9e7 	bl	8004670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e002      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x30>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d007      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <TIM_Base_SetConfig+0xbc>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0x62>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <TIM_Base_SetConfig+0xc0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d108      	bne.n	80043ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <TIM_Base_SetConfig+0xb8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800

080043fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f023 0201 	bic.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 0302 	bic.w	r3, r3, #2
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <TIM_OC1_SetConfig+0xc8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10c      	bne.n	8004472 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0308 	bic.w	r3, r3, #8
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <TIM_OC1_SetConfig+0xc8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d111      	bne.n	800449e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f023 0210 	bic.w	r2, r3, #16
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0320 	bic.w	r3, r3, #32
 8004512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <TIM_OC2_SetConfig+0xd0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a14      	ldr	r2, [pc, #80]	; (8004598 <TIM_OC2_SetConfig+0xd0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d113      	bne.n	8004574 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40012c00 	.word	0x40012c00

0800459c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <TIM_OC3_SetConfig+0xd0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10d      	bne.n	8004616 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <TIM_OC3_SetConfig+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00

08004670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <TIM_OC4_SetConfig+0x98>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d109      	bne.n	80046e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	019b      	lsls	r3, r3, #6
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00

0800470c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 031f 	and.w	r3, r3, #31
 800471e:	2201      	movs	r2, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	43db      	mvns	r3, r3
 800472e:	401a      	ands	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a1a      	ldr	r2, [r3, #32]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e046      	b.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a16      	ldr	r2, [pc, #88]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00e      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d009      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a10      	ldr	r2, [pc, #64]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10c      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004828:	2302      	movs	r3, #2
 800482a:	e03d      	b.n	80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e042      	b.n	800496e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fd f823 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f91c 	bl	8004b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af02      	add	r7, sp, #8
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	d16d      	bne.n	8004a72 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Transmit+0x2c>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e066      	b.n	8004a74 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2221      	movs	r2, #33	; 0x21
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b4:	f7fd f988 	bl	8001cc8 <HAL_GetTick>
 80049b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d108      	bne.n	80049e2 <HAL_UART_Transmit+0x6c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e003      	b.n	80049ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049ea:	e02a      	b.n	8004a42 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f840 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e036      	b.n	8004a74 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3302      	adds	r3, #2
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	e007      	b.n	8004a34 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1cf      	bne.n	80049ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f810 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e006      	b.n	8004a74 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b090      	sub	sp, #64	; 0x40
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8c:	e050      	b.n	8004b30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d04c      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9c:	f7fd f914 	bl	8001cc8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d241      	bcs.n	8004b30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004acc:	637a      	str	r2, [r7, #52]	; 0x34
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3314      	adds	r3, #20
 8004ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	613b      	str	r3, [r7, #16]
   return(result);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3314      	adds	r3, #20
 8004afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b00:	623a      	str	r2, [r7, #32]
 8004b02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	69f9      	ldr	r1, [r7, #28]
 8004b06:	6a3a      	ldr	r2, [r7, #32]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e00f      	b.n	8004b50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d09f      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3740      	adds	r7, #64	; 0x40
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b92:	f023 030c 	bic.w	r3, r3, #12
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <UART_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d103      	bne.n	8004bc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7fe ff7a 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	e002      	b.n	8004bce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f7fe ff62 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009a      	lsls	r2, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	4a22      	ldr	r2, [pc, #136]	; (8004c70 <UART_SetConfig+0x118>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	0119      	lsls	r1, r3, #4
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <UART_SetConfig+0x118>)
 8004c06:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2064      	movs	r0, #100	; 0x64
 8004c0e:	fb00 f303 	mul.w	r3, r0, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	3332      	adds	r3, #50	; 0x32
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <UART_SetConfig+0x118>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c24:	4419      	add	r1, r3
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009a      	lsls	r2, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <UART_SetConfig+0x118>)
 8004c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2064      	movs	r0, #100	; 0x64
 8004c46:	fb00 f303 	mul.w	r3, r0, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	3332      	adds	r3, #50	; 0x32
 8004c50:	4a07      	ldr	r2, [pc, #28]	; (8004c70 <UART_SetConfig+0x118>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	440a      	add	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40013800 	.word	0x40013800
 8004c70:	51eb851f 	.word	0x51eb851f
 8004c74:	00000000 	.word	0x00000000

08004c78 <Self_test_mpu6050>:
#include "mpu6050_driver.h"
#define DEBUG_mpu 0
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

void Self_test_mpu6050(I2C_HandleTypeDef *hi2c) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b092      	sub	sp, #72	; 0x48
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]

	 uint8_t data[4] = {0} ;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t  Gyro_ST[3] = {0};
 8004c84:	4bc8      	ldr	r3, [pc, #800]	; (8004fa8 <Self_test_mpu6050+0x330>)
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 uint8_t  ACCL_ST[3] = {0} ;
 8004c90:	4bc5      	ldr	r3, [pc, #788]	; (8004fa8 <Self_test_mpu6050+0x330>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 float Gyro_FT[3] = {0} ;
 8004c9c:	f107 0318 	add.w	r3, r7, #24
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	605a      	str	r2, [r3, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
	 float Accl_FT[3] = {0} ;
 8004ca8:	f107 030c 	add.w	r3, r7, #12
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	609a      	str	r2, [r3, #8]

	 // begin test
	 data[0] = 0xE0;
 8004cb4:	23e0      	movs	r3, #224	; 0xe0
 8004cb6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable gyro self test
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	9302      	str	r3, [sp, #8]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	221b      	movs	r2, #27
 8004cce:	21d0      	movs	r1, #208	; 0xd0
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fd fbfd 	bl	80024d0 <HAL_I2C_Mem_Write>
	 data[0] = 0xF0 ;
 8004cd6:	23f0      	movs	r3, #240	; 0xf0
 8004cd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable accel self test
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2301      	movs	r3, #1
 8004cee:	221c      	movs	r2, #28
 8004cf0:	21d0      	movs	r1, #208	; 0xd0
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fbec 	bl	80024d0 <HAL_I2C_Mem_Write>
	 HAL_Delay(150) ;
 8004cf8:	2096      	movs	r0, #150	; 0x96
 8004cfa:	f7fc ffef 	bl	8001cdc <HAL_Delay>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_X, 1, &data[0], 1, HAL_MAX_DELAY) ;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	2301      	movs	r3, #1
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2301      	movs	r3, #1
 8004d10:	220d      	movs	r2, #13
 8004d12:	21d0      	movs	r1, #208	; 0xd0
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fd fcd5 	bl	80026c4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Y, 1, &data[1], 1, HAL_MAX_DELAY) ;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	2301      	movs	r3, #1
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d28:	3301      	adds	r3, #1
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	220e      	movs	r2, #14
 8004d30:	21d0      	movs	r1, #208	; 0xd0
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fcc6 	bl	80026c4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Z, 1, &data[2], 1, HAL_MAX_DELAY) ;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	9302      	str	r3, [sp, #8]
 8004d3e:	2301      	movs	r3, #1
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d46:	3302      	adds	r3, #2
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	21d0      	movs	r1, #208	; 0xd0
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fd fcb7 	bl	80026c4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_A, 1, &data[3], 1, HAL_MAX_DELAY) ;
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	9302      	str	r3, [sp, #8]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d64:	3303      	adds	r3, #3
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	21d0      	movs	r1, #208	; 0xd0
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd fca8 	bl	80026c4 <HAL_I2C_Mem_Read>

	 Gyro_ST[0] = (data[0] & 0x1F) ;	// X
 8004d74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 Gyro_ST[1] = (data[1] & 0x1F) ;	// Y
 8004d82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d86:	f003 031f 	and.w	r3, r3, #31
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 Gyro_ST[2] = (data[2] & 0x1F) ;	// Z
 8004d90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	 ACCL_ST[0] = (((data[0] &  0xE0 ) >> 3) | ((data[3] & 0x30 ) >> 4));	//X
 8004d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004da2:	10db      	asrs	r3, r3, #3
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	f003 031c 	and.w	r3, r3, #28
 8004daa:	b25a      	sxtb	r2, r3
 8004dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004db0:	111b      	asrs	r3, r3, #4
 8004db2:	b25b      	sxtb	r3, r3
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	b25b      	sxtb	r3, r3
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	b25b      	sxtb	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 ACCL_ST[1] = (((data[1] &  0xE0 ) >> 3) | ((data[3] & 0x0C ) >> 2));	//Y
 8004dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dc8:	10db      	asrs	r3, r3, #3
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	f003 031c 	and.w	r3, r3, #28
 8004dd0:	b25a      	sxtb	r2, r3
 8004dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dd6:	109b      	asrs	r3, r3, #2
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	4313      	orrs	r3, r2
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 ACCL_ST[2] = (((data[2] &  0xE0 ) >> 3) | ((data[3] & 0x03 ) >> 0)); //Z
 8004dea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dee:	10db      	asrs	r3, r3, #3
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	f003 031c 	and.w	r3, r3, #28
 8004df6:	b25a      	sxtb	r2, r3
 8004df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	4313      	orrs	r3, r2
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("ACC_ST[0] %u \n" , ACCL_ST[0]) ;
	printf("ACC_ST[1] %u \n" , ACCL_ST[1]) ;
	printf("ACC_ST[2] %u \n" , ACCL_ST[3]) ;
#endif

	Gyro_FT[0] = 25.0*131.0*(powf(1.406,Gyro_ST[0]) - 1.0) ;
 8004e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fb ff3e 	bl	8000c94 <__aeabi_ui2f>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4863      	ldr	r0, [pc, #396]	; (8004fac <Self_test_mpu6050+0x334>)
 8004e1e:	f003 fa09 	bl	8008234 <powf>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb faff 	bl	8000428 <__aeabi_f2d>
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <Self_test_mpu6050+0x338>)
 8004e30:	f7fb f99a 	bl	8000168 <__aeabi_dsub>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	a354      	add	r3, pc, #336	; (adr r3, 8004f90 <Self_test_mpu6050+0x318>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb fb49 	bl	80004d8 <__aeabi_dmul>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f7fb fe1b 	bl	8000a88 <__aeabi_d2f>
 8004e52:	4603      	mov	r3, r0
 8004e54:	61bb      	str	r3, [r7, #24]
	Gyro_FT[1] = -25.0*131.0*(powf(1.406,Gyro_ST[1]) - 1.0) ;
 8004e56:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb ff1a 	bl	8000c94 <__aeabi_ui2f>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4619      	mov	r1, r3
 8004e64:	4851      	ldr	r0, [pc, #324]	; (8004fac <Self_test_mpu6050+0x334>)
 8004e66:	f003 f9e5 	bl	8008234 <powf>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fb fadb 	bl	8000428 <__aeabi_f2d>
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <Self_test_mpu6050+0x338>)
 8004e78:	f7fb f976 	bl	8000168 <__aeabi_dsub>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	a344      	add	r3, pc, #272	; (adr r3, 8004f98 <Self_test_mpu6050+0x320>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb fb25 	bl	80004d8 <__aeabi_dmul>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7fb fdf7 	bl	8000a88 <__aeabi_d2f>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	61fb      	str	r3, [r7, #28]
	Gyro_FT[2] = 25.0*131.0*(powf(1.406,Gyro_ST[2]) - 1.0) ;
 8004e9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fef6 	bl	8000c94 <__aeabi_ui2f>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4619      	mov	r1, r3
 8004eac:	483f      	ldr	r0, [pc, #252]	; (8004fac <Self_test_mpu6050+0x334>)
 8004eae:	f003 f9c1 	bl	8008234 <powf>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fb fab7 	bl	8000428 <__aeabi_f2d>
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	4b3c      	ldr	r3, [pc, #240]	; (8004fb0 <Self_test_mpu6050+0x338>)
 8004ec0:	f7fb f952 	bl	8000168 <__aeabi_dsub>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	a330      	add	r3, pc, #192	; (adr r3, 8004f90 <Self_test_mpu6050+0x318>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f7fb fb01 	bl	80004d8 <__aeabi_dmul>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	f7fb fdd3 	bl	8000a88 <__aeabi_d2f>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	623b      	str	r3, [r7, #32]

	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[0] - 1.0)/(30)))); ;
 8004ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fa8a 	bl	8000404 <__aeabi_i2d>
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <Self_test_mpu6050+0x338>)
 8004ef6:	f7fb f937 	bl	8000168 <__aeabi_dsub>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <Self_test_mpu6050+0x33c>)
 8004f08:	f7fb fc10 	bl	800072c <__aeabi_ddiv>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7fb fdb8 	bl	8000a88 <__aeabi_d2f>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4826      	ldr	r0, [pc, #152]	; (8004fb8 <Self_test_mpu6050+0x340>)
 8004f1e:	f003 f989 	bl	8008234 <powf>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fa7f 	bl	8000428 <__aeabi_f2d>
 8004f2a:	a31d      	add	r3, pc, #116	; (adr r3, 8004fa0 <Self_test_mpu6050+0x328>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f7fb fad2 	bl	80004d8 <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f7fb fda4 	bl	8000a88 <__aeabi_d2f>
 8004f40:	4603      	mov	r3, r0
 8004f42:	60fb      	str	r3, [r7, #12]
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
							  ((ACCL_ST[1] - 1.0)/(30))));
 8004f44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fb fa5b 	bl	8000404 <__aeabi_i2d>
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <Self_test_mpu6050+0x338>)
 8004f54:	f7fb f908 	bl	8000168 <__aeabi_dsub>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <Self_test_mpu6050+0x33c>)
 8004f66:	f7fb fbe1 	bl	800072c <__aeabi_ddiv>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	f7fb fd89 	bl	8000a88 <__aeabi_d2f>
 8004f76:	4603      	mov	r3, r0
 8004f78:	4619      	mov	r1, r3
 8004f7a:	480f      	ldr	r0, [pc, #60]	; (8004fb8 <Self_test_mpu6050+0x340>)
 8004f7c:	f003 f95a 	bl	8008234 <powf>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb fa50 	bl	8000428 <__aeabi_f2d>
 8004f88:	e018      	b.n	8004fbc <Self_test_mpu6050+0x344>
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w
 8004f90:	00000000 	.word	0x00000000
 8004f94:	40a99600 	.word	0x40a99600
 8004f98:	00000000 	.word	0x00000000
 8004f9c:	c0a99600 	.word	0xc0a99600
 8004fa0:	5c28f5c3 	.word	0x5c28f5c3
 8004fa4:	4095c28f 	.word	0x4095c28f
 8004fa8:	08008b80 	.word	0x08008b80
 8004fac:	3fb3f7cf 	.word	0x3fb3f7cf
 8004fb0:	3ff00000 	.word	0x3ff00000
 8004fb4:	403e0000 	.word	0x403e0000
 8004fb8:	402d2d2d 	.word	0x402d2d2d
 8004fbc:	a366      	add	r3, pc, #408	; (adr r3, 8005158 <Self_test_mpu6050+0x4e0>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fa89 	bl	80004d8 <__aeabi_dmul>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7fb fd5b 	bl	8000a88 <__aeabi_d2f>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	613b      	str	r3, [r7, #16]
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[2] - 1.0)/(30)))) ;
 8004fd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fa12 	bl	8000404 <__aeabi_i2d>
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	4b5e      	ldr	r3, [pc, #376]	; (8005160 <Self_test_mpu6050+0x4e8>)
 8004fe6:	f7fb f8bf 	bl	8000168 <__aeabi_dsub>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	4b5b      	ldr	r3, [pc, #364]	; (8005164 <Self_test_mpu6050+0x4ec>)
 8004ff8:	f7fb fb98 	bl	800072c <__aeabi_ddiv>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	f7fb fd40 	bl	8000a88 <__aeabi_d2f>
 8005008:	4603      	mov	r3, r0
 800500a:	4619      	mov	r1, r3
 800500c:	4856      	ldr	r0, [pc, #344]	; (8005168 <Self_test_mpu6050+0x4f0>)
 800500e:	f003 f911 	bl	8008234 <powf>
 8005012:	4603      	mov	r3, r0
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fa07 	bl	8000428 <__aeabi_f2d>
 800501a:	a34f      	add	r3, pc, #316	; (adr r3, 8005158 <Self_test_mpu6050+0x4e0>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb fa5a 	bl	80004d8 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	f7fb fd2c 	bl	8000a88 <__aeabi_d2f>
 8005030:	4603      	mov	r3, r0
 8005032:	617b      	str	r3, [r7, #20]
	printf("ACC_FT[0] %f \n" , Accl_FT[0]) ;
	printf("ACC_FT[1] %f \n" , Accl_FT[1]) ;
	printf("ACC_FT[2] %f \n" , Accl_FT[3]) ;
#endif

	float temp = 0 ;
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 800503a:	2300      	movs	r3, #0
 800503c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005040:	e03a      	b.n	80050b8 <Self_test_mpu6050+0x440>
	temp = (100 + ((( Gyro_ST[i]- Gyro_FT[i] )/ Gyro_FT[i] )*100 ));
 8005042:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005046:	3338      	adds	r3, #56	; 0x38
 8005048:	443b      	add	r3, r7
 800504a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb fe24 	bl	8000c9c <__aeabi_i2f>
 8005054:	4602      	mov	r2, r0
 8005056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	3338      	adds	r3, #56	; 0x38
 800505e:	443b      	add	r3, r7
 8005060:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fb fd62 	bl	8000b30 <__aeabi_fsub>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3338      	adds	r3, #56	; 0x38
 8005078:	443b      	add	r3, r7
 800507a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7fb ff13 	bl	8000eac <__aeabi_fdiv>
 8005086:	4603      	mov	r3, r0
 8005088:	4938      	ldr	r1, [pc, #224]	; (800516c <Self_test_mpu6050+0x4f4>)
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb fe5a 	bl	8000d44 <__aeabi_fmul>
 8005090:	4603      	mov	r3, r0
 8005092:	4936      	ldr	r1, [pc, #216]	; (800516c <Self_test_mpu6050+0x4f4>)
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fd4d 	bl	8000b34 <__addsf3>
 800509a:	4603      	mov	r3, r0
 800509c:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Gyro %f \n", temp) ;
 800509e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a0:	f7fb f9c2 	bl	8000428 <__aeabi_f2d>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4831      	ldr	r0, [pc, #196]	; (8005170 <Self_test_mpu6050+0x4f8>)
 80050aa:	f000 ff8b 	bl	8005fc4 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 80050ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050b2:	3301      	adds	r3, #1
 80050b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80050b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d9c0      	bls.n	8005042 <Self_test_mpu6050+0x3ca>
	}
temp = 0 ;
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80050cc:	e03a      	b.n	8005144 <Self_test_mpu6050+0x4cc>

	temp = (100 + ((( ACCL_ST[i]- Accl_FT[i] )/ Accl_FT[i] )*100 ));
 80050ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050d2:	3338      	adds	r3, #56	; 0x38
 80050d4:	443b      	add	r3, r7
 80050d6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb fdde 	bl	8000c9c <__aeabi_i2f>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	3338      	adds	r3, #56	; 0x38
 80050ea:	443b      	add	r3, r7
 80050ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fb fd1c 	bl	8000b30 <__aeabi_fsub>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	3338      	adds	r3, #56	; 0x38
 8005104:	443b      	add	r3, r7
 8005106:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fb fecd 	bl	8000eac <__aeabi_fdiv>
 8005112:	4603      	mov	r3, r0
 8005114:	4915      	ldr	r1, [pc, #84]	; (800516c <Self_test_mpu6050+0x4f4>)
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb fe14 	bl	8000d44 <__aeabi_fmul>
 800511c:	4603      	mov	r3, r0
 800511e:	4913      	ldr	r1, [pc, #76]	; (800516c <Self_test_mpu6050+0x4f4>)
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb fd07 	bl	8000b34 <__addsf3>
 8005126:	4603      	mov	r3, r0
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Accl %f \n", temp) ;
 800512a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512c:	f7fb f97c 	bl	8000428 <__aeabi_f2d>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	480f      	ldr	r0, [pc, #60]	; (8005174 <Self_test_mpu6050+0x4fc>)
 8005136:	f000 ff45 	bl	8005fc4 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 800513a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800513e:	3301      	adds	r3, #1
 8005140:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005144:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005148:	2b02      	cmp	r3, #2
 800514a:	d9c0      	bls.n	80050ce <Self_test_mpu6050+0x456>
	}
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3738      	adds	r7, #56	; 0x38
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	5c28f5c3 	.word	0x5c28f5c3
 800515c:	4095c28f 	.word	0x4095c28f
 8005160:	3ff00000 	.word	0x3ff00000
 8005164:	403e0000 	.word	0x403e0000
 8005168:	402d2d2d 	.word	0x402d2d2d
 800516c:	42c80000 	.word	0x42c80000
 8005170:	08008b48 	.word	0x08008b48
 8005174:	08008b64 	.word	0x08008b64

08005178 <Mpu6050_Init>:

void Mpu6050_Init(I2C_HandleTypeDef *hi2c ){
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af04      	add	r7, sp, #16
 800517e:	6078      	str	r0, [r7, #4]
uint8_t data = 0x00;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]

//who am I
data = MPU_DATASHEET_ADDR ;
 8005184:	2368      	movs	r3, #104	; 0x68
 8005186:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, WHO_AM_I, 1, &data, 1, HAL_MAX_DELAY) ;
 8005188:	f04f 33ff 	mov.w	r3, #4294967295
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	2301      	movs	r3, #1
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	f107 030f 	add.w	r3, r7, #15
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	2301      	movs	r3, #1
 800519a:	2275      	movs	r2, #117	; 0x75
 800519c:	21d0      	movs	r1, #208	; 0xd0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd fa90 	bl	80026c4 <HAL_I2C_Mem_Read>
if (data != MPU_DATASHEET_ADDR) {
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b68      	cmp	r3, #104	; 0x68
 80051a8:	d003      	beq.n	80051b2 <Mpu6050_Init+0x3a>
	printf("who am i error \n");
 80051aa:	488f      	ldr	r0, [pc, #572]	; (80053e8 <Mpu6050_Init+0x270>)
 80051ac:	f000 ff90 	bl	80060d0 <puts>
 80051b0:	e007      	b.n	80051c2 <Mpu6050_Init+0x4a>
}else if (data == MPU_DATASHEET_ADDR ) {
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b68      	cmp	r3, #104	; 0x68
 80051b6:	d104      	bne.n	80051c2 <Mpu6050_Init+0x4a>
	printf("who am I value : %x \n", data) ;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	4619      	mov	r1, r3
 80051bc:	488b      	ldr	r0, [pc, #556]	; (80053ec <Mpu6050_Init+0x274>)
 80051be:	f000 ff01 	bl	8005fc4 <iprintf>
}

// power mannagment 1
data = 0x01 ;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	9302      	str	r3, [sp, #8]
 80051cc:	2301      	movs	r3, #1
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	f107 030f 	add.w	r3, r7, #15
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2301      	movs	r3, #1
 80051d8:	226b      	movs	r2, #107	; 0x6b
 80051da:	21d0      	movs	r1, #208	; 0xd0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7fd f977 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	2301      	movs	r3, #1
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	f107 030f 	add.w	r3, r7, #15
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	2301      	movs	r3, #1
 80051f4:	226b      	movs	r2, #107	; 0x6b
 80051f6:	21d0      	movs	r1, #208	; 0xd0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7fd fa63 	bl	80026c4 <HAL_I2C_Mem_Read>
if (data != 0x01) {
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d003      	beq.n	800520c <Mpu6050_Init+0x94>
	printf("pwr_mgmt1 error \n");
 8005204:	487a      	ldr	r0, [pc, #488]	; (80053f0 <Mpu6050_Init+0x278>)
 8005206:	f000 ff63 	bl	80060d0 <puts>
 800520a:	e007      	b.n	800521c <Mpu6050_Init+0xa4>
}else if (data == 0x01 ) {
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d104      	bne.n	800521c <Mpu6050_Init+0xa4>
	printf("pwr_mgmt1 value : %d \n", data) ;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	4619      	mov	r1, r3
 8005216:	4877      	ldr	r0, [pc, #476]	; (80053f4 <Mpu6050_Init+0x27c>)
 8005218:	f000 fed4 	bl	8005fc4 <iprintf>
}


// Configuration CONFIG 0x1A 26
data = 0x01;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8005220:	f04f 33ff 	mov.w	r3, #4294967295
 8005224:	9302      	str	r3, [sp, #8]
 8005226:	2301      	movs	r3, #1
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	f107 030f 	add.w	r3, r7, #15
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2301      	movs	r3, #1
 8005232:	221a      	movs	r2, #26
 8005234:	21d0      	movs	r1, #208	; 0xd0
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fd f94a 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	2301      	movs	r3, #1
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f107 030f 	add.w	r3, r7, #15
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2301      	movs	r3, #1
 800524e:	221a      	movs	r2, #26
 8005250:	21d0      	movs	r1, #208	; 0xd0
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd fa36 	bl	80026c4 <HAL_I2C_Mem_Read>

if (data != 0x01) {
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d003      	beq.n	8005266 <Mpu6050_Init+0xee>
	printf("config error \n");
 800525e:	4866      	ldr	r0, [pc, #408]	; (80053f8 <Mpu6050_Init+0x280>)
 8005260:	f000 ff36 	bl	80060d0 <puts>
 8005264:	e007      	b.n	8005276 <Mpu6050_Init+0xfe>
}else if (data == 0x01 ) {
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d104      	bne.n	8005276 <Mpu6050_Init+0xfe>
	printf("config value : %d \n", data) ;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	4619      	mov	r1, r3
 8005270:	4862      	ldr	r0, [pc, #392]	; (80053fc <Mpu6050_Init+0x284>)
 8005272:	f000 fea7 	bl	8005fc4 <iprintf>
}

// Sample rate divider
data = 0x04;
 8005276:	2304      	movs	r3, #4
 8005278:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	9302      	str	r3, [sp, #8]
 8005280:	2301      	movs	r3, #1
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	f107 030f 	add.w	r3, r7, #15
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2301      	movs	r3, #1
 800528c:	2219      	movs	r2, #25
 800528e:	21d0      	movs	r1, #208	; 0xd0
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd f91d 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	9302      	str	r3, [sp, #8]
 800529c:	2301      	movs	r3, #1
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	f107 030f 	add.w	r3, r7, #15
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2301      	movs	r3, #1
 80052a8:	2219      	movs	r2, #25
 80052aa:	21d0      	movs	r1, #208	; 0xd0
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fd fa09 	bl	80026c4 <HAL_I2C_Mem_Read>

if (data != 0x04) {
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d003      	beq.n	80052c0 <Mpu6050_Init+0x148>
	printf("sample rate divider error \n");
 80052b8:	4851      	ldr	r0, [pc, #324]	; (8005400 <Mpu6050_Init+0x288>)
 80052ba:	f000 ff09 	bl	80060d0 <puts>
 80052be:	e007      	b.n	80052d0 <Mpu6050_Init+0x158>
}else if (data == 0x04 ) {
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d104      	bne.n	80052d0 <Mpu6050_Init+0x158>
	printf("sample rate divider value : %d \n", data) ;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	4619      	mov	r1, r3
 80052ca:	484e      	ldr	r0, [pc, #312]	; (8005404 <Mpu6050_Init+0x28c>)
 80052cc:	f000 fe7a 	bl	8005fc4 <iprintf>
}


// Gyro Config
data = 0x08;
 80052d0:	2308      	movs	r3, #8
 80052d2:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80052d4:	f04f 33ff 	mov.w	r3, #4294967295
 80052d8:	9302      	str	r3, [sp, #8]
 80052da:	2301      	movs	r3, #1
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	f107 030f 	add.w	r3, r7, #15
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2301      	movs	r3, #1
 80052e6:	221b      	movs	r2, #27
 80052e8:	21d0      	movs	r1, #208	; 0xd0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fd f8f0 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	9302      	str	r3, [sp, #8]
 80052f6:	2301      	movs	r3, #1
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	f107 030f 	add.w	r3, r7, #15
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2301      	movs	r3, #1
 8005302:	221b      	movs	r2, #27
 8005304:	21d0      	movs	r1, #208	; 0xd0
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fd f9dc 	bl	80026c4 <HAL_I2C_Mem_Read>

if (data != 0x08) {
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b08      	cmp	r3, #8
 8005310:	d003      	beq.n	800531a <Mpu6050_Init+0x1a2>
	printf("Gyro config error \n ");
 8005312:	483d      	ldr	r0, [pc, #244]	; (8005408 <Mpu6050_Init+0x290>)
 8005314:	f000 fe56 	bl	8005fc4 <iprintf>
 8005318:	e007      	b.n	800532a <Mpu6050_Init+0x1b2>
}else if (data == 0x08 ) {
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <Mpu6050_Init+0x1b2>
	printf("gyro config value : %d \n", data) ;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	4619      	mov	r1, r3
 8005324:	4839      	ldr	r0, [pc, #228]	; (800540c <Mpu6050_Init+0x294>)
 8005326:	f000 fe4d 	bl	8005fc4 <iprintf>
}

// Accl Config
data = 0x00;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	2301      	movs	r3, #1
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	f107 030f 	add.w	r3, r7, #15
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	2301      	movs	r3, #1
 8005340:	221c      	movs	r2, #28
 8005342:	21d0      	movs	r1, #208	; 0xd0
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fd f8c3 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	2301      	movs	r3, #1
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	f107 030f 	add.w	r3, r7, #15
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2301      	movs	r3, #1
 800535c:	221c      	movs	r2, #28
 800535e:	21d0      	movs	r1, #208	; 0xd0
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fd f9af 	bl	80026c4 <HAL_I2C_Mem_Read>

if (data != 0x00) {
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <Mpu6050_Init+0x1fc>
	printf("Accl config error \n");
 800536c:	4828      	ldr	r0, [pc, #160]	; (8005410 <Mpu6050_Init+0x298>)
 800536e:	f000 feaf 	bl	80060d0 <puts>
 8005372:	e007      	b.n	8005384 <Mpu6050_Init+0x20c>
}else if (data == 0x00 ) {
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <Mpu6050_Init+0x20c>
	printf("Accl config value : %d \n", data) ;
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	4619      	mov	r1, r3
 800537e:	4825      	ldr	r0, [pc, #148]	; (8005414 <Mpu6050_Init+0x29c>)
 8005380:	f000 fe20 	bl	8005fc4 <iprintf>
}

// signal path reset
data = 0x07 ;
 8005384:	2307      	movs	r3, #7
 8005386:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8005388:	f04f 33ff 	mov.w	r3, #4294967295
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	2301      	movs	r3, #1
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	f107 030f 	add.w	r3, r7, #15
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2301      	movs	r3, #1
 800539a:	2268      	movs	r2, #104	; 0x68
 800539c:	21d0      	movs	r1, #208	; 0xd0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fd f896 	bl	80024d0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	2301      	movs	r3, #1
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	f107 030f 	add.w	r3, r7, #15
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2301      	movs	r3, #1
 80053b6:	2268      	movs	r2, #104	; 0x68
 80053b8:	21d0      	movs	r1, #208	; 0xd0
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd f982 	bl	80026c4 <HAL_I2C_Mem_Read>
if (data != 0x07) {
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	d003      	beq.n	80053ce <Mpu6050_Init+0x256>
	printf("(ignore) signal path reset error cannot read write only \n");
 80053c6:	4814      	ldr	r0, [pc, #80]	; (8005418 <Mpu6050_Init+0x2a0>)
 80053c8:	f000 fe82 	bl	80060d0 <puts>
}else if (data == 0x07 ) {
	printf("signal path reset value : %d \n", data) ;
}

}
 80053cc:	e007      	b.n	80053de <Mpu6050_Init+0x266>
}else if (data == 0x07 ) {
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b07      	cmp	r3, #7
 80053d2:	d104      	bne.n	80053de <Mpu6050_Init+0x266>
	printf("signal path reset value : %d \n", data) ;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4810      	ldr	r0, [pc, #64]	; (800541c <Mpu6050_Init+0x2a4>)
 80053da:	f000 fdf3 	bl	8005fc4 <iprintf>
}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08008b84 	.word	0x08008b84
 80053ec:	08008b94 	.word	0x08008b94
 80053f0:	08008bac 	.word	0x08008bac
 80053f4:	08008bc0 	.word	0x08008bc0
 80053f8:	08008bd8 	.word	0x08008bd8
 80053fc:	08008be8 	.word	0x08008be8
 8005400:	08008bfc 	.word	0x08008bfc
 8005404:	08008c18 	.word	0x08008c18
 8005408:	08008c3c 	.word	0x08008c3c
 800540c:	08008c54 	.word	0x08008c54
 8005410:	08008c70 	.word	0x08008c70
 8005414:	08008c84 	.word	0x08008c84
 8005418:	08008ca0 	.word	0x08008ca0
 800541c:	08008cdc 	.word	0x08008cdc

08005420 <gyro_calibrate>:
	printf("[DEBUG] pitch: %0.1lf ,roll=  %0.1lf ,yaw=  %0.1lf \n" , Gyro_Data->pitch , Gyro_Data->roll, Gyro_Data->yaw);
#endif

}

void gyro_calibrate (I2C_HandleTypeDef *hi2c , MPU_Gyro_calib_t * Calib_Data){
 8005420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005424:	b094      	sub	sp, #80	; 0x50
 8005426:	af04      	add	r7, sp, #16
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
	uint8_t data [6];
	int16_t gyro_x = 0 ;
 800542c:	2300      	movs	r3, #0
 800542e:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyro_y = 0 ;
 8005430:	2300      	movs	r3, #0
 8005432:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t gyro_z = 0 ;
 8005434:	2300      	movs	r3, #0
 8005436:	843b      	strh	r3, [r7, #32]

	float pitch , yaw , roll ;
	double pitch_cal =  0, yaw_cal =  0, roll_cal = 0;
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,16000  );
 800545c:	4b8a      	ldr	r3, [pc, #552]	; (8005688 <gyro_calibrate+0x268>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8005466:	210c      	movs	r1, #12
 8005468:	4887      	ldr	r0, [pc, #540]	; (8005688 <gyro_calibrate+0x268>)
 800546a:	f7fe fc79 	bl	8003d60 <HAL_TIM_PWM_Start>
	printf("/////////// CALIBRATING GYRO \\\\\\\\\\\\\\\\\\\\ \n") ;
 800546e:	4887      	ldr	r0, [pc, #540]	; (800568c <gyro_calibrate+0x26c>)
 8005470:	f000 fe2e 	bl	80060d0 <puts>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8005474:	2300      	movs	r3, #0
 8005476:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005478:	e085      	b.n	8005586 <gyro_calibrate+0x166>

		// needed to communicate with i2c based devices like gyroscope mpu6050
	   HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	9302      	str	r3, [sp, #8]
 8005480:	2306      	movs	r3, #6
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	f107 030c 	add.w	r3, r7, #12
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2301      	movs	r3, #1
 800548c:	2243      	movs	r2, #67	; 0x43
 800548e:	21d0      	movs	r1, #208	; 0xd0
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fd f917 	bl	80026c4 <HAL_I2C_Mem_Read>

	   gyro_x = data[0] << 8 | data[1] ;
 8005496:	7b3b      	ldrb	r3, [r7, #12]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	b21a      	sxth	r2, r3
 800549c:	7b7b      	ldrb	r3, [r7, #13]
 800549e:	b21b      	sxth	r3, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	84bb      	strh	r3, [r7, #36]	; 0x24
	   gyro_y = data[2] << 8 | data[3] ;
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	b21a      	sxth	r2, r3
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	847b      	strh	r3, [r7, #34]	; 0x22
	   gyro_z = data[4] << 8 | data[5] ;
 80054b2:	7c3b      	ldrb	r3, [r7, #16]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b21a      	sxth	r2, r3
 80054b8:	7c7b      	ldrb	r3, [r7, #17]
 80054ba:	b21b      	sxth	r3, r3
 80054bc:	4313      	orrs	r3, r2
 80054be:	843b      	strh	r3, [r7, #32]

	   pitch = gyro_x  / 65.5 ; // change in x
 80054c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fa ff9d 	bl	8000404 <__aeabi_i2d>
 80054ca:	a36d      	add	r3, pc, #436	; (adr r3, 8005680 <gyro_calibrate+0x260>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fb f92c 	bl	800072c <__aeabi_ddiv>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fb fad4 	bl	8000a88 <__aeabi_d2f>
 80054e0:	4603      	mov	r3, r0
 80054e2:	61fb      	str	r3, [r7, #28]
	   roll  = gyro_y  / 65.5 ;	// change in y
 80054e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fa ff8b 	bl	8000404 <__aeabi_i2d>
 80054ee:	a364      	add	r3, pc, #400	; (adr r3, 8005680 <gyro_calibrate+0x260>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fb f91a 	bl	800072c <__aeabi_ddiv>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	f7fb fac2 	bl	8000a88 <__aeabi_d2f>
 8005504:	4603      	mov	r3, r0
 8005506:	61bb      	str	r3, [r7, #24]
	   yaw   = gyro_z  / 65.5 ;	// change in z
 8005508:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fa ff79 	bl	8000404 <__aeabi_i2d>
 8005512:	a35b      	add	r3, pc, #364	; (adr r3, 8005680 <gyro_calibrate+0x260>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f7fb f908 	bl	800072c <__aeabi_ddiv>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	f7fb fab0 	bl	8000a88 <__aeabi_d2f>
 8005528:	4603      	mov	r3, r0
 800552a:	617b      	str	r3, [r7, #20]

	   pitch_cal += pitch ;  // this means pitch_cal = pitch + pitch_cal
 800552c:	69f8      	ldr	r0, [r7, #28]
 800552e:	f7fa ff7b 	bl	8000428 <__aeabi_f2d>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800553a:	f7fa fe17 	bl	800016c <__adddf3>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	   roll_cal += roll ;
 8005546:	69b8      	ldr	r0, [r7, #24]
 8005548:	f7fa ff6e 	bl	8000428 <__aeabi_f2d>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005554:	f7fa fe0a 	bl	800016c <__adddf3>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	   yaw_cal += yaw ;
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7fa ff61 	bl	8000428 <__aeabi_f2d>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800556e:	f7fa fdfd 	bl	800016c <__adddf3>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	   HAL_Delay(1) ;
 800557a:	2001      	movs	r0, #1
 800557c:	f7fc fbae 	bl	8001cdc <HAL_Delay>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8005580:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005582:	3301      	adds	r3, #1
 8005584:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005588:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800558c:	f4ff af75 	bcc.w	800547a <gyro_calibrate+0x5a>
	}

	// taking average
	pitch_cal = pitch_cal/ 4000  ;
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <gyro_calibrate+0x270>)
 8005596:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800559a:	f7fb f8c7 	bl	800072c <__aeabi_ddiv>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	roll_cal  = roll_cal / 4000  ;
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <gyro_calibrate+0x270>)
 80055ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055b0:	f7fb f8bc 	bl	800072c <__aeabi_ddiv>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	yaw_cal   = yaw_cal  / 4000  ;
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	4b33      	ldr	r3, [pc, #204]	; (8005690 <gyro_calibrate+0x270>)
 80055c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80055c6:	f7fb f8b1 	bl	800072c <__aeabi_ddiv>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	printf("cal values are  %lf , %lf , %lf \n" , pitch_cal , roll_cal , yaw_cal);
 80055d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055de:	e9cd 2300 	strd	r2, r3, [sp]
 80055e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055e6:	482b      	ldr	r0, [pc, #172]	; (8005694 <gyro_calibrate+0x274>)
 80055e8:	f000 fcec 	bl	8005fc4 <iprintf>

	Calib_Data->pitch = pitch_cal ;
 80055ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80055f0:	f7fb fa4a 	bl	8000a88 <__aeabi_d2f>
 80055f4:	4602      	mov	r2, r0
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	601a      	str	r2, [r3, #0]
	Calib_Data->roll  = roll_cal;
 80055fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055fe:	f7fb fa43 	bl	8000a88 <__aeabi_d2f>
 8005602:	4602      	mov	r2, r0
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	605a      	str	r2, [r3, #4]
	Calib_Data->yaw   = yaw_cal;
 8005608:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800560c:	f7fb fa3c 	bl	8000a88 <__aeabi_d2f>
 8005610:	4602      	mov	r2, r0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]

	printf("cal values are =  pitch : %lf ,roll: %lf ,yaw: %lf \n" , Calib_Data->pitch ,Calib_Data->roll , Calib_Data->yaw);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fa ff04 	bl	8000428 <__aeabi_f2d>
 8005620:	4680      	mov	r8, r0
 8005622:	4689      	mov	r9, r1
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa fefd 	bl	8000428 <__aeabi_f2d>
 800562e:	4604      	mov	r4, r0
 8005630:	460d      	mov	r5, r1
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fa fef6 	bl	8000428 <__aeabi_f2d>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005644:	e9cd 4500 	strd	r4, r5, [sp]
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	4812      	ldr	r0, [pc, #72]	; (8005698 <gyro_calibrate+0x278>)
 800564e:	f000 fcb9 	bl	8005fc4 <iprintf>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <gyro_calibrate+0x268>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <gyro_calibrate+0x268>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8005664:	2108      	movs	r1, #8
 8005666:	4808      	ldr	r0, [pc, #32]	; (8005688 <gyro_calibrate+0x268>)
 8005668:	f7fe fb7a 	bl	8003d60 <HAL_TIM_PWM_Start>
printf("/////////////// DONE GYRO CALIBRATION \\\\\\\\\\\\\\\\\\\\ \n") ;
 800566c:	480b      	ldr	r0, [pc, #44]	; (800569c <gyro_calibrate+0x27c>)
 800566e:	f000 fd2f 	bl	80060d0 <puts>

	}
	printf("[DEBUG] ///////// SAMPLE DATA END \\\\\\\\\\\ \n") ;
#endif

}
 8005672:	bf00      	nop
 8005674:	3740      	adds	r7, #64	; 0x40
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800567c:	f3af 8000 	nop.w
 8005680:	00000000 	.word	0x00000000
 8005684:	40506000 	.word	0x40506000
 8005688:	20000334 	.word	0x20000334
 800568c:	08008cfc 	.word	0x08008cfc
 8005690:	40af4000 	.word	0x40af4000
 8005694:	08008d28 	.word	0x08008d28
 8005698:	08008d4c 	.word	0x08008d4c
 800569c:	08008d84 	.word	0x08008d84

080056a0 <__errno>:
 80056a0:	4b01      	ldr	r3, [pc, #4]	; (80056a8 <__errno+0x8>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000000c 	.word	0x2000000c

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2600      	movs	r6, #0
 80056b0:	4d0c      	ldr	r5, [pc, #48]	; (80056e4 <__libc_init_array+0x38>)
 80056b2:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1b64      	subs	r4, r4, r5
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	f003 fa36 	bl	8008b2c <_init>
 80056c0:	2600      	movs	r6, #0
 80056c2:	4d0a      	ldr	r5, [pc, #40]	; (80056ec <__libc_init_array+0x40>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	; (80056f0 <__libc_init_array+0x44>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	080091d4 	.word	0x080091d4
 80056e8:	080091d4 	.word	0x080091d4
 80056ec:	080091d4 	.word	0x080091d4
 80056f0:	080091d8 	.word	0x080091d8

080056f4 <memset>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	4402      	add	r2, r0
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d100      	bne.n	80056fe <memset+0xa>
 80056fc:	4770      	bx	lr
 80056fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005702:	e7f9      	b.n	80056f8 <memset+0x4>

08005704 <__cvt>:
 8005704:	2b00      	cmp	r3, #0
 8005706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570a:	461f      	mov	r7, r3
 800570c:	bfbb      	ittet	lt
 800570e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005712:	461f      	movlt	r7, r3
 8005714:	2300      	movge	r3, #0
 8005716:	232d      	movlt	r3, #45	; 0x2d
 8005718:	b088      	sub	sp, #32
 800571a:	4614      	mov	r4, r2
 800571c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800571e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005720:	7013      	strb	r3, [r2, #0]
 8005722:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005724:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005728:	f023 0820 	bic.w	r8, r3, #32
 800572c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005730:	d005      	beq.n	800573e <__cvt+0x3a>
 8005732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005736:	d100      	bne.n	800573a <__cvt+0x36>
 8005738:	3501      	adds	r5, #1
 800573a:	2302      	movs	r3, #2
 800573c:	e000      	b.n	8005740 <__cvt+0x3c>
 800573e:	2303      	movs	r3, #3
 8005740:	aa07      	add	r2, sp, #28
 8005742:	9204      	str	r2, [sp, #16]
 8005744:	aa06      	add	r2, sp, #24
 8005746:	e9cd a202 	strd	sl, r2, [sp, #8]
 800574a:	e9cd 3500 	strd	r3, r5, [sp]
 800574e:	4622      	mov	r2, r4
 8005750:	463b      	mov	r3, r7
 8005752:	f000 fe11 	bl	8006378 <_dtoa_r>
 8005756:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800575a:	4606      	mov	r6, r0
 800575c:	d102      	bne.n	8005764 <__cvt+0x60>
 800575e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005760:	07db      	lsls	r3, r3, #31
 8005762:	d522      	bpl.n	80057aa <__cvt+0xa6>
 8005764:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005768:	eb06 0905 	add.w	r9, r6, r5
 800576c:	d110      	bne.n	8005790 <__cvt+0x8c>
 800576e:	7833      	ldrb	r3, [r6, #0]
 8005770:	2b30      	cmp	r3, #48	; 0x30
 8005772:	d10a      	bne.n	800578a <__cvt+0x86>
 8005774:	2200      	movs	r2, #0
 8005776:	2300      	movs	r3, #0
 8005778:	4620      	mov	r0, r4
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f914 	bl	80009a8 <__aeabi_dcmpeq>
 8005780:	b918      	cbnz	r0, 800578a <__cvt+0x86>
 8005782:	f1c5 0501 	rsb	r5, r5, #1
 8005786:	f8ca 5000 	str.w	r5, [sl]
 800578a:	f8da 3000 	ldr.w	r3, [sl]
 800578e:	4499      	add	r9, r3
 8005790:	2200      	movs	r2, #0
 8005792:	2300      	movs	r3, #0
 8005794:	4620      	mov	r0, r4
 8005796:	4639      	mov	r1, r7
 8005798:	f7fb f906 	bl	80009a8 <__aeabi_dcmpeq>
 800579c:	b108      	cbz	r0, 80057a2 <__cvt+0x9e>
 800579e:	f8cd 901c 	str.w	r9, [sp, #28]
 80057a2:	2230      	movs	r2, #48	; 0x30
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	454b      	cmp	r3, r9
 80057a8:	d307      	bcc.n	80057ba <__cvt+0xb6>
 80057aa:	4630      	mov	r0, r6
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057b0:	1b9b      	subs	r3, r3, r6
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	b008      	add	sp, #32
 80057b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ba:	1c59      	adds	r1, r3, #1
 80057bc:	9107      	str	r1, [sp, #28]
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e7f0      	b.n	80057a4 <__cvt+0xa0>

080057c2 <__exponent>:
 80057c2:	4603      	mov	r3, r0
 80057c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c6:	2900      	cmp	r1, #0
 80057c8:	f803 2b02 	strb.w	r2, [r3], #2
 80057cc:	bfb6      	itet	lt
 80057ce:	222d      	movlt	r2, #45	; 0x2d
 80057d0:	222b      	movge	r2, #43	; 0x2b
 80057d2:	4249      	neglt	r1, r1
 80057d4:	2909      	cmp	r1, #9
 80057d6:	7042      	strb	r2, [r0, #1]
 80057d8:	dd2b      	ble.n	8005832 <__exponent+0x70>
 80057da:	f10d 0407 	add.w	r4, sp, #7
 80057de:	46a4      	mov	ip, r4
 80057e0:	270a      	movs	r7, #10
 80057e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80057e6:	460a      	mov	r2, r1
 80057e8:	46a6      	mov	lr, r4
 80057ea:	fb07 1516 	mls	r5, r7, r6, r1
 80057ee:	2a63      	cmp	r2, #99	; 0x63
 80057f0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80057f4:	4631      	mov	r1, r6
 80057f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80057fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057fe:	dcf0      	bgt.n	80057e2 <__exponent+0x20>
 8005800:	3130      	adds	r1, #48	; 0x30
 8005802:	f1ae 0502 	sub.w	r5, lr, #2
 8005806:	f804 1c01 	strb.w	r1, [r4, #-1]
 800580a:	4629      	mov	r1, r5
 800580c:	1c44      	adds	r4, r0, #1
 800580e:	4561      	cmp	r1, ip
 8005810:	d30a      	bcc.n	8005828 <__exponent+0x66>
 8005812:	f10d 0209 	add.w	r2, sp, #9
 8005816:	eba2 020e 	sub.w	r2, r2, lr
 800581a:	4565      	cmp	r5, ip
 800581c:	bf88      	it	hi
 800581e:	2200      	movhi	r2, #0
 8005820:	4413      	add	r3, r2
 8005822:	1a18      	subs	r0, r3, r0
 8005824:	b003      	add	sp, #12
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800582c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005830:	e7ed      	b.n	800580e <__exponent+0x4c>
 8005832:	2330      	movs	r3, #48	; 0x30
 8005834:	3130      	adds	r1, #48	; 0x30
 8005836:	7083      	strb	r3, [r0, #2]
 8005838:	70c1      	strb	r1, [r0, #3]
 800583a:	1d03      	adds	r3, r0, #4
 800583c:	e7f1      	b.n	8005822 <__exponent+0x60>
	...

08005840 <_printf_float>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	b091      	sub	sp, #68	; 0x44
 8005846:	460c      	mov	r4, r1
 8005848:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800584c:	4616      	mov	r6, r2
 800584e:	461f      	mov	r7, r3
 8005850:	4605      	mov	r5, r0
 8005852:	f001 fd33 	bl	80072bc <_localeconv_r>
 8005856:	6803      	ldr	r3, [r0, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	9309      	str	r3, [sp, #36]	; 0x24
 800585c:	f7fa fc78 	bl	8000150 <strlen>
 8005860:	2300      	movs	r3, #0
 8005862:	930e      	str	r3, [sp, #56]	; 0x38
 8005864:	f8d8 3000 	ldr.w	r3, [r8]
 8005868:	900a      	str	r0, [sp, #40]	; 0x28
 800586a:	3307      	adds	r3, #7
 800586c:	f023 0307 	bic.w	r3, r3, #7
 8005870:	f103 0208 	add.w	r2, r3, #8
 8005874:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005878:	f8d4 b000 	ldr.w	fp, [r4]
 800587c:	f8c8 2000 	str.w	r2, [r8]
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005888:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800588c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005890:	930b      	str	r3, [sp, #44]	; 0x2c
 8005892:	f04f 32ff 	mov.w	r2, #4294967295
 8005896:	4640      	mov	r0, r8
 8005898:	4b9c      	ldr	r3, [pc, #624]	; (8005b0c <_printf_float+0x2cc>)
 800589a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800589c:	f7fb f8b6 	bl	8000a0c <__aeabi_dcmpun>
 80058a0:	bb70      	cbnz	r0, 8005900 <_printf_float+0xc0>
 80058a2:	f04f 32ff 	mov.w	r2, #4294967295
 80058a6:	4640      	mov	r0, r8
 80058a8:	4b98      	ldr	r3, [pc, #608]	; (8005b0c <_printf_float+0x2cc>)
 80058aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058ac:	f7fb f890 	bl	80009d0 <__aeabi_dcmple>
 80058b0:	bb30      	cbnz	r0, 8005900 <_printf_float+0xc0>
 80058b2:	2200      	movs	r2, #0
 80058b4:	2300      	movs	r3, #0
 80058b6:	4640      	mov	r0, r8
 80058b8:	4651      	mov	r1, sl
 80058ba:	f7fb f87f 	bl	80009bc <__aeabi_dcmplt>
 80058be:	b110      	cbz	r0, 80058c6 <_printf_float+0x86>
 80058c0:	232d      	movs	r3, #45	; 0x2d
 80058c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c6:	4b92      	ldr	r3, [pc, #584]	; (8005b10 <_printf_float+0x2d0>)
 80058c8:	4892      	ldr	r0, [pc, #584]	; (8005b14 <_printf_float+0x2d4>)
 80058ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058ce:	bf94      	ite	ls
 80058d0:	4698      	movls	r8, r3
 80058d2:	4680      	movhi	r8, r0
 80058d4:	2303      	movs	r3, #3
 80058d6:	f04f 0a00 	mov.w	sl, #0
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	f02b 0304 	bic.w	r3, fp, #4
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	4633      	mov	r3, r6
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	9700      	str	r7, [sp, #0]
 80058ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80058ec:	f000 f9d4 	bl	8005c98 <_printf_common>
 80058f0:	3001      	adds	r0, #1
 80058f2:	f040 8090 	bne.w	8005a16 <_printf_float+0x1d6>
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295
 80058fa:	b011      	add	sp, #68	; 0x44
 80058fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005900:	4642      	mov	r2, r8
 8005902:	4653      	mov	r3, sl
 8005904:	4640      	mov	r0, r8
 8005906:	4651      	mov	r1, sl
 8005908:	f7fb f880 	bl	8000a0c <__aeabi_dcmpun>
 800590c:	b148      	cbz	r0, 8005922 <_printf_float+0xe2>
 800590e:	f1ba 0f00 	cmp.w	sl, #0
 8005912:	bfb8      	it	lt
 8005914:	232d      	movlt	r3, #45	; 0x2d
 8005916:	4880      	ldr	r0, [pc, #512]	; (8005b18 <_printf_float+0x2d8>)
 8005918:	bfb8      	it	lt
 800591a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800591e:	4b7f      	ldr	r3, [pc, #508]	; (8005b1c <_printf_float+0x2dc>)
 8005920:	e7d3      	b.n	80058ca <_printf_float+0x8a>
 8005922:	6863      	ldr	r3, [r4, #4]
 8005924:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	d142      	bne.n	80059b2 <_printf_float+0x172>
 800592c:	2306      	movs	r3, #6
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	9206      	str	r2, [sp, #24]
 8005934:	aa0e      	add	r2, sp, #56	; 0x38
 8005936:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800593a:	aa0d      	add	r2, sp, #52	; 0x34
 800593c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005940:	9203      	str	r2, [sp, #12]
 8005942:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005946:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	4642      	mov	r2, r8
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4628      	mov	r0, r5
 8005954:	4653      	mov	r3, sl
 8005956:	910b      	str	r1, [sp, #44]	; 0x2c
 8005958:	f7ff fed4 	bl	8005704 <__cvt>
 800595c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800595e:	4680      	mov	r8, r0
 8005960:	2947      	cmp	r1, #71	; 0x47
 8005962:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005964:	d108      	bne.n	8005978 <_printf_float+0x138>
 8005966:	1cc8      	adds	r0, r1, #3
 8005968:	db02      	blt.n	8005970 <_printf_float+0x130>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	4299      	cmp	r1, r3
 800596e:	dd40      	ble.n	80059f2 <_printf_float+0x1b2>
 8005970:	f1a9 0902 	sub.w	r9, r9, #2
 8005974:	fa5f f989 	uxtb.w	r9, r9
 8005978:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800597c:	d81f      	bhi.n	80059be <_printf_float+0x17e>
 800597e:	464a      	mov	r2, r9
 8005980:	3901      	subs	r1, #1
 8005982:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005986:	910d      	str	r1, [sp, #52]	; 0x34
 8005988:	f7ff ff1b 	bl	80057c2 <__exponent>
 800598c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800598e:	4682      	mov	sl, r0
 8005990:	1813      	adds	r3, r2, r0
 8005992:	2a01      	cmp	r2, #1
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	dc02      	bgt.n	800599e <_printf_float+0x15e>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	07d2      	lsls	r2, r2, #31
 800599c:	d501      	bpl.n	80059a2 <_printf_float+0x162>
 800599e:	3301      	adds	r3, #1
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d09b      	beq.n	80058e2 <_printf_float+0xa2>
 80059aa:	232d      	movs	r3, #45	; 0x2d
 80059ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b0:	e797      	b.n	80058e2 <_printf_float+0xa2>
 80059b2:	2947      	cmp	r1, #71	; 0x47
 80059b4:	d1bc      	bne.n	8005930 <_printf_float+0xf0>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1ba      	bne.n	8005930 <_printf_float+0xf0>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e7b7      	b.n	800592e <_printf_float+0xee>
 80059be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059c2:	d118      	bne.n	80059f6 <_printf_float+0x1b6>
 80059c4:	2900      	cmp	r1, #0
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	dd0b      	ble.n	80059e2 <_printf_float+0x1a2>
 80059ca:	6121      	str	r1, [r4, #16]
 80059cc:	b913      	cbnz	r3, 80059d4 <_printf_float+0x194>
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	07d0      	lsls	r0, r2, #31
 80059d2:	d502      	bpl.n	80059da <_printf_float+0x19a>
 80059d4:	3301      	adds	r3, #1
 80059d6:	440b      	add	r3, r1
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	f04f 0a00 	mov.w	sl, #0
 80059de:	65a1      	str	r1, [r4, #88]	; 0x58
 80059e0:	e7df      	b.n	80059a2 <_printf_float+0x162>
 80059e2:	b913      	cbnz	r3, 80059ea <_printf_float+0x1aa>
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	07d2      	lsls	r2, r2, #31
 80059e8:	d501      	bpl.n	80059ee <_printf_float+0x1ae>
 80059ea:	3302      	adds	r3, #2
 80059ec:	e7f4      	b.n	80059d8 <_printf_float+0x198>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e7f2      	b.n	80059d8 <_printf_float+0x198>
 80059f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f8:	4299      	cmp	r1, r3
 80059fa:	db05      	blt.n	8005a08 <_printf_float+0x1c8>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	6121      	str	r1, [r4, #16]
 8005a00:	07d8      	lsls	r0, r3, #31
 8005a02:	d5ea      	bpl.n	80059da <_printf_float+0x19a>
 8005a04:	1c4b      	adds	r3, r1, #1
 8005a06:	e7e7      	b.n	80059d8 <_printf_float+0x198>
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	bfcc      	ite	gt
 8005a0c:	2201      	movgt	r2, #1
 8005a0e:	f1c1 0202 	rsble	r2, r1, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	e7e0      	b.n	80059d8 <_printf_float+0x198>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	055a      	lsls	r2, r3, #21
 8005a1a:	d407      	bmi.n	8005a2c <_printf_float+0x1ec>
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	4642      	mov	r2, r8
 8005a20:	4631      	mov	r1, r6
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b8      	blx	r7
 8005a26:	3001      	adds	r0, #1
 8005a28:	d12b      	bne.n	8005a82 <_printf_float+0x242>
 8005a2a:	e764      	b.n	80058f6 <_printf_float+0xb6>
 8005a2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a30:	f240 80dd 	bls.w	8005bee <_printf_float+0x3ae>
 8005a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f7fa ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d033      	beq.n	8005aac <_printf_float+0x26c>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	4a35      	ldr	r2, [pc, #212]	; (8005b20 <_printf_float+0x2e0>)
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af51 	beq.w	80058f6 <_printf_float+0xb6>
 8005a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	db02      	blt.n	8005a62 <_printf_float+0x222>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07d8      	lsls	r0, r3, #31
 8005a60:	d50f      	bpl.n	8005a82 <_printf_float+0x242>
 8005a62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	f43f af42 	beq.w	80058f6 <_printf_float+0xb6>
 8005a72:	f04f 0800 	mov.w	r8, #0
 8005a76:	f104 091a 	add.w	r9, r4, #26
 8005a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4543      	cmp	r3, r8
 8005a80:	dc09      	bgt.n	8005a96 <_printf_float+0x256>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	079b      	lsls	r3, r3, #30
 8005a86:	f100 8102 	bmi.w	8005c8e <_printf_float+0x44e>
 8005a8a:	68e0      	ldr	r0, [r4, #12]
 8005a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a8e:	4298      	cmp	r0, r3
 8005a90:	bfb8      	it	lt
 8005a92:	4618      	movlt	r0, r3
 8005a94:	e731      	b.n	80058fa <_printf_float+0xba>
 8005a96:	2301      	movs	r3, #1
 8005a98:	464a      	mov	r2, r9
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f af28 	beq.w	80058f6 <_printf_float+0xb6>
 8005aa6:	f108 0801 	add.w	r8, r8, #1
 8005aaa:	e7e6      	b.n	8005a7a <_printf_float+0x23a>
 8005aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dc38      	bgt.n	8005b24 <_printf_float+0x2e4>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <_printf_float+0x2e0>)
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	f43f af1a 	beq.w	80058f6 <_printf_float+0xb6>
 8005ac2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	d102      	bne.n	8005ad0 <_printf_float+0x290>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	07d9      	lsls	r1, r3, #31
 8005ace:	d5d8      	bpl.n	8005a82 <_printf_float+0x242>
 8005ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad4:	4631      	mov	r1, r6
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	f43f af0b 	beq.w	80058f6 <_printf_float+0xb6>
 8005ae0:	f04f 0900 	mov.w	r9, #0
 8005ae4:	f104 0a1a 	add.w	sl, r4, #26
 8005ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aea:	425b      	negs	r3, r3
 8005aec:	454b      	cmp	r3, r9
 8005aee:	dc01      	bgt.n	8005af4 <_printf_float+0x2b4>
 8005af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af2:	e794      	b.n	8005a1e <_printf_float+0x1de>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4652      	mov	r2, sl
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f aef9 	beq.w	80058f6 <_printf_float+0xb6>
 8005b04:	f109 0901 	add.w	r9, r9, #1
 8005b08:	e7ee      	b.n	8005ae8 <_printf_float+0x2a8>
 8005b0a:	bf00      	nop
 8005b0c:	7fefffff 	.word	0x7fefffff
 8005b10:	08008de8 	.word	0x08008de8
 8005b14:	08008dec 	.word	0x08008dec
 8005b18:	08008df4 	.word	0x08008df4
 8005b1c:	08008df0 	.word	0x08008df0
 8005b20:	08008df8 	.word	0x08008df8
 8005b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	bfa8      	it	ge
 8005b2c:	461a      	movge	r2, r3
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	4691      	mov	r9, r2
 8005b32:	dc37      	bgt.n	8005ba4 <_printf_float+0x364>
 8005b34:	f04f 0b00 	mov.w	fp, #0
 8005b38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b3c:	f104 021a 	add.w	r2, r4, #26
 8005b40:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b44:	ebaa 0309 	sub.w	r3, sl, r9
 8005b48:	455b      	cmp	r3, fp
 8005b4a:	dc33      	bgt.n	8005bb4 <_printf_float+0x374>
 8005b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b50:	429a      	cmp	r2, r3
 8005b52:	db3b      	blt.n	8005bcc <_printf_float+0x38c>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	07da      	lsls	r2, r3, #31
 8005b58:	d438      	bmi.n	8005bcc <_printf_float+0x38c>
 8005b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b5e:	eba3 020a 	sub.w	r2, r3, sl
 8005b62:	eba3 0901 	sub.w	r9, r3, r1
 8005b66:	4591      	cmp	r9, r2
 8005b68:	bfa8      	it	ge
 8005b6a:	4691      	movge	r9, r2
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	dc34      	bgt.n	8005bdc <_printf_float+0x39c>
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b7a:	f104 0a1a 	add.w	sl, r4, #26
 8005b7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	eba3 0309 	sub.w	r3, r3, r9
 8005b88:	4543      	cmp	r3, r8
 8005b8a:	f77f af7a 	ble.w	8005a82 <_printf_float+0x242>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4652      	mov	r2, sl
 8005b92:	4631      	mov	r1, r6
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b8      	blx	r7
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f43f aeac 	beq.w	80058f6 <_printf_float+0xb6>
 8005b9e:	f108 0801 	add.w	r8, r8, #1
 8005ba2:	e7ec      	b.n	8005b7e <_printf_float+0x33e>
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	4642      	mov	r2, r8
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d1c0      	bne.n	8005b34 <_printf_float+0x2f4>
 8005bb2:	e6a0      	b.n	80058f6 <_printf_float+0xb6>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f ae99 	beq.w	80058f6 <_printf_float+0xb6>
 8005bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bc6:	f10b 0b01 	add.w	fp, fp, #1
 8005bca:	e7b9      	b.n	8005b40 <_printf_float+0x300>
 8005bcc:	4631      	mov	r1, r6
 8005bce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d1bf      	bne.n	8005b5a <_printf_float+0x31a>
 8005bda:	e68c      	b.n	80058f6 <_printf_float+0xb6>
 8005bdc:	464b      	mov	r3, r9
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	eb08 020a 	add.w	r2, r8, sl
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d1c2      	bne.n	8005b72 <_printf_float+0x332>
 8005bec:	e683      	b.n	80058f6 <_printf_float+0xb6>
 8005bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bf0:	2a01      	cmp	r2, #1
 8005bf2:	dc01      	bgt.n	8005bf8 <_printf_float+0x3b8>
 8005bf4:	07db      	lsls	r3, r3, #31
 8005bf6:	d537      	bpl.n	8005c68 <_printf_float+0x428>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f ae77 	beq.w	80058f6 <_printf_float+0xb6>
 8005c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f ae6f 	beq.w	80058f6 <_printf_float+0xb6>
 8005c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f7fa fec2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c24:	b9d8      	cbnz	r0, 8005c5e <_printf_float+0x41e>
 8005c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c28:	f108 0201 	add.w	r2, r8, #1
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	d10e      	bne.n	8005c56 <_printf_float+0x416>
 8005c38:	e65d      	b.n	80058f6 <_printf_float+0xb6>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae56 	beq.w	80058f6 <_printf_float+0xb6>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c50:	3b01      	subs	r3, #1
 8005c52:	4543      	cmp	r3, r8
 8005c54:	dcf1      	bgt.n	8005c3a <_printf_float+0x3fa>
 8005c56:	4653      	mov	r3, sl
 8005c58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c5c:	e6e0      	b.n	8005a20 <_printf_float+0x1e0>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	f104 091a 	add.w	r9, r4, #26
 8005c66:	e7f2      	b.n	8005c4e <_printf_float+0x40e>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	e7df      	b.n	8005c2e <_printf_float+0x3ee>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	464a      	mov	r2, r9
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f ae3c 	beq.w	80058f6 <_printf_float+0xb6>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	68e3      	ldr	r3, [r4, #12]
 8005c84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	4543      	cmp	r3, r8
 8005c8a:	dcf0      	bgt.n	8005c6e <_printf_float+0x42e>
 8005c8c:	e6fd      	b.n	8005a8a <_printf_float+0x24a>
 8005c8e:	f04f 0800 	mov.w	r8, #0
 8005c92:	f104 0919 	add.w	r9, r4, #25
 8005c96:	e7f4      	b.n	8005c82 <_printf_float+0x442>

08005c98 <_printf_common>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	688a      	ldr	r2, [r1, #8]
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	bfb8      	it	lt
 8005caa:	4613      	movlt	r3, r2
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cb8:	b10a      	cbz	r2, 8005cbe <_printf_common+0x26>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	0699      	lsls	r1, r3, #26
 8005cc2:	bf42      	ittt	mi
 8005cc4:	6833      	ldrmi	r3, [r6, #0]
 8005cc6:	3302      	addmi	r3, #2
 8005cc8:	6033      	strmi	r3, [r6, #0]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d106      	bne.n	8005ce0 <_printf_common+0x48>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	6832      	ldr	r2, [r6, #0]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc28      	bgt.n	8005d32 <_printf_common+0x9a>
 8005ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ce4:	1e13      	subs	r3, r2, #0
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	0692      	lsls	r2, r2, #26
 8005cee:	d42d      	bmi.n	8005d4c <_printf_common+0xb4>
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cf8:	47c0      	blx	r8
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d020      	beq.n	8005d40 <_printf_common+0xa8>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	68e5      	ldr	r5, [r4, #12]
 8005d02:	f003 0306 	and.w	r3, r3, #6
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	bf18      	it	ne
 8005d0a:	2500      	movne	r5, #0
 8005d0c:	6832      	ldr	r2, [r6, #0]
 8005d0e:	f04f 0600 	mov.w	r6, #0
 8005d12:	68a3      	ldr	r3, [r4, #8]
 8005d14:	bf08      	it	eq
 8005d16:	1aad      	subeq	r5, r5, r2
 8005d18:	6922      	ldr	r2, [r4, #16]
 8005d1a:	bf08      	it	eq
 8005d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bfc4      	itt	gt
 8005d24:	1a9b      	subgt	r3, r3, r2
 8005d26:	18ed      	addgt	r5, r5, r3
 8005d28:	341a      	adds	r4, #26
 8005d2a:	42b5      	cmp	r5, r6
 8005d2c:	d11a      	bne.n	8005d64 <_printf_common+0xcc>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	e008      	b.n	8005d44 <_printf_common+0xac>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4652      	mov	r2, sl
 8005d36:	4649      	mov	r1, r9
 8005d38:	4638      	mov	r0, r7
 8005d3a:	47c0      	blx	r8
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d103      	bne.n	8005d48 <_printf_common+0xb0>
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d48:	3501      	adds	r5, #1
 8005d4a:	e7c4      	b.n	8005cd6 <_printf_common+0x3e>
 8005d4c:	2030      	movs	r0, #48	; 0x30
 8005d4e:	18e1      	adds	r1, r4, r3
 8005d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d5a:	4422      	add	r2, r4
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d62:	e7c5      	b.n	8005cf0 <_printf_common+0x58>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4622      	mov	r2, r4
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0e6      	beq.n	8005d40 <_printf_common+0xa8>
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7d9      	b.n	8005d2a <_printf_common+0x92>
	...

08005d78 <_printf_i>:
 8005d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	7e0f      	ldrb	r7, [r1, #24]
 8005d7e:	4691      	mov	r9, r2
 8005d80:	2f78      	cmp	r7, #120	; 0x78
 8005d82:	4680      	mov	r8, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	469a      	mov	sl, r3
 8005d88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d8e:	d807      	bhi.n	8005da0 <_printf_i+0x28>
 8005d90:	2f62      	cmp	r7, #98	; 0x62
 8005d92:	d80a      	bhi.n	8005daa <_printf_i+0x32>
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	f000 80d9 	beq.w	8005f4c <_printf_i+0x1d4>
 8005d9a:	2f58      	cmp	r7, #88	; 0x58
 8005d9c:	f000 80a4 	beq.w	8005ee8 <_printf_i+0x170>
 8005da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005da8:	e03a      	b.n	8005e20 <_printf_i+0xa8>
 8005daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dae:	2b15      	cmp	r3, #21
 8005db0:	d8f6      	bhi.n	8005da0 <_printf_i+0x28>
 8005db2:	a101      	add	r1, pc, #4	; (adr r1, 8005db8 <_printf_i+0x40>)
 8005db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e25 	.word	0x08005e25
 8005dc0:	08005da1 	.word	0x08005da1
 8005dc4:	08005da1 	.word	0x08005da1
 8005dc8:	08005da1 	.word	0x08005da1
 8005dcc:	08005da1 	.word	0x08005da1
 8005dd0:	08005e25 	.word	0x08005e25
 8005dd4:	08005da1 	.word	0x08005da1
 8005dd8:	08005da1 	.word	0x08005da1
 8005ddc:	08005da1 	.word	0x08005da1
 8005de0:	08005da1 	.word	0x08005da1
 8005de4:	08005f33 	.word	0x08005f33
 8005de8:	08005e55 	.word	0x08005e55
 8005dec:	08005f15 	.word	0x08005f15
 8005df0:	08005da1 	.word	0x08005da1
 8005df4:	08005da1 	.word	0x08005da1
 8005df8:	08005f55 	.word	0x08005f55
 8005dfc:	08005da1 	.word	0x08005da1
 8005e00:	08005e55 	.word	0x08005e55
 8005e04:	08005da1 	.word	0x08005da1
 8005e08:	08005da1 	.word	0x08005da1
 8005e0c:	08005f1d 	.word	0x08005f1d
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	602a      	str	r2, [r5, #0]
 8005e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0a4      	b.n	8005f6e <_printf_i+0x1f6>
 8005e24:	6820      	ldr	r0, [r4, #0]
 8005e26:	6829      	ldr	r1, [r5, #0]
 8005e28:	0606      	lsls	r6, r0, #24
 8005e2a:	f101 0304 	add.w	r3, r1, #4
 8005e2e:	d50a      	bpl.n	8005e46 <_printf_i+0xce>
 8005e30:	680e      	ldr	r6, [r1, #0]
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	da03      	bge.n	8005e40 <_printf_i+0xc8>
 8005e38:	232d      	movs	r3, #45	; 0x2d
 8005e3a:	4276      	negs	r6, r6
 8005e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e40:	230a      	movs	r3, #10
 8005e42:	485e      	ldr	r0, [pc, #376]	; (8005fbc <_printf_i+0x244>)
 8005e44:	e019      	b.n	8005e7a <_printf_i+0x102>
 8005e46:	680e      	ldr	r6, [r1, #0]
 8005e48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	bf18      	it	ne
 8005e50:	b236      	sxthne	r6, r6
 8005e52:	e7ef      	b.n	8005e34 <_printf_i+0xbc>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	6820      	ldr	r0, [r4, #0]
 8005e58:	1d19      	adds	r1, r3, #4
 8005e5a:	6029      	str	r1, [r5, #0]
 8005e5c:	0601      	lsls	r1, r0, #24
 8005e5e:	d501      	bpl.n	8005e64 <_printf_i+0xec>
 8005e60:	681e      	ldr	r6, [r3, #0]
 8005e62:	e002      	b.n	8005e6a <_printf_i+0xf2>
 8005e64:	0646      	lsls	r6, r0, #25
 8005e66:	d5fb      	bpl.n	8005e60 <_printf_i+0xe8>
 8005e68:	881e      	ldrh	r6, [r3, #0]
 8005e6a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e6c:	bf0c      	ite	eq
 8005e6e:	2308      	moveq	r3, #8
 8005e70:	230a      	movne	r3, #10
 8005e72:	4852      	ldr	r0, [pc, #328]	; (8005fbc <_printf_i+0x244>)
 8005e74:	2100      	movs	r1, #0
 8005e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e7a:	6865      	ldr	r5, [r4, #4]
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	bfa8      	it	ge
 8005e80:	6821      	ldrge	r1, [r4, #0]
 8005e82:	60a5      	str	r5, [r4, #8]
 8005e84:	bfa4      	itt	ge
 8005e86:	f021 0104 	bicge.w	r1, r1, #4
 8005e8a:	6021      	strge	r1, [r4, #0]
 8005e8c:	b90e      	cbnz	r6, 8005e92 <_printf_i+0x11a>
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	d04d      	beq.n	8005f2e <_printf_i+0x1b6>
 8005e92:	4615      	mov	r5, r2
 8005e94:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e98:	fb03 6711 	mls	r7, r3, r1, r6
 8005e9c:	5dc7      	ldrb	r7, [r0, r7]
 8005e9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ea2:	4637      	mov	r7, r6
 8005ea4:	42bb      	cmp	r3, r7
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	d9f4      	bls.n	8005e94 <_printf_i+0x11c>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d10b      	bne.n	8005ec6 <_printf_i+0x14e>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	07de      	lsls	r6, r3, #31
 8005eb2:	d508      	bpl.n	8005ec6 <_printf_i+0x14e>
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	bfde      	ittt	le
 8005ebc:	2330      	movle	r3, #48	; 0x30
 8005ebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ec2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ec6:	1b52      	subs	r2, r2, r5
 8005ec8:	6122      	str	r2, [r4, #16]
 8005eca:	464b      	mov	r3, r9
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f8cd a000 	str.w	sl, [sp]
 8005ed4:	aa03      	add	r2, sp, #12
 8005ed6:	f7ff fedf 	bl	8005c98 <_printf_common>
 8005eda:	3001      	adds	r0, #1
 8005edc:	d14c      	bne.n	8005f78 <_printf_i+0x200>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b004      	add	sp, #16
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	4834      	ldr	r0, [pc, #208]	; (8005fbc <_printf_i+0x244>)
 8005eea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005eee:	6829      	ldr	r1, [r5, #0]
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ef6:	6029      	str	r1, [r5, #0]
 8005ef8:	061d      	lsls	r5, r3, #24
 8005efa:	d514      	bpl.n	8005f26 <_printf_i+0x1ae>
 8005efc:	07df      	lsls	r7, r3, #31
 8005efe:	bf44      	itt	mi
 8005f00:	f043 0320 	orrmi.w	r3, r3, #32
 8005f04:	6023      	strmi	r3, [r4, #0]
 8005f06:	b91e      	cbnz	r6, 8005f10 <_printf_i+0x198>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f023 0320 	bic.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	2310      	movs	r3, #16
 8005f12:	e7af      	b.n	8005e74 <_printf_i+0xfc>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	f043 0320 	orr.w	r3, r3, #32
 8005f1a:	6023      	str	r3, [r4, #0]
 8005f1c:	2378      	movs	r3, #120	; 0x78
 8005f1e:	4828      	ldr	r0, [pc, #160]	; (8005fc0 <_printf_i+0x248>)
 8005f20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f24:	e7e3      	b.n	8005eee <_printf_i+0x176>
 8005f26:	0659      	lsls	r1, r3, #25
 8005f28:	bf48      	it	mi
 8005f2a:	b2b6      	uxthmi	r6, r6
 8005f2c:	e7e6      	b.n	8005efc <_printf_i+0x184>
 8005f2e:	4615      	mov	r5, r2
 8005f30:	e7bb      	b.n	8005eaa <_printf_i+0x132>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	6826      	ldr	r6, [r4, #0]
 8005f36:	1d18      	adds	r0, r3, #4
 8005f38:	6961      	ldr	r1, [r4, #20]
 8005f3a:	6028      	str	r0, [r5, #0]
 8005f3c:	0635      	lsls	r5, r6, #24
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	d501      	bpl.n	8005f46 <_printf_i+0x1ce>
 8005f42:	6019      	str	r1, [r3, #0]
 8005f44:	e002      	b.n	8005f4c <_printf_i+0x1d4>
 8005f46:	0670      	lsls	r0, r6, #25
 8005f48:	d5fb      	bpl.n	8005f42 <_printf_i+0x1ca>
 8005f4a:	8019      	strh	r1, [r3, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4615      	mov	r5, r2
 8005f50:	6123      	str	r3, [r4, #16]
 8005f52:	e7ba      	b.n	8005eca <_printf_i+0x152>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	2100      	movs	r1, #0
 8005f58:	1d1a      	adds	r2, r3, #4
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	6862      	ldr	r2, [r4, #4]
 8005f60:	4628      	mov	r0, r5
 8005f62:	f001 fa1f 	bl	80073a4 <memchr>
 8005f66:	b108      	cbz	r0, 8005f6c <_printf_i+0x1f4>
 8005f68:	1b40      	subs	r0, r0, r5
 8005f6a:	6060      	str	r0, [r4, #4]
 8005f6c:	6863      	ldr	r3, [r4, #4]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2300      	movs	r3, #0
 8005f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f76:	e7a8      	b.n	8005eca <_printf_i+0x152>
 8005f78:	462a      	mov	r2, r5
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	47d0      	blx	sl
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0ab      	beq.n	8005ede <_printf_i+0x166>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	079b      	lsls	r3, r3, #30
 8005f8a:	d413      	bmi.n	8005fb4 <_printf_i+0x23c>
 8005f8c:	68e0      	ldr	r0, [r4, #12]
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	4298      	cmp	r0, r3
 8005f92:	bfb8      	it	lt
 8005f94:	4618      	movlt	r0, r3
 8005f96:	e7a4      	b.n	8005ee2 <_printf_i+0x16a>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	47d0      	blx	sl
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d09b      	beq.n	8005ede <_printf_i+0x166>
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	9903      	ldr	r1, [sp, #12]
 8005fac:	1a5b      	subs	r3, r3, r1
 8005fae:	42ab      	cmp	r3, r5
 8005fb0:	dcf2      	bgt.n	8005f98 <_printf_i+0x220>
 8005fb2:	e7eb      	b.n	8005f8c <_printf_i+0x214>
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	f104 0619 	add.w	r6, r4, #25
 8005fba:	e7f5      	b.n	8005fa8 <_printf_i+0x230>
 8005fbc:	08008dfa 	.word	0x08008dfa
 8005fc0:	08008e0b 	.word	0x08008e0b

08005fc4 <iprintf>:
 8005fc4:	b40f      	push	{r0, r1, r2, r3}
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <iprintf+0x2c>)
 8005fc8:	b513      	push	{r0, r1, r4, lr}
 8005fca:	681c      	ldr	r4, [r3, #0]
 8005fcc:	b124      	cbz	r4, 8005fd8 <iprintf+0x14>
 8005fce:	69a3      	ldr	r3, [r4, #24]
 8005fd0:	b913      	cbnz	r3, 8005fd8 <iprintf+0x14>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f001 f8d4 	bl	8007180 <__sinit>
 8005fd8:	ab05      	add	r3, sp, #20
 8005fda:	4620      	mov	r0, r4
 8005fdc:	9a04      	ldr	r2, [sp, #16]
 8005fde:	68a1      	ldr	r1, [r4, #8]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	f001 fe95 	bl	8007d10 <_vfiprintf_r>
 8005fe6:	b002      	add	sp, #8
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	b004      	add	sp, #16
 8005fee:	4770      	bx	lr
 8005ff0:	2000000c 	.word	0x2000000c

08005ff4 <_puts_r>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	460e      	mov	r6, r1
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	b118      	cbz	r0, 8006004 <_puts_r+0x10>
 8005ffc:	6983      	ldr	r3, [r0, #24]
 8005ffe:	b90b      	cbnz	r3, 8006004 <_puts_r+0x10>
 8006000:	f001 f8be 	bl	8007180 <__sinit>
 8006004:	69ab      	ldr	r3, [r5, #24]
 8006006:	68ac      	ldr	r4, [r5, #8]
 8006008:	b913      	cbnz	r3, 8006010 <_puts_r+0x1c>
 800600a:	4628      	mov	r0, r5
 800600c:	f001 f8b8 	bl	8007180 <__sinit>
 8006010:	4b2c      	ldr	r3, [pc, #176]	; (80060c4 <_puts_r+0xd0>)
 8006012:	429c      	cmp	r4, r3
 8006014:	d120      	bne.n	8006058 <_puts_r+0x64>
 8006016:	686c      	ldr	r4, [r5, #4]
 8006018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d405      	bmi.n	800602a <_puts_r+0x36>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d402      	bmi.n	800602a <_puts_r+0x36>
 8006024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006026:	f001 f94e 	bl	80072c6 <__retarget_lock_acquire_recursive>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	0719      	lsls	r1, r3, #28
 800602e:	d51d      	bpl.n	800606c <_puts_r+0x78>
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	b1db      	cbz	r3, 800606c <_puts_r+0x78>
 8006034:	3e01      	subs	r6, #1
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800603c:	3b01      	subs	r3, #1
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	bb39      	cbnz	r1, 8006092 <_puts_r+0x9e>
 8006042:	2b00      	cmp	r3, #0
 8006044:	da38      	bge.n	80060b8 <_puts_r+0xc4>
 8006046:	4622      	mov	r2, r4
 8006048:	210a      	movs	r1, #10
 800604a:	4628      	mov	r0, r5
 800604c:	f000 f848 	bl	80060e0 <__swbuf_r>
 8006050:	3001      	adds	r0, #1
 8006052:	d011      	beq.n	8006078 <_puts_r+0x84>
 8006054:	250a      	movs	r5, #10
 8006056:	e011      	b.n	800607c <_puts_r+0x88>
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <_puts_r+0xd4>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d101      	bne.n	8006062 <_puts_r+0x6e>
 800605e:	68ac      	ldr	r4, [r5, #8]
 8006060:	e7da      	b.n	8006018 <_puts_r+0x24>
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <_puts_r+0xd8>)
 8006064:	429c      	cmp	r4, r3
 8006066:	bf08      	it	eq
 8006068:	68ec      	ldreq	r4, [r5, #12]
 800606a:	e7d5      	b.n	8006018 <_puts_r+0x24>
 800606c:	4621      	mov	r1, r4
 800606e:	4628      	mov	r0, r5
 8006070:	f000 f888 	bl	8006184 <__swsetup_r>
 8006074:	2800      	cmp	r0, #0
 8006076:	d0dd      	beq.n	8006034 <_puts_r+0x40>
 8006078:	f04f 35ff 	mov.w	r5, #4294967295
 800607c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800607e:	07da      	lsls	r2, r3, #31
 8006080:	d405      	bmi.n	800608e <_puts_r+0x9a>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	059b      	lsls	r3, r3, #22
 8006086:	d402      	bmi.n	800608e <_puts_r+0x9a>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f001 f91d 	bl	80072c8 <__retarget_lock_release_recursive>
 800608e:	4628      	mov	r0, r5
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	2b00      	cmp	r3, #0
 8006094:	da04      	bge.n	80060a0 <_puts_r+0xac>
 8006096:	69a2      	ldr	r2, [r4, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	dc06      	bgt.n	80060aa <_puts_r+0xb6>
 800609c:	290a      	cmp	r1, #10
 800609e:	d004      	beq.n	80060aa <_puts_r+0xb6>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	7019      	strb	r1, [r3, #0]
 80060a8:	e7c5      	b.n	8006036 <_puts_r+0x42>
 80060aa:	4622      	mov	r2, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 f817 	bl	80060e0 <__swbuf_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1bf      	bne.n	8006036 <_puts_r+0x42>
 80060b6:	e7df      	b.n	8006078 <_puts_r+0x84>
 80060b8:	250a      	movs	r5, #10
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	701d      	strb	r5, [r3, #0]
 80060c2:	e7db      	b.n	800607c <_puts_r+0x88>
 80060c4:	08008ecc 	.word	0x08008ecc
 80060c8:	08008eec 	.word	0x08008eec
 80060cc:	08008eac 	.word	0x08008eac

080060d0 <puts>:
 80060d0:	4b02      	ldr	r3, [pc, #8]	; (80060dc <puts+0xc>)
 80060d2:	4601      	mov	r1, r0
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	f7ff bf8d 	b.w	8005ff4 <_puts_r>
 80060da:	bf00      	nop
 80060dc:	2000000c 	.word	0x2000000c

080060e0 <__swbuf_r>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	460e      	mov	r6, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	4605      	mov	r5, r0
 80060e8:	b118      	cbz	r0, 80060f2 <__swbuf_r+0x12>
 80060ea:	6983      	ldr	r3, [r0, #24]
 80060ec:	b90b      	cbnz	r3, 80060f2 <__swbuf_r+0x12>
 80060ee:	f001 f847 	bl	8007180 <__sinit>
 80060f2:	4b21      	ldr	r3, [pc, #132]	; (8006178 <__swbuf_r+0x98>)
 80060f4:	429c      	cmp	r4, r3
 80060f6:	d12b      	bne.n	8006150 <__swbuf_r+0x70>
 80060f8:	686c      	ldr	r4, [r5, #4]
 80060fa:	69a3      	ldr	r3, [r4, #24]
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	071a      	lsls	r2, r3, #28
 8006102:	d52f      	bpl.n	8006164 <__swbuf_r+0x84>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	b36b      	cbz	r3, 8006164 <__swbuf_r+0x84>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	b2f6      	uxtb	r6, r6
 800610e:	1ac0      	subs	r0, r0, r3
 8006110:	6963      	ldr	r3, [r4, #20]
 8006112:	4637      	mov	r7, r6
 8006114:	4283      	cmp	r3, r0
 8006116:	dc04      	bgt.n	8006122 <__swbuf_r+0x42>
 8006118:	4621      	mov	r1, r4
 800611a:	4628      	mov	r0, r5
 800611c:	f000 ff9c 	bl	8007058 <_fflush_r>
 8006120:	bb30      	cbnz	r0, 8006170 <__swbuf_r+0x90>
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	3001      	adds	r0, #1
 8006126:	3b01      	subs	r3, #1
 8006128:	60a3      	str	r3, [r4, #8]
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	701e      	strb	r6, [r3, #0]
 8006132:	6963      	ldr	r3, [r4, #20]
 8006134:	4283      	cmp	r3, r0
 8006136:	d004      	beq.n	8006142 <__swbuf_r+0x62>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	07db      	lsls	r3, r3, #31
 800613c:	d506      	bpl.n	800614c <__swbuf_r+0x6c>
 800613e:	2e0a      	cmp	r6, #10
 8006140:	d104      	bne.n	800614c <__swbuf_r+0x6c>
 8006142:	4621      	mov	r1, r4
 8006144:	4628      	mov	r0, r5
 8006146:	f000 ff87 	bl	8007058 <_fflush_r>
 800614a:	b988      	cbnz	r0, 8006170 <__swbuf_r+0x90>
 800614c:	4638      	mov	r0, r7
 800614e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <__swbuf_r+0x9c>)
 8006152:	429c      	cmp	r4, r3
 8006154:	d101      	bne.n	800615a <__swbuf_r+0x7a>
 8006156:	68ac      	ldr	r4, [r5, #8]
 8006158:	e7cf      	b.n	80060fa <__swbuf_r+0x1a>
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <__swbuf_r+0xa0>)
 800615c:	429c      	cmp	r4, r3
 800615e:	bf08      	it	eq
 8006160:	68ec      	ldreq	r4, [r5, #12]
 8006162:	e7ca      	b.n	80060fa <__swbuf_r+0x1a>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f80c 	bl	8006184 <__swsetup_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0cb      	beq.n	8006108 <__swbuf_r+0x28>
 8006170:	f04f 37ff 	mov.w	r7, #4294967295
 8006174:	e7ea      	b.n	800614c <__swbuf_r+0x6c>
 8006176:	bf00      	nop
 8006178:	08008ecc 	.word	0x08008ecc
 800617c:	08008eec 	.word	0x08008eec
 8006180:	08008eac 	.word	0x08008eac

08006184 <__swsetup_r>:
 8006184:	4b32      	ldr	r3, [pc, #200]	; (8006250 <__swsetup_r+0xcc>)
 8006186:	b570      	push	{r4, r5, r6, lr}
 8006188:	681d      	ldr	r5, [r3, #0]
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	b125      	cbz	r5, 800619a <__swsetup_r+0x16>
 8006190:	69ab      	ldr	r3, [r5, #24]
 8006192:	b913      	cbnz	r3, 800619a <__swsetup_r+0x16>
 8006194:	4628      	mov	r0, r5
 8006196:	f000 fff3 	bl	8007180 <__sinit>
 800619a:	4b2e      	ldr	r3, [pc, #184]	; (8006254 <__swsetup_r+0xd0>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d10f      	bne.n	80061c0 <__swsetup_r+0x3c>
 80061a0:	686c      	ldr	r4, [r5, #4]
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061a8:	0719      	lsls	r1, r3, #28
 80061aa:	d42c      	bmi.n	8006206 <__swsetup_r+0x82>
 80061ac:	06dd      	lsls	r5, r3, #27
 80061ae:	d411      	bmi.n	80061d4 <__swsetup_r+0x50>
 80061b0:	2309      	movs	r3, #9
 80061b2:	6033      	str	r3, [r6, #0]
 80061b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	e03e      	b.n	800623e <__swsetup_r+0xba>
 80061c0:	4b25      	ldr	r3, [pc, #148]	; (8006258 <__swsetup_r+0xd4>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d101      	bne.n	80061ca <__swsetup_r+0x46>
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	e7eb      	b.n	80061a2 <__swsetup_r+0x1e>
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <__swsetup_r+0xd8>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	bf08      	it	eq
 80061d0:	68ec      	ldreq	r4, [r5, #12]
 80061d2:	e7e6      	b.n	80061a2 <__swsetup_r+0x1e>
 80061d4:	0758      	lsls	r0, r3, #29
 80061d6:	d512      	bpl.n	80061fe <__swsetup_r+0x7a>
 80061d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061da:	b141      	cbz	r1, 80061ee <__swsetup_r+0x6a>
 80061dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061e0:	4299      	cmp	r1, r3
 80061e2:	d002      	beq.n	80061ea <__swsetup_r+0x66>
 80061e4:	4630      	mov	r0, r6
 80061e6:	f001 fc8f 	bl	8007b08 <_free_r>
 80061ea:	2300      	movs	r3, #0
 80061ec:	6363      	str	r3, [r4, #52]	; 0x34
 80061ee:	89a3      	ldrh	r3, [r4, #12]
 80061f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	2300      	movs	r3, #0
 80061f8:	6063      	str	r3, [r4, #4]
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f043 0308 	orr.w	r3, r3, #8
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	b94b      	cbnz	r3, 800621e <__swsetup_r+0x9a>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006214:	d003      	beq.n	800621e <__swsetup_r+0x9a>
 8006216:	4621      	mov	r1, r4
 8006218:	4630      	mov	r0, r6
 800621a:	f001 f87b 	bl	8007314 <__smakebuf_r>
 800621e:	89a0      	ldrh	r0, [r4, #12]
 8006220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006224:	f010 0301 	ands.w	r3, r0, #1
 8006228:	d00a      	beq.n	8006240 <__swsetup_r+0xbc>
 800622a:	2300      	movs	r3, #0
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6963      	ldr	r3, [r4, #20]
 8006230:	425b      	negs	r3, r3
 8006232:	61a3      	str	r3, [r4, #24]
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	b943      	cbnz	r3, 800624a <__swsetup_r+0xc6>
 8006238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800623c:	d1ba      	bne.n	80061b4 <__swsetup_r+0x30>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	0781      	lsls	r1, r0, #30
 8006242:	bf58      	it	pl
 8006244:	6963      	ldrpl	r3, [r4, #20]
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	e7f4      	b.n	8006234 <__swsetup_r+0xb0>
 800624a:	2000      	movs	r0, #0
 800624c:	e7f7      	b.n	800623e <__swsetup_r+0xba>
 800624e:	bf00      	nop
 8006250:	2000000c 	.word	0x2000000c
 8006254:	08008ecc 	.word	0x08008ecc
 8006258:	08008eec 	.word	0x08008eec
 800625c:	08008eac 	.word	0x08008eac

08006260 <quorem>:
 8006260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	6903      	ldr	r3, [r0, #16]
 8006266:	690c      	ldr	r4, [r1, #16]
 8006268:	4607      	mov	r7, r0
 800626a:	42a3      	cmp	r3, r4
 800626c:	f2c0 8082 	blt.w	8006374 <quorem+0x114>
 8006270:	3c01      	subs	r4, #1
 8006272:	f100 0514 	add.w	r5, r0, #20
 8006276:	f101 0814 	add.w	r8, r1, #20
 800627a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006288:	3301      	adds	r3, #1
 800628a:	429a      	cmp	r2, r3
 800628c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006298:	d331      	bcc.n	80062fe <quorem+0x9e>
 800629a:	f04f 0e00 	mov.w	lr, #0
 800629e:	4640      	mov	r0, r8
 80062a0:	46ac      	mov	ip, r5
 80062a2:	46f2      	mov	sl, lr
 80062a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80062a8:	b293      	uxth	r3, r2
 80062aa:	fb06 e303 	mla	r3, r6, r3, lr
 80062ae:	0c12      	lsrs	r2, r2, #16
 80062b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	fb06 e202 	mla	r2, r6, r2, lr
 80062ba:	ebaa 0303 	sub.w	r3, sl, r3
 80062be:	f8dc a000 	ldr.w	sl, [ip]
 80062c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062c6:	fa1f fa8a 	uxth.w	sl, sl
 80062ca:	4453      	add	r3, sl
 80062cc:	f8dc a000 	ldr.w	sl, [ip]
 80062d0:	b292      	uxth	r2, r2
 80062d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062da:	b29b      	uxth	r3, r3
 80062dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062e0:	4581      	cmp	r9, r0
 80062e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062e6:	f84c 3b04 	str.w	r3, [ip], #4
 80062ea:	d2db      	bcs.n	80062a4 <quorem+0x44>
 80062ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80062f0:	b92b      	cbnz	r3, 80062fe <quorem+0x9e>
 80062f2:	9b01      	ldr	r3, [sp, #4]
 80062f4:	3b04      	subs	r3, #4
 80062f6:	429d      	cmp	r5, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	d32f      	bcc.n	800635c <quorem+0xfc>
 80062fc:	613c      	str	r4, [r7, #16]
 80062fe:	4638      	mov	r0, r7
 8006300:	f001 faea 	bl	80078d8 <__mcmp>
 8006304:	2800      	cmp	r0, #0
 8006306:	db25      	blt.n	8006354 <quorem+0xf4>
 8006308:	4628      	mov	r0, r5
 800630a:	f04f 0c00 	mov.w	ip, #0
 800630e:	3601      	adds	r6, #1
 8006310:	f858 1b04 	ldr.w	r1, [r8], #4
 8006314:	f8d0 e000 	ldr.w	lr, [r0]
 8006318:	b28b      	uxth	r3, r1
 800631a:	ebac 0303 	sub.w	r3, ip, r3
 800631e:	fa1f f28e 	uxth.w	r2, lr
 8006322:	4413      	add	r3, r2
 8006324:	0c0a      	lsrs	r2, r1, #16
 8006326:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800632a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006334:	45c1      	cmp	r9, r8
 8006336:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800633a:	f840 3b04 	str.w	r3, [r0], #4
 800633e:	d2e7      	bcs.n	8006310 <quorem+0xb0>
 8006340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006344:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006348:	b922      	cbnz	r2, 8006354 <quorem+0xf4>
 800634a:	3b04      	subs	r3, #4
 800634c:	429d      	cmp	r5, r3
 800634e:	461a      	mov	r2, r3
 8006350:	d30a      	bcc.n	8006368 <quorem+0x108>
 8006352:	613c      	str	r4, [r7, #16]
 8006354:	4630      	mov	r0, r6
 8006356:	b003      	add	sp, #12
 8006358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	3b04      	subs	r3, #4
 8006360:	2a00      	cmp	r2, #0
 8006362:	d1cb      	bne.n	80062fc <quorem+0x9c>
 8006364:	3c01      	subs	r4, #1
 8006366:	e7c6      	b.n	80062f6 <quorem+0x96>
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	3b04      	subs	r3, #4
 800636c:	2a00      	cmp	r2, #0
 800636e:	d1f0      	bne.n	8006352 <quorem+0xf2>
 8006370:	3c01      	subs	r4, #1
 8006372:	e7eb      	b.n	800634c <quorem+0xec>
 8006374:	2000      	movs	r0, #0
 8006376:	e7ee      	b.n	8006356 <quorem+0xf6>

08006378 <_dtoa_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4616      	mov	r6, r2
 800637e:	461f      	mov	r7, r3
 8006380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006382:	b099      	sub	sp, #100	; 0x64
 8006384:	4605      	mov	r5, r0
 8006386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800638a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800638e:	b974      	cbnz	r4, 80063ae <_dtoa_r+0x36>
 8006390:	2010      	movs	r0, #16
 8006392:	f000 ffff 	bl	8007394 <malloc>
 8006396:	4602      	mov	r2, r0
 8006398:	6268      	str	r0, [r5, #36]	; 0x24
 800639a:	b920      	cbnz	r0, 80063a6 <_dtoa_r+0x2e>
 800639c:	21ea      	movs	r1, #234	; 0xea
 800639e:	4ba8      	ldr	r3, [pc, #672]	; (8006640 <_dtoa_r+0x2c8>)
 80063a0:	48a8      	ldr	r0, [pc, #672]	; (8006644 <_dtoa_r+0x2cc>)
 80063a2:	f001 fe4b 	bl	800803c <__assert_func>
 80063a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063aa:	6004      	str	r4, [r0, #0]
 80063ac:	60c4      	str	r4, [r0, #12]
 80063ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	b151      	cbz	r1, 80063ca <_dtoa_r+0x52>
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	2301      	movs	r3, #1
 80063b8:	4093      	lsls	r3, r2
 80063ba:	604a      	str	r2, [r1, #4]
 80063bc:	608b      	str	r3, [r1, #8]
 80063be:	4628      	mov	r0, r5
 80063c0:	f001 f84c 	bl	800745c <_Bfree>
 80063c4:	2200      	movs	r2, #0
 80063c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	1e3b      	subs	r3, r7, #0
 80063cc:	bfaf      	iteee	ge
 80063ce:	2300      	movge	r3, #0
 80063d0:	2201      	movlt	r2, #1
 80063d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	9305      	strlt	r3, [sp, #20]
 80063d8:	bfa8      	it	ge
 80063da:	f8c8 3000 	strge.w	r3, [r8]
 80063de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063e2:	4b99      	ldr	r3, [pc, #612]	; (8006648 <_dtoa_r+0x2d0>)
 80063e4:	bfb8      	it	lt
 80063e6:	f8c8 2000 	strlt.w	r2, [r8]
 80063ea:	ea33 0309 	bics.w	r3, r3, r9
 80063ee:	d119      	bne.n	8006424 <_dtoa_r+0xac>
 80063f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80063f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063fc:	4333      	orrs	r3, r6
 80063fe:	f000 857f 	beq.w	8006f00 <_dtoa_r+0xb88>
 8006402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006404:	b953      	cbnz	r3, 800641c <_dtoa_r+0xa4>
 8006406:	4b91      	ldr	r3, [pc, #580]	; (800664c <_dtoa_r+0x2d4>)
 8006408:	e022      	b.n	8006450 <_dtoa_r+0xd8>
 800640a:	4b91      	ldr	r3, [pc, #580]	; (8006650 <_dtoa_r+0x2d8>)
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	3308      	adds	r3, #8
 8006410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	9803      	ldr	r0, [sp, #12]
 8006416:	b019      	add	sp, #100	; 0x64
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	4b8b      	ldr	r3, [pc, #556]	; (800664c <_dtoa_r+0x2d4>)
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	3303      	adds	r3, #3
 8006422:	e7f5      	b.n	8006410 <_dtoa_r+0x98>
 8006424:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006428:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800642c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	f7fa fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8006438:	4680      	mov	r8, r0
 800643a:	b158      	cbz	r0, 8006454 <_dtoa_r+0xdc>
 800643c:	2301      	movs	r3, #1
 800643e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8558 	beq.w	8006efa <_dtoa_r+0xb82>
 800644a:	4882      	ldr	r0, [pc, #520]	; (8006654 <_dtoa_r+0x2dc>)
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	e7df      	b.n	8006414 <_dtoa_r+0x9c>
 8006454:	ab16      	add	r3, sp, #88	; 0x58
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	ab17      	add	r3, sp, #92	; 0x5c
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4628      	mov	r0, r5
 800645e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006462:	f001 fae1 	bl	8007a28 <__d2b>
 8006466:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800646a:	4683      	mov	fp, r0
 800646c:	2c00      	cmp	r4, #0
 800646e:	d07f      	beq.n	8006570 <_dtoa_r+0x1f8>
 8006470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006476:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800647a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800647e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006482:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006486:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800648a:	2200      	movs	r2, #0
 800648c:	4b72      	ldr	r3, [pc, #456]	; (8006658 <_dtoa_r+0x2e0>)
 800648e:	f7f9 fe6b 	bl	8000168 <__aeabi_dsub>
 8006492:	a365      	add	r3, pc, #404	; (adr r3, 8006628 <_dtoa_r+0x2b0>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7fa f81e 	bl	80004d8 <__aeabi_dmul>
 800649c:	a364      	add	r3, pc, #400	; (adr r3, 8006630 <_dtoa_r+0x2b8>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7f9 fe63 	bl	800016c <__adddf3>
 80064a6:	4606      	mov	r6, r0
 80064a8:	4620      	mov	r0, r4
 80064aa:	460f      	mov	r7, r1
 80064ac:	f7f9 ffaa 	bl	8000404 <__aeabi_i2d>
 80064b0:	a361      	add	r3, pc, #388	; (adr r3, 8006638 <_dtoa_r+0x2c0>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7fa f80f 	bl	80004d8 <__aeabi_dmul>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7f9 fe53 	bl	800016c <__adddf3>
 80064c6:	4606      	mov	r6, r0
 80064c8:	460f      	mov	r7, r1
 80064ca:	f7fa fab5 	bl	8000a38 <__aeabi_d2iz>
 80064ce:	2200      	movs	r2, #0
 80064d0:	4682      	mov	sl, r0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7fa fa70 	bl	80009bc <__aeabi_dcmplt>
 80064dc:	b148      	cbz	r0, 80064f2 <_dtoa_r+0x17a>
 80064de:	4650      	mov	r0, sl
 80064e0:	f7f9 ff90 	bl	8000404 <__aeabi_i2d>
 80064e4:	4632      	mov	r2, r6
 80064e6:	463b      	mov	r3, r7
 80064e8:	f7fa fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80064ec:	b908      	cbnz	r0, 80064f2 <_dtoa_r+0x17a>
 80064ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064f2:	f1ba 0f16 	cmp.w	sl, #22
 80064f6:	d858      	bhi.n	80065aa <_dtoa_r+0x232>
 80064f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064fc:	4b57      	ldr	r3, [pc, #348]	; (800665c <_dtoa_r+0x2e4>)
 80064fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa fa59 	bl	80009bc <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	d04f      	beq.n	80065ae <_dtoa_r+0x236>
 800650e:	2300      	movs	r3, #0
 8006510:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006514:	930f      	str	r3, [sp, #60]	; 0x3c
 8006516:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006518:	1b1c      	subs	r4, r3, r4
 800651a:	1e63      	subs	r3, r4, #1
 800651c:	9309      	str	r3, [sp, #36]	; 0x24
 800651e:	bf49      	itett	mi
 8006520:	f1c4 0301 	rsbmi	r3, r4, #1
 8006524:	2300      	movpl	r3, #0
 8006526:	9306      	strmi	r3, [sp, #24]
 8006528:	2300      	movmi	r3, #0
 800652a:	bf54      	ite	pl
 800652c:	9306      	strpl	r3, [sp, #24]
 800652e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006530:	f1ba 0f00 	cmp.w	sl, #0
 8006534:	db3d      	blt.n	80065b2 <_dtoa_r+0x23a>
 8006536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006538:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800653c:	4453      	add	r3, sl
 800653e:	9309      	str	r3, [sp, #36]	; 0x24
 8006540:	2300      	movs	r3, #0
 8006542:	930a      	str	r3, [sp, #40]	; 0x28
 8006544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006546:	2b09      	cmp	r3, #9
 8006548:	f200 808c 	bhi.w	8006664 <_dtoa_r+0x2ec>
 800654c:	2b05      	cmp	r3, #5
 800654e:	bfc4      	itt	gt
 8006550:	3b04      	subgt	r3, #4
 8006552:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006556:	bfc8      	it	gt
 8006558:	2400      	movgt	r4, #0
 800655a:	f1a3 0302 	sub.w	r3, r3, #2
 800655e:	bfd8      	it	le
 8006560:	2401      	movle	r4, #1
 8006562:	2b03      	cmp	r3, #3
 8006564:	f200 808a 	bhi.w	800667c <_dtoa_r+0x304>
 8006568:	e8df f003 	tbb	[pc, r3]
 800656c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006570:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006574:	441c      	add	r4, r3
 8006576:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800657a:	2b20      	cmp	r3, #32
 800657c:	bfc3      	ittte	gt
 800657e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006582:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006586:	fa09 f303 	lslgt.w	r3, r9, r3
 800658a:	f1c3 0320 	rsble	r3, r3, #32
 800658e:	bfc6      	itte	gt
 8006590:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006594:	4318      	orrgt	r0, r3
 8006596:	fa06 f003 	lslle.w	r0, r6, r3
 800659a:	f7f9 ff23 	bl	80003e4 <__aeabi_ui2d>
 800659e:	2301      	movs	r3, #1
 80065a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065a4:	3c01      	subs	r4, #1
 80065a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80065a8:	e76f      	b.n	800648a <_dtoa_r+0x112>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7b2      	b.n	8006514 <_dtoa_r+0x19c>
 80065ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80065b0:	e7b1      	b.n	8006516 <_dtoa_r+0x19e>
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	eba3 030a 	sub.w	r3, r3, sl
 80065b8:	9306      	str	r3, [sp, #24]
 80065ba:	f1ca 0300 	rsb	r3, sl, #0
 80065be:	930a      	str	r3, [sp, #40]	; 0x28
 80065c0:	2300      	movs	r3, #0
 80065c2:	930e      	str	r3, [sp, #56]	; 0x38
 80065c4:	e7be      	b.n	8006544 <_dtoa_r+0x1cc>
 80065c6:	2300      	movs	r3, #0
 80065c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dc58      	bgt.n	8006682 <_dtoa_r+0x30a>
 80065d0:	f04f 0901 	mov.w	r9, #1
 80065d4:	464b      	mov	r3, r9
 80065d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80065da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80065de:	2200      	movs	r2, #0
 80065e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80065e2:	6042      	str	r2, [r0, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	f102 0614 	add.w	r6, r2, #20
 80065ea:	429e      	cmp	r6, r3
 80065ec:	6841      	ldr	r1, [r0, #4]
 80065ee:	d94e      	bls.n	800668e <_dtoa_r+0x316>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 fef3 	bl	80073dc <_Balloc>
 80065f6:	9003      	str	r0, [sp, #12]
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d14c      	bne.n	8006696 <_dtoa_r+0x31e>
 80065fc:	4602      	mov	r2, r0
 80065fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006602:	4b17      	ldr	r3, [pc, #92]	; (8006660 <_dtoa_r+0x2e8>)
 8006604:	e6cc      	b.n	80063a0 <_dtoa_r+0x28>
 8006606:	2301      	movs	r3, #1
 8006608:	e7de      	b.n	80065c8 <_dtoa_r+0x250>
 800660a:	2300      	movs	r3, #0
 800660c:	930b      	str	r3, [sp, #44]	; 0x2c
 800660e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006610:	eb0a 0903 	add.w	r9, sl, r3
 8006614:	f109 0301 	add.w	r3, r9, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	bfb8      	it	lt
 800661e:	2301      	movlt	r3, #1
 8006620:	e7dd      	b.n	80065de <_dtoa_r+0x266>
 8006622:	2301      	movs	r3, #1
 8006624:	e7f2      	b.n	800660c <_dtoa_r+0x294>
 8006626:	bf00      	nop
 8006628:	636f4361 	.word	0x636f4361
 800662c:	3fd287a7 	.word	0x3fd287a7
 8006630:	8b60c8b3 	.word	0x8b60c8b3
 8006634:	3fc68a28 	.word	0x3fc68a28
 8006638:	509f79fb 	.word	0x509f79fb
 800663c:	3fd34413 	.word	0x3fd34413
 8006640:	08008e29 	.word	0x08008e29
 8006644:	08008e40 	.word	0x08008e40
 8006648:	7ff00000 	.word	0x7ff00000
 800664c:	08008e25 	.word	0x08008e25
 8006650:	08008e1c 	.word	0x08008e1c
 8006654:	08008df9 	.word	0x08008df9
 8006658:	3ff80000 	.word	0x3ff80000
 800665c:	08008f90 	.word	0x08008f90
 8006660:	08008e9b 	.word	0x08008e9b
 8006664:	2401      	movs	r4, #1
 8006666:	2300      	movs	r3, #0
 8006668:	940b      	str	r4, [sp, #44]	; 0x2c
 800666a:	9322      	str	r3, [sp, #136]	; 0x88
 800666c:	f04f 39ff 	mov.w	r9, #4294967295
 8006670:	2200      	movs	r2, #0
 8006672:	2312      	movs	r3, #18
 8006674:	f8cd 9020 	str.w	r9, [sp, #32]
 8006678:	9223      	str	r2, [sp, #140]	; 0x8c
 800667a:	e7b0      	b.n	80065de <_dtoa_r+0x266>
 800667c:	2301      	movs	r3, #1
 800667e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006680:	e7f4      	b.n	800666c <_dtoa_r+0x2f4>
 8006682:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006686:	464b      	mov	r3, r9
 8006688:	f8cd 9020 	str.w	r9, [sp, #32]
 800668c:	e7a7      	b.n	80065de <_dtoa_r+0x266>
 800668e:	3101      	adds	r1, #1
 8006690:	6041      	str	r1, [r0, #4]
 8006692:	0052      	lsls	r2, r2, #1
 8006694:	e7a7      	b.n	80065e6 <_dtoa_r+0x26e>
 8006696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006698:	9a03      	ldr	r2, [sp, #12]
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	2b0e      	cmp	r3, #14
 80066a0:	f200 80a8 	bhi.w	80067f4 <_dtoa_r+0x47c>
 80066a4:	2c00      	cmp	r4, #0
 80066a6:	f000 80a5 	beq.w	80067f4 <_dtoa_r+0x47c>
 80066aa:	f1ba 0f00 	cmp.w	sl, #0
 80066ae:	dd34      	ble.n	800671a <_dtoa_r+0x3a2>
 80066b0:	4a9a      	ldr	r2, [pc, #616]	; (800691c <_dtoa_r+0x5a4>)
 80066b2:	f00a 030f 	and.w	r3, sl, #15
 80066b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80066be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80066ca:	d016      	beq.n	80066fa <_dtoa_r+0x382>
 80066cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d0:	4b93      	ldr	r3, [pc, #588]	; (8006920 <_dtoa_r+0x5a8>)
 80066d2:	2703      	movs	r7, #3
 80066d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d8:	f7fa f828 	bl	800072c <__aeabi_ddiv>
 80066dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e0:	f004 040f 	and.w	r4, r4, #15
 80066e4:	4e8e      	ldr	r6, [pc, #568]	; (8006920 <_dtoa_r+0x5a8>)
 80066e6:	b954      	cbnz	r4, 80066fe <_dtoa_r+0x386>
 80066e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f0:	f7fa f81c 	bl	800072c <__aeabi_ddiv>
 80066f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f8:	e029      	b.n	800674e <_dtoa_r+0x3d6>
 80066fa:	2702      	movs	r7, #2
 80066fc:	e7f2      	b.n	80066e4 <_dtoa_r+0x36c>
 80066fe:	07e1      	lsls	r1, r4, #31
 8006700:	d508      	bpl.n	8006714 <_dtoa_r+0x39c>
 8006702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800670a:	f7f9 fee5 	bl	80004d8 <__aeabi_dmul>
 800670e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006712:	3701      	adds	r7, #1
 8006714:	1064      	asrs	r4, r4, #1
 8006716:	3608      	adds	r6, #8
 8006718:	e7e5      	b.n	80066e6 <_dtoa_r+0x36e>
 800671a:	f000 80a5 	beq.w	8006868 <_dtoa_r+0x4f0>
 800671e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006722:	f1ca 0400 	rsb	r4, sl, #0
 8006726:	4b7d      	ldr	r3, [pc, #500]	; (800691c <_dtoa_r+0x5a4>)
 8006728:	f004 020f 	and.w	r2, r4, #15
 800672c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 fed0 	bl	80004d8 <__aeabi_dmul>
 8006738:	2702      	movs	r7, #2
 800673a:	2300      	movs	r3, #0
 800673c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006740:	4e77      	ldr	r6, [pc, #476]	; (8006920 <_dtoa_r+0x5a8>)
 8006742:	1124      	asrs	r4, r4, #4
 8006744:	2c00      	cmp	r4, #0
 8006746:	f040 8084 	bne.w	8006852 <_dtoa_r+0x4da>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1d2      	bne.n	80066f4 <_dtoa_r+0x37c>
 800674e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 808b 	beq.w	800686c <_dtoa_r+0x4f4>
 8006756:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800675a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800675e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006762:	2200      	movs	r2, #0
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <_dtoa_r+0x5ac>)
 8006766:	f7fa f929 	bl	80009bc <__aeabi_dcmplt>
 800676a:	2800      	cmp	r0, #0
 800676c:	d07e      	beq.n	800686c <_dtoa_r+0x4f4>
 800676e:	9b08      	ldr	r3, [sp, #32]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d07b      	beq.n	800686c <_dtoa_r+0x4f4>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	dd38      	ble.n	80067ec <_dtoa_r+0x474>
 800677a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800677e:	2200      	movs	r2, #0
 8006780:	4b69      	ldr	r3, [pc, #420]	; (8006928 <_dtoa_r+0x5b0>)
 8006782:	f7f9 fea9 	bl	80004d8 <__aeabi_dmul>
 8006786:	464c      	mov	r4, r9
 8006788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800678c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006790:	3701      	adds	r7, #1
 8006792:	4638      	mov	r0, r7
 8006794:	f7f9 fe36 	bl	8000404 <__aeabi_i2d>
 8006798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800679c:	f7f9 fe9c 	bl	80004d8 <__aeabi_dmul>
 80067a0:	2200      	movs	r2, #0
 80067a2:	4b62      	ldr	r3, [pc, #392]	; (800692c <_dtoa_r+0x5b4>)
 80067a4:	f7f9 fce2 	bl	800016c <__adddf3>
 80067a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80067ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b0:	9611      	str	r6, [sp, #68]	; 0x44
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	d15d      	bne.n	8006872 <_dtoa_r+0x4fa>
 80067b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ba:	2200      	movs	r2, #0
 80067bc:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <_dtoa_r+0x5b8>)
 80067be:	f7f9 fcd3 	bl	8000168 <__aeabi_dsub>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067ca:	4633      	mov	r3, r6
 80067cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ce:	f7fa f913 	bl	80009f8 <__aeabi_dcmpgt>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f040 829c 	bne.w	8006d10 <_dtoa_r+0x998>
 80067d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067e2:	f7fa f8eb 	bl	80009bc <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f040 8290 	bne.w	8006d0c <_dtoa_r+0x994>
 80067ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80067f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f2c0 8152 	blt.w	8006aa0 <_dtoa_r+0x728>
 80067fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006800:	f300 814e 	bgt.w	8006aa0 <_dtoa_r+0x728>
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <_dtoa_r+0x5a4>)
 8006806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800680a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800680e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006814:	2b00      	cmp	r3, #0
 8006816:	f280 80db 	bge.w	80069d0 <_dtoa_r+0x658>
 800681a:	9b08      	ldr	r3, [sp, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f300 80d7 	bgt.w	80069d0 <_dtoa_r+0x658>
 8006822:	f040 8272 	bne.w	8006d0a <_dtoa_r+0x992>
 8006826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800682a:	2200      	movs	r2, #0
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <_dtoa_r+0x5b8>)
 800682e:	f7f9 fe53 	bl	80004d8 <__aeabi_dmul>
 8006832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006836:	f7fa f8d5 	bl	80009e4 <__aeabi_dcmpge>
 800683a:	9c08      	ldr	r4, [sp, #32]
 800683c:	4626      	mov	r6, r4
 800683e:	2800      	cmp	r0, #0
 8006840:	f040 8248 	bne.w	8006cd4 <_dtoa_r+0x95c>
 8006844:	2331      	movs	r3, #49	; 0x31
 8006846:	9f03      	ldr	r7, [sp, #12]
 8006848:	f10a 0a01 	add.w	sl, sl, #1
 800684c:	f807 3b01 	strb.w	r3, [r7], #1
 8006850:	e244      	b.n	8006cdc <_dtoa_r+0x964>
 8006852:	07e2      	lsls	r2, r4, #31
 8006854:	d505      	bpl.n	8006862 <_dtoa_r+0x4ea>
 8006856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800685a:	f7f9 fe3d 	bl	80004d8 <__aeabi_dmul>
 800685e:	2301      	movs	r3, #1
 8006860:	3701      	adds	r7, #1
 8006862:	1064      	asrs	r4, r4, #1
 8006864:	3608      	adds	r6, #8
 8006866:	e76d      	b.n	8006744 <_dtoa_r+0x3cc>
 8006868:	2702      	movs	r7, #2
 800686a:	e770      	b.n	800674e <_dtoa_r+0x3d6>
 800686c:	46d0      	mov	r8, sl
 800686e:	9c08      	ldr	r4, [sp, #32]
 8006870:	e78f      	b.n	8006792 <_dtoa_r+0x41a>
 8006872:	9903      	ldr	r1, [sp, #12]
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <_dtoa_r+0x5a4>)
 8006876:	4421      	add	r1, r4
 8006878:	9112      	str	r1, [sp, #72]	; 0x48
 800687a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800687c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006880:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006884:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006888:	2900      	cmp	r1, #0
 800688a:	d055      	beq.n	8006938 <_dtoa_r+0x5c0>
 800688c:	2000      	movs	r0, #0
 800688e:	4929      	ldr	r1, [pc, #164]	; (8006934 <_dtoa_r+0x5bc>)
 8006890:	f7f9 ff4c 	bl	800072c <__aeabi_ddiv>
 8006894:	463b      	mov	r3, r7
 8006896:	4632      	mov	r2, r6
 8006898:	f7f9 fc66 	bl	8000168 <__aeabi_dsub>
 800689c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a0:	9f03      	ldr	r7, [sp, #12]
 80068a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a6:	f7fa f8c7 	bl	8000a38 <__aeabi_d2iz>
 80068aa:	4604      	mov	r4, r0
 80068ac:	f7f9 fdaa 	bl	8000404 <__aeabi_i2d>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	3430      	adds	r4, #48	; 0x30
 80068c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068ca:	f807 4b01 	strb.w	r4, [r7], #1
 80068ce:	f7fa f875 	bl	80009bc <__aeabi_dcmplt>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d174      	bne.n	80069c0 <_dtoa_r+0x648>
 80068d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068da:	2000      	movs	r0, #0
 80068dc:	4911      	ldr	r1, [pc, #68]	; (8006924 <_dtoa_r+0x5ac>)
 80068de:	f7f9 fc43 	bl	8000168 <__aeabi_dsub>
 80068e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e6:	f7fa f869 	bl	80009bc <__aeabi_dcmplt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f040 80b7 	bne.w	8006a5e <_dtoa_r+0x6e6>
 80068f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f2:	429f      	cmp	r7, r3
 80068f4:	f43f af7a 	beq.w	80067ec <_dtoa_r+0x474>
 80068f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068fc:	2200      	movs	r2, #0
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <_dtoa_r+0x5b0>)
 8006900:	f7f9 fdea 	bl	80004d8 <__aeabi_dmul>
 8006904:	2200      	movs	r2, #0
 8006906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800690a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <_dtoa_r+0x5b0>)
 8006910:	f7f9 fde2 	bl	80004d8 <__aeabi_dmul>
 8006914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006918:	e7c3      	b.n	80068a2 <_dtoa_r+0x52a>
 800691a:	bf00      	nop
 800691c:	08008f90 	.word	0x08008f90
 8006920:	08008f68 	.word	0x08008f68
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	40240000 	.word	0x40240000
 800692c:	401c0000 	.word	0x401c0000
 8006930:	40140000 	.word	0x40140000
 8006934:	3fe00000 	.word	0x3fe00000
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7f9 fdcc 	bl	80004d8 <__aeabi_dmul>
 8006940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006942:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006946:	9c03      	ldr	r4, [sp, #12]
 8006948:	9314      	str	r3, [sp, #80]	; 0x50
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	f7fa f873 	bl	8000a38 <__aeabi_d2iz>
 8006952:	9015      	str	r0, [sp, #84]	; 0x54
 8006954:	f7f9 fd56 	bl	8000404 <__aeabi_i2d>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006960:	f7f9 fc02 	bl	8000168 <__aeabi_dsub>
 8006964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006966:	4606      	mov	r6, r0
 8006968:	3330      	adds	r3, #48	; 0x30
 800696a:	f804 3b01 	strb.w	r3, [r4], #1
 800696e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006970:	460f      	mov	r7, r1
 8006972:	429c      	cmp	r4, r3
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	d124      	bne.n	80069c4 <_dtoa_r+0x64c>
 800697a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800697e:	4bb0      	ldr	r3, [pc, #704]	; (8006c40 <_dtoa_r+0x8c8>)
 8006980:	f7f9 fbf4 	bl	800016c <__adddf3>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7fa f834 	bl	80009f8 <__aeabi_dcmpgt>
 8006990:	2800      	cmp	r0, #0
 8006992:	d163      	bne.n	8006a5c <_dtoa_r+0x6e4>
 8006994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006998:	2000      	movs	r0, #0
 800699a:	49a9      	ldr	r1, [pc, #676]	; (8006c40 <_dtoa_r+0x8c8>)
 800699c:	f7f9 fbe4 	bl	8000168 <__aeabi_dsub>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7fa f808 	bl	80009bc <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f43f af1d 	beq.w	80067ec <_dtoa_r+0x474>
 80069b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069b4:	1e7b      	subs	r3, r7, #1
 80069b6:	9314      	str	r3, [sp, #80]	; 0x50
 80069b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80069bc:	2b30      	cmp	r3, #48	; 0x30
 80069be:	d0f8      	beq.n	80069b2 <_dtoa_r+0x63a>
 80069c0:	46c2      	mov	sl, r8
 80069c2:	e03b      	b.n	8006a3c <_dtoa_r+0x6c4>
 80069c4:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <_dtoa_r+0x8cc>)
 80069c6:	f7f9 fd87 	bl	80004d8 <__aeabi_dmul>
 80069ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ce:	e7bc      	b.n	800694a <_dtoa_r+0x5d2>
 80069d0:	9f03      	ldr	r7, [sp, #12]
 80069d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fea5 	bl	800072c <__aeabi_ddiv>
 80069e2:	f7fa f829 	bl	8000a38 <__aeabi_d2iz>
 80069e6:	4604      	mov	r4, r0
 80069e8:	f7f9 fd0c 	bl	8000404 <__aeabi_i2d>
 80069ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f0:	f7f9 fd72 	bl	80004d8 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fbb4 	bl	8000168 <__aeabi_dsub>
 8006a00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006a04:	f807 6b01 	strb.w	r6, [r7], #1
 8006a08:	9e03      	ldr	r6, [sp, #12]
 8006a0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006a0e:	1bbe      	subs	r6, r7, r6
 8006a10:	45b4      	cmp	ip, r6
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	d136      	bne.n	8006a86 <_dtoa_r+0x70e>
 8006a18:	f7f9 fba8 	bl	800016c <__adddf3>
 8006a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	f7f9 ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8006a28:	bb58      	cbnz	r0, 8006a82 <_dtoa_r+0x70a>
 8006a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7f9 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8006a36:	b108      	cbz	r0, 8006a3c <_dtoa_r+0x6c4>
 8006a38:	07e1      	lsls	r1, r4, #31
 8006a3a:	d422      	bmi.n	8006a82 <_dtoa_r+0x70a>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	4659      	mov	r1, fp
 8006a40:	f000 fd0c 	bl	800745c <_Bfree>
 8006a44:	2300      	movs	r3, #0
 8006a46:	703b      	strb	r3, [r7, #0]
 8006a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a4a:	f10a 0001 	add.w	r0, sl, #1
 8006a4e:	6018      	str	r0, [r3, #0]
 8006a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f acde 	beq.w	8006414 <_dtoa_r+0x9c>
 8006a58:	601f      	str	r7, [r3, #0]
 8006a5a:	e4db      	b.n	8006414 <_dtoa_r+0x9c>
 8006a5c:	4627      	mov	r7, r4
 8006a5e:	463b      	mov	r3, r7
 8006a60:	461f      	mov	r7, r3
 8006a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a66:	2a39      	cmp	r2, #57	; 0x39
 8006a68:	d107      	bne.n	8006a7a <_dtoa_r+0x702>
 8006a6a:	9a03      	ldr	r2, [sp, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1f7      	bne.n	8006a60 <_dtoa_r+0x6e8>
 8006a70:	2230      	movs	r2, #48	; 0x30
 8006a72:	9903      	ldr	r1, [sp, #12]
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	700a      	strb	r2, [r1, #0]
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e79e      	b.n	80069c0 <_dtoa_r+0x648>
 8006a82:	46d0      	mov	r8, sl
 8006a84:	e7eb      	b.n	8006a5e <_dtoa_r+0x6e6>
 8006a86:	2200      	movs	r2, #0
 8006a88:	4b6e      	ldr	r3, [pc, #440]	; (8006c44 <_dtoa_r+0x8cc>)
 8006a8a:	f7f9 fd25 	bl	80004d8 <__aeabi_dmul>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2300      	movs	r3, #0
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	f7f9 ff87 	bl	80009a8 <__aeabi_dcmpeq>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d09b      	beq.n	80069d6 <_dtoa_r+0x65e>
 8006a9e:	e7cd      	b.n	8006a3c <_dtoa_r+0x6c4>
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f000 80d0 	beq.w	8006c48 <_dtoa_r+0x8d0>
 8006aa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006aaa:	2a01      	cmp	r2, #1
 8006aac:	f300 80ae 	bgt.w	8006c0c <_dtoa_r+0x894>
 8006ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <_dtoa_r+0x88c>
 8006ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006abc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006abe:	9f06      	ldr	r7, [sp, #24]
 8006ac0:	9a06      	ldr	r2, [sp, #24]
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	441a      	add	r2, r3
 8006ac6:	9206      	str	r2, [sp, #24]
 8006ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aca:	4628      	mov	r0, r5
 8006acc:	441a      	add	r2, r3
 8006ace:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad0:	f000 fd7a 	bl	80075c8 <__i2b>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	dd0c      	ble.n	8006af4 <_dtoa_r+0x77c>
 8006ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dd09      	ble.n	8006af4 <_dtoa_r+0x77c>
 8006ae0:	42bb      	cmp	r3, r7
 8006ae2:	bfa8      	it	ge
 8006ae4:	463b      	movge	r3, r7
 8006ae6:	9a06      	ldr	r2, [sp, #24]
 8006ae8:	1aff      	subs	r7, r7, r3
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	9206      	str	r2, [sp, #24]
 8006aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	9309      	str	r3, [sp, #36]	; 0x24
 8006af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af6:	b1f3      	cbz	r3, 8006b36 <_dtoa_r+0x7be>
 8006af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a8 	beq.w	8006c50 <_dtoa_r+0x8d8>
 8006b00:	2c00      	cmp	r4, #0
 8006b02:	dd10      	ble.n	8006b26 <_dtoa_r+0x7ae>
 8006b04:	4631      	mov	r1, r6
 8006b06:	4622      	mov	r2, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 fe1b 	bl	8007744 <__pow5mult>
 8006b0e:	465a      	mov	r2, fp
 8006b10:	4601      	mov	r1, r0
 8006b12:	4606      	mov	r6, r0
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 fd6d 	bl	80075f4 <__multiply>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fc9c 	bl	800745c <_Bfree>
 8006b24:	46c3      	mov	fp, r8
 8006b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b28:	1b1a      	subs	r2, r3, r4
 8006b2a:	d004      	beq.n	8006b36 <_dtoa_r+0x7be>
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fe08 	bl	8007744 <__pow5mult>
 8006b34:	4683      	mov	fp, r0
 8006b36:	2101      	movs	r1, #1
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fd45 	bl	80075c8 <__i2b>
 8006b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b40:	4604      	mov	r4, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f340 8086 	ble.w	8006c54 <_dtoa_r+0x8dc>
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 fdf9 	bl	8007744 <__pow5mult>
 8006b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b54:	4604      	mov	r4, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	dd7f      	ble.n	8006c5a <_dtoa_r+0x8e2>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b64:	6918      	ldr	r0, [r3, #16]
 8006b66:	f000 fce1 	bl	800752c <__hi0bits>
 8006b6a:	f1c0 0020 	rsb	r0, r0, #32
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	4418      	add	r0, r3
 8006b72:	f010 001f 	ands.w	r0, r0, #31
 8006b76:	f000 8092 	beq.w	8006c9e <_dtoa_r+0x926>
 8006b7a:	f1c0 0320 	rsb	r3, r0, #32
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	f340 808a 	ble.w	8006c98 <_dtoa_r+0x920>
 8006b84:	f1c0 001c 	rsb	r0, r0, #28
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	4407      	add	r7, r0
 8006b8c:	4403      	add	r3, r0
 8006b8e:	9306      	str	r3, [sp, #24]
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	4403      	add	r3, r0
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	9b06      	ldr	r3, [sp, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dd05      	ble.n	8006ba8 <_dtoa_r+0x830>
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 fe29 	bl	80077f8 <__lshift>
 8006ba6:	4683      	mov	fp, r0
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd05      	ble.n	8006bba <_dtoa_r+0x842>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fe20 	bl	80077f8 <__lshift>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d070      	beq.n	8006ca2 <_dtoa_r+0x92a>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f000 fe88 	bl	80078d8 <__mcmp>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	da6a      	bge.n	8006ca2 <_dtoa_r+0x92a>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4659      	mov	r1, fp
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fc64 	bl	80074a0 <__multadd>
 8006bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bda:	4683      	mov	fp, r0
 8006bdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8194 	beq.w	8006f0e <_dtoa_r+0xb96>
 8006be6:	4631      	mov	r1, r6
 8006be8:	2300      	movs	r3, #0
 8006bea:	220a      	movs	r2, #10
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 fc57 	bl	80074a0 <__multadd>
 8006bf2:	f1b9 0f00 	cmp.w	r9, #0
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	f300 8093 	bgt.w	8006d22 <_dtoa_r+0x9aa>
 8006bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	dc57      	bgt.n	8006cb2 <_dtoa_r+0x93a>
 8006c02:	e08e      	b.n	8006d22 <_dtoa_r+0x9aa>
 8006c04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c0a:	e757      	b.n	8006abc <_dtoa_r+0x744>
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	1e5c      	subs	r4, r3, #1
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	bfb7      	itett	lt
 8006c16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c18:	1b1c      	subge	r4, r3, r4
 8006c1a:	1ae2      	sublt	r2, r4, r3
 8006c1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c1e:	bfbe      	ittt	lt
 8006c20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c22:	189b      	addlt	r3, r3, r2
 8006c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	bfb8      	it	lt
 8006c2a:	2400      	movlt	r4, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfbb      	ittet	lt
 8006c30:	9b06      	ldrlt	r3, [sp, #24]
 8006c32:	9a08      	ldrlt	r2, [sp, #32]
 8006c34:	9f06      	ldrge	r7, [sp, #24]
 8006c36:	1a9f      	sublt	r7, r3, r2
 8006c38:	bfac      	ite	ge
 8006c3a:	9b08      	ldrge	r3, [sp, #32]
 8006c3c:	2300      	movlt	r3, #0
 8006c3e:	e73f      	b.n	8006ac0 <_dtoa_r+0x748>
 8006c40:	3fe00000 	.word	0x3fe00000
 8006c44:	40240000 	.word	0x40240000
 8006c48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c4a:	9f06      	ldr	r7, [sp, #24]
 8006c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c4e:	e742      	b.n	8006ad6 <_dtoa_r+0x75e>
 8006c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c52:	e76b      	b.n	8006b2c <_dtoa_r+0x7b4>
 8006c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	dc19      	bgt.n	8006c8e <_dtoa_r+0x916>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	b9bb      	cbnz	r3, 8006c8e <_dtoa_r+0x916>
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c64:	b99b      	cbnz	r3, 8006c8e <_dtoa_r+0x916>
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	051b      	lsls	r3, r3, #20
 8006c70:	b183      	cbz	r3, 8006c94 <_dtoa_r+0x91c>
 8006c72:	f04f 0801 	mov.w	r8, #1
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	9306      	str	r3, [sp, #24]
 8006c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f47f af6a 	bne.w	8006b5e <_dtoa_r+0x7e6>
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e76f      	b.n	8006b6e <_dtoa_r+0x7f6>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	e7f6      	b.n	8006c82 <_dtoa_r+0x90a>
 8006c94:	4698      	mov	r8, r3
 8006c96:	e7f4      	b.n	8006c82 <_dtoa_r+0x90a>
 8006c98:	f43f af7d 	beq.w	8006b96 <_dtoa_r+0x81e>
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	301c      	adds	r0, #28
 8006ca0:	e772      	b.n	8006b88 <_dtoa_r+0x810>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc36      	bgt.n	8006d16 <_dtoa_r+0x99e>
 8006ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	dd33      	ble.n	8006d16 <_dtoa_r+0x99e>
 8006cae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cb2:	f1b9 0f00 	cmp.w	r9, #0
 8006cb6:	d10d      	bne.n	8006cd4 <_dtoa_r+0x95c>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	464b      	mov	r3, r9
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fbee 	bl	80074a0 <__multadd>
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f000 fe05 	bl	80078d8 <__mcmp>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f73f adb8 	bgt.w	8006844 <_dtoa_r+0x4cc>
 8006cd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cd6:	9f03      	ldr	r7, [sp, #12]
 8006cd8:	ea6f 0a03 	mvn.w	sl, r3
 8006cdc:	f04f 0800 	mov.w	r8, #0
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 fbba 	bl	800745c <_Bfree>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	f43f aea7 	beq.w	8006a3c <_dtoa_r+0x6c4>
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	d005      	beq.n	8006d00 <_dtoa_r+0x988>
 8006cf4:	45b0      	cmp	r8, r6
 8006cf6:	d003      	beq.n	8006d00 <_dtoa_r+0x988>
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 fbae 	bl	800745c <_Bfree>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fbaa 	bl	800745c <_Bfree>
 8006d08:	e698      	b.n	8006a3c <_dtoa_r+0x6c4>
 8006d0a:	2400      	movs	r4, #0
 8006d0c:	4626      	mov	r6, r4
 8006d0e:	e7e1      	b.n	8006cd4 <_dtoa_r+0x95c>
 8006d10:	46c2      	mov	sl, r8
 8006d12:	4626      	mov	r6, r4
 8006d14:	e596      	b.n	8006844 <_dtoa_r+0x4cc>
 8006d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80fd 	beq.w	8006f1c <_dtoa_r+0xba4>
 8006d22:	2f00      	cmp	r7, #0
 8006d24:	dd05      	ble.n	8006d32 <_dtoa_r+0x9ba>
 8006d26:	4631      	mov	r1, r6
 8006d28:	463a      	mov	r2, r7
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 fd64 	bl	80077f8 <__lshift>
 8006d30:	4606      	mov	r6, r0
 8006d32:	f1b8 0f00 	cmp.w	r8, #0
 8006d36:	d05c      	beq.n	8006df2 <_dtoa_r+0xa7a>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	6871      	ldr	r1, [r6, #4]
 8006d3c:	f000 fb4e 	bl	80073dc <_Balloc>
 8006d40:	4607      	mov	r7, r0
 8006d42:	b928      	cbnz	r0, 8006d50 <_dtoa_r+0x9d8>
 8006d44:	4602      	mov	r2, r0
 8006d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d4a:	4b7f      	ldr	r3, [pc, #508]	; (8006f48 <_dtoa_r+0xbd0>)
 8006d4c:	f7ff bb28 	b.w	80063a0 <_dtoa_r+0x28>
 8006d50:	6932      	ldr	r2, [r6, #16]
 8006d52:	f106 010c 	add.w	r1, r6, #12
 8006d56:	3202      	adds	r2, #2
 8006d58:	0092      	lsls	r2, r2, #2
 8006d5a:	300c      	adds	r0, #12
 8006d5c:	f000 fb30 	bl	80073c0 <memcpy>
 8006d60:	2201      	movs	r2, #1
 8006d62:	4639      	mov	r1, r7
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 fd47 	bl	80077f8 <__lshift>
 8006d6a:	46b0      	mov	r8, r6
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	444b      	add	r3, r9
 8006d78:	930a      	str	r3, [sp, #40]	; 0x28
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	9b08      	ldr	r3, [sp, #32]
 8006d84:	4621      	mov	r1, r4
 8006d86:	3b01      	subs	r3, #1
 8006d88:	4658      	mov	r0, fp
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f7ff fa68 	bl	8006260 <quorem>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4641      	mov	r1, r8
 8006d94:	3330      	adds	r3, #48	; 0x30
 8006d96:	9006      	str	r0, [sp, #24]
 8006d98:	4658      	mov	r0, fp
 8006d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9c:	f000 fd9c 	bl	80078d8 <__mcmp>
 8006da0:	4632      	mov	r2, r6
 8006da2:	4681      	mov	r9, r0
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 fdb2 	bl	8007910 <__mdiff>
 8006dac:	68c2      	ldr	r2, [r0, #12]
 8006dae:	4607      	mov	r7, r0
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	bb02      	cbnz	r2, 8006df6 <_dtoa_r+0xa7e>
 8006db4:	4601      	mov	r1, r0
 8006db6:	4658      	mov	r0, fp
 8006db8:	f000 fd8e 	bl	80078d8 <__mcmp>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006dc8:	f000 fb48 	bl	800745c <_Bfree>
 8006dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd0:	9f08      	ldr	r7, [sp, #32]
 8006dd2:	ea43 0102 	orr.w	r1, r3, r2
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ddc:	d10d      	bne.n	8006dfa <_dtoa_r+0xa82>
 8006dde:	2b39      	cmp	r3, #57	; 0x39
 8006de0:	d029      	beq.n	8006e36 <_dtoa_r+0xabe>
 8006de2:	f1b9 0f00 	cmp.w	r9, #0
 8006de6:	dd01      	ble.n	8006dec <_dtoa_r+0xa74>
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	3331      	adds	r3, #49	; 0x31
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	7013      	strb	r3, [r2, #0]
 8006df0:	e776      	b.n	8006ce0 <_dtoa_r+0x968>
 8006df2:	4630      	mov	r0, r6
 8006df4:	e7b9      	b.n	8006d6a <_dtoa_r+0x9f2>
 8006df6:	2201      	movs	r2, #1
 8006df8:	e7e2      	b.n	8006dc0 <_dtoa_r+0xa48>
 8006dfa:	f1b9 0f00 	cmp.w	r9, #0
 8006dfe:	db06      	blt.n	8006e0e <_dtoa_r+0xa96>
 8006e00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006e02:	ea41 0909 	orr.w	r9, r1, r9
 8006e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e08:	ea59 0101 	orrs.w	r1, r9, r1
 8006e0c:	d120      	bne.n	8006e50 <_dtoa_r+0xad8>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	ddec      	ble.n	8006dec <_dtoa_r+0xa74>
 8006e12:	4659      	mov	r1, fp
 8006e14:	2201      	movs	r2, #1
 8006e16:	4628      	mov	r0, r5
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	f000 fced 	bl	80077f8 <__lshift>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4683      	mov	fp, r0
 8006e22:	f000 fd59 	bl	80078d8 <__mcmp>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	dc02      	bgt.n	8006e32 <_dtoa_r+0xaba>
 8006e2c:	d1de      	bne.n	8006dec <_dtoa_r+0xa74>
 8006e2e:	07da      	lsls	r2, r3, #31
 8006e30:	d5dc      	bpl.n	8006dec <_dtoa_r+0xa74>
 8006e32:	2b39      	cmp	r3, #57	; 0x39
 8006e34:	d1d8      	bne.n	8006de8 <_dtoa_r+0xa70>
 8006e36:	2339      	movs	r3, #57	; 0x39
 8006e38:	9a04      	ldr	r2, [sp, #16]
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	461f      	mov	r7, r3
 8006e40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2a39      	cmp	r2, #57	; 0x39
 8006e48:	d050      	beq.n	8006eec <_dtoa_r+0xb74>
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e747      	b.n	8006ce0 <_dtoa_r+0x968>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dd03      	ble.n	8006e5c <_dtoa_r+0xae4>
 8006e54:	2b39      	cmp	r3, #57	; 0x39
 8006e56:	d0ee      	beq.n	8006e36 <_dtoa_r+0xabe>
 8006e58:	3301      	adds	r3, #1
 8006e5a:	e7c7      	b.n	8006dec <_dtoa_r+0xa74>
 8006e5c:	9a08      	ldr	r2, [sp, #32]
 8006e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e64:	428a      	cmp	r2, r1
 8006e66:	d02a      	beq.n	8006ebe <_dtoa_r+0xb46>
 8006e68:	4659      	mov	r1, fp
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 fb16 	bl	80074a0 <__multadd>
 8006e74:	45b0      	cmp	r8, r6
 8006e76:	4683      	mov	fp, r0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	f04f 020a 	mov.w	r2, #10
 8006e80:	4641      	mov	r1, r8
 8006e82:	4628      	mov	r0, r5
 8006e84:	d107      	bne.n	8006e96 <_dtoa_r+0xb1e>
 8006e86:	f000 fb0b 	bl	80074a0 <__multadd>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	9b08      	ldr	r3, [sp, #32]
 8006e90:	3301      	adds	r3, #1
 8006e92:	9308      	str	r3, [sp, #32]
 8006e94:	e775      	b.n	8006d82 <_dtoa_r+0xa0a>
 8006e96:	f000 fb03 	bl	80074a0 <__multadd>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fafc 	bl	80074a0 <__multadd>
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	e7f0      	b.n	8006e8e <_dtoa_r+0xb16>
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	bfcc      	ite	gt
 8006eb2:	464f      	movgt	r7, r9
 8006eb4:	2701      	movle	r7, #1
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	9a03      	ldr	r2, [sp, #12]
 8006ebc:	4417      	add	r7, r2
 8006ebe:	4659      	mov	r1, fp
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	9308      	str	r3, [sp, #32]
 8006ec6:	f000 fc97 	bl	80077f8 <__lshift>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4683      	mov	fp, r0
 8006ece:	f000 fd03 	bl	80078d8 <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	dcb2      	bgt.n	8006e3c <_dtoa_r+0xac4>
 8006ed6:	d102      	bne.n	8006ede <_dtoa_r+0xb66>
 8006ed8:	9b08      	ldr	r3, [sp, #32]
 8006eda:	07db      	lsls	r3, r3, #31
 8006edc:	d4ae      	bmi.n	8006e3c <_dtoa_r+0xac4>
 8006ede:	463b      	mov	r3, r7
 8006ee0:	461f      	mov	r7, r3
 8006ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ee6:	2a30      	cmp	r2, #48	; 0x30
 8006ee8:	d0fa      	beq.n	8006ee0 <_dtoa_r+0xb68>
 8006eea:	e6f9      	b.n	8006ce0 <_dtoa_r+0x968>
 8006eec:	9a03      	ldr	r2, [sp, #12]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d1a5      	bne.n	8006e3e <_dtoa_r+0xac6>
 8006ef2:	2331      	movs	r3, #49	; 0x31
 8006ef4:	f10a 0a01 	add.w	sl, sl, #1
 8006ef8:	e779      	b.n	8006dee <_dtoa_r+0xa76>
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <_dtoa_r+0xbd4>)
 8006efc:	f7ff baa8 	b.w	8006450 <_dtoa_r+0xd8>
 8006f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f aa81 	bne.w	800640a <_dtoa_r+0x92>
 8006f08:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <_dtoa_r+0xbd8>)
 8006f0a:	f7ff baa1 	b.w	8006450 <_dtoa_r+0xd8>
 8006f0e:	f1b9 0f00 	cmp.w	r9, #0
 8006f12:	dc03      	bgt.n	8006f1c <_dtoa_r+0xba4>
 8006f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	f73f aecb 	bgt.w	8006cb2 <_dtoa_r+0x93a>
 8006f1c:	9f03      	ldr	r7, [sp, #12]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4658      	mov	r0, fp
 8006f22:	f7ff f99d 	bl	8006260 <quorem>
 8006f26:	9a03      	ldr	r2, [sp, #12]
 8006f28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f2c:	f807 3b01 	strb.w	r3, [r7], #1
 8006f30:	1aba      	subs	r2, r7, r2
 8006f32:	4591      	cmp	r9, r2
 8006f34:	ddba      	ble.n	8006eac <_dtoa_r+0xb34>
 8006f36:	4659      	mov	r1, fp
 8006f38:	2300      	movs	r3, #0
 8006f3a:	220a      	movs	r2, #10
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 faaf 	bl	80074a0 <__multadd>
 8006f42:	4683      	mov	fp, r0
 8006f44:	e7eb      	b.n	8006f1e <_dtoa_r+0xba6>
 8006f46:	bf00      	nop
 8006f48:	08008e9b 	.word	0x08008e9b
 8006f4c:	08008df8 	.word	0x08008df8
 8006f50:	08008e1c 	.word	0x08008e1c

08006f54 <__sflush_r>:
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f58:	4605      	mov	r5, r0
 8006f5a:	0710      	lsls	r0, r2, #28
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	d457      	bmi.n	8007010 <__sflush_r+0xbc>
 8006f60:	684b      	ldr	r3, [r1, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc04      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc01      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0fa      	beq.n	8006f6c <__sflush_r+0x18>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f7c:	682f      	ldr	r7, [r5, #0]
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	d032      	beq.n	8006fe8 <__sflush_r+0x94>
 8006f82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	075a      	lsls	r2, r3, #29
 8006f88:	d505      	bpl.n	8006f96 <__sflush_r+0x42>
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	1ac0      	subs	r0, r0, r3
 8006f8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f90:	b10b      	cbz	r3, 8006f96 <__sflush_r+0x42>
 8006f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	6a21      	ldr	r1, [r4, #32]
 8006fa0:	47b0      	blx	r6
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	d106      	bne.n	8006fb6 <__sflush_r+0x62>
 8006fa8:	6829      	ldr	r1, [r5, #0]
 8006faa:	291d      	cmp	r1, #29
 8006fac:	d82c      	bhi.n	8007008 <__sflush_r+0xb4>
 8006fae:	4a29      	ldr	r2, [pc, #164]	; (8007054 <__sflush_r+0x100>)
 8006fb0:	40ca      	lsrs	r2, r1
 8006fb2:	07d6      	lsls	r6, r2, #31
 8006fb4:	d528      	bpl.n	8007008 <__sflush_r+0xb4>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	6062      	str	r2, [r4, #4]
 8006fba:	6922      	ldr	r2, [r4, #16]
 8006fbc:	04d9      	lsls	r1, r3, #19
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	d504      	bpl.n	8006fcc <__sflush_r+0x78>
 8006fc2:	1c42      	adds	r2, r0, #1
 8006fc4:	d101      	bne.n	8006fca <__sflush_r+0x76>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	b903      	cbnz	r3, 8006fcc <__sflush_r+0x78>
 8006fca:	6560      	str	r0, [r4, #84]	; 0x54
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	602f      	str	r7, [r5, #0]
 8006fd0:	2900      	cmp	r1, #0
 8006fd2:	d0cb      	beq.n	8006f6c <__sflush_r+0x18>
 8006fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd8:	4299      	cmp	r1, r3
 8006fda:	d002      	beq.n	8006fe2 <__sflush_r+0x8e>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	f000 fd93 	bl	8007b08 <_free_r>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	6360      	str	r0, [r4, #52]	; 0x34
 8006fe6:	e7c2      	b.n	8006f6e <__sflush_r+0x1a>
 8006fe8:	6a21      	ldr	r1, [r4, #32]
 8006fea:	2301      	movs	r3, #1
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	1c41      	adds	r1, r0, #1
 8006ff2:	d1c7      	bne.n	8006f84 <__sflush_r+0x30>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c4      	beq.n	8006f84 <__sflush_r+0x30>
 8006ffa:	2b1d      	cmp	r3, #29
 8006ffc:	d001      	beq.n	8007002 <__sflush_r+0xae>
 8006ffe:	2b16      	cmp	r3, #22
 8007000:	d101      	bne.n	8007006 <__sflush_r+0xb2>
 8007002:	602f      	str	r7, [r5, #0]
 8007004:	e7b2      	b.n	8006f6c <__sflush_r+0x18>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7ae      	b.n	8006f6e <__sflush_r+0x1a>
 8007010:	690f      	ldr	r7, [r1, #16]
 8007012:	2f00      	cmp	r7, #0
 8007014:	d0aa      	beq.n	8006f6c <__sflush_r+0x18>
 8007016:	0793      	lsls	r3, r2, #30
 8007018:	bf18      	it	ne
 800701a:	2300      	movne	r3, #0
 800701c:	680e      	ldr	r6, [r1, #0]
 800701e:	bf08      	it	eq
 8007020:	694b      	ldreq	r3, [r1, #20]
 8007022:	1bf6      	subs	r6, r6, r7
 8007024:	600f      	str	r7, [r1, #0]
 8007026:	608b      	str	r3, [r1, #8]
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd9f      	ble.n	8006f6c <__sflush_r+0x18>
 800702c:	4633      	mov	r3, r6
 800702e:	463a      	mov	r2, r7
 8007030:	4628      	mov	r0, r5
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007038:	47e0      	blx	ip
 800703a:	2800      	cmp	r0, #0
 800703c:	dc06      	bgt.n	800704c <__sflush_r+0xf8>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	e790      	b.n	8006f6e <__sflush_r+0x1a>
 800704c:	4407      	add	r7, r0
 800704e:	1a36      	subs	r6, r6, r0
 8007050:	e7ea      	b.n	8007028 <__sflush_r+0xd4>
 8007052:	bf00      	nop
 8007054:	20400001 	.word	0x20400001

08007058 <_fflush_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b913      	cbnz	r3, 8007068 <_fflush_r+0x10>
 8007062:	2500      	movs	r5, #0
 8007064:	4628      	mov	r0, r5
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	b118      	cbz	r0, 8007072 <_fflush_r+0x1a>
 800706a:	6983      	ldr	r3, [r0, #24]
 800706c:	b90b      	cbnz	r3, 8007072 <_fflush_r+0x1a>
 800706e:	f000 f887 	bl	8007180 <__sinit>
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <_fflush_r+0x6c>)
 8007074:	429c      	cmp	r4, r3
 8007076:	d11b      	bne.n	80070b0 <_fflush_r+0x58>
 8007078:	686c      	ldr	r4, [r5, #4]
 800707a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0ef      	beq.n	8007062 <_fflush_r+0xa>
 8007082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007084:	07d0      	lsls	r0, r2, #31
 8007086:	d404      	bmi.n	8007092 <_fflush_r+0x3a>
 8007088:	0599      	lsls	r1, r3, #22
 800708a:	d402      	bmi.n	8007092 <_fflush_r+0x3a>
 800708c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800708e:	f000 f91a 	bl	80072c6 <__retarget_lock_acquire_recursive>
 8007092:	4628      	mov	r0, r5
 8007094:	4621      	mov	r1, r4
 8007096:	f7ff ff5d 	bl	8006f54 <__sflush_r>
 800709a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800709c:	4605      	mov	r5, r0
 800709e:	07da      	lsls	r2, r3, #31
 80070a0:	d4e0      	bmi.n	8007064 <_fflush_r+0xc>
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	059b      	lsls	r3, r3, #22
 80070a6:	d4dd      	bmi.n	8007064 <_fflush_r+0xc>
 80070a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070aa:	f000 f90d 	bl	80072c8 <__retarget_lock_release_recursive>
 80070ae:	e7d9      	b.n	8007064 <_fflush_r+0xc>
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <_fflush_r+0x70>)
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d101      	bne.n	80070ba <_fflush_r+0x62>
 80070b6:	68ac      	ldr	r4, [r5, #8]
 80070b8:	e7df      	b.n	800707a <_fflush_r+0x22>
 80070ba:	4b04      	ldr	r3, [pc, #16]	; (80070cc <_fflush_r+0x74>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	bf08      	it	eq
 80070c0:	68ec      	ldreq	r4, [r5, #12]
 80070c2:	e7da      	b.n	800707a <_fflush_r+0x22>
 80070c4:	08008ecc 	.word	0x08008ecc
 80070c8:	08008eec 	.word	0x08008eec
 80070cc:	08008eac 	.word	0x08008eac

080070d0 <std>:
 80070d0:	2300      	movs	r3, #0
 80070d2:	b510      	push	{r4, lr}
 80070d4:	4604      	mov	r4, r0
 80070d6:	e9c0 3300 	strd	r3, r3, [r0]
 80070da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070de:	6083      	str	r3, [r0, #8]
 80070e0:	8181      	strh	r1, [r0, #12]
 80070e2:	6643      	str	r3, [r0, #100]	; 0x64
 80070e4:	81c2      	strh	r2, [r0, #14]
 80070e6:	6183      	str	r3, [r0, #24]
 80070e8:	4619      	mov	r1, r3
 80070ea:	2208      	movs	r2, #8
 80070ec:	305c      	adds	r0, #92	; 0x5c
 80070ee:	f7fe fb01 	bl	80056f4 <memset>
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <std+0x38>)
 80070f4:	6224      	str	r4, [r4, #32]
 80070f6:	6263      	str	r3, [r4, #36]	; 0x24
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <std+0x3c>)
 80070fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <std+0x40>)
 80070fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <std+0x44>)
 8007102:	6323      	str	r3, [r4, #48]	; 0x30
 8007104:	bd10      	pop	{r4, pc}
 8007106:	bf00      	nop
 8007108:	08007f91 	.word	0x08007f91
 800710c:	08007fb3 	.word	0x08007fb3
 8007110:	08007feb 	.word	0x08007feb
 8007114:	0800800f 	.word	0x0800800f

08007118 <_cleanup_r>:
 8007118:	4901      	ldr	r1, [pc, #4]	; (8007120 <_cleanup_r+0x8>)
 800711a:	f000 b8af 	b.w	800727c <_fwalk_reent>
 800711e:	bf00      	nop
 8007120:	08007059 	.word	0x08007059

08007124 <__sfmoreglue>:
 8007124:	2268      	movs	r2, #104	; 0x68
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	1e4d      	subs	r5, r1, #1
 800712a:	4355      	muls	r5, r2
 800712c:	460e      	mov	r6, r1
 800712e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007132:	f000 fd51 	bl	8007bd8 <_malloc_r>
 8007136:	4604      	mov	r4, r0
 8007138:	b140      	cbz	r0, 800714c <__sfmoreglue+0x28>
 800713a:	2100      	movs	r1, #0
 800713c:	e9c0 1600 	strd	r1, r6, [r0]
 8007140:	300c      	adds	r0, #12
 8007142:	60a0      	str	r0, [r4, #8]
 8007144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007148:	f7fe fad4 	bl	80056f4 <memset>
 800714c:	4620      	mov	r0, r4
 800714e:	bd70      	pop	{r4, r5, r6, pc}

08007150 <__sfp_lock_acquire>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__sfp_lock_acquire+0x8>)
 8007152:	f000 b8b8 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	200003d9 	.word	0x200003d9

0800715c <__sfp_lock_release>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sfp_lock_release+0x8>)
 800715e:	f000 b8b3 	b.w	80072c8 <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	200003d9 	.word	0x200003d9

08007168 <__sinit_lock_acquire>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sinit_lock_acquire+0x8>)
 800716a:	f000 b8ac 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	200003da 	.word	0x200003da

08007174 <__sinit_lock_release>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__sinit_lock_release+0x8>)
 8007176:	f000 b8a7 	b.w	80072c8 <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	200003da 	.word	0x200003da

08007180 <__sinit>:
 8007180:	b510      	push	{r4, lr}
 8007182:	4604      	mov	r4, r0
 8007184:	f7ff fff0 	bl	8007168 <__sinit_lock_acquire>
 8007188:	69a3      	ldr	r3, [r4, #24]
 800718a:	b11b      	cbz	r3, 8007194 <__sinit+0x14>
 800718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007190:	f7ff bff0 	b.w	8007174 <__sinit_lock_release>
 8007194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007198:	6523      	str	r3, [r4, #80]	; 0x50
 800719a:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <__sinit+0x68>)
 800719c:	4a13      	ldr	r2, [pc, #76]	; (80071ec <__sinit+0x6c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	bf08      	it	eq
 80071a6:	2301      	moveq	r3, #1
 80071a8:	4620      	mov	r0, r4
 80071aa:	bf08      	it	eq
 80071ac:	61a3      	streq	r3, [r4, #24]
 80071ae:	f000 f81f 	bl	80071f0 <__sfp>
 80071b2:	6060      	str	r0, [r4, #4]
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 f81b 	bl	80071f0 <__sfp>
 80071ba:	60a0      	str	r0, [r4, #8]
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 f817 	bl	80071f0 <__sfp>
 80071c2:	2200      	movs	r2, #0
 80071c4:	2104      	movs	r1, #4
 80071c6:	60e0      	str	r0, [r4, #12]
 80071c8:	6860      	ldr	r0, [r4, #4]
 80071ca:	f7ff ff81 	bl	80070d0 <std>
 80071ce:	2201      	movs	r2, #1
 80071d0:	2109      	movs	r1, #9
 80071d2:	68a0      	ldr	r0, [r4, #8]
 80071d4:	f7ff ff7c 	bl	80070d0 <std>
 80071d8:	2202      	movs	r2, #2
 80071da:	2112      	movs	r1, #18
 80071dc:	68e0      	ldr	r0, [r4, #12]
 80071de:	f7ff ff77 	bl	80070d0 <std>
 80071e2:	2301      	movs	r3, #1
 80071e4:	61a3      	str	r3, [r4, #24]
 80071e6:	e7d1      	b.n	800718c <__sinit+0xc>
 80071e8:	08008de4 	.word	0x08008de4
 80071ec:	08007119 	.word	0x08007119

080071f0 <__sfp>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	4607      	mov	r7, r0
 80071f4:	f7ff ffac 	bl	8007150 <__sfp_lock_acquire>
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <__sfp+0x84>)
 80071fa:	681e      	ldr	r6, [r3, #0]
 80071fc:	69b3      	ldr	r3, [r6, #24]
 80071fe:	b913      	cbnz	r3, 8007206 <__sfp+0x16>
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff ffbd 	bl	8007180 <__sinit>
 8007206:	3648      	adds	r6, #72	; 0x48
 8007208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800720c:	3b01      	subs	r3, #1
 800720e:	d503      	bpl.n	8007218 <__sfp+0x28>
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	b30b      	cbz	r3, 8007258 <__sfp+0x68>
 8007214:	6836      	ldr	r6, [r6, #0]
 8007216:	e7f7      	b.n	8007208 <__sfp+0x18>
 8007218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800721c:	b9d5      	cbnz	r5, 8007254 <__sfp+0x64>
 800721e:	4b16      	ldr	r3, [pc, #88]	; (8007278 <__sfp+0x88>)
 8007220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007224:	60e3      	str	r3, [r4, #12]
 8007226:	6665      	str	r5, [r4, #100]	; 0x64
 8007228:	f000 f84c 	bl	80072c4 <__retarget_lock_init_recursive>
 800722c:	f7ff ff96 	bl	800715c <__sfp_lock_release>
 8007230:	2208      	movs	r2, #8
 8007232:	4629      	mov	r1, r5
 8007234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800723c:	6025      	str	r5, [r4, #0]
 800723e:	61a5      	str	r5, [r4, #24]
 8007240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007244:	f7fe fa56 	bl	80056f4 <memset>
 8007248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800724c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007250:	4620      	mov	r0, r4
 8007252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007254:	3468      	adds	r4, #104	; 0x68
 8007256:	e7d9      	b.n	800720c <__sfp+0x1c>
 8007258:	2104      	movs	r1, #4
 800725a:	4638      	mov	r0, r7
 800725c:	f7ff ff62 	bl	8007124 <__sfmoreglue>
 8007260:	4604      	mov	r4, r0
 8007262:	6030      	str	r0, [r6, #0]
 8007264:	2800      	cmp	r0, #0
 8007266:	d1d5      	bne.n	8007214 <__sfp+0x24>
 8007268:	f7ff ff78 	bl	800715c <__sfp_lock_release>
 800726c:	230c      	movs	r3, #12
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	e7ee      	b.n	8007250 <__sfp+0x60>
 8007272:	bf00      	nop
 8007274:	08008de4 	.word	0x08008de4
 8007278:	ffff0001 	.word	0xffff0001

0800727c <_fwalk_reent>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4606      	mov	r6, r0
 8007282:	4688      	mov	r8, r1
 8007284:	2700      	movs	r7, #0
 8007286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800728a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800728e:	f1b9 0901 	subs.w	r9, r9, #1
 8007292:	d505      	bpl.n	80072a0 <_fwalk_reent+0x24>
 8007294:	6824      	ldr	r4, [r4, #0]
 8007296:	2c00      	cmp	r4, #0
 8007298:	d1f7      	bne.n	800728a <_fwalk_reent+0xe>
 800729a:	4638      	mov	r0, r7
 800729c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a0:	89ab      	ldrh	r3, [r5, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d907      	bls.n	80072b6 <_fwalk_reent+0x3a>
 80072a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072aa:	3301      	adds	r3, #1
 80072ac:	d003      	beq.n	80072b6 <_fwalk_reent+0x3a>
 80072ae:	4629      	mov	r1, r5
 80072b0:	4630      	mov	r0, r6
 80072b2:	47c0      	blx	r8
 80072b4:	4307      	orrs	r7, r0
 80072b6:	3568      	adds	r5, #104	; 0x68
 80072b8:	e7e9      	b.n	800728e <_fwalk_reent+0x12>
	...

080072bc <_localeconv_r>:
 80072bc:	4800      	ldr	r0, [pc, #0]	; (80072c0 <_localeconv_r+0x4>)
 80072be:	4770      	bx	lr
 80072c0:	20000160 	.word	0x20000160

080072c4 <__retarget_lock_init_recursive>:
 80072c4:	4770      	bx	lr

080072c6 <__retarget_lock_acquire_recursive>:
 80072c6:	4770      	bx	lr

080072c8 <__retarget_lock_release_recursive>:
 80072c8:	4770      	bx	lr

080072ca <__swhatbuf_r>:
 80072ca:	b570      	push	{r4, r5, r6, lr}
 80072cc:	460e      	mov	r6, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	4614      	mov	r4, r2
 80072d4:	2900      	cmp	r1, #0
 80072d6:	461d      	mov	r5, r3
 80072d8:	b096      	sub	sp, #88	; 0x58
 80072da:	da08      	bge.n	80072ee <__swhatbuf_r+0x24>
 80072dc:	2200      	movs	r2, #0
 80072de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072e2:	602a      	str	r2, [r5, #0]
 80072e4:	061a      	lsls	r2, r3, #24
 80072e6:	d410      	bmi.n	800730a <__swhatbuf_r+0x40>
 80072e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ec:	e00e      	b.n	800730c <__swhatbuf_r+0x42>
 80072ee:	466a      	mov	r2, sp
 80072f0:	f000 fee4 	bl	80080bc <_fstat_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dbf1      	blt.n	80072dc <__swhatbuf_r+0x12>
 80072f8:	9a01      	ldr	r2, [sp, #4]
 80072fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007302:	425a      	negs	r2, r3
 8007304:	415a      	adcs	r2, r3
 8007306:	602a      	str	r2, [r5, #0]
 8007308:	e7ee      	b.n	80072e8 <__swhatbuf_r+0x1e>
 800730a:	2340      	movs	r3, #64	; 0x40
 800730c:	2000      	movs	r0, #0
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	b016      	add	sp, #88	; 0x58
 8007312:	bd70      	pop	{r4, r5, r6, pc}

08007314 <__smakebuf_r>:
 8007314:	898b      	ldrh	r3, [r1, #12]
 8007316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007318:	079d      	lsls	r5, r3, #30
 800731a:	4606      	mov	r6, r0
 800731c:	460c      	mov	r4, r1
 800731e:	d507      	bpl.n	8007330 <__smakebuf_r+0x1c>
 8007320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	2301      	movs	r3, #1
 800732a:	6163      	str	r3, [r4, #20]
 800732c:	b002      	add	sp, #8
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	466a      	mov	r2, sp
 8007332:	ab01      	add	r3, sp, #4
 8007334:	f7ff ffc9 	bl	80072ca <__swhatbuf_r>
 8007338:	9900      	ldr	r1, [sp, #0]
 800733a:	4605      	mov	r5, r0
 800733c:	4630      	mov	r0, r6
 800733e:	f000 fc4b 	bl	8007bd8 <_malloc_r>
 8007342:	b948      	cbnz	r0, 8007358 <__smakebuf_r+0x44>
 8007344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007348:	059a      	lsls	r2, r3, #22
 800734a:	d4ef      	bmi.n	800732c <__smakebuf_r+0x18>
 800734c:	f023 0303 	bic.w	r3, r3, #3
 8007350:	f043 0302 	orr.w	r3, r3, #2
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	e7e3      	b.n	8007320 <__smakebuf_r+0xc>
 8007358:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <__smakebuf_r+0x7c>)
 800735a:	62b3      	str	r3, [r6, #40]	; 0x28
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	6020      	str	r0, [r4, #0]
 8007360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	6120      	str	r0, [r4, #16]
 800736a:	6163      	str	r3, [r4, #20]
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	b15b      	cbz	r3, 8007388 <__smakebuf_r+0x74>
 8007370:	4630      	mov	r0, r6
 8007372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007376:	f000 feb3 	bl	80080e0 <_isatty_r>
 800737a:	b128      	cbz	r0, 8007388 <__smakebuf_r+0x74>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	89a0      	ldrh	r0, [r4, #12]
 800738a:	4305      	orrs	r5, r0
 800738c:	81a5      	strh	r5, [r4, #12]
 800738e:	e7cd      	b.n	800732c <__smakebuf_r+0x18>
 8007390:	08007119 	.word	0x08007119

08007394 <malloc>:
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <malloc+0xc>)
 8007396:	4601      	mov	r1, r0
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	f000 bc1d 	b.w	8007bd8 <_malloc_r>
 800739e:	bf00      	nop
 80073a0:	2000000c 	.word	0x2000000c

080073a4 <memchr>:
 80073a4:	4603      	mov	r3, r0
 80073a6:	b510      	push	{r4, lr}
 80073a8:	b2c9      	uxtb	r1, r1
 80073aa:	4402      	add	r2, r0
 80073ac:	4293      	cmp	r3, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	d101      	bne.n	80073b6 <memchr+0x12>
 80073b2:	2000      	movs	r0, #0
 80073b4:	e003      	b.n	80073be <memchr+0x1a>
 80073b6:	7804      	ldrb	r4, [r0, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	428c      	cmp	r4, r1
 80073bc:	d1f6      	bne.n	80073ac <memchr+0x8>
 80073be:	bd10      	pop	{r4, pc}

080073c0 <memcpy>:
 80073c0:	440a      	add	r2, r1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	b510      	push	{r4, lr}
 80073ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d2:	4291      	cmp	r1, r2
 80073d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d8:	d1f9      	bne.n	80073ce <memcpy+0xe>
 80073da:	bd10      	pop	{r4, pc}

080073dc <_Balloc>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	b976      	cbnz	r6, 8007404 <_Balloc+0x28>
 80073e6:	2010      	movs	r0, #16
 80073e8:	f7ff ffd4 	bl	8007394 <malloc>
 80073ec:	4602      	mov	r2, r0
 80073ee:	6260      	str	r0, [r4, #36]	; 0x24
 80073f0:	b920      	cbnz	r0, 80073fc <_Balloc+0x20>
 80073f2:	2166      	movs	r1, #102	; 0x66
 80073f4:	4b17      	ldr	r3, [pc, #92]	; (8007454 <_Balloc+0x78>)
 80073f6:	4818      	ldr	r0, [pc, #96]	; (8007458 <_Balloc+0x7c>)
 80073f8:	f000 fe20 	bl	800803c <__assert_func>
 80073fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007400:	6006      	str	r6, [r0, #0]
 8007402:	60c6      	str	r6, [r0, #12]
 8007404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007406:	68f3      	ldr	r3, [r6, #12]
 8007408:	b183      	cbz	r3, 800742c <_Balloc+0x50>
 800740a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007412:	b9b8      	cbnz	r0, 8007444 <_Balloc+0x68>
 8007414:	2101      	movs	r1, #1
 8007416:	fa01 f605 	lsl.w	r6, r1, r5
 800741a:	1d72      	adds	r2, r6, #5
 800741c:	4620      	mov	r0, r4
 800741e:	0092      	lsls	r2, r2, #2
 8007420:	f000 fb5e 	bl	8007ae0 <_calloc_r>
 8007424:	b160      	cbz	r0, 8007440 <_Balloc+0x64>
 8007426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800742a:	e00e      	b.n	800744a <_Balloc+0x6e>
 800742c:	2221      	movs	r2, #33	; 0x21
 800742e:	2104      	movs	r1, #4
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fb55 	bl	8007ae0 <_calloc_r>
 8007436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007438:	60f0      	str	r0, [r6, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e4      	bne.n	800740a <_Balloc+0x2e>
 8007440:	2000      	movs	r0, #0
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	6802      	ldr	r2, [r0, #0]
 8007446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800744a:	2300      	movs	r3, #0
 800744c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007450:	e7f7      	b.n	8007442 <_Balloc+0x66>
 8007452:	bf00      	nop
 8007454:	08008e29 	.word	0x08008e29
 8007458:	08008f0c 	.word	0x08008f0c

0800745c <_Bfree>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b976      	cbnz	r6, 8007484 <_Bfree+0x28>
 8007466:	2010      	movs	r0, #16
 8007468:	f7ff ff94 	bl	8007394 <malloc>
 800746c:	4602      	mov	r2, r0
 800746e:	6268      	str	r0, [r5, #36]	; 0x24
 8007470:	b920      	cbnz	r0, 800747c <_Bfree+0x20>
 8007472:	218a      	movs	r1, #138	; 0x8a
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <_Bfree+0x3c>)
 8007476:	4809      	ldr	r0, [pc, #36]	; (800749c <_Bfree+0x40>)
 8007478:	f000 fde0 	bl	800803c <__assert_func>
 800747c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007480:	6006      	str	r6, [r0, #0]
 8007482:	60c6      	str	r6, [r0, #12]
 8007484:	b13c      	cbz	r4, 8007496 <_Bfree+0x3a>
 8007486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007488:	6862      	ldr	r2, [r4, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007490:	6021      	str	r1, [r4, #0]
 8007492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	08008e29 	.word	0x08008e29
 800749c:	08008f0c 	.word	0x08008f0c

080074a0 <__multadd>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	4607      	mov	r7, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	461e      	mov	r6, r3
 80074aa:	2000      	movs	r0, #0
 80074ac:	690d      	ldr	r5, [r1, #16]
 80074ae:	f101 0c14 	add.w	ip, r1, #20
 80074b2:	f8dc 3000 	ldr.w	r3, [ip]
 80074b6:	3001      	adds	r0, #1
 80074b8:	b299      	uxth	r1, r3
 80074ba:	fb02 6101 	mla	r1, r2, r1, r6
 80074be:	0c1e      	lsrs	r6, r3, #16
 80074c0:	0c0b      	lsrs	r3, r1, #16
 80074c2:	fb02 3306 	mla	r3, r2, r6, r3
 80074c6:	b289      	uxth	r1, r1
 80074c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074cc:	4285      	cmp	r5, r0
 80074ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074d2:	f84c 1b04 	str.w	r1, [ip], #4
 80074d6:	dcec      	bgt.n	80074b2 <__multadd+0x12>
 80074d8:	b30e      	cbz	r6, 800751e <__multadd+0x7e>
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	42ab      	cmp	r3, r5
 80074de:	dc19      	bgt.n	8007514 <__multadd+0x74>
 80074e0:	6861      	ldr	r1, [r4, #4]
 80074e2:	4638      	mov	r0, r7
 80074e4:	3101      	adds	r1, #1
 80074e6:	f7ff ff79 	bl	80073dc <_Balloc>
 80074ea:	4680      	mov	r8, r0
 80074ec:	b928      	cbnz	r0, 80074fa <__multadd+0x5a>
 80074ee:	4602      	mov	r2, r0
 80074f0:	21b5      	movs	r1, #181	; 0xb5
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <__multadd+0x84>)
 80074f4:	480c      	ldr	r0, [pc, #48]	; (8007528 <__multadd+0x88>)
 80074f6:	f000 fda1 	bl	800803c <__assert_func>
 80074fa:	6922      	ldr	r2, [r4, #16]
 80074fc:	f104 010c 	add.w	r1, r4, #12
 8007500:	3202      	adds	r2, #2
 8007502:	0092      	lsls	r2, r2, #2
 8007504:	300c      	adds	r0, #12
 8007506:	f7ff ff5b 	bl	80073c0 <memcpy>
 800750a:	4621      	mov	r1, r4
 800750c:	4638      	mov	r0, r7
 800750e:	f7ff ffa5 	bl	800745c <_Bfree>
 8007512:	4644      	mov	r4, r8
 8007514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007518:	3501      	adds	r5, #1
 800751a:	615e      	str	r6, [r3, #20]
 800751c:	6125      	str	r5, [r4, #16]
 800751e:	4620      	mov	r0, r4
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007524:	08008e9b 	.word	0x08008e9b
 8007528:	08008f0c 	.word	0x08008f0c

0800752c <__hi0bits>:
 800752c:	0c02      	lsrs	r2, r0, #16
 800752e:	0412      	lsls	r2, r2, #16
 8007530:	4603      	mov	r3, r0
 8007532:	b9ca      	cbnz	r2, 8007568 <__hi0bits+0x3c>
 8007534:	0403      	lsls	r3, r0, #16
 8007536:	2010      	movs	r0, #16
 8007538:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800753c:	bf04      	itt	eq
 800753e:	021b      	lsleq	r3, r3, #8
 8007540:	3008      	addeq	r0, #8
 8007542:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007546:	bf04      	itt	eq
 8007548:	011b      	lsleq	r3, r3, #4
 800754a:	3004      	addeq	r0, #4
 800754c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007550:	bf04      	itt	eq
 8007552:	009b      	lsleq	r3, r3, #2
 8007554:	3002      	addeq	r0, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	db05      	blt.n	8007566 <__hi0bits+0x3a>
 800755a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800755e:	f100 0001 	add.w	r0, r0, #1
 8007562:	bf08      	it	eq
 8007564:	2020      	moveq	r0, #32
 8007566:	4770      	bx	lr
 8007568:	2000      	movs	r0, #0
 800756a:	e7e5      	b.n	8007538 <__hi0bits+0xc>

0800756c <__lo0bits>:
 800756c:	6803      	ldr	r3, [r0, #0]
 800756e:	4602      	mov	r2, r0
 8007570:	f013 0007 	ands.w	r0, r3, #7
 8007574:	d00b      	beq.n	800758e <__lo0bits+0x22>
 8007576:	07d9      	lsls	r1, r3, #31
 8007578:	d421      	bmi.n	80075be <__lo0bits+0x52>
 800757a:	0798      	lsls	r0, r3, #30
 800757c:	bf49      	itett	mi
 800757e:	085b      	lsrmi	r3, r3, #1
 8007580:	089b      	lsrpl	r3, r3, #2
 8007582:	2001      	movmi	r0, #1
 8007584:	6013      	strmi	r3, [r2, #0]
 8007586:	bf5c      	itt	pl
 8007588:	2002      	movpl	r0, #2
 800758a:	6013      	strpl	r3, [r2, #0]
 800758c:	4770      	bx	lr
 800758e:	b299      	uxth	r1, r3
 8007590:	b909      	cbnz	r1, 8007596 <__lo0bits+0x2a>
 8007592:	2010      	movs	r0, #16
 8007594:	0c1b      	lsrs	r3, r3, #16
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	b909      	cbnz	r1, 800759e <__lo0bits+0x32>
 800759a:	3008      	adds	r0, #8
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	0719      	lsls	r1, r3, #28
 80075a0:	bf04      	itt	eq
 80075a2:	091b      	lsreq	r3, r3, #4
 80075a4:	3004      	addeq	r0, #4
 80075a6:	0799      	lsls	r1, r3, #30
 80075a8:	bf04      	itt	eq
 80075aa:	089b      	lsreq	r3, r3, #2
 80075ac:	3002      	addeq	r0, #2
 80075ae:	07d9      	lsls	r1, r3, #31
 80075b0:	d403      	bmi.n	80075ba <__lo0bits+0x4e>
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	f100 0001 	add.w	r0, r0, #1
 80075b8:	d003      	beq.n	80075c2 <__lo0bits+0x56>
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	4770      	bx	lr
 80075be:	2000      	movs	r0, #0
 80075c0:	4770      	bx	lr
 80075c2:	2020      	movs	r0, #32
 80075c4:	4770      	bx	lr
	...

080075c8 <__i2b>:
 80075c8:	b510      	push	{r4, lr}
 80075ca:	460c      	mov	r4, r1
 80075cc:	2101      	movs	r1, #1
 80075ce:	f7ff ff05 	bl	80073dc <_Balloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__i2b+0x1a>
 80075d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <__i2b+0x24>)
 80075dc:	4804      	ldr	r0, [pc, #16]	; (80075f0 <__i2b+0x28>)
 80075de:	f000 fd2d 	bl	800803c <__assert_func>
 80075e2:	2301      	movs	r3, #1
 80075e4:	6144      	str	r4, [r0, #20]
 80075e6:	6103      	str	r3, [r0, #16]
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	bf00      	nop
 80075ec:	08008e9b 	.word	0x08008e9b
 80075f0:	08008f0c 	.word	0x08008f0c

080075f4 <__multiply>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	4691      	mov	r9, r2
 80075fa:	690a      	ldr	r2, [r1, #16]
 80075fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007600:	460c      	mov	r4, r1
 8007602:	429a      	cmp	r2, r3
 8007604:	bfbe      	ittt	lt
 8007606:	460b      	movlt	r3, r1
 8007608:	464c      	movlt	r4, r9
 800760a:	4699      	movlt	r9, r3
 800760c:	6927      	ldr	r7, [r4, #16]
 800760e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	eb07 060a 	add.w	r6, r7, sl
 800761a:	42b3      	cmp	r3, r6
 800761c:	b085      	sub	sp, #20
 800761e:	bfb8      	it	lt
 8007620:	3101      	addlt	r1, #1
 8007622:	f7ff fedb 	bl	80073dc <_Balloc>
 8007626:	b930      	cbnz	r0, 8007636 <__multiply+0x42>
 8007628:	4602      	mov	r2, r0
 800762a:	f240 115d 	movw	r1, #349	; 0x15d
 800762e:	4b43      	ldr	r3, [pc, #268]	; (800773c <__multiply+0x148>)
 8007630:	4843      	ldr	r0, [pc, #268]	; (8007740 <__multiply+0x14c>)
 8007632:	f000 fd03 	bl	800803c <__assert_func>
 8007636:	f100 0514 	add.w	r5, r0, #20
 800763a:	462b      	mov	r3, r5
 800763c:	2200      	movs	r2, #0
 800763e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007642:	4543      	cmp	r3, r8
 8007644:	d321      	bcc.n	800768a <__multiply+0x96>
 8007646:	f104 0314 	add.w	r3, r4, #20
 800764a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800764e:	f109 0314 	add.w	r3, r9, #20
 8007652:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007656:	9202      	str	r2, [sp, #8]
 8007658:	1b3a      	subs	r2, r7, r4
 800765a:	3a15      	subs	r2, #21
 800765c:	f022 0203 	bic.w	r2, r2, #3
 8007660:	3204      	adds	r2, #4
 8007662:	f104 0115 	add.w	r1, r4, #21
 8007666:	428f      	cmp	r7, r1
 8007668:	bf38      	it	cc
 800766a:	2204      	movcc	r2, #4
 800766c:	9201      	str	r2, [sp, #4]
 800766e:	9a02      	ldr	r2, [sp, #8]
 8007670:	9303      	str	r3, [sp, #12]
 8007672:	429a      	cmp	r2, r3
 8007674:	d80c      	bhi.n	8007690 <__multiply+0x9c>
 8007676:	2e00      	cmp	r6, #0
 8007678:	dd03      	ble.n	8007682 <__multiply+0x8e>
 800767a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800767e:	2b00      	cmp	r3, #0
 8007680:	d059      	beq.n	8007736 <__multiply+0x142>
 8007682:	6106      	str	r6, [r0, #16]
 8007684:	b005      	add	sp, #20
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	f843 2b04 	str.w	r2, [r3], #4
 800768e:	e7d8      	b.n	8007642 <__multiply+0x4e>
 8007690:	f8b3 a000 	ldrh.w	sl, [r3]
 8007694:	f1ba 0f00 	cmp.w	sl, #0
 8007698:	d023      	beq.n	80076e2 <__multiply+0xee>
 800769a:	46a9      	mov	r9, r5
 800769c:	f04f 0c00 	mov.w	ip, #0
 80076a0:	f104 0e14 	add.w	lr, r4, #20
 80076a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076a8:	f8d9 1000 	ldr.w	r1, [r9]
 80076ac:	fa1f fb82 	uxth.w	fp, r2
 80076b0:	b289      	uxth	r1, r1
 80076b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80076b6:	4461      	add	r1, ip
 80076b8:	f8d9 c000 	ldr.w	ip, [r9]
 80076bc:	0c12      	lsrs	r2, r2, #16
 80076be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076c2:	fb0a c202 	mla	r2, sl, r2, ip
 80076c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076ca:	b289      	uxth	r1, r1
 80076cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076d0:	4577      	cmp	r7, lr
 80076d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076d6:	f849 1b04 	str.w	r1, [r9], #4
 80076da:	d8e3      	bhi.n	80076a4 <__multiply+0xb0>
 80076dc:	9a01      	ldr	r2, [sp, #4]
 80076de:	f845 c002 	str.w	ip, [r5, r2]
 80076e2:	9a03      	ldr	r2, [sp, #12]
 80076e4:	3304      	adds	r3, #4
 80076e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80076ea:	f1b9 0f00 	cmp.w	r9, #0
 80076ee:	d020      	beq.n	8007732 <__multiply+0x13e>
 80076f0:	46ae      	mov	lr, r5
 80076f2:	f04f 0a00 	mov.w	sl, #0
 80076f6:	6829      	ldr	r1, [r5, #0]
 80076f8:	f104 0c14 	add.w	ip, r4, #20
 80076fc:	f8bc b000 	ldrh.w	fp, [ip]
 8007700:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007704:	b289      	uxth	r1, r1
 8007706:	fb09 220b 	mla	r2, r9, fp, r2
 800770a:	4492      	add	sl, r2
 800770c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007710:	f84e 1b04 	str.w	r1, [lr], #4
 8007714:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007718:	f8be 1000 	ldrh.w	r1, [lr]
 800771c:	0c12      	lsrs	r2, r2, #16
 800771e:	fb09 1102 	mla	r1, r9, r2, r1
 8007722:	4567      	cmp	r7, ip
 8007724:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007728:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800772c:	d8e6      	bhi.n	80076fc <__multiply+0x108>
 800772e:	9a01      	ldr	r2, [sp, #4]
 8007730:	50a9      	str	r1, [r5, r2]
 8007732:	3504      	adds	r5, #4
 8007734:	e79b      	b.n	800766e <__multiply+0x7a>
 8007736:	3e01      	subs	r6, #1
 8007738:	e79d      	b.n	8007676 <__multiply+0x82>
 800773a:	bf00      	nop
 800773c:	08008e9b 	.word	0x08008e9b
 8007740:	08008f0c 	.word	0x08008f0c

08007744 <__pow5mult>:
 8007744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007748:	4615      	mov	r5, r2
 800774a:	f012 0203 	ands.w	r2, r2, #3
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	d007      	beq.n	8007764 <__pow5mult+0x20>
 8007754:	4c25      	ldr	r4, [pc, #148]	; (80077ec <__pow5mult+0xa8>)
 8007756:	3a01      	subs	r2, #1
 8007758:	2300      	movs	r3, #0
 800775a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800775e:	f7ff fe9f 	bl	80074a0 <__multadd>
 8007762:	4607      	mov	r7, r0
 8007764:	10ad      	asrs	r5, r5, #2
 8007766:	d03d      	beq.n	80077e4 <__pow5mult+0xa0>
 8007768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800776a:	b97c      	cbnz	r4, 800778c <__pow5mult+0x48>
 800776c:	2010      	movs	r0, #16
 800776e:	f7ff fe11 	bl	8007394 <malloc>
 8007772:	4602      	mov	r2, r0
 8007774:	6270      	str	r0, [r6, #36]	; 0x24
 8007776:	b928      	cbnz	r0, 8007784 <__pow5mult+0x40>
 8007778:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800777c:	4b1c      	ldr	r3, [pc, #112]	; (80077f0 <__pow5mult+0xac>)
 800777e:	481d      	ldr	r0, [pc, #116]	; (80077f4 <__pow5mult+0xb0>)
 8007780:	f000 fc5c 	bl	800803c <__assert_func>
 8007784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007788:	6004      	str	r4, [r0, #0]
 800778a:	60c4      	str	r4, [r0, #12]
 800778c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007794:	b94c      	cbnz	r4, 80077aa <__pow5mult+0x66>
 8007796:	f240 2171 	movw	r1, #625	; 0x271
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff ff14 	bl	80075c8 <__i2b>
 80077a0:	2300      	movs	r3, #0
 80077a2:	4604      	mov	r4, r0
 80077a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	f04f 0900 	mov.w	r9, #0
 80077ae:	07eb      	lsls	r3, r5, #31
 80077b0:	d50a      	bpl.n	80077c8 <__pow5mult+0x84>
 80077b2:	4639      	mov	r1, r7
 80077b4:	4622      	mov	r2, r4
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff1c 	bl	80075f4 <__multiply>
 80077bc:	4680      	mov	r8, r0
 80077be:	4639      	mov	r1, r7
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff fe4b 	bl	800745c <_Bfree>
 80077c6:	4647      	mov	r7, r8
 80077c8:	106d      	asrs	r5, r5, #1
 80077ca:	d00b      	beq.n	80077e4 <__pow5mult+0xa0>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	b938      	cbnz	r0, 80077e0 <__pow5mult+0x9c>
 80077d0:	4622      	mov	r2, r4
 80077d2:	4621      	mov	r1, r4
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff ff0d 	bl	80075f4 <__multiply>
 80077da:	6020      	str	r0, [r4, #0]
 80077dc:	f8c0 9000 	str.w	r9, [r0]
 80077e0:	4604      	mov	r4, r0
 80077e2:	e7e4      	b.n	80077ae <__pow5mult+0x6a>
 80077e4:	4638      	mov	r0, r7
 80077e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ea:	bf00      	nop
 80077ec:	08009058 	.word	0x08009058
 80077f0:	08008e29 	.word	0x08008e29
 80077f4:	08008f0c 	.word	0x08008f0c

080077f8 <__lshift>:
 80077f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fc:	460c      	mov	r4, r1
 80077fe:	4607      	mov	r7, r0
 8007800:	4691      	mov	r9, r2
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	6849      	ldr	r1, [r1, #4]
 8007806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007810:	f108 0601 	add.w	r6, r8, #1
 8007814:	42b3      	cmp	r3, r6
 8007816:	db0b      	blt.n	8007830 <__lshift+0x38>
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff fddf 	bl	80073dc <_Balloc>
 800781e:	4605      	mov	r5, r0
 8007820:	b948      	cbnz	r0, 8007836 <__lshift+0x3e>
 8007822:	4602      	mov	r2, r0
 8007824:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007828:	4b29      	ldr	r3, [pc, #164]	; (80078d0 <__lshift+0xd8>)
 800782a:	482a      	ldr	r0, [pc, #168]	; (80078d4 <__lshift+0xdc>)
 800782c:	f000 fc06 	bl	800803c <__assert_func>
 8007830:	3101      	adds	r1, #1
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	e7ee      	b.n	8007814 <__lshift+0x1c>
 8007836:	2300      	movs	r3, #0
 8007838:	f100 0114 	add.w	r1, r0, #20
 800783c:	f100 0210 	add.w	r2, r0, #16
 8007840:	4618      	mov	r0, r3
 8007842:	4553      	cmp	r3, sl
 8007844:	db37      	blt.n	80078b6 <__lshift+0xbe>
 8007846:	6920      	ldr	r0, [r4, #16]
 8007848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800784c:	f104 0314 	add.w	r3, r4, #20
 8007850:	f019 091f 	ands.w	r9, r9, #31
 8007854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800785c:	d02f      	beq.n	80078be <__lshift+0xc6>
 800785e:	468a      	mov	sl, r1
 8007860:	f04f 0c00 	mov.w	ip, #0
 8007864:	f1c9 0e20 	rsb	lr, r9, #32
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	fa02 f209 	lsl.w	r2, r2, r9
 800786e:	ea42 020c 	orr.w	r2, r2, ip
 8007872:	f84a 2b04 	str.w	r2, [sl], #4
 8007876:	f853 2b04 	ldr.w	r2, [r3], #4
 800787a:	4298      	cmp	r0, r3
 800787c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007880:	d8f2      	bhi.n	8007868 <__lshift+0x70>
 8007882:	1b03      	subs	r3, r0, r4
 8007884:	3b15      	subs	r3, #21
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	3304      	adds	r3, #4
 800788c:	f104 0215 	add.w	r2, r4, #21
 8007890:	4290      	cmp	r0, r2
 8007892:	bf38      	it	cc
 8007894:	2304      	movcc	r3, #4
 8007896:	f841 c003 	str.w	ip, [r1, r3]
 800789a:	f1bc 0f00 	cmp.w	ip, #0
 800789e:	d001      	beq.n	80078a4 <__lshift+0xac>
 80078a0:	f108 0602 	add.w	r6, r8, #2
 80078a4:	3e01      	subs	r6, #1
 80078a6:	4638      	mov	r0, r7
 80078a8:	4621      	mov	r1, r4
 80078aa:	612e      	str	r6, [r5, #16]
 80078ac:	f7ff fdd6 	bl	800745c <_Bfree>
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ba:	3301      	adds	r3, #1
 80078bc:	e7c1      	b.n	8007842 <__lshift+0x4a>
 80078be:	3904      	subs	r1, #4
 80078c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c4:	4298      	cmp	r0, r3
 80078c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80078ca:	d8f9      	bhi.n	80078c0 <__lshift+0xc8>
 80078cc:	e7ea      	b.n	80078a4 <__lshift+0xac>
 80078ce:	bf00      	nop
 80078d0:	08008e9b 	.word	0x08008e9b
 80078d4:	08008f0c 	.word	0x08008f0c

080078d8 <__mcmp>:
 80078d8:	4603      	mov	r3, r0
 80078da:	690a      	ldr	r2, [r1, #16]
 80078dc:	6900      	ldr	r0, [r0, #16]
 80078de:	b530      	push	{r4, r5, lr}
 80078e0:	1a80      	subs	r0, r0, r2
 80078e2:	d10d      	bne.n	8007900 <__mcmp+0x28>
 80078e4:	3314      	adds	r3, #20
 80078e6:	3114      	adds	r1, #20
 80078e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078f8:	4295      	cmp	r5, r2
 80078fa:	d002      	beq.n	8007902 <__mcmp+0x2a>
 80078fc:	d304      	bcc.n	8007908 <__mcmp+0x30>
 80078fe:	2001      	movs	r0, #1
 8007900:	bd30      	pop	{r4, r5, pc}
 8007902:	42a3      	cmp	r3, r4
 8007904:	d3f4      	bcc.n	80078f0 <__mcmp+0x18>
 8007906:	e7fb      	b.n	8007900 <__mcmp+0x28>
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e7f8      	b.n	8007900 <__mcmp+0x28>
	...

08007910 <__mdiff>:
 8007910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	460d      	mov	r5, r1
 8007916:	4607      	mov	r7, r0
 8007918:	4611      	mov	r1, r2
 800791a:	4628      	mov	r0, r5
 800791c:	4614      	mov	r4, r2
 800791e:	f7ff ffdb 	bl	80078d8 <__mcmp>
 8007922:	1e06      	subs	r6, r0, #0
 8007924:	d111      	bne.n	800794a <__mdiff+0x3a>
 8007926:	4631      	mov	r1, r6
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff fd57 	bl	80073dc <_Balloc>
 800792e:	4602      	mov	r2, r0
 8007930:	b928      	cbnz	r0, 800793e <__mdiff+0x2e>
 8007932:	f240 2132 	movw	r1, #562	; 0x232
 8007936:	4b3a      	ldr	r3, [pc, #232]	; (8007a20 <__mdiff+0x110>)
 8007938:	483a      	ldr	r0, [pc, #232]	; (8007a24 <__mdiff+0x114>)
 800793a:	f000 fb7f 	bl	800803c <__assert_func>
 800793e:	2301      	movs	r3, #1
 8007940:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007944:	4610      	mov	r0, r2
 8007946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794a:	bfa4      	itt	ge
 800794c:	4623      	movge	r3, r4
 800794e:	462c      	movge	r4, r5
 8007950:	4638      	mov	r0, r7
 8007952:	6861      	ldr	r1, [r4, #4]
 8007954:	bfa6      	itte	ge
 8007956:	461d      	movge	r5, r3
 8007958:	2600      	movge	r6, #0
 800795a:	2601      	movlt	r6, #1
 800795c:	f7ff fd3e 	bl	80073dc <_Balloc>
 8007960:	4602      	mov	r2, r0
 8007962:	b918      	cbnz	r0, 800796c <__mdiff+0x5c>
 8007964:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007968:	4b2d      	ldr	r3, [pc, #180]	; (8007a20 <__mdiff+0x110>)
 800796a:	e7e5      	b.n	8007938 <__mdiff+0x28>
 800796c:	f102 0814 	add.w	r8, r2, #20
 8007970:	46c2      	mov	sl, r8
 8007972:	f04f 0c00 	mov.w	ip, #0
 8007976:	6927      	ldr	r7, [r4, #16]
 8007978:	60c6      	str	r6, [r0, #12]
 800797a:	692e      	ldr	r6, [r5, #16]
 800797c:	f104 0014 	add.w	r0, r4, #20
 8007980:	f105 0914 	add.w	r9, r5, #20
 8007984:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800798c:	3410      	adds	r4, #16
 800798e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007992:	f859 3b04 	ldr.w	r3, [r9], #4
 8007996:	fa1f f18b 	uxth.w	r1, fp
 800799a:	448c      	add	ip, r1
 800799c:	b299      	uxth	r1, r3
 800799e:	0c1b      	lsrs	r3, r3, #16
 80079a0:	ebac 0101 	sub.w	r1, ip, r1
 80079a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079ac:	b289      	uxth	r1, r1
 80079ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079b2:	454e      	cmp	r6, r9
 80079b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80079b8:	f84a 3b04 	str.w	r3, [sl], #4
 80079bc:	d8e7      	bhi.n	800798e <__mdiff+0x7e>
 80079be:	1b73      	subs	r3, r6, r5
 80079c0:	3b15      	subs	r3, #21
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	3515      	adds	r5, #21
 80079c8:	3304      	adds	r3, #4
 80079ca:	42ae      	cmp	r6, r5
 80079cc:	bf38      	it	cc
 80079ce:	2304      	movcc	r3, #4
 80079d0:	4418      	add	r0, r3
 80079d2:	4443      	add	r3, r8
 80079d4:	461e      	mov	r6, r3
 80079d6:	4605      	mov	r5, r0
 80079d8:	4575      	cmp	r5, lr
 80079da:	d30e      	bcc.n	80079fa <__mdiff+0xea>
 80079dc:	f10e 0103 	add.w	r1, lr, #3
 80079e0:	1a09      	subs	r1, r1, r0
 80079e2:	f021 0103 	bic.w	r1, r1, #3
 80079e6:	3803      	subs	r0, #3
 80079e8:	4586      	cmp	lr, r0
 80079ea:	bf38      	it	cc
 80079ec:	2100      	movcc	r1, #0
 80079ee:	4419      	add	r1, r3
 80079f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80079f4:	b18b      	cbz	r3, 8007a1a <__mdiff+0x10a>
 80079f6:	6117      	str	r7, [r2, #16]
 80079f8:	e7a4      	b.n	8007944 <__mdiff+0x34>
 80079fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80079fe:	fa1f f188 	uxth.w	r1, r8
 8007a02:	4461      	add	r1, ip
 8007a04:	140c      	asrs	r4, r1, #16
 8007a06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a0a:	b289      	uxth	r1, r1
 8007a0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a10:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a14:	f846 1b04 	str.w	r1, [r6], #4
 8007a18:	e7de      	b.n	80079d8 <__mdiff+0xc8>
 8007a1a:	3f01      	subs	r7, #1
 8007a1c:	e7e8      	b.n	80079f0 <__mdiff+0xe0>
 8007a1e:	bf00      	nop
 8007a20:	08008e9b 	.word	0x08008e9b
 8007a24:	08008f0c 	.word	0x08008f0c

08007a28 <__d2b>:
 8007a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007a32:	4690      	mov	r8, r2
 8007a34:	461d      	mov	r5, r3
 8007a36:	f7ff fcd1 	bl	80073dc <_Balloc>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	b930      	cbnz	r0, 8007a4c <__d2b+0x24>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	f240 310a 	movw	r1, #778	; 0x30a
 8007a44:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <__d2b+0xb0>)
 8007a46:	4825      	ldr	r0, [pc, #148]	; (8007adc <__d2b+0xb4>)
 8007a48:	f000 faf8 	bl	800803c <__assert_func>
 8007a4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007a50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007a54:	bb2d      	cbnz	r5, 8007aa2 <__d2b+0x7a>
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	f1b8 0300 	subs.w	r3, r8, #0
 8007a5c:	d026      	beq.n	8007aac <__d2b+0x84>
 8007a5e:	4668      	mov	r0, sp
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	f7ff fd83 	bl	800756c <__lo0bits>
 8007a66:	9900      	ldr	r1, [sp, #0]
 8007a68:	b1f0      	cbz	r0, 8007aa8 <__d2b+0x80>
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	f1c0 0320 	rsb	r3, r0, #32
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	430b      	orrs	r3, r1
 8007a76:	40c2      	lsrs	r2, r0
 8007a78:	6163      	str	r3, [r4, #20]
 8007a7a:	9201      	str	r2, [sp, #4]
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bf14      	ite	ne
 8007a82:	2102      	movne	r1, #2
 8007a84:	2101      	moveq	r1, #1
 8007a86:	61a3      	str	r3, [r4, #24]
 8007a88:	6121      	str	r1, [r4, #16]
 8007a8a:	b1c5      	cbz	r5, 8007abe <__d2b+0x96>
 8007a8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a90:	4405      	add	r5, r0
 8007a92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a96:	603d      	str	r5, [r7, #0]
 8007a98:	6030      	str	r0, [r6, #0]
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	b002      	add	sp, #8
 8007a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aa6:	e7d6      	b.n	8007a56 <__d2b+0x2e>
 8007aa8:	6161      	str	r1, [r4, #20]
 8007aaa:	e7e7      	b.n	8007a7c <__d2b+0x54>
 8007aac:	a801      	add	r0, sp, #4
 8007aae:	f7ff fd5d 	bl	800756c <__lo0bits>
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	6121      	str	r1, [r4, #16]
 8007ab8:	6163      	str	r3, [r4, #20]
 8007aba:	3020      	adds	r0, #32
 8007abc:	e7e5      	b.n	8007a8a <__d2b+0x62>
 8007abe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007ac2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ac6:	6038      	str	r0, [r7, #0]
 8007ac8:	6918      	ldr	r0, [r3, #16]
 8007aca:	f7ff fd2f 	bl	800752c <__hi0bits>
 8007ace:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007ad2:	6031      	str	r1, [r6, #0]
 8007ad4:	e7e1      	b.n	8007a9a <__d2b+0x72>
 8007ad6:	bf00      	nop
 8007ad8:	08008e9b 	.word	0x08008e9b
 8007adc:	08008f0c 	.word	0x08008f0c

08007ae0 <_calloc_r>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	fba1 5402 	umull	r5, r4, r1, r2
 8007ae6:	b934      	cbnz	r4, 8007af6 <_calloc_r+0x16>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f000 f875 	bl	8007bd8 <_malloc_r>
 8007aee:	4606      	mov	r6, r0
 8007af0:	b928      	cbnz	r0, 8007afe <_calloc_r+0x1e>
 8007af2:	4630      	mov	r0, r6
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
 8007af6:	220c      	movs	r2, #12
 8007af8:	2600      	movs	r6, #0
 8007afa:	6002      	str	r2, [r0, #0]
 8007afc:	e7f9      	b.n	8007af2 <_calloc_r+0x12>
 8007afe:	462a      	mov	r2, r5
 8007b00:	4621      	mov	r1, r4
 8007b02:	f7fd fdf7 	bl	80056f4 <memset>
 8007b06:	e7f4      	b.n	8007af2 <_calloc_r+0x12>

08007b08 <_free_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	d040      	beq.n	8007b92 <_free_r+0x8a>
 8007b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b14:	1f0c      	subs	r4, r1, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfb8      	it	lt
 8007b1a:	18e4      	addlt	r4, r4, r3
 8007b1c:	f000 fb14 	bl	8008148 <__malloc_lock>
 8007b20:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <_free_r+0x8c>)
 8007b22:	6813      	ldr	r3, [r2, #0]
 8007b24:	b933      	cbnz	r3, 8007b34 <_free_r+0x2c>
 8007b26:	6063      	str	r3, [r4, #4]
 8007b28:	6014      	str	r4, [r2, #0]
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b30:	f000 bb10 	b.w	8008154 <__malloc_unlock>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d908      	bls.n	8007b4a <_free_r+0x42>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	1821      	adds	r1, r4, r0
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	bf01      	itttt	eq
 8007b40:	6819      	ldreq	r1, [r3, #0]
 8007b42:	685b      	ldreq	r3, [r3, #4]
 8007b44:	1809      	addeq	r1, r1, r0
 8007b46:	6021      	streq	r1, [r4, #0]
 8007b48:	e7ed      	b.n	8007b26 <_free_r+0x1e>
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b10b      	cbz	r3, 8007b54 <_free_r+0x4c>
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d9fa      	bls.n	8007b4a <_free_r+0x42>
 8007b54:	6811      	ldr	r1, [r2, #0]
 8007b56:	1850      	adds	r0, r2, r1
 8007b58:	42a0      	cmp	r0, r4
 8007b5a:	d10b      	bne.n	8007b74 <_free_r+0x6c>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	4401      	add	r1, r0
 8007b60:	1850      	adds	r0, r2, r1
 8007b62:	4283      	cmp	r3, r0
 8007b64:	6011      	str	r1, [r2, #0]
 8007b66:	d1e0      	bne.n	8007b2a <_free_r+0x22>
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4401      	add	r1, r0
 8007b6e:	6011      	str	r1, [r2, #0]
 8007b70:	6053      	str	r3, [r2, #4]
 8007b72:	e7da      	b.n	8007b2a <_free_r+0x22>
 8007b74:	d902      	bls.n	8007b7c <_free_r+0x74>
 8007b76:	230c      	movs	r3, #12
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	e7d6      	b.n	8007b2a <_free_r+0x22>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428b      	cmp	r3, r1
 8007b82:	bf01      	itttt	eq
 8007b84:	6819      	ldreq	r1, [r3, #0]
 8007b86:	685b      	ldreq	r3, [r3, #4]
 8007b88:	1809      	addeq	r1, r1, r0
 8007b8a:	6021      	streq	r1, [r4, #0]
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	6054      	str	r4, [r2, #4]
 8007b90:	e7cb      	b.n	8007b2a <_free_r+0x22>
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	200003dc 	.word	0x200003dc

08007b98 <sbrk_aligned>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4e0e      	ldr	r6, [pc, #56]	; (8007bd4 <sbrk_aligned+0x3c>)
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	6831      	ldr	r1, [r6, #0]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	b911      	cbnz	r1, 8007baa <sbrk_aligned+0x12>
 8007ba4:	f000 f9e4 	bl	8007f70 <_sbrk_r>
 8007ba8:	6030      	str	r0, [r6, #0]
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 f9df 	bl	8007f70 <_sbrk_r>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d00a      	beq.n	8007bcc <sbrk_aligned+0x34>
 8007bb6:	1cc4      	adds	r4, r0, #3
 8007bb8:	f024 0403 	bic.w	r4, r4, #3
 8007bbc:	42a0      	cmp	r0, r4
 8007bbe:	d007      	beq.n	8007bd0 <sbrk_aligned+0x38>
 8007bc0:	1a21      	subs	r1, r4, r0
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f9d4 	bl	8007f70 <_sbrk_r>
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d101      	bne.n	8007bd0 <sbrk_aligned+0x38>
 8007bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	200003e0 	.word	0x200003e0

08007bd8 <_malloc_r>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	1ccd      	adds	r5, r1, #3
 8007bde:	f025 0503 	bic.w	r5, r5, #3
 8007be2:	3508      	adds	r5, #8
 8007be4:	2d0c      	cmp	r5, #12
 8007be6:	bf38      	it	cc
 8007be8:	250c      	movcc	r5, #12
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	4607      	mov	r7, r0
 8007bee:	db01      	blt.n	8007bf4 <_malloc_r+0x1c>
 8007bf0:	42a9      	cmp	r1, r5
 8007bf2:	d905      	bls.n	8007c00 <_malloc_r+0x28>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	603b      	str	r3, [r7, #0]
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	4e2e      	ldr	r6, [pc, #184]	; (8007cbc <_malloc_r+0xe4>)
 8007c02:	f000 faa1 	bl	8008148 <__malloc_lock>
 8007c06:	6833      	ldr	r3, [r6, #0]
 8007c08:	461c      	mov	r4, r3
 8007c0a:	bb34      	cbnz	r4, 8007c5a <_malloc_r+0x82>
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7ff ffc2 	bl	8007b98 <sbrk_aligned>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	4604      	mov	r4, r0
 8007c18:	d14d      	bne.n	8007cb6 <_malloc_r+0xde>
 8007c1a:	6834      	ldr	r4, [r6, #0]
 8007c1c:	4626      	mov	r6, r4
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	d140      	bne.n	8007ca4 <_malloc_r+0xcc>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	4631      	mov	r1, r6
 8007c26:	4638      	mov	r0, r7
 8007c28:	eb04 0803 	add.w	r8, r4, r3
 8007c2c:	f000 f9a0 	bl	8007f70 <_sbrk_r>
 8007c30:	4580      	cmp	r8, r0
 8007c32:	d13a      	bne.n	8007caa <_malloc_r+0xd2>
 8007c34:	6821      	ldr	r1, [r4, #0]
 8007c36:	3503      	adds	r5, #3
 8007c38:	1a6d      	subs	r5, r5, r1
 8007c3a:	f025 0503 	bic.w	r5, r5, #3
 8007c3e:	3508      	adds	r5, #8
 8007c40:	2d0c      	cmp	r5, #12
 8007c42:	bf38      	it	cc
 8007c44:	250c      	movcc	r5, #12
 8007c46:	4638      	mov	r0, r7
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7ff ffa5 	bl	8007b98 <sbrk_aligned>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d02b      	beq.n	8007caa <_malloc_r+0xd2>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	442b      	add	r3, r5
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	e00e      	b.n	8007c78 <_malloc_r+0xa0>
 8007c5a:	6822      	ldr	r2, [r4, #0]
 8007c5c:	1b52      	subs	r2, r2, r5
 8007c5e:	d41e      	bmi.n	8007c9e <_malloc_r+0xc6>
 8007c60:	2a0b      	cmp	r2, #11
 8007c62:	d916      	bls.n	8007c92 <_malloc_r+0xba>
 8007c64:	1961      	adds	r1, r4, r5
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	6025      	str	r5, [r4, #0]
 8007c6a:	bf18      	it	ne
 8007c6c:	6059      	strne	r1, [r3, #4]
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	bf08      	it	eq
 8007c72:	6031      	streq	r1, [r6, #0]
 8007c74:	5162      	str	r2, [r4, r5]
 8007c76:	604b      	str	r3, [r1, #4]
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f104 060b 	add.w	r6, r4, #11
 8007c7e:	f000 fa69 	bl	8008154 <__malloc_unlock>
 8007c82:	f026 0607 	bic.w	r6, r6, #7
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	1af2      	subs	r2, r6, r3
 8007c8a:	d0b6      	beq.n	8007bfa <_malloc_r+0x22>
 8007c8c:	1b9b      	subs	r3, r3, r6
 8007c8e:	50a3      	str	r3, [r4, r2]
 8007c90:	e7b3      	b.n	8007bfa <_malloc_r+0x22>
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	bf0c      	ite	eq
 8007c98:	6032      	streq	r2, [r6, #0]
 8007c9a:	605a      	strne	r2, [r3, #4]
 8007c9c:	e7ec      	b.n	8007c78 <_malloc_r+0xa0>
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	6864      	ldr	r4, [r4, #4]
 8007ca2:	e7b2      	b.n	8007c0a <_malloc_r+0x32>
 8007ca4:	4634      	mov	r4, r6
 8007ca6:	6876      	ldr	r6, [r6, #4]
 8007ca8:	e7b9      	b.n	8007c1e <_malloc_r+0x46>
 8007caa:	230c      	movs	r3, #12
 8007cac:	4638      	mov	r0, r7
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	f000 fa50 	bl	8008154 <__malloc_unlock>
 8007cb4:	e7a1      	b.n	8007bfa <_malloc_r+0x22>
 8007cb6:	6025      	str	r5, [r4, #0]
 8007cb8:	e7de      	b.n	8007c78 <_malloc_r+0xa0>
 8007cba:	bf00      	nop
 8007cbc:	200003dc 	.word	0x200003dc

08007cc0 <__sfputc_r>:
 8007cc0:	6893      	ldr	r3, [r2, #8]
 8007cc2:	b410      	push	{r4}
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	6093      	str	r3, [r2, #8]
 8007cca:	da07      	bge.n	8007cdc <__sfputc_r+0x1c>
 8007ccc:	6994      	ldr	r4, [r2, #24]
 8007cce:	42a3      	cmp	r3, r4
 8007cd0:	db01      	blt.n	8007cd6 <__sfputc_r+0x16>
 8007cd2:	290a      	cmp	r1, #10
 8007cd4:	d102      	bne.n	8007cdc <__sfputc_r+0x1c>
 8007cd6:	bc10      	pop	{r4}
 8007cd8:	f7fe ba02 	b.w	80060e0 <__swbuf_r>
 8007cdc:	6813      	ldr	r3, [r2, #0]
 8007cde:	1c58      	adds	r0, r3, #1
 8007ce0:	6010      	str	r0, [r2, #0]
 8007ce2:	7019      	strb	r1, [r3, #0]
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	bc10      	pop	{r4}
 8007ce8:	4770      	bx	lr

08007cea <__sfputs_r>:
 8007cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cec:	4606      	mov	r6, r0
 8007cee:	460f      	mov	r7, r1
 8007cf0:	4614      	mov	r4, r2
 8007cf2:	18d5      	adds	r5, r2, r3
 8007cf4:	42ac      	cmp	r4, r5
 8007cf6:	d101      	bne.n	8007cfc <__sfputs_r+0x12>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e007      	b.n	8007d0c <__sfputs_r+0x22>
 8007cfc:	463a      	mov	r2, r7
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d04:	f7ff ffdc 	bl	8007cc0 <__sfputc_r>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d1f3      	bne.n	8007cf4 <__sfputs_r+0xa>
 8007d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d10 <_vfiprintf_r>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	460d      	mov	r5, r1
 8007d16:	4614      	mov	r4, r2
 8007d18:	4698      	mov	r8, r3
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	b09d      	sub	sp, #116	; 0x74
 8007d1e:	b118      	cbz	r0, 8007d28 <_vfiprintf_r+0x18>
 8007d20:	6983      	ldr	r3, [r0, #24]
 8007d22:	b90b      	cbnz	r3, 8007d28 <_vfiprintf_r+0x18>
 8007d24:	f7ff fa2c 	bl	8007180 <__sinit>
 8007d28:	4b89      	ldr	r3, [pc, #548]	; (8007f50 <_vfiprintf_r+0x240>)
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	d11b      	bne.n	8007d66 <_vfiprintf_r+0x56>
 8007d2e:	6875      	ldr	r5, [r6, #4]
 8007d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d32:	07d9      	lsls	r1, r3, #31
 8007d34:	d405      	bmi.n	8007d42 <_vfiprintf_r+0x32>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	059a      	lsls	r2, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_vfiprintf_r+0x32>
 8007d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3e:	f7ff fac2 	bl	80072c6 <__retarget_lock_acquire_recursive>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	071b      	lsls	r3, r3, #28
 8007d46:	d501      	bpl.n	8007d4c <_vfiprintf_r+0x3c>
 8007d48:	692b      	ldr	r3, [r5, #16]
 8007d4a:	b9eb      	cbnz	r3, 8007d88 <_vfiprintf_r+0x78>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7fe fa18 	bl	8006184 <__swsetup_r>
 8007d54:	b1c0      	cbz	r0, 8007d88 <_vfiprintf_r+0x78>
 8007d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d58:	07dc      	lsls	r4, r3, #31
 8007d5a:	d50e      	bpl.n	8007d7a <_vfiprintf_r+0x6a>
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	b01d      	add	sp, #116	; 0x74
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	4b7b      	ldr	r3, [pc, #492]	; (8007f54 <_vfiprintf_r+0x244>)
 8007d68:	429d      	cmp	r5, r3
 8007d6a:	d101      	bne.n	8007d70 <_vfiprintf_r+0x60>
 8007d6c:	68b5      	ldr	r5, [r6, #8]
 8007d6e:	e7df      	b.n	8007d30 <_vfiprintf_r+0x20>
 8007d70:	4b79      	ldr	r3, [pc, #484]	; (8007f58 <_vfiprintf_r+0x248>)
 8007d72:	429d      	cmp	r5, r3
 8007d74:	bf08      	it	eq
 8007d76:	68f5      	ldreq	r5, [r6, #12]
 8007d78:	e7da      	b.n	8007d30 <_vfiprintf_r+0x20>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	0598      	lsls	r0, r3, #22
 8007d7e:	d4ed      	bmi.n	8007d5c <_vfiprintf_r+0x4c>
 8007d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d82:	f7ff faa1 	bl	80072c8 <__retarget_lock_release_recursive>
 8007d86:	e7e9      	b.n	8007d5c <_vfiprintf_r+0x4c>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d92:	2330      	movs	r3, #48	; 0x30
 8007d94:	f04f 0901 	mov.w	r9, #1
 8007d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f5c <_vfiprintf_r+0x24c>
 8007da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da4:	4623      	mov	r3, r4
 8007da6:	469a      	mov	sl, r3
 8007da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dac:	b10a      	cbz	r2, 8007db2 <_vfiprintf_r+0xa2>
 8007dae:	2a25      	cmp	r2, #37	; 0x25
 8007db0:	d1f9      	bne.n	8007da6 <_vfiprintf_r+0x96>
 8007db2:	ebba 0b04 	subs.w	fp, sl, r4
 8007db6:	d00b      	beq.n	8007dd0 <_vfiprintf_r+0xc0>
 8007db8:	465b      	mov	r3, fp
 8007dba:	4622      	mov	r2, r4
 8007dbc:	4629      	mov	r1, r5
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7ff ff93 	bl	8007cea <__sfputs_r>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	f000 80aa 	beq.w	8007f1e <_vfiprintf_r+0x20e>
 8007dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dcc:	445a      	add	r2, fp
 8007dce:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 80a2 	beq.w	8007f1e <_vfiprintf_r+0x20e>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de4:	f10a 0a01 	add.w	sl, sl, #1
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	9307      	str	r3, [sp, #28]
 8007dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007df0:	931a      	str	r3, [sp, #104]	; 0x68
 8007df2:	4654      	mov	r4, sl
 8007df4:	2205      	movs	r2, #5
 8007df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfa:	4858      	ldr	r0, [pc, #352]	; (8007f5c <_vfiprintf_r+0x24c>)
 8007dfc:	f7ff fad2 	bl	80073a4 <memchr>
 8007e00:	9a04      	ldr	r2, [sp, #16]
 8007e02:	b9d8      	cbnz	r0, 8007e3c <_vfiprintf_r+0x12c>
 8007e04:	06d1      	lsls	r1, r2, #27
 8007e06:	bf44      	itt	mi
 8007e08:	2320      	movmi	r3, #32
 8007e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0e:	0713      	lsls	r3, r2, #28
 8007e10:	bf44      	itt	mi
 8007e12:	232b      	movmi	r3, #43	; 0x2b
 8007e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e18:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1e:	d015      	beq.n	8007e4c <_vfiprintf_r+0x13c>
 8007e20:	4654      	mov	r4, sl
 8007e22:	2000      	movs	r0, #0
 8007e24:	f04f 0c0a 	mov.w	ip, #10
 8007e28:	9a07      	ldr	r2, [sp, #28]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e30:	3b30      	subs	r3, #48	; 0x30
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	d94e      	bls.n	8007ed4 <_vfiprintf_r+0x1c4>
 8007e36:	b1b0      	cbz	r0, 8007e66 <_vfiprintf_r+0x156>
 8007e38:	9207      	str	r2, [sp, #28]
 8007e3a:	e014      	b.n	8007e66 <_vfiprintf_r+0x156>
 8007e3c:	eba0 0308 	sub.w	r3, r0, r8
 8007e40:	fa09 f303 	lsl.w	r3, r9, r3
 8007e44:	4313      	orrs	r3, r2
 8007e46:	46a2      	mov	sl, r4
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	e7d2      	b.n	8007df2 <_vfiprintf_r+0xe2>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	1d19      	adds	r1, r3, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	9103      	str	r1, [sp, #12]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bfbb      	ittet	lt
 8007e58:	425b      	neglt	r3, r3
 8007e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e5e:	9307      	strge	r3, [sp, #28]
 8007e60:	9307      	strlt	r3, [sp, #28]
 8007e62:	bfb8      	it	lt
 8007e64:	9204      	strlt	r2, [sp, #16]
 8007e66:	7823      	ldrb	r3, [r4, #0]
 8007e68:	2b2e      	cmp	r3, #46	; 0x2e
 8007e6a:	d10c      	bne.n	8007e86 <_vfiprintf_r+0x176>
 8007e6c:	7863      	ldrb	r3, [r4, #1]
 8007e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e70:	d135      	bne.n	8007ede <_vfiprintf_r+0x1ce>
 8007e72:	9b03      	ldr	r3, [sp, #12]
 8007e74:	3402      	adds	r4, #2
 8007e76:	1d1a      	adds	r2, r3, #4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	9203      	str	r2, [sp, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfb8      	it	lt
 8007e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007f60 <_vfiprintf_r+0x250>
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	7821      	ldrb	r1, [r4, #0]
 8007e90:	f7ff fa88 	bl	80073a4 <memchr>
 8007e94:	b140      	cbz	r0, 8007ea8 <_vfiprintf_r+0x198>
 8007e96:	2340      	movs	r3, #64	; 0x40
 8007e98:	eba0 000a 	sub.w	r0, r0, sl
 8007e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	3401      	adds	r4, #1
 8007ea4:	4303      	orrs	r3, r0
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eac:	2206      	movs	r2, #6
 8007eae:	482d      	ldr	r0, [pc, #180]	; (8007f64 <_vfiprintf_r+0x254>)
 8007eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb4:	f7ff fa76 	bl	80073a4 <memchr>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d03f      	beq.n	8007f3c <_vfiprintf_r+0x22c>
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <_vfiprintf_r+0x258>)
 8007ebe:	bb1b      	cbnz	r3, 8007f08 <_vfiprintf_r+0x1f8>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	3307      	adds	r3, #7
 8007ec4:	f023 0307 	bic.w	r3, r3, #7
 8007ec8:	3308      	adds	r3, #8
 8007eca:	9303      	str	r3, [sp, #12]
 8007ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ece:	443b      	add	r3, r7
 8007ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed2:	e767      	b.n	8007da4 <_vfiprintf_r+0x94>
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007edc:	e7a5      	b.n	8007e2a <_vfiprintf_r+0x11a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f04f 0c0a 	mov.w	ip, #10
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	3401      	adds	r4, #1
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	4620      	mov	r0, r4
 8007eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef0:	3a30      	subs	r2, #48	; 0x30
 8007ef2:	2a09      	cmp	r2, #9
 8007ef4:	d903      	bls.n	8007efe <_vfiprintf_r+0x1ee>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0c5      	beq.n	8007e86 <_vfiprintf_r+0x176>
 8007efa:	9105      	str	r1, [sp, #20]
 8007efc:	e7c3      	b.n	8007e86 <_vfiprintf_r+0x176>
 8007efe:	4604      	mov	r4, r0
 8007f00:	2301      	movs	r3, #1
 8007f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f06:	e7f0      	b.n	8007eea <_vfiprintf_r+0x1da>
 8007f08:	ab03      	add	r3, sp, #12
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <_vfiprintf_r+0x25c>)
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	f7fd fc94 	bl	8005840 <_printf_float>
 8007f18:	4607      	mov	r7, r0
 8007f1a:	1c78      	adds	r0, r7, #1
 8007f1c:	d1d6      	bne.n	8007ecc <_vfiprintf_r+0x1bc>
 8007f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f20:	07d9      	lsls	r1, r3, #31
 8007f22:	d405      	bmi.n	8007f30 <_vfiprintf_r+0x220>
 8007f24:	89ab      	ldrh	r3, [r5, #12]
 8007f26:	059a      	lsls	r2, r3, #22
 8007f28:	d402      	bmi.n	8007f30 <_vfiprintf_r+0x220>
 8007f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f2c:	f7ff f9cc 	bl	80072c8 <__retarget_lock_release_recursive>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	065b      	lsls	r3, r3, #25
 8007f34:	f53f af12 	bmi.w	8007d5c <_vfiprintf_r+0x4c>
 8007f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f3a:	e711      	b.n	8007d60 <_vfiprintf_r+0x50>
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	462a      	mov	r2, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <_vfiprintf_r+0x25c>)
 8007f46:	a904      	add	r1, sp, #16
 8007f48:	f7fd ff16 	bl	8005d78 <_printf_i>
 8007f4c:	e7e4      	b.n	8007f18 <_vfiprintf_r+0x208>
 8007f4e:	bf00      	nop
 8007f50:	08008ecc 	.word	0x08008ecc
 8007f54:	08008eec 	.word	0x08008eec
 8007f58:	08008eac 	.word	0x08008eac
 8007f5c:	08009064 	.word	0x08009064
 8007f60:	0800906a 	.word	0x0800906a
 8007f64:	0800906e 	.word	0x0800906e
 8007f68:	08005841 	.word	0x08005841
 8007f6c:	08007ceb 	.word	0x08007ceb

08007f70 <_sbrk_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	2300      	movs	r3, #0
 8007f74:	4d05      	ldr	r5, [pc, #20]	; (8007f8c <_sbrk_r+0x1c>)
 8007f76:	4604      	mov	r4, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	f7f9 fdea 	bl	8001b54 <_sbrk>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_sbrk_r+0x1a>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_sbrk_r+0x1a>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	200003e4 	.word	0x200003e4

08007f90 <__sread>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	460c      	mov	r4, r1
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	f000 f8e2 	bl	8008160 <_read_r>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	bfab      	itete	ge
 8007fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fa4:	181b      	addge	r3, r3, r0
 8007fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007faa:	bfac      	ite	ge
 8007fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fae:	81a3      	strhlt	r3, [r4, #12]
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <__swrite>:
 8007fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	898b      	ldrh	r3, [r1, #12]
 8007fba:	4605      	mov	r5, r0
 8007fbc:	05db      	lsls	r3, r3, #23
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	d505      	bpl.n	8007fd0 <__swrite+0x1e>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	f000 f898 	bl	8008100 <_lseek_r>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	4628      	mov	r0, r5
 8007fdc:	463b      	mov	r3, r7
 8007fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe6:	f000 b817 	b.w	8008018 <_write_r>

08007fea <__sseek>:
 8007fea:	b510      	push	{r4, lr}
 8007fec:	460c      	mov	r4, r1
 8007fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff2:	f000 f885 	bl	8008100 <_lseek_r>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	bf15      	itete	ne
 8007ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008006:	81a3      	strheq	r3, [r4, #12]
 8008008:	bf18      	it	ne
 800800a:	81a3      	strhne	r3, [r4, #12]
 800800c:	bd10      	pop	{r4, pc}

0800800e <__sclose>:
 800800e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008012:	f000 b831 	b.w	8008078 <_close_r>
	...

08008018 <_write_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	2200      	movs	r2, #0
 8008022:	4d05      	ldr	r5, [pc, #20]	; (8008038 <_write_r+0x20>)
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fd48 	bl	8001abc <_write>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_write_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_write_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	200003e4 	.word	0x200003e4

0800803c <__assert_func>:
 800803c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800803e:	4614      	mov	r4, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <__assert_func+0x2c>)
 8008044:	4605      	mov	r5, r0
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68d8      	ldr	r0, [r3, #12]
 800804a:	b14c      	cbz	r4, 8008060 <__assert_func+0x24>
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <__assert_func+0x30>)
 800804e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008052:	9100      	str	r1, [sp, #0]
 8008054:	462b      	mov	r3, r5
 8008056:	4906      	ldr	r1, [pc, #24]	; (8008070 <__assert_func+0x34>)
 8008058:	f000 f81e 	bl	8008098 <fiprintf>
 800805c:	f000 f89f 	bl	800819e <abort>
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <__assert_func+0x38>)
 8008062:	461c      	mov	r4, r3
 8008064:	e7f3      	b.n	800804e <__assert_func+0x12>
 8008066:	bf00      	nop
 8008068:	2000000c 	.word	0x2000000c
 800806c:	08009075 	.word	0x08009075
 8008070:	08009082 	.word	0x08009082
 8008074:	080090b0 	.word	0x080090b0

08008078 <_close_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	2300      	movs	r3, #0
 800807c:	4d05      	ldr	r5, [pc, #20]	; (8008094 <_close_r+0x1c>)
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fd36 	bl	8001af4 <_close>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_close_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_close_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	200003e4 	.word	0x200003e4

08008098 <fiprintf>:
 8008098:	b40e      	push	{r1, r2, r3}
 800809a:	b503      	push	{r0, r1, lr}
 800809c:	4601      	mov	r1, r0
 800809e:	ab03      	add	r3, sp, #12
 80080a0:	4805      	ldr	r0, [pc, #20]	; (80080b8 <fiprintf+0x20>)
 80080a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a6:	6800      	ldr	r0, [r0, #0]
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	f7ff fe31 	bl	8007d10 <_vfiprintf_r>
 80080ae:	b002      	add	sp, #8
 80080b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b4:	b003      	add	sp, #12
 80080b6:	4770      	bx	lr
 80080b8:	2000000c 	.word	0x2000000c

080080bc <_fstat_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	2300      	movs	r3, #0
 80080c0:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_fstat_r+0x20>)
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	4611      	mov	r1, r2
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	f7f9 fd1e 	bl	8001b0a <_fstat>
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	d102      	bne.n	80080d8 <_fstat_r+0x1c>
 80080d2:	682b      	ldr	r3, [r5, #0]
 80080d4:	b103      	cbz	r3, 80080d8 <_fstat_r+0x1c>
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	bd38      	pop	{r3, r4, r5, pc}
 80080da:	bf00      	nop
 80080dc:	200003e4 	.word	0x200003e4

080080e0 <_isatty_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	2300      	movs	r3, #0
 80080e4:	4d05      	ldr	r5, [pc, #20]	; (80080fc <_isatty_r+0x1c>)
 80080e6:	4604      	mov	r4, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	602b      	str	r3, [r5, #0]
 80080ec:	f7f9 fd1c 	bl	8001b28 <_isatty>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_isatty_r+0x1a>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_isatty_r+0x1a>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	200003e4 	.word	0x200003e4

08008100 <_lseek_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	2200      	movs	r2, #0
 800810a:	4d05      	ldr	r5, [pc, #20]	; (8008120 <_lseek_r+0x20>)
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f7f9 fd14 	bl	8001b3c <_lseek>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_lseek_r+0x1e>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_lseek_r+0x1e>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	200003e4 	.word	0x200003e4

08008124 <__ascii_mbtowc>:
 8008124:	b082      	sub	sp, #8
 8008126:	b901      	cbnz	r1, 800812a <__ascii_mbtowc+0x6>
 8008128:	a901      	add	r1, sp, #4
 800812a:	b142      	cbz	r2, 800813e <__ascii_mbtowc+0x1a>
 800812c:	b14b      	cbz	r3, 8008142 <__ascii_mbtowc+0x1e>
 800812e:	7813      	ldrb	r3, [r2, #0]
 8008130:	600b      	str	r3, [r1, #0]
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	1e10      	subs	r0, r2, #0
 8008136:	bf18      	it	ne
 8008138:	2001      	movne	r0, #1
 800813a:	b002      	add	sp, #8
 800813c:	4770      	bx	lr
 800813e:	4610      	mov	r0, r2
 8008140:	e7fb      	b.n	800813a <__ascii_mbtowc+0x16>
 8008142:	f06f 0001 	mvn.w	r0, #1
 8008146:	e7f8      	b.n	800813a <__ascii_mbtowc+0x16>

08008148 <__malloc_lock>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__malloc_lock+0x8>)
 800814a:	f7ff b8bc 	b.w	80072c6 <__retarget_lock_acquire_recursive>
 800814e:	bf00      	nop
 8008150:	200003d8 	.word	0x200003d8

08008154 <__malloc_unlock>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__malloc_unlock+0x8>)
 8008156:	f7ff b8b7 	b.w	80072c8 <__retarget_lock_release_recursive>
 800815a:	bf00      	nop
 800815c:	200003d8 	.word	0x200003d8

08008160 <_read_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	4608      	mov	r0, r1
 8008166:	4611      	mov	r1, r2
 8008168:	2200      	movs	r2, #0
 800816a:	4d05      	ldr	r5, [pc, #20]	; (8008180 <_read_r+0x20>)
 800816c:	602a      	str	r2, [r5, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f7f9 fc87 	bl	8001a82 <_read>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_read_r+0x1e>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_read_r+0x1e>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200003e4 	.word	0x200003e4

08008184 <__ascii_wctomb>:
 8008184:	4603      	mov	r3, r0
 8008186:	4608      	mov	r0, r1
 8008188:	b141      	cbz	r1, 800819c <__ascii_wctomb+0x18>
 800818a:	2aff      	cmp	r2, #255	; 0xff
 800818c:	d904      	bls.n	8008198 <__ascii_wctomb+0x14>
 800818e:	228a      	movs	r2, #138	; 0x8a
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	4770      	bx	lr
 8008198:	2001      	movs	r0, #1
 800819a:	700a      	strb	r2, [r1, #0]
 800819c:	4770      	bx	lr

0800819e <abort>:
 800819e:	2006      	movs	r0, #6
 80081a0:	b508      	push	{r3, lr}
 80081a2:	f000 f82b 	bl	80081fc <raise>
 80081a6:	2001      	movs	r0, #1
 80081a8:	f7f9 fc61 	bl	8001a6e <_exit>

080081ac <_raise_r>:
 80081ac:	291f      	cmp	r1, #31
 80081ae:	b538      	push	{r3, r4, r5, lr}
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	d904      	bls.n	80081c0 <_raise_r+0x14>
 80081b6:	2316      	movs	r3, #22
 80081b8:	6003      	str	r3, [r0, #0]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081c2:	b112      	cbz	r2, 80081ca <_raise_r+0x1e>
 80081c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081c8:	b94b      	cbnz	r3, 80081de <_raise_r+0x32>
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f830 	bl	8008230 <_getpid_r>
 80081d0:	462a      	mov	r2, r5
 80081d2:	4601      	mov	r1, r0
 80081d4:	4620      	mov	r0, r4
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f000 b817 	b.w	800820c <_kill_r>
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d00a      	beq.n	80081f8 <_raise_r+0x4c>
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	d103      	bne.n	80081ee <_raise_r+0x42>
 80081e6:	2316      	movs	r3, #22
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	2001      	movs	r0, #1
 80081ec:	e7e7      	b.n	80081be <_raise_r+0x12>
 80081ee:	2400      	movs	r4, #0
 80081f0:	4628      	mov	r0, r5
 80081f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081f6:	4798      	blx	r3
 80081f8:	2000      	movs	r0, #0
 80081fa:	e7e0      	b.n	80081be <_raise_r+0x12>

080081fc <raise>:
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <raise+0xc>)
 80081fe:	4601      	mov	r1, r0
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	f7ff bfd3 	b.w	80081ac <_raise_r>
 8008206:	bf00      	nop
 8008208:	2000000c 	.word	0x2000000c

0800820c <_kill_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	2300      	movs	r3, #0
 8008210:	4d06      	ldr	r5, [pc, #24]	; (800822c <_kill_r+0x20>)
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	f7f9 fc18 	bl	8001a4e <_kill>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d102      	bne.n	8008228 <_kill_r+0x1c>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	b103      	cbz	r3, 8008228 <_kill_r+0x1c>
 8008226:	6023      	str	r3, [r4, #0]
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	200003e4 	.word	0x200003e4

08008230 <_getpid_r>:
 8008230:	f7f9 bc06 	b.w	8001a40 <_getpid>

08008234 <powf>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	4606      	mov	r6, r0
 800823a:	f000 f849 	bl	80082d0 <__ieee754_powf>
 800823e:	4621      	mov	r1, r4
 8008240:	4605      	mov	r5, r0
 8008242:	4620      	mov	r0, r4
 8008244:	f7f8 ff44 	bl	80010d0 <__aeabi_fcmpun>
 8008248:	bb68      	cbnz	r0, 80082a6 <powf+0x72>
 800824a:	2100      	movs	r1, #0
 800824c:	4630      	mov	r0, r6
 800824e:	f7f8 ff0d 	bl	800106c <__aeabi_fcmpeq>
 8008252:	b190      	cbz	r0, 800827a <powf+0x46>
 8008254:	2100      	movs	r1, #0
 8008256:	4620      	mov	r0, r4
 8008258:	f7f8 ff08 	bl	800106c <__aeabi_fcmpeq>
 800825c:	2800      	cmp	r0, #0
 800825e:	d133      	bne.n	80082c8 <powf+0x94>
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fc0e 	bl	8008a82 <finitef>
 8008266:	b1f0      	cbz	r0, 80082a6 <powf+0x72>
 8008268:	2100      	movs	r1, #0
 800826a:	4620      	mov	r0, r4
 800826c:	f7f8 ff08 	bl	8001080 <__aeabi_fcmplt>
 8008270:	b1c8      	cbz	r0, 80082a6 <powf+0x72>
 8008272:	f7fd fa15 	bl	80056a0 <__errno>
 8008276:	2322      	movs	r3, #34	; 0x22
 8008278:	e014      	b.n	80082a4 <powf+0x70>
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fc01 	bl	8008a82 <finitef>
 8008280:	b998      	cbnz	r0, 80082aa <powf+0x76>
 8008282:	4630      	mov	r0, r6
 8008284:	f000 fbfd 	bl	8008a82 <finitef>
 8008288:	b178      	cbz	r0, 80082aa <powf+0x76>
 800828a:	4620      	mov	r0, r4
 800828c:	f000 fbf9 	bl	8008a82 <finitef>
 8008290:	b158      	cbz	r0, 80082aa <powf+0x76>
 8008292:	4629      	mov	r1, r5
 8008294:	4628      	mov	r0, r5
 8008296:	f7f8 ff1b 	bl	80010d0 <__aeabi_fcmpun>
 800829a:	2800      	cmp	r0, #0
 800829c:	d0e9      	beq.n	8008272 <powf+0x3e>
 800829e:	f7fd f9ff 	bl	80056a0 <__errno>
 80082a2:	2321      	movs	r3, #33	; 0x21
 80082a4:	6003      	str	r3, [r0, #0]
 80082a6:	4628      	mov	r0, r5
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	2100      	movs	r1, #0
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7f8 fedd 	bl	800106c <__aeabi_fcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0f7      	beq.n	80082a6 <powf+0x72>
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 fbe3 	bl	8008a82 <finitef>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d0f2      	beq.n	80082a6 <powf+0x72>
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fbde 	bl	8008a82 <finitef>
 80082c6:	e7d3      	b.n	8008270 <powf+0x3c>
 80082c8:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80082cc:	e7eb      	b.n	80082a6 <powf+0x72>
	...

080082d0 <__ieee754_powf>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 80082d8:	4681      	mov	r9, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	4680      	mov	r8, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b087      	sub	sp, #28
 80082e2:	d10d      	bne.n	8008300 <__ieee754_powf+0x30>
 80082e4:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 80082e8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80082ec:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 80082f0:	f240 8338 	bls.w	8008964 <__ieee754_powf+0x694>
 80082f4:	4639      	mov	r1, r7
 80082f6:	4648      	mov	r0, r9
 80082f8:	f7f8 fc1c 	bl	8000b34 <__addsf3>
 80082fc:	4601      	mov	r1, r0
 80082fe:	e040      	b.n	8008382 <__ieee754_powf+0xb2>
 8008300:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008304:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008308:	dcf4      	bgt.n	80082f4 <__ieee754_powf+0x24>
 800830a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800830e:	dd08      	ble.n	8008322 <__ieee754_powf+0x52>
 8008310:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8008314:	d1ee      	bne.n	80082f4 <__ieee754_powf+0x24>
 8008316:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800831a:	0064      	lsls	r4, r4, #1
 800831c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8008320:	e7e6      	b.n	80082f0 <__ieee754_powf+0x20>
 8008322:	2800      	cmp	r0, #0
 8008324:	da20      	bge.n	8008368 <__ieee754_powf+0x98>
 8008326:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800832a:	da2e      	bge.n	800838a <__ieee754_powf+0xba>
 800832c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008330:	f2c0 831d 	blt.w	800896e <__ieee754_powf+0x69e>
 8008334:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008338:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800833c:	fa4a f503 	asr.w	r5, sl, r3
 8008340:	fa05 f303 	lsl.w	r3, r5, r3
 8008344:	4553      	cmp	r3, sl
 8008346:	f040 8312 	bne.w	800896e <__ieee754_powf+0x69e>
 800834a:	f005 0501 	and.w	r5, r5, #1
 800834e:	f1c5 0502 	rsb	r5, r5, #2
 8008352:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008356:	d120      	bne.n	800839a <__ieee754_powf+0xca>
 8008358:	2c00      	cmp	r4, #0
 800835a:	4649      	mov	r1, r9
 800835c:	da11      	bge.n	8008382 <__ieee754_powf+0xb2>
 800835e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008362:	f7f8 fda3 	bl	8000eac <__aeabi_fdiv>
 8008366:	e7c9      	b.n	80082fc <__ieee754_powf+0x2c>
 8008368:	2500      	movs	r5, #0
 800836a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800836e:	d1f0      	bne.n	8008352 <__ieee754_powf+0x82>
 8008370:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008374:	f000 82f6 	beq.w	8008964 <__ieee754_powf+0x694>
 8008378:	dd09      	ble.n	800838e <__ieee754_powf+0xbe>
 800837a:	2c00      	cmp	r4, #0
 800837c:	f2c0 82f5 	blt.w	800896a <__ieee754_powf+0x69a>
 8008380:	4639      	mov	r1, r7
 8008382:	4608      	mov	r0, r1
 8008384:	b007      	add	sp, #28
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	2502      	movs	r5, #2
 800838c:	e7ed      	b.n	800836a <__ieee754_powf+0x9a>
 800838e:	2c00      	cmp	r4, #0
 8008390:	f280 82eb 	bge.w	800896a <__ieee754_powf+0x69a>
 8008394:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8008398:	e7f3      	b.n	8008382 <__ieee754_powf+0xb2>
 800839a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800839e:	d104      	bne.n	80083aa <__ieee754_powf+0xda>
 80083a0:	4649      	mov	r1, r9
 80083a2:	4648      	mov	r0, r9
 80083a4:	f7f8 fcce 	bl	8000d44 <__aeabi_fmul>
 80083a8:	e7a8      	b.n	80082fc <__ieee754_powf+0x2c>
 80083aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80083ae:	4648      	mov	r0, r9
 80083b0:	d107      	bne.n	80083c2 <__ieee754_powf+0xf2>
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	db04      	blt.n	80083c2 <__ieee754_powf+0xf2>
 80083b8:	b007      	add	sp, #28
 80083ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083be:	f000 baef 	b.w	80089a0 <__ieee754_sqrtf>
 80083c2:	f000 fb5b 	bl	8008a7c <fabsf>
 80083c6:	4601      	mov	r1, r0
 80083c8:	b126      	cbz	r6, 80083d4 <__ieee754_powf+0x104>
 80083ca:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80083ce:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80083d2:	d118      	bne.n	8008406 <__ieee754_powf+0x136>
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	da04      	bge.n	80083e2 <__ieee754_powf+0x112>
 80083d8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80083dc:	f7f8 fd66 	bl	8000eac <__aeabi_fdiv>
 80083e0:	4601      	mov	r1, r0
 80083e2:	f1b8 0f00 	cmp.w	r8, #0
 80083e6:	dacc      	bge.n	8008382 <__ieee754_powf+0xb2>
 80083e8:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 80083ec:	ea56 0305 	orrs.w	r3, r6, r5
 80083f0:	d104      	bne.n	80083fc <__ieee754_powf+0x12c>
 80083f2:	4608      	mov	r0, r1
 80083f4:	f7f8 fb9c 	bl	8000b30 <__aeabi_fsub>
 80083f8:	4601      	mov	r1, r0
 80083fa:	e7b2      	b.n	8008362 <__ieee754_powf+0x92>
 80083fc:	2d01      	cmp	r5, #1
 80083fe:	d1c0      	bne.n	8008382 <__ieee754_powf+0xb2>
 8008400:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008404:	e77a      	b.n	80082fc <__ieee754_powf+0x2c>
 8008406:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800840a:	3b01      	subs	r3, #1
 800840c:	9302      	str	r3, [sp, #8]
 800840e:	432b      	orrs	r3, r5
 8008410:	d101      	bne.n	8008416 <__ieee754_powf+0x146>
 8008412:	4649      	mov	r1, r9
 8008414:	e7ed      	b.n	80083f2 <__ieee754_powf+0x122>
 8008416:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 800841a:	f340 809f 	ble.w	800855c <__ieee754_powf+0x28c>
 800841e:	4b48      	ldr	r3, [pc, #288]	; (8008540 <__ieee754_powf+0x270>)
 8008420:	429e      	cmp	r6, r3
 8008422:	dc07      	bgt.n	8008434 <__ieee754_powf+0x164>
 8008424:	2c00      	cmp	r4, #0
 8008426:	da0a      	bge.n	800843e <__ieee754_powf+0x16e>
 8008428:	2000      	movs	r0, #0
 800842a:	b007      	add	sp, #28
 800842c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	f000 bb20 	b.w	8008a74 <__math_oflowf>
 8008434:	4b43      	ldr	r3, [pc, #268]	; (8008544 <__ieee754_powf+0x274>)
 8008436:	429e      	cmp	r6, r3
 8008438:	dd07      	ble.n	800844a <__ieee754_powf+0x17a>
 800843a:	2c00      	cmp	r4, #0
 800843c:	dcf4      	bgt.n	8008428 <__ieee754_powf+0x158>
 800843e:	2000      	movs	r0, #0
 8008440:	b007      	add	sp, #28
 8008442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f000 bb11 	b.w	8008a6c <__math_uflowf>
 800844a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800844e:	f7f8 fb6f 	bl	8000b30 <__aeabi_fsub>
 8008452:	493d      	ldr	r1, [pc, #244]	; (8008548 <__ieee754_powf+0x278>)
 8008454:	4606      	mov	r6, r0
 8008456:	f7f8 fc75 	bl	8000d44 <__aeabi_fmul>
 800845a:	493c      	ldr	r1, [pc, #240]	; (800854c <__ieee754_powf+0x27c>)
 800845c:	4680      	mov	r8, r0
 800845e:	4630      	mov	r0, r6
 8008460:	f7f8 fc70 	bl	8000d44 <__aeabi_fmul>
 8008464:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008468:	4681      	mov	r9, r0
 800846a:	4630      	mov	r0, r6
 800846c:	f7f8 fc6a 	bl	8000d44 <__aeabi_fmul>
 8008470:	4601      	mov	r1, r0
 8008472:	4837      	ldr	r0, [pc, #220]	; (8008550 <__ieee754_powf+0x280>)
 8008474:	f7f8 fb5c 	bl	8000b30 <__aeabi_fsub>
 8008478:	4631      	mov	r1, r6
 800847a:	f7f8 fc63 	bl	8000d44 <__aeabi_fmul>
 800847e:	4601      	mov	r1, r0
 8008480:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008484:	f7f8 fb54 	bl	8000b30 <__aeabi_fsub>
 8008488:	4631      	mov	r1, r6
 800848a:	4682      	mov	sl, r0
 800848c:	4630      	mov	r0, r6
 800848e:	f7f8 fc59 	bl	8000d44 <__aeabi_fmul>
 8008492:	4601      	mov	r1, r0
 8008494:	4650      	mov	r0, sl
 8008496:	f7f8 fc55 	bl	8000d44 <__aeabi_fmul>
 800849a:	492e      	ldr	r1, [pc, #184]	; (8008554 <__ieee754_powf+0x284>)
 800849c:	f7f8 fc52 	bl	8000d44 <__aeabi_fmul>
 80084a0:	4601      	mov	r1, r0
 80084a2:	4648      	mov	r0, r9
 80084a4:	f7f8 fb44 	bl	8000b30 <__aeabi_fsub>
 80084a8:	4601      	mov	r1, r0
 80084aa:	4606      	mov	r6, r0
 80084ac:	4640      	mov	r0, r8
 80084ae:	f7f8 fb41 	bl	8000b34 <__addsf3>
 80084b2:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80084b6:	f029 090f 	bic.w	r9, r9, #15
 80084ba:	4641      	mov	r1, r8
 80084bc:	4648      	mov	r0, r9
 80084be:	f7f8 fb37 	bl	8000b30 <__aeabi_fsub>
 80084c2:	4601      	mov	r1, r0
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7f8 fb33 	bl	8000b30 <__aeabi_fsub>
 80084ca:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80084ce:	9b02      	ldr	r3, [sp, #8]
 80084d0:	3d01      	subs	r5, #1
 80084d2:	f024 040f 	bic.w	r4, r4, #15
 80084d6:	432b      	orrs	r3, r5
 80084d8:	4606      	mov	r6, r0
 80084da:	4621      	mov	r1, r4
 80084dc:	4638      	mov	r0, r7
 80084de:	bf14      	ite	ne
 80084e0:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 80084e4:	4d1c      	ldreq	r5, [pc, #112]	; (8008558 <__ieee754_powf+0x288>)
 80084e6:	f7f8 fb23 	bl	8000b30 <__aeabi_fsub>
 80084ea:	4649      	mov	r1, r9
 80084ec:	f7f8 fc2a 	bl	8000d44 <__aeabi_fmul>
 80084f0:	4639      	mov	r1, r7
 80084f2:	4680      	mov	r8, r0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7f8 fc25 	bl	8000d44 <__aeabi_fmul>
 80084fa:	4601      	mov	r1, r0
 80084fc:	4640      	mov	r0, r8
 80084fe:	f7f8 fb19 	bl	8000b34 <__addsf3>
 8008502:	4621      	mov	r1, r4
 8008504:	4606      	mov	r6, r0
 8008506:	4648      	mov	r0, r9
 8008508:	f7f8 fc1c 	bl	8000d44 <__aeabi_fmul>
 800850c:	4601      	mov	r1, r0
 800850e:	4607      	mov	r7, r0
 8008510:	4681      	mov	r9, r0
 8008512:	4630      	mov	r0, r6
 8008514:	f7f8 fb0e 	bl	8000b34 <__addsf3>
 8008518:	2800      	cmp	r0, #0
 800851a:	4682      	mov	sl, r0
 800851c:	4680      	mov	r8, r0
 800851e:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008522:	f340 8201 	ble.w	8008928 <__ieee754_powf+0x658>
 8008526:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800852a:	f340 814f 	ble.w	80087cc <__ieee754_powf+0x4fc>
 800852e:	2100      	movs	r1, #0
 8008530:	4628      	mov	r0, r5
 8008532:	f7f8 fda5 	bl	8001080 <__aeabi_fcmplt>
 8008536:	3800      	subs	r0, #0
 8008538:	bf18      	it	ne
 800853a:	2001      	movne	r0, #1
 800853c:	e775      	b.n	800842a <__ieee754_powf+0x15a>
 800853e:	bf00      	nop
 8008540:	3f7ffff3 	.word	0x3f7ffff3
 8008544:	3f800007 	.word	0x3f800007
 8008548:	3fb8aa00 	.word	0x3fb8aa00
 800854c:	36eca570 	.word	0x36eca570
 8008550:	3eaaaaab 	.word	0x3eaaaaab
 8008554:	3fb8aa3b 	.word	0x3fb8aa3b
 8008558:	bf800000 	.word	0xbf800000
 800855c:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8008560:	f040 8111 	bne.w	8008786 <__ieee754_powf+0x4b6>
 8008564:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8008568:	f7f8 fbec 	bl	8000d44 <__aeabi_fmul>
 800856c:	f06f 0217 	mvn.w	r2, #23
 8008570:	4606      	mov	r6, r0
 8008572:	15f3      	asrs	r3, r6, #23
 8008574:	3b7f      	subs	r3, #127	; 0x7f
 8008576:	4413      	add	r3, r2
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	4b85      	ldr	r3, [pc, #532]	; (8008790 <__ieee754_powf+0x4c0>)
 800857c:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8008580:	4298      	cmp	r0, r3
 8008582:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8008586:	dd08      	ble.n	800859a <__ieee754_powf+0x2ca>
 8008588:	4b82      	ldr	r3, [pc, #520]	; (8008794 <__ieee754_powf+0x4c4>)
 800858a:	4298      	cmp	r0, r3
 800858c:	f340 80fd 	ble.w	800878a <__ieee754_powf+0x4ba>
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8008596:	3301      	adds	r3, #1
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	2300      	movs	r3, #0
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	9900      	ldr	r1, [sp, #0]
 80085a0:	4a7d      	ldr	r2, [pc, #500]	; (8008798 <__ieee754_powf+0x4c8>)
 80085a2:	4630      	mov	r0, r6
 80085a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80085a8:	9603      	str	r6, [sp, #12]
 80085aa:	4611      	mov	r1, r2
 80085ac:	9205      	str	r2, [sp, #20]
 80085ae:	f7f8 fabf 	bl	8000b30 <__aeabi_fsub>
 80085b2:	9a05      	ldr	r2, [sp, #20]
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	4683      	mov	fp, r0
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	9203      	str	r2, [sp, #12]
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	f7f8 fab8 	bl	8000b34 <__addsf3>
 80085c4:	4601      	mov	r1, r0
 80085c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80085ca:	f7f8 fc6f 	bl	8000eac <__aeabi_fdiv>
 80085ce:	4682      	mov	sl, r0
 80085d0:	4601      	mov	r1, r0
 80085d2:	4658      	mov	r0, fp
 80085d4:	f7f8 fbb6 	bl	8000d44 <__aeabi_fmul>
 80085d8:	1076      	asrs	r6, r6, #1
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80085e0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80085e4:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80085e8:	f029 090f 	bic.w	r9, r9, #15
 80085ec:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80085f0:	4680      	mov	r8, r0
 80085f2:	4631      	mov	r1, r6
 80085f4:	4648      	mov	r0, r9
 80085f6:	f7f8 fba5 	bl	8000d44 <__aeabi_fmul>
 80085fa:	4601      	mov	r1, r0
 80085fc:	4658      	mov	r0, fp
 80085fe:	f7f8 fa97 	bl	8000b30 <__aeabi_fsub>
 8008602:	9a03      	ldr	r2, [sp, #12]
 8008604:	4683      	mov	fp, r0
 8008606:	4611      	mov	r1, r2
 8008608:	4630      	mov	r0, r6
 800860a:	f7f8 fa91 	bl	8000b30 <__aeabi_fsub>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	4601      	mov	r1, r0
 8008612:	4618      	mov	r0, r3
 8008614:	f7f8 fa8c 	bl	8000b30 <__aeabi_fsub>
 8008618:	4649      	mov	r1, r9
 800861a:	f7f8 fb93 	bl	8000d44 <__aeabi_fmul>
 800861e:	4601      	mov	r1, r0
 8008620:	4658      	mov	r0, fp
 8008622:	f7f8 fa85 	bl	8000b30 <__aeabi_fsub>
 8008626:	4651      	mov	r1, sl
 8008628:	f7f8 fb8c 	bl	8000d44 <__aeabi_fmul>
 800862c:	4641      	mov	r1, r8
 800862e:	4682      	mov	sl, r0
 8008630:	4640      	mov	r0, r8
 8008632:	f7f8 fb87 	bl	8000d44 <__aeabi_fmul>
 8008636:	4606      	mov	r6, r0
 8008638:	4958      	ldr	r1, [pc, #352]	; (800879c <__ieee754_powf+0x4cc>)
 800863a:	f7f8 fb83 	bl	8000d44 <__aeabi_fmul>
 800863e:	4958      	ldr	r1, [pc, #352]	; (80087a0 <__ieee754_powf+0x4d0>)
 8008640:	f7f8 fa78 	bl	8000b34 <__addsf3>
 8008644:	4631      	mov	r1, r6
 8008646:	f7f8 fb7d 	bl	8000d44 <__aeabi_fmul>
 800864a:	4956      	ldr	r1, [pc, #344]	; (80087a4 <__ieee754_powf+0x4d4>)
 800864c:	f7f8 fa72 	bl	8000b34 <__addsf3>
 8008650:	4631      	mov	r1, r6
 8008652:	f7f8 fb77 	bl	8000d44 <__aeabi_fmul>
 8008656:	4954      	ldr	r1, [pc, #336]	; (80087a8 <__ieee754_powf+0x4d8>)
 8008658:	f7f8 fa6c 	bl	8000b34 <__addsf3>
 800865c:	4631      	mov	r1, r6
 800865e:	f7f8 fb71 	bl	8000d44 <__aeabi_fmul>
 8008662:	4952      	ldr	r1, [pc, #328]	; (80087ac <__ieee754_powf+0x4dc>)
 8008664:	f7f8 fa66 	bl	8000b34 <__addsf3>
 8008668:	4631      	mov	r1, r6
 800866a:	f7f8 fb6b 	bl	8000d44 <__aeabi_fmul>
 800866e:	4950      	ldr	r1, [pc, #320]	; (80087b0 <__ieee754_powf+0x4e0>)
 8008670:	f7f8 fa60 	bl	8000b34 <__addsf3>
 8008674:	4631      	mov	r1, r6
 8008676:	4683      	mov	fp, r0
 8008678:	4630      	mov	r0, r6
 800867a:	f7f8 fb63 	bl	8000d44 <__aeabi_fmul>
 800867e:	4601      	mov	r1, r0
 8008680:	4658      	mov	r0, fp
 8008682:	f7f8 fb5f 	bl	8000d44 <__aeabi_fmul>
 8008686:	4606      	mov	r6, r0
 8008688:	4649      	mov	r1, r9
 800868a:	4640      	mov	r0, r8
 800868c:	f7f8 fa52 	bl	8000b34 <__addsf3>
 8008690:	4651      	mov	r1, sl
 8008692:	f7f8 fb57 	bl	8000d44 <__aeabi_fmul>
 8008696:	4631      	mov	r1, r6
 8008698:	f7f8 fa4c 	bl	8000b34 <__addsf3>
 800869c:	4649      	mov	r1, r9
 800869e:	4683      	mov	fp, r0
 80086a0:	4648      	mov	r0, r9
 80086a2:	f7f8 fb4f 	bl	8000d44 <__aeabi_fmul>
 80086a6:	4943      	ldr	r1, [pc, #268]	; (80087b4 <__ieee754_powf+0x4e4>)
 80086a8:	9003      	str	r0, [sp, #12]
 80086aa:	f7f8 fa43 	bl	8000b34 <__addsf3>
 80086ae:	4659      	mov	r1, fp
 80086b0:	f7f8 fa40 	bl	8000b34 <__addsf3>
 80086b4:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80086b8:	f026 060f 	bic.w	r6, r6, #15
 80086bc:	4631      	mov	r1, r6
 80086be:	4648      	mov	r0, r9
 80086c0:	f7f8 fb40 	bl	8000d44 <__aeabi_fmul>
 80086c4:	493b      	ldr	r1, [pc, #236]	; (80087b4 <__ieee754_powf+0x4e4>)
 80086c6:	4681      	mov	r9, r0
 80086c8:	4630      	mov	r0, r6
 80086ca:	f7f8 fa31 	bl	8000b30 <__aeabi_fsub>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7f8 fa2d 	bl	8000b30 <__aeabi_fsub>
 80086d6:	4601      	mov	r1, r0
 80086d8:	4658      	mov	r0, fp
 80086da:	f7f8 fa29 	bl	8000b30 <__aeabi_fsub>
 80086de:	4641      	mov	r1, r8
 80086e0:	f7f8 fb30 	bl	8000d44 <__aeabi_fmul>
 80086e4:	4631      	mov	r1, r6
 80086e6:	4680      	mov	r8, r0
 80086e8:	4650      	mov	r0, sl
 80086ea:	f7f8 fb2b 	bl	8000d44 <__aeabi_fmul>
 80086ee:	4601      	mov	r1, r0
 80086f0:	4640      	mov	r0, r8
 80086f2:	f7f8 fa1f 	bl	8000b34 <__addsf3>
 80086f6:	4682      	mov	sl, r0
 80086f8:	4601      	mov	r1, r0
 80086fa:	4648      	mov	r0, r9
 80086fc:	f7f8 fa1a 	bl	8000b34 <__addsf3>
 8008700:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008704:	f026 060f 	bic.w	r6, r6, #15
 8008708:	4630      	mov	r0, r6
 800870a:	492b      	ldr	r1, [pc, #172]	; (80087b8 <__ieee754_powf+0x4e8>)
 800870c:	f7f8 fb1a 	bl	8000d44 <__aeabi_fmul>
 8008710:	4649      	mov	r1, r9
 8008712:	4680      	mov	r8, r0
 8008714:	4630      	mov	r0, r6
 8008716:	f7f8 fa0b 	bl	8000b30 <__aeabi_fsub>
 800871a:	4601      	mov	r1, r0
 800871c:	4650      	mov	r0, sl
 800871e:	f7f8 fa07 	bl	8000b30 <__aeabi_fsub>
 8008722:	4926      	ldr	r1, [pc, #152]	; (80087bc <__ieee754_powf+0x4ec>)
 8008724:	f7f8 fb0e 	bl	8000d44 <__aeabi_fmul>
 8008728:	4925      	ldr	r1, [pc, #148]	; (80087c0 <__ieee754_powf+0x4f0>)
 800872a:	4681      	mov	r9, r0
 800872c:	4630      	mov	r0, r6
 800872e:	f7f8 fb09 	bl	8000d44 <__aeabi_fmul>
 8008732:	4601      	mov	r1, r0
 8008734:	4648      	mov	r0, r9
 8008736:	f7f8 f9fd 	bl	8000b34 <__addsf3>
 800873a:	4b22      	ldr	r3, [pc, #136]	; (80087c4 <__ieee754_powf+0x4f4>)
 800873c:	9a00      	ldr	r2, [sp, #0]
 800873e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008742:	f7f8 f9f7 	bl	8000b34 <__addsf3>
 8008746:	4606      	mov	r6, r0
 8008748:	9801      	ldr	r0, [sp, #4]
 800874a:	f7f8 faa7 	bl	8000c9c <__aeabi_i2f>
 800874e:	4682      	mov	sl, r0
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <__ieee754_powf+0x4f8>)
 8008752:	9a00      	ldr	r2, [sp, #0]
 8008754:	4631      	mov	r1, r6
 8008756:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800875a:	4640      	mov	r0, r8
 800875c:	f7f8 f9ea 	bl	8000b34 <__addsf3>
 8008760:	4659      	mov	r1, fp
 8008762:	f7f8 f9e7 	bl	8000b34 <__addsf3>
 8008766:	4651      	mov	r1, sl
 8008768:	f7f8 f9e4 	bl	8000b34 <__addsf3>
 800876c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008770:	f029 090f 	bic.w	r9, r9, #15
 8008774:	4651      	mov	r1, sl
 8008776:	4648      	mov	r0, r9
 8008778:	f7f8 f9da 	bl	8000b30 <__aeabi_fsub>
 800877c:	4659      	mov	r1, fp
 800877e:	f7f8 f9d7 	bl	8000b30 <__aeabi_fsub>
 8008782:	4641      	mov	r1, r8
 8008784:	e69b      	b.n	80084be <__ieee754_powf+0x1ee>
 8008786:	2200      	movs	r2, #0
 8008788:	e6f3      	b.n	8008572 <__ieee754_powf+0x2a2>
 800878a:	2301      	movs	r3, #1
 800878c:	e706      	b.n	800859c <__ieee754_powf+0x2cc>
 800878e:	bf00      	nop
 8008790:	001cc471 	.word	0x001cc471
 8008794:	005db3d6 	.word	0x005db3d6
 8008798:	080091bc 	.word	0x080091bc
 800879c:	3e53f142 	.word	0x3e53f142
 80087a0:	3e6c3255 	.word	0x3e6c3255
 80087a4:	3e8ba305 	.word	0x3e8ba305
 80087a8:	3eaaaaab 	.word	0x3eaaaaab
 80087ac:	3edb6db7 	.word	0x3edb6db7
 80087b0:	3f19999a 	.word	0x3f19999a
 80087b4:	40400000 	.word	0x40400000
 80087b8:	3f763800 	.word	0x3f763800
 80087bc:	3f76384f 	.word	0x3f76384f
 80087c0:	369dc3a0 	.word	0x369dc3a0
 80087c4:	080091cc 	.word	0x080091cc
 80087c8:	080091c4 	.word	0x080091c4
 80087cc:	f040 80c2 	bne.w	8008954 <__ieee754_powf+0x684>
 80087d0:	4968      	ldr	r1, [pc, #416]	; (8008974 <__ieee754_powf+0x6a4>)
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7f8 f9ae 	bl	8000b34 <__addsf3>
 80087d8:	4639      	mov	r1, r7
 80087da:	4681      	mov	r9, r0
 80087dc:	4650      	mov	r0, sl
 80087de:	f7f8 f9a7 	bl	8000b30 <__aeabi_fsub>
 80087e2:	4601      	mov	r1, r0
 80087e4:	4648      	mov	r0, r9
 80087e6:	f7f8 fc69 	bl	80010bc <__aeabi_fcmpgt>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f47f ae9f 	bne.w	800852e <__ieee754_powf+0x25e>
 80087f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087f4:	15e4      	asrs	r4, r4, #23
 80087f6:	3c7e      	subs	r4, #126	; 0x7e
 80087f8:	4123      	asrs	r3, r4
 80087fa:	4443      	add	r3, r8
 80087fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008800:	495d      	ldr	r1, [pc, #372]	; (8008978 <__ieee754_powf+0x6a8>)
 8008802:	3a7f      	subs	r2, #127	; 0x7f
 8008804:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008808:	4111      	asrs	r1, r2
 800880a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800880e:	f1c2 0217 	rsb	r2, r2, #23
 8008812:	4114      	asrs	r4, r2
 8008814:	f1b8 0f00 	cmp.w	r8, #0
 8008818:	4638      	mov	r0, r7
 800881a:	ea23 0101 	bic.w	r1, r3, r1
 800881e:	bfb8      	it	lt
 8008820:	4264      	neglt	r4, r4
 8008822:	f7f8 f985 	bl	8000b30 <__aeabi_fsub>
 8008826:	4681      	mov	r9, r0
 8008828:	4631      	mov	r1, r6
 800882a:	4648      	mov	r0, r9
 800882c:	f7f8 f982 	bl	8000b34 <__addsf3>
 8008830:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8008834:	f027 070f 	bic.w	r7, r7, #15
 8008838:	4638      	mov	r0, r7
 800883a:	4950      	ldr	r1, [pc, #320]	; (800897c <__ieee754_powf+0x6ac>)
 800883c:	f7f8 fa82 	bl	8000d44 <__aeabi_fmul>
 8008840:	4649      	mov	r1, r9
 8008842:	4680      	mov	r8, r0
 8008844:	4638      	mov	r0, r7
 8008846:	f7f8 f973 	bl	8000b30 <__aeabi_fsub>
 800884a:	4601      	mov	r1, r0
 800884c:	4630      	mov	r0, r6
 800884e:	f7f8 f96f 	bl	8000b30 <__aeabi_fsub>
 8008852:	494b      	ldr	r1, [pc, #300]	; (8008980 <__ieee754_powf+0x6b0>)
 8008854:	f7f8 fa76 	bl	8000d44 <__aeabi_fmul>
 8008858:	494a      	ldr	r1, [pc, #296]	; (8008984 <__ieee754_powf+0x6b4>)
 800885a:	4606      	mov	r6, r0
 800885c:	4638      	mov	r0, r7
 800885e:	f7f8 fa71 	bl	8000d44 <__aeabi_fmul>
 8008862:	4601      	mov	r1, r0
 8008864:	4630      	mov	r0, r6
 8008866:	f7f8 f965 	bl	8000b34 <__addsf3>
 800886a:	4607      	mov	r7, r0
 800886c:	4601      	mov	r1, r0
 800886e:	4640      	mov	r0, r8
 8008870:	f7f8 f960 	bl	8000b34 <__addsf3>
 8008874:	4641      	mov	r1, r8
 8008876:	4606      	mov	r6, r0
 8008878:	f7f8 f95a 	bl	8000b30 <__aeabi_fsub>
 800887c:	4601      	mov	r1, r0
 800887e:	4638      	mov	r0, r7
 8008880:	f7f8 f956 	bl	8000b30 <__aeabi_fsub>
 8008884:	4631      	mov	r1, r6
 8008886:	4680      	mov	r8, r0
 8008888:	4630      	mov	r0, r6
 800888a:	f7f8 fa5b 	bl	8000d44 <__aeabi_fmul>
 800888e:	4607      	mov	r7, r0
 8008890:	493d      	ldr	r1, [pc, #244]	; (8008988 <__ieee754_powf+0x6b8>)
 8008892:	f7f8 fa57 	bl	8000d44 <__aeabi_fmul>
 8008896:	493d      	ldr	r1, [pc, #244]	; (800898c <__ieee754_powf+0x6bc>)
 8008898:	f7f8 f94a 	bl	8000b30 <__aeabi_fsub>
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 fa51 	bl	8000d44 <__aeabi_fmul>
 80088a2:	493b      	ldr	r1, [pc, #236]	; (8008990 <__ieee754_powf+0x6c0>)
 80088a4:	f7f8 f946 	bl	8000b34 <__addsf3>
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f8 fa4b 	bl	8000d44 <__aeabi_fmul>
 80088ae:	4939      	ldr	r1, [pc, #228]	; (8008994 <__ieee754_powf+0x6c4>)
 80088b0:	f7f8 f93e 	bl	8000b30 <__aeabi_fsub>
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f8 fa45 	bl	8000d44 <__aeabi_fmul>
 80088ba:	4937      	ldr	r1, [pc, #220]	; (8008998 <__ieee754_powf+0x6c8>)
 80088bc:	f7f8 f93a 	bl	8000b34 <__addsf3>
 80088c0:	4639      	mov	r1, r7
 80088c2:	f7f8 fa3f 	bl	8000d44 <__aeabi_fmul>
 80088c6:	4601      	mov	r1, r0
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7f8 f931 	bl	8000b30 <__aeabi_fsub>
 80088ce:	4607      	mov	r7, r0
 80088d0:	4601      	mov	r1, r0
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7f8 fa36 	bl	8000d44 <__aeabi_fmul>
 80088d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80088dc:	4681      	mov	r9, r0
 80088de:	4638      	mov	r0, r7
 80088e0:	f7f8 f926 	bl	8000b30 <__aeabi_fsub>
 80088e4:	4601      	mov	r1, r0
 80088e6:	4648      	mov	r0, r9
 80088e8:	f7f8 fae0 	bl	8000eac <__aeabi_fdiv>
 80088ec:	4641      	mov	r1, r8
 80088ee:	4607      	mov	r7, r0
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7f8 fa27 	bl	8000d44 <__aeabi_fmul>
 80088f6:	4641      	mov	r1, r8
 80088f8:	f7f8 f91c 	bl	8000b34 <__addsf3>
 80088fc:	4601      	mov	r1, r0
 80088fe:	4638      	mov	r0, r7
 8008900:	f7f8 f916 	bl	8000b30 <__aeabi_fsub>
 8008904:	4631      	mov	r1, r6
 8008906:	f7f8 f913 	bl	8000b30 <__aeabi_fsub>
 800890a:	4601      	mov	r1, r0
 800890c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008910:	f7f8 f90e 	bl	8000b30 <__aeabi_fsub>
 8008914:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800891c:	da20      	bge.n	8008960 <__ieee754_powf+0x690>
 800891e:	4621      	mov	r1, r4
 8008920:	f000 f8b8 	bl	8008a94 <scalbnf>
 8008924:	4629      	mov	r1, r5
 8008926:	e53d      	b.n	80083a4 <__ieee754_powf+0xd4>
 8008928:	4b1c      	ldr	r3, [pc, #112]	; (800899c <__ieee754_powf+0x6cc>)
 800892a:	429c      	cmp	r4, r3
 800892c:	dd07      	ble.n	800893e <__ieee754_powf+0x66e>
 800892e:	2100      	movs	r1, #0
 8008930:	4628      	mov	r0, r5
 8008932:	f7f8 fba5 	bl	8001080 <__aeabi_fcmplt>
 8008936:	3800      	subs	r0, #0
 8008938:	bf18      	it	ne
 800893a:	2001      	movne	r0, #1
 800893c:	e580      	b.n	8008440 <__ieee754_powf+0x170>
 800893e:	d109      	bne.n	8008954 <__ieee754_powf+0x684>
 8008940:	4639      	mov	r1, r7
 8008942:	f7f8 f8f5 	bl	8000b30 <__aeabi_fsub>
 8008946:	4631      	mov	r1, r6
 8008948:	f7f8 fbae 	bl	80010a8 <__aeabi_fcmpge>
 800894c:	2800      	cmp	r0, #0
 800894e:	f43f af4f 	beq.w	80087f0 <__ieee754_powf+0x520>
 8008952:	e7ec      	b.n	800892e <__ieee754_powf+0x65e>
 8008954:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008958:	f73f af4a 	bgt.w	80087f0 <__ieee754_powf+0x520>
 800895c:	2400      	movs	r4, #0
 800895e:	e763      	b.n	8008828 <__ieee754_powf+0x558>
 8008960:	4618      	mov	r0, r3
 8008962:	e7df      	b.n	8008924 <__ieee754_powf+0x654>
 8008964:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008968:	e50b      	b.n	8008382 <__ieee754_powf+0xb2>
 800896a:	2100      	movs	r1, #0
 800896c:	e509      	b.n	8008382 <__ieee754_powf+0xb2>
 800896e:	2500      	movs	r5, #0
 8008970:	e4ef      	b.n	8008352 <__ieee754_powf+0x82>
 8008972:	bf00      	nop
 8008974:	3338aa3c 	.word	0x3338aa3c
 8008978:	007fffff 	.word	0x007fffff
 800897c:	3f317200 	.word	0x3f317200
 8008980:	3f317218 	.word	0x3f317218
 8008984:	35bfbe8c 	.word	0x35bfbe8c
 8008988:	3331bb4c 	.word	0x3331bb4c
 800898c:	35ddea0e 	.word	0x35ddea0e
 8008990:	388ab355 	.word	0x388ab355
 8008994:	3b360b61 	.word	0x3b360b61
 8008998:	3e2aaaab 	.word	0x3e2aaaab
 800899c:	43160000 	.word	0x43160000

080089a0 <__ieee754_sqrtf>:
 80089a0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80089a4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4603      	mov	r3, r0
 80089ac:	4604      	mov	r4, r0
 80089ae:	d309      	bcc.n	80089c4 <__ieee754_sqrtf+0x24>
 80089b0:	4601      	mov	r1, r0
 80089b2:	f7f8 f9c7 	bl	8000d44 <__aeabi_fmul>
 80089b6:	4601      	mov	r1, r0
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7f8 f8bb 	bl	8000b34 <__addsf3>
 80089be:	4604      	mov	r4, r0
 80089c0:	4620      	mov	r0, r4
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d0fb      	beq.n	80089c0 <__ieee754_sqrtf+0x20>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	da06      	bge.n	80089da <__ieee754_sqrtf+0x3a>
 80089cc:	4601      	mov	r1, r0
 80089ce:	f7f8 f8af 	bl	8000b30 <__aeabi_fsub>
 80089d2:	4601      	mov	r1, r0
 80089d4:	f7f8 fa6a 	bl	8000eac <__aeabi_fdiv>
 80089d8:	e7f1      	b.n	80089be <__ieee754_sqrtf+0x1e>
 80089da:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80089de:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80089e2:	d029      	beq.n	8008a38 <__ieee754_sqrtf+0x98>
 80089e4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80089e8:	07cb      	lsls	r3, r1, #31
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80089f2:	f04f 0419 	mov.w	r4, #25
 80089f6:	461e      	mov	r6, r3
 80089f8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80089fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008a00:	bf58      	it	pl
 8008a02:	0052      	lslpl	r2, r2, #1
 8008a04:	1040      	asrs	r0, r0, #1
 8008a06:	0052      	lsls	r2, r2, #1
 8008a08:	1875      	adds	r5, r6, r1
 8008a0a:	4295      	cmp	r5, r2
 8008a0c:	bfde      	ittt	le
 8008a0e:	186e      	addle	r6, r5, r1
 8008a10:	1b52      	suble	r2, r2, r5
 8008a12:	185b      	addle	r3, r3, r1
 8008a14:	3c01      	subs	r4, #1
 8008a16:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008a1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a1e:	d1f3      	bne.n	8008a08 <__ieee754_sqrtf+0x68>
 8008a20:	b112      	cbz	r2, 8008a28 <__ieee754_sqrtf+0x88>
 8008a22:	3301      	adds	r3, #1
 8008a24:	f023 0301 	bic.w	r3, r3, #1
 8008a28:	105c      	asrs	r4, r3, #1
 8008a2a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008a2e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008a32:	e7c5      	b.n	80089c0 <__ieee754_sqrtf+0x20>
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	3201      	adds	r2, #1
 8008a38:	0218      	lsls	r0, r3, #8
 8008a3a:	d5fb      	bpl.n	8008a34 <__ieee754_sqrtf+0x94>
 8008a3c:	3a01      	subs	r2, #1
 8008a3e:	1a89      	subs	r1, r1, r2
 8008a40:	e7d0      	b.n	80089e4 <__ieee754_sqrtf+0x44>

08008a42 <with_errnof>:
 8008a42:	b538      	push	{r3, r4, r5, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	f7fc fe2a 	bl	80056a0 <__errno>
 8008a4c:	6005      	str	r5, [r0, #0]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	bd38      	pop	{r3, r4, r5, pc}

08008a52 <xflowf>:
 8008a52:	b508      	push	{r3, lr}
 8008a54:	b140      	cbz	r0, 8008a68 <xflowf+0x16>
 8008a56:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008a5a:	f7f8 f973 	bl	8000d44 <__aeabi_fmul>
 8008a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a62:	2122      	movs	r1, #34	; 0x22
 8008a64:	f7ff bfed 	b.w	8008a42 <with_errnof>
 8008a68:	4608      	mov	r0, r1
 8008a6a:	e7f6      	b.n	8008a5a <xflowf+0x8>

08008a6c <__math_uflowf>:
 8008a6c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008a70:	f7ff bfef 	b.w	8008a52 <xflowf>

08008a74 <__math_oflowf>:
 8008a74:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008a78:	f7ff bfeb 	b.w	8008a52 <xflowf>

08008a7c <fabsf>:
 8008a7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008a80:	4770      	bx	lr

08008a82 <finitef>:
 8008a82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008a86:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008a8a:	bfac      	ite	ge
 8008a8c:	2000      	movge	r0, #0
 8008a8e:	2001      	movlt	r0, #1
 8008a90:	4770      	bx	lr
	...

08008a94 <scalbnf>:
 8008a94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	d02a      	beq.n	8008af8 <scalbnf+0x64>
 8008aa2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008aa6:	d304      	bcc.n	8008ab2 <scalbnf+0x1e>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	f7f8 f843 	bl	8000b34 <__addsf3>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	e022      	b.n	8008af8 <scalbnf+0x64>
 8008ab2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8008ab6:	d117      	bne.n	8008ae8 <scalbnf+0x54>
 8008ab8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008abc:	f7f8 f942 	bl	8000d44 <__aeabi_fmul>
 8008ac0:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <scalbnf+0x8c>)
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4295      	cmp	r5, r2
 8008ac6:	db0b      	blt.n	8008ae0 <scalbnf+0x4c>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008ace:	3a19      	subs	r2, #25
 8008ad0:	442a      	add	r2, r5
 8008ad2:	2afe      	cmp	r2, #254	; 0xfe
 8008ad4:	dd0a      	ble.n	8008aec <scalbnf+0x58>
 8008ad6:	4913      	ldr	r1, [pc, #76]	; (8008b24 <scalbnf+0x90>)
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f361 001e 	bfi	r0, r1, #0, #31
 8008ade:	e000      	b.n	8008ae2 <scalbnf+0x4e>
 8008ae0:	4911      	ldr	r1, [pc, #68]	; (8008b28 <scalbnf+0x94>)
 8008ae2:	f7f8 f92f 	bl	8000d44 <__aeabi_fmul>
 8008ae6:	e7e2      	b.n	8008aae <scalbnf+0x1a>
 8008ae8:	0dd2      	lsrs	r2, r2, #23
 8008aea:	e7f1      	b.n	8008ad0 <scalbnf+0x3c>
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	dd05      	ble.n	8008afc <scalbnf+0x68>
 8008af0:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8008af4:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	f112 0f16 	cmn.w	r2, #22
 8008b00:	da05      	bge.n	8008b0e <scalbnf+0x7a>
 8008b02:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008b06:	4295      	cmp	r5, r2
 8008b08:	dce5      	bgt.n	8008ad6 <scalbnf+0x42>
 8008b0a:	4907      	ldr	r1, [pc, #28]	; (8008b28 <scalbnf+0x94>)
 8008b0c:	e7e4      	b.n	8008ad8 <scalbnf+0x44>
 8008b0e:	3219      	adds	r2, #25
 8008b10:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008b14:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8008b18:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8008b1c:	e7e1      	b.n	8008ae2 <scalbnf+0x4e>
 8008b1e:	bf00      	nop
 8008b20:	ffff3cb0 	.word	0xffff3cb0
 8008b24:	7149f2ca 	.word	0x7149f2ca
 8008b28:	0da24260 	.word	0x0da24260

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
