
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800a9d8  0800a9d8  0001a9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0cc  0800b0cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0d4  0800b0d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0d4  0800b0d4  0001b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d8  0800b0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001dc  0800b2b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800b2b8  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012284  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002754  00000000  00000000  000324cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e59  00000000  00000000  00035e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cee  00000000  00000000  00036ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015456  00000000  00000000  00050997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000917f9  00000000  00000000  00065ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061c4  00000000  00000000  000f75e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fd7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9c0 	.word	0x0800a9c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a9c0 	.word	0x0800a9c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_uldivmod>:
 800113c:	b953      	cbnz	r3, 8001154 <__aeabi_uldivmod+0x18>
 800113e:	b94a      	cbnz	r2, 8001154 <__aeabi_uldivmod+0x18>
 8001140:	2900      	cmp	r1, #0
 8001142:	bf08      	it	eq
 8001144:	2800      	cmpeq	r0, #0
 8001146:	bf1c      	itt	ne
 8001148:	f04f 31ff 	movne.w	r1, #4294967295
 800114c:	f04f 30ff 	movne.w	r0, #4294967295
 8001150:	f000 b972 	b.w	8001438 <__aeabi_idiv0>
 8001154:	f1ad 0c08 	sub.w	ip, sp, #8
 8001158:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800115c:	f000 f806 	bl	800116c <__udivmoddi4>
 8001160:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001168:	b004      	add	sp, #16
 800116a:	4770      	bx	lr

0800116c <__udivmoddi4>:
 800116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001170:	9e08      	ldr	r6, [sp, #32]
 8001172:	460d      	mov	r5, r1
 8001174:	4604      	mov	r4, r0
 8001176:	468e      	mov	lr, r1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d14c      	bne.n	8001216 <__udivmoddi4+0xaa>
 800117c:	428a      	cmp	r2, r1
 800117e:	4694      	mov	ip, r2
 8001180:	d967      	bls.n	8001252 <__udivmoddi4+0xe6>
 8001182:	fab2 f382 	clz	r3, r2
 8001186:	b153      	cbz	r3, 800119e <__udivmoddi4+0x32>
 8001188:	fa02 fc03 	lsl.w	ip, r2, r3
 800118c:	f1c3 0220 	rsb	r2, r3, #32
 8001190:	fa01 fe03 	lsl.w	lr, r1, r3
 8001194:	fa20 f202 	lsr.w	r2, r0, r2
 8001198:	ea42 0e0e 	orr.w	lr, r2, lr
 800119c:	409c      	lsls	r4, r3
 800119e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011a2:	fbbe f1f7 	udiv	r1, lr, r7
 80011a6:	fa1f f58c 	uxth.w	r5, ip
 80011aa:	fb07 ee11 	mls	lr, r7, r1, lr
 80011ae:	fb01 f005 	mul.w	r0, r1, r5
 80011b2:	0c22      	lsrs	r2, r4, #16
 80011b4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d90a      	bls.n	80011d2 <__udivmoddi4+0x66>
 80011bc:	eb1c 0202 	adds.w	r2, ip, r2
 80011c0:	f101 3eff 	add.w	lr, r1, #4294967295
 80011c4:	f080 8119 	bcs.w	80013fa <__udivmoddi4+0x28e>
 80011c8:	4290      	cmp	r0, r2
 80011ca:	f240 8116 	bls.w	80013fa <__udivmoddi4+0x28e>
 80011ce:	3902      	subs	r1, #2
 80011d0:	4462      	add	r2, ip
 80011d2:	1a12      	subs	r2, r2, r0
 80011d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011d8:	fb07 2210 	mls	r2, r7, r0, r2
 80011dc:	fb00 f505 	mul.w	r5, r0, r5
 80011e0:	b2a4      	uxth	r4, r4
 80011e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011e6:	42a5      	cmp	r5, r4
 80011e8:	d90a      	bls.n	8001200 <__udivmoddi4+0x94>
 80011ea:	eb1c 0404 	adds.w	r4, ip, r4
 80011ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80011f2:	f080 8104 	bcs.w	80013fe <__udivmoddi4+0x292>
 80011f6:	42a5      	cmp	r5, r4
 80011f8:	f240 8101 	bls.w	80013fe <__udivmoddi4+0x292>
 80011fc:	4464      	add	r4, ip
 80011fe:	3802      	subs	r0, #2
 8001200:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001204:	2100      	movs	r1, #0
 8001206:	1b64      	subs	r4, r4, r5
 8001208:	b11e      	cbz	r6, 8001212 <__udivmoddi4+0xa6>
 800120a:	40dc      	lsrs	r4, r3
 800120c:	2300      	movs	r3, #0
 800120e:	e9c6 4300 	strd	r4, r3, [r6]
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	428b      	cmp	r3, r1
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0xc0>
 800121a:	2e00      	cmp	r6, #0
 800121c:	f000 80ea 	beq.w	80013f4 <__udivmoddi4+0x288>
 8001220:	2100      	movs	r1, #0
 8001222:	e9c6 0500 	strd	r0, r5, [r6]
 8001226:	4608      	mov	r0, r1
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	fab3 f183 	clz	r1, r3
 8001230:	2900      	cmp	r1, #0
 8001232:	d148      	bne.n	80012c6 <__udivmoddi4+0x15a>
 8001234:	42ab      	cmp	r3, r5
 8001236:	d302      	bcc.n	800123e <__udivmoddi4+0xd2>
 8001238:	4282      	cmp	r2, r0
 800123a:	f200 80f8 	bhi.w	800142e <__udivmoddi4+0x2c2>
 800123e:	1a84      	subs	r4, r0, r2
 8001240:	eb65 0203 	sbc.w	r2, r5, r3
 8001244:	2001      	movs	r0, #1
 8001246:	4696      	mov	lr, r2
 8001248:	2e00      	cmp	r6, #0
 800124a:	d0e2      	beq.n	8001212 <__udivmoddi4+0xa6>
 800124c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001250:	e7df      	b.n	8001212 <__udivmoddi4+0xa6>
 8001252:	b902      	cbnz	r2, 8001256 <__udivmoddi4+0xea>
 8001254:	deff      	udf	#255	; 0xff
 8001256:	fab2 f382 	clz	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 808e 	bne.w	800137c <__udivmoddi4+0x210>
 8001260:	1a88      	subs	r0, r1, r2
 8001262:	2101      	movs	r1, #1
 8001264:	0c17      	lsrs	r7, r2, #16
 8001266:	fa1f fe82 	uxth.w	lr, r2
 800126a:	fbb0 f5f7 	udiv	r5, r0, r7
 800126e:	fb07 0015 	mls	r0, r7, r5, r0
 8001272:	0c22      	lsrs	r2, r4, #16
 8001274:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001278:	fb0e f005 	mul.w	r0, lr, r5
 800127c:	4290      	cmp	r0, r2
 800127e:	d908      	bls.n	8001292 <__udivmoddi4+0x126>
 8001280:	eb1c 0202 	adds.w	r2, ip, r2
 8001284:	f105 38ff 	add.w	r8, r5, #4294967295
 8001288:	d202      	bcs.n	8001290 <__udivmoddi4+0x124>
 800128a:	4290      	cmp	r0, r2
 800128c:	f200 80cc 	bhi.w	8001428 <__udivmoddi4+0x2bc>
 8001290:	4645      	mov	r5, r8
 8001292:	1a12      	subs	r2, r2, r0
 8001294:	fbb2 f0f7 	udiv	r0, r2, r7
 8001298:	fb07 2210 	mls	r2, r7, r0, r2
 800129c:	fb0e fe00 	mul.w	lr, lr, r0
 80012a0:	b2a4      	uxth	r4, r4
 80012a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012a6:	45a6      	cmp	lr, r4
 80012a8:	d908      	bls.n	80012bc <__udivmoddi4+0x150>
 80012aa:	eb1c 0404 	adds.w	r4, ip, r4
 80012ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b2:	d202      	bcs.n	80012ba <__udivmoddi4+0x14e>
 80012b4:	45a6      	cmp	lr, r4
 80012b6:	f200 80b4 	bhi.w	8001422 <__udivmoddi4+0x2b6>
 80012ba:	4610      	mov	r0, r2
 80012bc:	eba4 040e 	sub.w	r4, r4, lr
 80012c0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012c4:	e7a0      	b.n	8001208 <__udivmoddi4+0x9c>
 80012c6:	f1c1 0720 	rsb	r7, r1, #32
 80012ca:	408b      	lsls	r3, r1
 80012cc:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d0:	ea4c 0c03 	orr.w	ip, ip, r3
 80012d4:	fa25 fa07 	lsr.w	sl, r5, r7
 80012d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012dc:	fbba f8f9 	udiv	r8, sl, r9
 80012e0:	408d      	lsls	r5, r1
 80012e2:	fa20 f307 	lsr.w	r3, r0, r7
 80012e6:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ea:	fa1f fe8c 	uxth.w	lr, ip
 80012ee:	432b      	orrs	r3, r5
 80012f0:	fa00 f501 	lsl.w	r5, r0, r1
 80012f4:	fb08 f00e 	mul.w	r0, r8, lr
 80012f8:	0c1c      	lsrs	r4, r3, #16
 80012fa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012fe:	42a0      	cmp	r0, r4
 8001300:	fa02 f201 	lsl.w	r2, r2, r1
 8001304:	d90b      	bls.n	800131e <__udivmoddi4+0x1b2>
 8001306:	eb1c 0404 	adds.w	r4, ip, r4
 800130a:	f108 3aff 	add.w	sl, r8, #4294967295
 800130e:	f080 8086 	bcs.w	800141e <__udivmoddi4+0x2b2>
 8001312:	42a0      	cmp	r0, r4
 8001314:	f240 8083 	bls.w	800141e <__udivmoddi4+0x2b2>
 8001318:	f1a8 0802 	sub.w	r8, r8, #2
 800131c:	4464      	add	r4, ip
 800131e:	1a24      	subs	r4, r4, r0
 8001320:	b298      	uxth	r0, r3
 8001322:	fbb4 f3f9 	udiv	r3, r4, r9
 8001326:	fb09 4413 	mls	r4, r9, r3, r4
 800132a:	fb03 fe0e 	mul.w	lr, r3, lr
 800132e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001332:	45a6      	cmp	lr, r4
 8001334:	d908      	bls.n	8001348 <__udivmoddi4+0x1dc>
 8001336:	eb1c 0404 	adds.w	r4, ip, r4
 800133a:	f103 30ff 	add.w	r0, r3, #4294967295
 800133e:	d26a      	bcs.n	8001416 <__udivmoddi4+0x2aa>
 8001340:	45a6      	cmp	lr, r4
 8001342:	d968      	bls.n	8001416 <__udivmoddi4+0x2aa>
 8001344:	3b02      	subs	r3, #2
 8001346:	4464      	add	r4, ip
 8001348:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800134c:	fba0 9302 	umull	r9, r3, r0, r2
 8001350:	eba4 040e 	sub.w	r4, r4, lr
 8001354:	429c      	cmp	r4, r3
 8001356:	46c8      	mov	r8, r9
 8001358:	469e      	mov	lr, r3
 800135a:	d354      	bcc.n	8001406 <__udivmoddi4+0x29a>
 800135c:	d051      	beq.n	8001402 <__udivmoddi4+0x296>
 800135e:	2e00      	cmp	r6, #0
 8001360:	d067      	beq.n	8001432 <__udivmoddi4+0x2c6>
 8001362:	ebb5 0308 	subs.w	r3, r5, r8
 8001366:	eb64 040e 	sbc.w	r4, r4, lr
 800136a:	40cb      	lsrs	r3, r1
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	431f      	orrs	r7, r3
 8001372:	40cc      	lsrs	r4, r1
 8001374:	e9c6 7400 	strd	r7, r4, [r6]
 8001378:	2100      	movs	r1, #0
 800137a:	e74a      	b.n	8001212 <__udivmoddi4+0xa6>
 800137c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001380:	f1c3 0020 	rsb	r0, r3, #32
 8001384:	40c1      	lsrs	r1, r0
 8001386:	409d      	lsls	r5, r3
 8001388:	fa24 f000 	lsr.w	r0, r4, r0
 800138c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001390:	4328      	orrs	r0, r5
 8001392:	fbb1 f5f7 	udiv	r5, r1, r7
 8001396:	fb07 1115 	mls	r1, r7, r5, r1
 800139a:	fa1f fe8c 	uxth.w	lr, ip
 800139e:	0c02      	lsrs	r2, r0, #16
 80013a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013a4:	fb05 f10e 	mul.w	r1, r5, lr
 80013a8:	4291      	cmp	r1, r2
 80013aa:	fa04 f403 	lsl.w	r4, r4, r3
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x256>
 80013b0:	eb1c 0202 	adds.w	r2, ip, r2
 80013b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80013b8:	d22f      	bcs.n	800141a <__udivmoddi4+0x2ae>
 80013ba:	4291      	cmp	r1, r2
 80013bc:	d92d      	bls.n	800141a <__udivmoddi4+0x2ae>
 80013be:	3d02      	subs	r5, #2
 80013c0:	4462      	add	r2, ip
 80013c2:	1a52      	subs	r2, r2, r1
 80013c4:	fbb2 f1f7 	udiv	r1, r2, r7
 80013c8:	fb07 2211 	mls	r2, r7, r1, r2
 80013cc:	b280      	uxth	r0, r0
 80013ce:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80013d2:	fb01 f20e 	mul.w	r2, r1, lr
 80013d6:	4282      	cmp	r2, r0
 80013d8:	d908      	bls.n	80013ec <__udivmoddi4+0x280>
 80013da:	eb1c 0000 	adds.w	r0, ip, r0
 80013de:	f101 38ff 	add.w	r8, r1, #4294967295
 80013e2:	d216      	bcs.n	8001412 <__udivmoddi4+0x2a6>
 80013e4:	4282      	cmp	r2, r0
 80013e6:	d914      	bls.n	8001412 <__udivmoddi4+0x2a6>
 80013e8:	3902      	subs	r1, #2
 80013ea:	4460      	add	r0, ip
 80013ec:	1a80      	subs	r0, r0, r2
 80013ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80013f2:	e73a      	b.n	800126a <__udivmoddi4+0xfe>
 80013f4:	4631      	mov	r1, r6
 80013f6:	4630      	mov	r0, r6
 80013f8:	e70b      	b.n	8001212 <__udivmoddi4+0xa6>
 80013fa:	4671      	mov	r1, lr
 80013fc:	e6e9      	b.n	80011d2 <__udivmoddi4+0x66>
 80013fe:	4610      	mov	r0, r2
 8001400:	e6fe      	b.n	8001200 <__udivmoddi4+0x94>
 8001402:	454d      	cmp	r5, r9
 8001404:	d2ab      	bcs.n	800135e <__udivmoddi4+0x1f2>
 8001406:	ebb9 0802 	subs.w	r8, r9, r2
 800140a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800140e:	3801      	subs	r0, #1
 8001410:	e7a5      	b.n	800135e <__udivmoddi4+0x1f2>
 8001412:	4641      	mov	r1, r8
 8001414:	e7ea      	b.n	80013ec <__udivmoddi4+0x280>
 8001416:	4603      	mov	r3, r0
 8001418:	e796      	b.n	8001348 <__udivmoddi4+0x1dc>
 800141a:	4645      	mov	r5, r8
 800141c:	e7d1      	b.n	80013c2 <__udivmoddi4+0x256>
 800141e:	46d0      	mov	r8, sl
 8001420:	e77d      	b.n	800131e <__udivmoddi4+0x1b2>
 8001422:	4464      	add	r4, ip
 8001424:	3802      	subs	r0, #2
 8001426:	e749      	b.n	80012bc <__udivmoddi4+0x150>
 8001428:	3d02      	subs	r5, #2
 800142a:	4462      	add	r2, ip
 800142c:	e731      	b.n	8001292 <__udivmoddi4+0x126>
 800142e:	4608      	mov	r0, r1
 8001430:	e70a      	b.n	8001248 <__udivmoddi4+0xdc>
 8001432:	4631      	mov	r1, r6
 8001434:	e6ed      	b.n	8001212 <__udivmoddi4+0xa6>
 8001436:	bf00      	nop

08001438 <__aeabi_idiv0>:
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f001 f9e2 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f000 f930 	bl	80016a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Init();
 8001448:	f001 f9de 	bl	8002808 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 fb6a 	bl	8001b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001450:	f000 f96c 	bl	800172c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001454:	f000 fb3c 	bl	8001ad0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001458:	f000 f9ce 	bl	80017f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800145c:	f000 fad0 	bl	8001a00 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001460:	f000 fa78 	bl	8001954 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001464:	f000 f992 	bl	800178c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

 fc_powerup(); 					// some loed blinking indication to see if the board boots or not
 8001468:	f000 fbb8 	bl	8001bdc <fc_powerup>
 config_gyro(); 				// configure the gyroscope
 800146c:	f000 fc28 	bl	8001cc0 <config_gyro>
 config_motors(); 				// timer pwm settings for mototrs
 8001470:	f000 fbf8 	bl	8001c64 <config_motors>
 config_wireless();				// configure wireless lora module
 8001474:	f000 fda6 	bl	8001fc4 <config_wireless>
 wait_for_pair();				// wait while the trasmitter is getting paired
 8001478:	f000 fc8e 	bl	8001d98 <wait_for_pair>
 pid_init(&roll_pidController);	// pid init function call for roll pitch and yaw
 800147c:	4879      	ldr	r0, [pc, #484]	; (8001664 <main+0x228>)
 800147e:	f005 fe03 	bl	8007088 <pid_init>
 pid_init(&yaw_pidController);
 8001482:	4879      	ldr	r0, [pc, #484]	; (8001668 <main+0x22c>)
 8001484:	f005 fe00 	bl	8007088 <pid_init>
 pid_init(&pitch_pidController);
 8001488:	4878      	ldr	r0, [pc, #480]	; (800166c <main+0x230>)
 800148a:	f005 fdfd 	bl	8007088 <pid_init>
 // here we are having 50hz cutoff freq and 0.002 sec of sampling time i.e 2ms
 filter_init(&lowpass, 1000, 0.0025 ) ; // loaw pass filter init function call
 800148e:	4a78      	ldr	r2, [pc, #480]	; (8001670 <main+0x234>)
 8001490:	4978      	ldr	r1, [pc, #480]	; (8001674 <main+0x238>)
 8001492:	4879      	ldr	r0, [pc, #484]	; (8001678 <main+0x23c>)
 8001494:	f004 ff72 	bl	800637c <filter_init>
 load_pid() ;         					// pid setting for p,i,d gains and other limits
 8001498:	f000 fdd4 	bl	8002044 <load_pid>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rcv_channel();								// start receiving data from radio transitter
 800149c:	f000 fe44 	bl	8002128 <rcv_channel>
	  get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;	// get the gyro data yaw ,pitch , roll
 80014a0:	4a76      	ldr	r2, [pc, #472]	; (800167c <main+0x240>)
 80014a2:	4977      	ldr	r1, [pc, #476]	; (8001680 <main+0x244>)
 80014a4:	4877      	ldr	r0, [pc, #476]	; (8001684 <main+0x248>)
 80014a6:	f005 fc0f 	bl	8006cc8 <get_gyro>
	  // low pass all the gyro data
	  Gyro_Data.pitch =  filter_update(&lowpass, Gyro_Data.pitch ) ; // low pass filter all gyro signals
 80014aa:	4b75      	ldr	r3, [pc, #468]	; (8001680 <main+0x244>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4871      	ldr	r0, [pc, #452]	; (8001678 <main+0x23c>)
 80014b2:	f004 ff9d 	bl	80063f0 <filter_update>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a71      	ldr	r2, [pc, #452]	; (8001680 <main+0x244>)
 80014ba:	6013      	str	r3, [r2, #0]
	  Gyro_Data.yaw =  filter_update(&lowpass, Gyro_Data.yaw) ;
 80014bc:	4b70      	ldr	r3, [pc, #448]	; (8001680 <main+0x244>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4619      	mov	r1, r3
 80014c2:	486d      	ldr	r0, [pc, #436]	; (8001678 <main+0x23c>)
 80014c4:	f004 ff94 	bl	80063f0 <filter_update>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a6d      	ldr	r2, [pc, #436]	; (8001680 <main+0x244>)
 80014cc:	6093      	str	r3, [r2, #8]
	  Gyro_Data.roll =  filter_update(&lowpass, Gyro_Data.roll) ;
 80014ce:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <main+0x244>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4868      	ldr	r0, [pc, #416]	; (8001678 <main+0x23c>)
 80014d6:	f004 ff8b 	bl	80063f0 <filter_update>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a68      	ldr	r2, [pc, #416]	; (8001680 <main+0x244>)
 80014de:	6053      	str	r3, [r2, #4]

	  limit_radio_inputs() ;	// apply limits for radio input
 80014e0:	f000 fcbc 	bl	8001e5c <limit_radio_inputs>

	 // wait for arming
	  wait_for_arming() ;
 80014e4:	f000 fd20 	bl	8001f28 <wait_for_arming>

	  m1_out = (recived_channels.Throtle - roll_pidController.out - pitch_pidController.out - yaw_pidController.out )*PID_OUT_CONVERTER;
 80014e8:	4b67      	ldr	r3, [pc, #412]	; (8001688 <main+0x24c>)
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbd5 	bl	8000c9c <__aeabi_i2f>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <main+0x228>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f8:	4619      	mov	r1, r3
 80014fa:	4610      	mov	r0, r2
 80014fc:	f7ff fb18 	bl	8000b30 <__aeabi_fsub>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <main+0x230>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff fb10 	bl	8000b30 <__aeabi_fsub>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <main+0x22c>)
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f7ff fb08 	bl	8000b30 <__aeabi_fsub>
 8001520:	4603      	mov	r3, r0
 8001522:	495a      	ldr	r1, [pc, #360]	; (800168c <main+0x250>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc0d 	bl	8000d44 <__aeabi_fmul>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fde5 	bl	80010fc <__aeabi_f2uiz>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b56      	ldr	r3, [pc, #344]	; (8001690 <main+0x254>)
 8001538:	801a      	strh	r2, [r3, #0]
	  m2_out = (recived_channels.Throtle - roll_pidController.out + pitch_pidController.out + yaw_pidController.out )*PID_OUT_CONVERTER;
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <main+0x24c>)
 800153c:	889b      	ldrh	r3, [r3, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbac 	bl	8000c9c <__aeabi_i2f>
 8001544:	4602      	mov	r2, r0
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <main+0x228>)
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7ff faef 	bl	8000b30 <__aeabi_fsub>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b45      	ldr	r3, [pc, #276]	; (800166c <main+0x230>)
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	4619      	mov	r1, r3
 800155c:	4610      	mov	r0, r2
 800155e:	f7ff fae9 	bl	8000b34 <__addsf3>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <main+0x22c>)
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f7ff fae1 	bl	8000b34 <__addsf3>
 8001572:	4603      	mov	r3, r0
 8001574:	4945      	ldr	r1, [pc, #276]	; (800168c <main+0x250>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fbe4 	bl	8000d44 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fdbc 	bl	80010fc <__aeabi_f2uiz>
 8001584:	4603      	mov	r3, r0
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <main+0x258>)
 800158a:	801a      	strh	r2, [r3, #0]
	  m3_out = (recived_channels.Throtle + roll_pidController.out + pitch_pidController.out - yaw_pidController.out )*PID_OUT_CONVERTER;
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <main+0x24c>)
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fb83 	bl	8000c9c <__aeabi_i2f>
 8001596:	4602      	mov	r2, r0
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <main+0x228>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff fac8 	bl	8000b34 <__addsf3>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b30      	ldr	r3, [pc, #192]	; (800166c <main+0x230>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fac0 	bl	8000b34 <__addsf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <main+0x22c>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fab6 	bl	8000b30 <__aeabi_fsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4931      	ldr	r1, [pc, #196]	; (800168c <main+0x250>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fbbb 	bl	8000d44 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fd93 	bl	80010fc <__aeabi_f2uiz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <main+0x25c>)
 80015dc:	801a      	strh	r2, [r3, #0]
	  m4_out = (recived_channels.Throtle + roll_pidController.out - pitch_pidController.out + yaw_pidController.out )*PID_OUT_CONVERTER;
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <main+0x24c>)
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb5a 	bl	8000c9c <__aeabi_i2f>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <main+0x228>)
 80015ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f7ff fa9f 	bl	8000b34 <__addsf3>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <main+0x230>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7ff fa95 	bl	8000b30 <__aeabi_fsub>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <main+0x22c>)
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7ff fa8f 	bl	8000b34 <__addsf3>
 8001616:	4603      	mov	r3, r0
 8001618:	491c      	ldr	r1, [pc, #112]	; (800168c <main+0x250>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb92 	bl	8000d44 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fd6a 	bl	80010fc <__aeabi_f2uiz>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <main+0x260>)
 800162e:	801a      	strh	r2, [r3, #0]

	  // TIM channel 3 is m3
	  // TIM channel 4 is m2
	  // TIm channel 2 is m1
	  // TIm channel 1 is m4
	  if (isArmed  == 1 ) {
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <main+0x264>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	f47f af31 	bne.w	800149c <main+0x60>
	  __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_2, m1_out) ;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <main+0x254>)
 800163c:	881a      	ldrh	r2, [r3, #0]
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <main+0x268>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_4, m2_out) ;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <main+0x258>)
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <main+0x268>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_3, m3_out) ;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <main+0x25c>)
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <main+0x268>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1, m4_out) ;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <main+0x260>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <main+0x268>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
	  rcv_channel();								// start receiving data from radio transitter
 8001662:	e71b      	b.n	800149c <main+0x60>
 8001664:	200004a0 	.word	0x200004a0
 8001668:	20000430 	.word	0x20000430
 800166c:	20000468 	.word	0x20000468
 8001670:	3b23d70a 	.word	0x3b23d70a
 8001674:	447a0000 	.word	0x447a0000
 8001678:	200004d8 	.word	0x200004d8
 800167c:	200003dc 	.word	0x200003dc
 8001680:	200003d0 	.word	0x200003d0
 8001684:	200001f8 	.word	0x200001f8
 8001688:	20000420 	.word	0x20000420
 800168c:	3f045a1d 	.word	0x3f045a1d
 8001690:	200004e8 	.word	0x200004e8
 8001694:	200004ea 	.word	0x200004ea
 8001698:	200004ec 	.word	0x200004ec
 800169c:	200004ee 	.word	0x200004ee
 80016a0:	200004f0 	.word	0x200004f0
 80016a4:	200002a4 	.word	0x200002a4

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	2228      	movs	r2, #40	; 0x28
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 fe3a 	bl	8008330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d2:	2310      	movs	r3, #16
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80016de:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fc17 	bl	8003f1c <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016f4:	f000 fdc4 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fe84 	bl	8004420 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800171e:	f000 fdaf 	bl	8002280 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	; 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_I2C1_Init+0x54>)
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <MX_I2C1_Init+0x58>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_I2C1_Init+0x54>)
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C1_Init+0x5c>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_I2C1_Init+0x54>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_I2C1_Init+0x54>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <MX_I2C1_Init+0x54>)
 800174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_I2C1_Init+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_I2C1_Init+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_I2C1_Init+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_I2C1_Init+0x54>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_I2C1_Init+0x54>)
 800176c:	f001 fb7c 	bl	8002e68 <HAL_I2C_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001776:	f000 fd83 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001f8 	.word	0x200001f8
 8001784:	40005400 	.word	0x40005400
 8001788:	00061a80 	.word	0x00061a80

0800178c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI1_Init+0x64>)
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <MX_SPI1_Init+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI1_Init+0x64>)
 8001798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800179c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017c0:	2210      	movs	r2, #16
 80017c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017d8:	220a      	movs	r2, #10
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017de:	f002 ffad 	bl	800473c <HAL_SPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e8:	f000 fd4a 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000024c 	.word	0x2000024c
 80017f4:	40013000 	.word	0x40013000

080017f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b092      	sub	sp, #72	; 0x48
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2220      	movs	r2, #32
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f006 fd84 	bl	8008330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001828:	4b48      	ldr	r3, [pc, #288]	; (800194c <MX_TIM1_Init+0x154>)
 800182a:	4a49      	ldr	r2, [pc, #292]	; (8001950 <MX_TIM1_Init+0x158>)
 800182c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <MX_TIM1_Init+0x154>)
 8001830:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001836:	4b45      	ldr	r3, [pc, #276]	; (800194c <MX_TIM1_Init+0x154>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <MX_TIM1_Init+0x154>)
 800183e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b41      	ldr	r3, [pc, #260]	; (800194c <MX_TIM1_Init+0x154>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <MX_TIM1_Init+0x154>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001850:	4b3e      	ldr	r3, [pc, #248]	; (800194c <MX_TIM1_Init+0x154>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001856:	483d      	ldr	r0, [pc, #244]	; (800194c <MX_TIM1_Init+0x154>)
 8001858:	f003 fd53 	bl	8005302 <HAL_TIM_PWM_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001862:	f000 fd0d 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001872:	4619      	mov	r1, r3
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <MX_TIM1_Init+0x154>)
 8001876:	f004 faf1 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001880:	f000 fcfe 	bl	8002280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	; 0x60
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4828      	ldr	r0, [pc, #160]	; (800194c <MX_TIM1_Init+0x154>)
 80018aa:	f003 ffe3 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80018b4:	f000 fce4 	bl	8002280 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 80018b8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	2204      	movs	r2, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4821      	ldr	r0, [pc, #132]	; (800194c <MX_TIM1_Init+0x154>)
 80018c8:	f003 ffd4 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80018d2:	f000 fcd5 	bl	8002280 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	2208      	movs	r2, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <MX_TIM1_Init+0x154>)
 80018e4:	f003 ffc6 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80018ee:	f000 fcc7 	bl	8002280 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	220c      	movs	r2, #12
 80018f8:	4619      	mov	r1, r3
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_TIM1_Init+0x154>)
 80018fc:	f003 ffba 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001906:	f000 fcbb 	bl	8002280 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_TIM1_Init+0x154>)
 800192e:	f004 faf3 	bl	8005f18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001938:	f000 fca2 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <MX_TIM1_Init+0x154>)
 800193e:	f000 fda5 	bl	800248c <HAL_TIM_MspPostInit>

}
 8001942:	bf00      	nop
 8001944:	3748      	adds	r7, #72	; 0x48
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200002a4 	.word	0x200002a4
 8001950:	40012c00 	.word	0x40012c00

08001954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_TIM2_Init+0xa8>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <MX_TIM2_Init+0xa8>)
 8001980:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM2_Init+0xa8>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_TIM2_Init+0xa8>)
 800198e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <MX_TIM2_Init+0xa8>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM2_Init+0xa8>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <MX_TIM2_Init+0xa8>)
 80019a2:	f003 fc5f 	bl	8005264 <HAL_TIM_OC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 fc68 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	4619      	mov	r1, r3
 80019be:	480f      	ldr	r0, [pc, #60]	; (80019fc <MX_TIM2_Init+0xa8>)
 80019c0:	f004 fa4c 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80019ca:	f000 fc59 	bl	8002280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_TIM2_Init+0xa8>)
 80019e6:	f003 fee9 	bl	80057bc <HAL_TIM_OC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019f0:	f000 fc46 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002ec 	.word	0x200002ec

08001a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <MX_TIM3_Init+0xcc>)
 8001a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a38:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a4a:	481f      	ldr	r0, [pc, #124]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a4c:	f003 fc59 	bl	8005302 <HAL_TIM_PWM_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f000 fc13 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a6a:	f004 f9f7 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a74:	f000 fc04 	bl	8002280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a78:	2360      	movs	r3, #96	; 0x60
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001a7c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001a92:	f003 feef 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a9c:	f000 fbf0 	bl	8002280 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001aac:	f003 fee2 	bl	8005874 <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001ab6:	f000 fbe3 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <MX_TIM3_Init+0xc8>)
 8001abc:	f000 fce6 	bl	800248c <HAL_TIM_MspPostInit>

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000334 	.word	0x20000334
 8001acc:	40000400 	.word	0x40000400

08001ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_USART2_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b08:	f004 fa69 	bl	8005fde <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 fbb5 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000037c 	.word	0x2000037c
 8001b20:	40004400 	.word	0x40004400

08001b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <MX_GPIO_Init+0xb0>)
 8001b6e:	f001 f963 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b78:	4817      	ldr	r0, [pc, #92]	; (8001bd8 <MX_GPIO_Init+0xb4>)
 8001b7a:	f001 f95d 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b7e:	2310      	movs	r3, #16
 8001b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <MX_GPIO_Init+0xb0>)
 8001b96:	f000 ffcb 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_GPIO_Init+0xb4>)
 8001bb4:	f000 ffbc 	bl	8002b30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_GPIO_Init+0xb4>)
 8001bc4:	f000 ffb4 	bl	8002b30 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40010c00 	.word	0x40010c00

08001bdc <fc_powerup>:

/* USER CODE BEGIN 4 */
void  fc_powerup(){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
// turn the white and red led ON for a bit
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,0);
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <fc_powerup+0x84>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <fc_powerup+0x84>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	481b      	ldr	r0, [pc, #108]	; (8001c60 <fc_powerup+0x84>)
 8001bf4:	f003 fbd4 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001bf8:	210c      	movs	r1, #12
 8001bfa:	4819      	ldr	r0, [pc, #100]	; (8001c60 <fc_powerup+0x84>)
 8001bfc:	f003 fbd0 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 8001c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c04:	f000 fe62 	bl	80028cc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001c08:	2108      	movs	r1, #8
 8001c0a:	4815      	ldr	r0, [pc, #84]	; (8001c60 <fc_powerup+0x84>)
 8001c0c:	f003 fc6a 	bl	80054e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 8001c10:	210c      	movs	r1, #12
 8001c12:	4813      	ldr	r0, [pc, #76]	; (8001c60 <fc_powerup+0x84>)
 8001c14:	f003 fc66 	bl	80054e4 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <fc_powerup+0x84>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,32000);
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <fc_powerup+0x84>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	480c      	ldr	r0, [pc, #48]	; (8001c60 <fc_powerup+0x84>)
 8001c30:	f003 fbb6 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001c34:	210c      	movs	r1, #12
 8001c36:	480a      	ldr	r0, [pc, #40]	; (8001c60 <fc_powerup+0x84>)
 8001c38:	f003 fbb2 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 8001c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c40:	f000 fe44 	bl	80028cc <HAL_Delay>
	HAL_Delay(1000) ;
 8001c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c48:	f000 fe40 	bl	80028cc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <fc_powerup+0x84>)
 8001c50:	f003 fc48 	bl	80054e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 8001c54:	210c      	movs	r1, #12
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <fc_powerup+0x84>)
 8001c58:	f003 fc44 	bl	80054e4 <HAL_TIM_PWM_Stop>

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000334 	.word	0x20000334

08001c64 <config_motors>:

void config_motors() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1,0) ;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <config_motors+0x58>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_2,0) ;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <config_motors+0x58>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_3,0) ;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <config_motors+0x58>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_4,0) ;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <config_motors+0x58>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	480c      	ldr	r0, [pc, #48]	; (8001cbc <config_motors+0x58>)
 8001c8c:	f003 fb88 	bl	80053a0 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001c90:	2104      	movs	r1, #4
 8001c92:	480a      	ldr	r0, [pc, #40]	; (8001cbc <config_motors+0x58>)
 8001c94:	f003 fb84 	bl	80053a0 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c98:	2108      	movs	r1, #8
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <config_motors+0x58>)
 8001c9c:	f003 fb80 	bl	80053a0 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ca0:	210c      	movs	r1, #12
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <config_motors+0x58>)
 8001ca4:	f003 fb7c 	bl	80053a0 <HAL_TIM_PWM_Start>

   HAL_Delay(1000) ;
 8001ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cac:	f000 fe0e 	bl	80028cc <HAL_Delay>
   HAL_Delay(1000) ;
 8001cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb4:	f000 fe0a 	bl	80028cc <HAL_Delay>

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002a4 	.word	0x200002a4

08001cc0 <config_gyro>:
void config_gyro() {
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b090      	sub	sp, #64	; 0x40
 8001cc6:	af0a      	add	r7, sp, #40	; 0x28
   Self_test_mpu6050(&hi2c1) ;
 8001cc8:	482e      	ldr	r0, [pc, #184]	; (8001d84 <config_gyro+0xc4>)
 8001cca:	f004 fbb9 	bl	8006440 <Self_test_mpu6050>
   Mpu6050_Init(&hi2c1) ;			//initalise gyroscope
 8001cce:	482d      	ldr	r0, [pc, #180]	; (8001d84 <config_gyro+0xc4>)
 8001cd0:	f004 fe36 	bl	8006940 <Mpu6050_Init>
   gyro_calibrate(&hi2c1,  &Gyro_Calib);
 8001cd4:	492c      	ldr	r1, [pc, #176]	; (8001d88 <config_gyro+0xc8>)
 8001cd6:	482b      	ldr	r0, [pc, #172]	; (8001d84 <config_gyro+0xc4>)
 8001cd8:	f005 f896 	bl	8006e08 <gyro_calibrate>

   get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <config_gyro+0xc8>)
 8001cde:	492b      	ldr	r1, [pc, #172]	; (8001d8c <config_gyro+0xcc>)
 8001ce0:	4828      	ldr	r0, [pc, #160]	; (8001d84 <config_gyro+0xc4>)
 8001ce2:	f004 fff1 	bl	8006cc8 <get_gyro>
   get_Accl(&hi2c1, &Accl_Data) ;
 8001ce6:	492a      	ldr	r1, [pc, #168]	; (8001d90 <config_gyro+0xd0>)
 8001ce8:	4826      	ldr	r0, [pc, #152]	; (8001d84 <config_gyro+0xc4>)
 8001cea:	f004 ff7d 	bl	8006be8 <get_Accl>
//    take 200 readings from the imu
   for (uint8_t i = 0 ; i < 200 ; i++){
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
 8001cf2:	e03d      	b.n	8001d70 <config_gyro+0xb0>
	     printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <config_gyro+0xcc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fb95 	bl	8000428 <__aeabi_f2d>
 8001cfe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <config_gyro+0xcc>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb8e 	bl	8000428 <__aeabi_f2d>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <config_gyro+0xcc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fb87 	bl	8000428 <__aeabi_f2d>
 8001d1a:	4680      	mov	r8, r0
 8001d1c:	4689      	mov	r9, r1
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <config_gyro+0xd0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fb80 	bl	8000428 <__aeabi_f2d>
 8001d28:	4682      	mov	sl, r0
 8001d2a:	468b      	mov	fp, r1
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <config_gyro+0xd0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fb79 	bl	8000428 <__aeabi_f2d>
 8001d36:	e9c7 0100 	strd	r0, r1, [r7]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <config_gyro+0xd0>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fb72 	bl	8000428 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d50:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001d54:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d5c:	e9cd 4500 	strd	r4, r5, [sp]
 8001d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <config_gyro+0xd4>)
 8001d66:	f006 f98d 	bl	8008084 <iprintf>
   for (uint8_t i = 0 ; i < 200 ; i++){
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2bc7      	cmp	r3, #199	; 0xc7
 8001d74:	d9be      	bls.n	8001cf4 <config_gyro+0x34>
	     }

}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d82:	bf00      	nop
 8001d84:	200001f8 	.word	0x200001f8
 8001d88:	200003dc 	.word	0x200003dc
 8001d8c:	200003d0 	.word	0x200003d0
 8001d90:	200003c4 	.word	0x200003c4
 8001d94:	0800a9d8 	.word	0x0800a9d8

08001d98 <wait_for_pair>:
void wait_for_pair() {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af02      	add	r7, sp, #8
uint8_t Key [4] = {0xAA ,0xBB , 0xCC ,0xDD };
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <wait_for_pair+0xac>)
 8001da0:	60bb      	str	r3, [r7, #8]
uint8_t ret = 0 ;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73bb      	strb	r3, [r7, #14]
uint8_t temp_buff [4] = {0} ;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]

while(1){

  ret = lora_prasePacket(&lora);
 8001daa:	4827      	ldr	r0, [pc, #156]	; (8001e48 <wait_for_pair+0xb0>)
 8001dac:	f005 fb76 	bl	800749c <lora_prasePacket>
 8001db0:	4603      	mov	r3, r0
 8001db2:	73bb      	strb	r3, [r7, #14]
  if(ret){
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01f      	beq.n	8001dfa <wait_for_pair+0x62>
	uint8_t i=0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
	while( i <  4){
 8001dbe:	e00d      	b.n	8001ddc <wait_for_pair+0x44>
	temp_buff[i] = lora_read(&lora);
 8001dc0:	7bfc      	ldrb	r4, [r7, #15]
 8001dc2:	4821      	ldr	r0, [pc, #132]	; (8001e48 <wait_for_pair+0xb0>)
 8001dc4:	f005 fbda 	bl	800757c <lora_read>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f104 0310 	add.w	r3, r4, #16
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	i++;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
	while( i <  4){
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d9ee      	bls.n	8001dc0 <wait_for_pair+0x28>
    }
	printf("%x  %x  %x  %x  \n" , temp_buff[0] , temp_buff[1] , temp_buff[2] , temp_buff[3]   ) ;
 8001de2:	793b      	ldrb	r3, [r7, #4]
 8001de4:	4619      	mov	r1, r3
 8001de6:	797b      	ldrb	r3, [r7, #5]
 8001de8:	461a      	mov	r2, r3
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	4618      	mov	r0, r3
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	4603      	mov	r3, r0
 8001df4:	4815      	ldr	r0, [pc, #84]	; (8001e4c <wait_for_pair+0xb4>)
 8001df6:	f006 f945 	bl	8008084 <iprintf>
  }
  if (memcmp(Key , temp_buff , 4) == 0) {
 8001dfa:	1d39      	adds	r1, r7, #4
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	2204      	movs	r2, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f006 fa84 	bl	8008310 <memcmp>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10b      	bne.n	8001e26 <wait_for_pair+0x8e>
	printf("key matched \n ") ;
 8001e0e:	4810      	ldr	r0, [pc, #64]	; (8001e50 <wait_for_pair+0xb8>)
 8001e10:	f006 f938 	bl	8008084 <iprintf>
	HAL_Delay(1000) ;
 8001e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e18:	f000 fd58 	bl	80028cc <HAL_Delay>
	HAL_Delay(1000) ;
 8001e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e20:	f000 fd54 	bl	80028cc <HAL_Delay>

  break ;
 8001e24:	e003      	b.n	8001e2e <wait_for_pair+0x96>
  }
  printf("looking for pair ") ;
 8001e26:	480b      	ldr	r0, [pc, #44]	; (8001e54 <wait_for_pair+0xbc>)
 8001e28:	f006 f92c 	bl	8008084 <iprintf>
  ret = lora_prasePacket(&lora);
 8001e2c:	e7bd      	b.n	8001daa <wait_for_pair+0x12>
 }

printf("done paring  \n") ;
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <wait_for_pair+0xc0>)
 8001e30:	f006 f98e 	bl	8008150 <puts>
HAL_Delay(1000) ;
 8001e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e38:	f000 fd48 	bl	80028cc <HAL_Delay>

}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	ddccbbaa 	.word	0xddccbbaa
 8001e48:	20000404 	.word	0x20000404
 8001e4c:	0800aa10 	.word	0x0800aa10
 8001e50:	0800aa24 	.word	0x0800aa24
 8001e54:	0800aa34 	.word	0x0800aa34
 8001e58:	0800aa48 	.word	0x0800aa48

08001e5c <limit_radio_inputs>:

void limit_radio_inputs() {
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

Throttle = recived_channels.Throtle - MIN_ALLOWED_THROTTLE_INPUT ;
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <limit_radio_inputs+0xb8>)
 8001e62:	889b      	ldrh	r3, [r3, #4]
 8001e64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001e6e:	801a      	strh	r2, [r3, #0]
	if (Throttle < MIN_ALLOWED_THROTTLE_INPUT) {
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001e7a:	da04      	bge.n	8001e86 <limit_radio_inputs+0x2a>
		Throttle = MIN_ALLOWED_THROTTLE_INPUT ;
 8001e7c:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001e7e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e009      	b.n	8001e9a <limit_radio_inputs+0x3e>
	} else if(Throttle > MAX_ALLOWED_THROTTLE_INPUT){
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e90:	dd03      	ble.n	8001e9a <limit_radio_inputs+0x3e>
		Throttle = MAX_ALLOWED_THROTTLE_INPUT ;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001e94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e98:	801a      	strh	r2, [r3, #0]
	}

	if (Pitch < MIN_ALLOWED_PITCH_INPUT) {
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <limit_radio_inputs+0xc0>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 8001ea4:	da04      	bge.n	8001eb0 <limit_radio_inputs+0x54>
		Pitch = MIN_ALLOWED_PITCH_INPUT ;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <limit_radio_inputs+0xc0>)
 8001ea8:	f64f 72a2 	movw	r2, #65442	; 0xffa2
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	e007      	b.n	8001ec0 <limit_radio_inputs+0x64>
	} else if(Pitch > MAX_ALLOWED_PITCH_INPUT){
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <limit_radio_inputs+0xc0>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	2b5e      	cmp	r3, #94	; 0x5e
 8001eb8:	dd02      	ble.n	8001ec0 <limit_radio_inputs+0x64>
		Pitch = MAX_ALLOWED_PITCH_INPUT ;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <limit_radio_inputs+0xc0>)
 8001ebc:	225e      	movs	r2, #94	; 0x5e
 8001ebe:	801a      	strh	r2, [r3, #0]
	}

	if (Yaw < MIN_ALLOWED_YAW_INPUT) {
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <limit_radio_inputs+0xc4>)
 8001ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec6:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 8001eca:	da04      	bge.n	8001ed6 <limit_radio_inputs+0x7a>
		Yaw = MIN_ALLOWED_YAW_INPUT ;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <limit_radio_inputs+0xc4>)
 8001ece:	f64f 72a2 	movw	r2, #65442	; 0xffa2
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <limit_radio_inputs+0x8a>
	} else if(Throttle > MAX_ALLOWED_YAW_INPUT){
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <limit_radio_inputs+0xbc>)
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	2b5e      	cmp	r3, #94	; 0x5e
 8001ede:	dd02      	ble.n	8001ee6 <limit_radio_inputs+0x8a>
		Yaw = MAX_ALLOWED_YAW_INPUT ;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <limit_radio_inputs+0xc4>)
 8001ee2:	225e      	movs	r2, #94	; 0x5e
 8001ee4:	801a      	strh	r2, [r3, #0]
	}

	if (Roll < MIN_ALLOWED_ROLL_INPUT) {
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <limit_radio_inputs+0xc8>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	f113 0f5e 	cmn.w	r3, #94	; 0x5e
 8001ef0:	da04      	bge.n	8001efc <limit_radio_inputs+0xa0>
		Roll = MIN_ALLOWED_ROLL_INPUT ;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <limit_radio_inputs+0xc8>)
 8001ef4:	f64f 72a2 	movw	r2, #65442	; 0xffa2
 8001ef8:	801a      	strh	r2, [r3, #0]
	} else if(Pitch > MAX_ALLOWED_ROLL_INPUT){
		Roll = MAX_ALLOWED_ROLL_INPUT ;
	}

}
 8001efa:	e007      	b.n	8001f0c <limit_radio_inputs+0xb0>
	} else if(Pitch > MAX_ALLOWED_ROLL_INPUT){
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <limit_radio_inputs+0xc0>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	2b5e      	cmp	r3, #94	; 0x5e
 8001f04:	dd02      	ble.n	8001f0c <limit_radio_inputs+0xb0>
		Roll = MAX_ALLOWED_ROLL_INPUT ;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <limit_radio_inputs+0xc8>)
 8001f08:	225e      	movs	r2, #94	; 0x5e
 8001f0a:	801a      	strh	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000420 	.word	0x20000420
 8001f18:	20000428 	.word	0x20000428
 8001f1c:	2000042a 	.word	0x2000042a
 8001f20:	2000042c 	.word	0x2000042c
 8001f24:	2000042e 	.word	0x2000042e

08001f28 <wait_for_arming>:

void wait_for_arming() {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	if (!isArmed) {
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <wait_for_arming+0x88>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d13b      	bne.n	8001fac <wait_for_arming+0x84>

		if (((Pitch < -125 ) && (Pitch >= -128)) &&  ((Roll < -125 ) && (Roll >= -128)) && ((Yaw < -125 ) && (Yaw >= -128))) {
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <wait_for_arming+0x8c>)
 8001f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3a:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8001f3e:	da35      	bge.n	8001fac <wait_for_arming+0x84>
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <wait_for_arming+0x8c>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001f4a:	db2f      	blt.n	8001fac <wait_for_arming+0x84>
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <wait_for_arming+0x90>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8001f56:	da29      	bge.n	8001fac <wait_for_arming+0x84>
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <wait_for_arming+0x90>)
 8001f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001f62:	db23      	blt.n	8001fac <wait_for_arming+0x84>
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <wait_for_arming+0x94>)
 8001f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6a:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
 8001f6e:	da1d      	bge.n	8001fac <wait_for_arming+0x84>
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <wait_for_arming+0x94>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001f7a:	db17      	blt.n	8001fac <wait_for_arming+0x84>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <wait_for_arming+0x98>)
 8001f80:	f003 fa0e 	bl	80053a0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,16000);
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <wait_for_arming+0x98>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_Delay(1000) ;
 8001f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f92:	f000 fc9b 	bl	80028cc <HAL_Delay>
			HAL_Delay(1000) ;
 8001f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f9a:	f000 fc97 	bl	80028cc <HAL_Delay>
			HAL_Delay(1000) ;
 8001f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa2:	f000 fc93 	bl	80028cc <HAL_Delay>
			isArmed = 1 ;
 8001fa6:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <wait_for_arming+0x88>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200004f0 	.word	0x200004f0
 8001fb4:	2000042a 	.word	0x2000042a
 8001fb8:	2000042e 	.word	0x2000042e
 8001fbc:	2000042c 	.word	0x2000042c
 8001fc0:	20000334 	.word	0x20000334

08001fc4 <config_wireless>:

void config_wireless(){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <config_wireless+0x64>)
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <config_wireless+0x68>)
 8001fcc:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <config_wireless+0x64>)
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <config_wireless+0x64>)
 8001fd6:	4a16      	ldr	r2, [pc, #88]	; (8002030 <config_wireless+0x6c>)
 8001fd8:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <config_wireless+0x64>)
 8001fdc:	2210      	movs	r2, #16
 8001fde:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <config_wireless+0x64>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <config_wireless+0x68>)
 8001fe4:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <config_wireless+0x64>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <config_wireless+0x64>)
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <config_wireless+0x70>)
 8001ff2:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <config_wireless+0x74>)
 8001ff6:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <config_wireless+0x64>)
 8001ff8:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <config_wireless+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 8002000:	e006      	b.n	8002010 <config_wireless+0x4c>
	printf("init Failed \n");
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <config_wireless+0x78>)
 8002004:	f006 f8a4 	bl	8008150 <puts>
	HAL_Delay(1000);
 8002008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800200c:	f000 fc5e 	bl	80028cc <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <config_wireless+0x74>)
 8002012:	f005 f9d3 	bl	80073bc <lora_init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f2      	bne.n	8002002 <config_wireless+0x3e>
	}
	printf("init success \n");
 800201c:	4808      	ldr	r0, [pc, #32]	; (8002040 <config_wireless+0x7c>)
 800201e:	f006 f897 	bl	8008150 <puts>

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200003e8 	.word	0x200003e8
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40010800 	.word	0x40010800
 8002034:	2000024c 	.word	0x2000024c
 8002038:	20000404 	.word	0x20000404
 800203c:	0800aa58 	.word	0x0800aa58
 8002040:	0800aa68 	.word	0x0800aa68

08002044 <load_pid>:

void load_pid() {
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
	 yaw_pidController.p_gain 				= 2  ;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <load_pid+0xbc>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
	 yaw_pidController.i_gain               = 10 ;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <load_pid+0xbc>)
 8002052:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <load_pid+0xc0>)
 8002054:	605a      	str	r2, [r3, #4]
	 yaw_pidController.d_gain               = 20 ;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <load_pid+0xbc>)
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <load_pid+0xc4>)
 800205a:	609a      	str	r2, [r3, #8]
	 yaw_pidController.filter_sampling_time = 0.004  ;
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <load_pid+0xbc>)
 800205e:	4a2b      	ldr	r2, [pc, #172]	; (800210c <load_pid+0xc8>)
 8002060:	611a      	str	r2, [r3, #16]
	 yaw_pidController.sampling_time        = 0.004 ;
 8002062:	4b27      	ldr	r3, [pc, #156]	; (8002100 <load_pid+0xbc>)
 8002064:	4a29      	ldr	r2, [pc, #164]	; (800210c <load_pid+0xc8>)
 8002066:	60da      	str	r2, [r3, #12]
	 yaw_pidController.limitMax             = 125   ;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <load_pid+0xbc>)
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <load_pid+0xcc>)
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
	 yaw_pidController.limitMin             = -125  ;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <load_pid+0xbc>)
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <load_pid+0xd0>)
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
	 yaw_pidController.limitMaxInt          = 150;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <load_pid+0xbc>)
 8002076:	4a28      	ldr	r2, [pc, #160]	; (8002118 <load_pid+0xd4>)
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
	 yaw_pidController.limitMinInt          = -150;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <load_pid+0xbc>)
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <load_pid+0xd8>)
 800207e:	631a      	str	r2, [r3, #48]	; 0x30

	 roll_pidController.p_gain 				 = 2;
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <load_pid+0xdc>)
 8002082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002086:	601a      	str	r2, [r3, #0]
	 roll_pidController.i_gain               = 0 ;
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <load_pid+0xdc>)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
	 roll_pidController.d_gain               = 0 ;
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <load_pid+0xdc>)
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
	 roll_pidController.filter_sampling_time = 0.004  ;
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <load_pid+0xdc>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <load_pid+0xc8>)
 800209c:	611a      	str	r2, [r3, #16]
	 roll_pidController.sampling_time        = 0.004 ;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <load_pid+0xdc>)
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <load_pid+0xc8>)
 80020a2:	60da      	str	r2, [r3, #12]
	 roll_pidController.limitMax             =  125 ;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <load_pid+0xdc>)
 80020a6:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <load_pid+0xcc>)
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
	 roll_pidController.limitMin             = -125 ;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <load_pid+0xdc>)
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <load_pid+0xd0>)
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
	 roll_pidController.limitMaxInt          =  150 ;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <load_pid+0xdc>)
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <load_pid+0xd4>)
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
	 roll_pidController.limitMinInt          = -150 ;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <load_pid+0xdc>)
 80020b8:	4a18      	ldr	r2, [pc, #96]	; (800211c <load_pid+0xd8>)
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30

	 pitch_pidController.p_gain 			  = 2  ;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <load_pid+0xe0>)
 80020be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020c2:	601a      	str	r2, [r3, #0]
	 pitch_pidController.i_gain               = 0 ;
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <load_pid+0xe0>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
	 pitch_pidController.d_gain               = 0 ;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <load_pid+0xe0>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
	 pitch_pidController.filter_sampling_time = 0.004  ;
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <load_pid+0xe0>)
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <load_pid+0xc8>)
 80020d8:	611a      	str	r2, [r3, #16]
	 pitch_pidController.sampling_time        = 0.004 ;
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <load_pid+0xe0>)
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <load_pid+0xc8>)
 80020de:	60da      	str	r2, [r3, #12]
	 pitch_pidController.limitMax             =  125 ;
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <load_pid+0xe0>)
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <load_pid+0xcc>)
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
	 pitch_pidController.limitMin             = -125 ;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <load_pid+0xe0>)
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <load_pid+0xd0>)
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
	 pitch_pidController.limitMaxInt          =  150;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <load_pid+0xe0>)
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <load_pid+0xd4>)
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
	 pitch_pidController.limitMinInt          = -150;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <load_pid+0xe0>)
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <load_pid+0xd8>)
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30

}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000430 	.word	0x20000430
 8002104:	41200000 	.word	0x41200000
 8002108:	41a00000 	.word	0x41a00000
 800210c:	3b83126f 	.word	0x3b83126f
 8002110:	42fa0000 	.word	0x42fa0000
 8002114:	c2fa0000 	.word	0xc2fa0000
 8002118:	43160000 	.word	0x43160000
 800211c:	c3160000 	.word	0xc3160000
 8002120:	200004a0 	.word	0x200004a0
 8002124:	20000468 	.word	0x20000468

08002128 <rcv_channel>:

void rcv_channel(){
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0

	  ret = lora_prasePacket(&lora);
 800212e:	4826      	ldr	r0, [pc, #152]	; (80021c8 <rcv_channel+0xa0>)
 8002130:	f005 f9b4 	bl	800749c <lora_prasePacket>
 8002134:	4603      	mov	r3, r0
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b24      	ldr	r3, [pc, #144]	; (80021cc <rcv_channel+0xa4>)
 800213a:	701a      	strb	r2, [r3, #0]
	  if(ret){
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <rcv_channel+0xa4>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <rcv_channel+0x3e>
		uint8_t i=0;
 8002144:	2300      	movs	r3, #0
 8002146:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 8002148:	e00a      	b.n	8002160 <rcv_channel+0x38>
		buff[i] = lora_read(&lora);
 800214a:	79fc      	ldrb	r4, [r7, #7]
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <rcv_channel+0xa0>)
 800214e:	f005 fa15 	bl	800757c <lora_read>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <rcv_channel+0xa8>)
 8002158:	551a      	strb	r2, [r3, r4]
		i++;
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	3301      	adds	r3, #1
 800215e:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b07      	cmp	r3, #7
 8002164:	d9f1      	bls.n	800214a <rcv_channel+0x22>
	     }
	  }

	recived_channels.Roll    = buff[1] << 8 | buff[0] ;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <rcv_channel+0xa8>)
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <rcv_channel+0xa8>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <rcv_channel+0xac>)
 800217a:	801a      	strh	r2, [r3, #0]
	recived_channels.Pitch   = buff[3] << 8 | buff[2] ;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <rcv_channel+0xa8>)
 800217e:	78db      	ldrb	r3, [r3, #3]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <rcv_channel+0xa8>)
 8002186:	789b      	ldrb	r3, [r3, #2]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <rcv_channel+0xac>)
 8002190:	805a      	strh	r2, [r3, #2]
	recived_channels.Throtle = buff[5] << 8 | buff[4] ;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <rcv_channel+0xa8>)
 8002194:	795b      	ldrb	r3, [r3, #5]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <rcv_channel+0xa8>)
 800219c:	791b      	ldrb	r3, [r3, #4]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b21b      	sxth	r3, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <rcv_channel+0xac>)
 80021a8:	809a      	strh	r2, [r3, #4]
	recived_channels.Yaw     = buff[7] << 8 | buff[6] ;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <rcv_channel+0xa8>)
 80021ac:	79db      	ldrb	r3, [r3, #7]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <rcv_channel+0xa8>)
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <rcv_channel+0xac>)
 80021be:	80da      	strh	r2, [r3, #6]


}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	20000404 	.word	0x20000404
 80021cc:	2000040c 	.word	0x2000040c
 80021d0:	20000410 	.word	0x20000410
 80021d4:	20000420 	.word	0x20000420

080021d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 ) {
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d126      	bne.n	8002238 <HAL_TIM_PeriodElapsedCallback+0x60>

	  pid_update(&pitch_pidController,Pitch ,Gyro_Data.pitch ) ;
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80021ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd53 	bl	8000c9c <__aeabi_i2f>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002200:	f004 ff5f 	bl	80070c2 <pid_update>
	  pid_update(&yaw_pidController  ,Yaw   ,Gyro_Data.yaw ) ;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fd46 	bl	8000c9c <__aeabi_i2f>
 8002210:	4601      	mov	r1, r0
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	461a      	mov	r2, r3
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800221a:	f004 ff52 	bl	80070c2 <pid_update>
	  pid_update(&roll_pidController ,Roll  ,Gyro_Data.roll ) ;
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fd39 	bl	8000c9c <__aeabi_i2f>
 800222a:	4601      	mov	r1, r0
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002234:	f004 ff45 	bl	80070c2 <pid_update>

	}
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000042a 	.word	0x2000042a
 8002244:	200003d0 	.word	0x200003d0
 8002248:	20000468 	.word	0x20000468
 800224c:	2000042c 	.word	0x2000042c
 8002250:	20000430 	.word	0x20000430
 8002254:	2000042e 	.word	0x2000042e
 8002258:	200004a0 	.word	0x200004a0

0800225c <__io_putchar>:

void __io_putchar(int ch) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002264:	1d39      	adds	r1, r7, #4
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	2201      	movs	r2, #1
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <__io_putchar+0x20>)
 800226e:	f003 ff06 	bl	800607e <HAL_UART_Transmit>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000037c 	.word	0x2000037c

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002288:	e7fe      	b.n	8002288 <Error_Handler+0x8>
	...

0800228c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_MspInit+0x40>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_MspInit+0x40>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6193      	str	r3, [r2, #24]
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_MspInit+0x40>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_MspInit+0x40>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_MspInit+0x40>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_MspInit+0x40>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000

080022d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <HAL_I2C_MspInit+0x70>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d123      	bne.n	8002338 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_I2C_MspInit+0x74>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800230c:	2312      	movs	r3, #18
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <HAL_I2C_MspInit+0x78>)
 800231c:	f000 fc08 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_I2C_MspInit+0x74>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_I2C_MspInit+0x74>)
 8002326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_I2C_MspInit+0x74>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40005400 	.word	0x40005400
 8002344:	40021000 	.word	0x40021000
 8002348:	40010c00 	.word	0x40010c00

0800234c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_SPI_MspInit+0x88>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d12f      	bne.n	80023cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <HAL_SPI_MspInit+0x90>)
 80023b0:	f000 fbbe 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_SPI_MspInit+0x90>)
 80023c8:	f000 fbb2 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40013000 	.word	0x40013000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010800 	.word	0x40010800

080023e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_TIM_PWM_MspInit+0x58>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10c      	bne.n	800240c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fc:	6193      	str	r3, [r2, #24]
 80023fe:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800240a:	e010      	b.n	800242e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_TIM_PWM_MspInit+0x60>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10b      	bne.n	800242e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_TIM_PWM_MspInit+0x5c>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40000400 	.word	0x40000400

08002444 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d113      	bne.n	800247e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_TIM_OC_MspInit+0x44>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_TIM_OC_MspInit+0x44>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_TIM_OC_MspInit+0x44>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	201c      	movs	r0, #28
 8002474:	f000 fb25 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002478:	201c      	movs	r0, #28
 800247a:	f000 fb3e 	bl	8002afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_TIM_MspPostInit+0x98>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d119      	bne.n	80024e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80024c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80024c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4619      	mov	r1, r3
 80024d8:	4814      	ldr	r0, [pc, #80]	; (800252c <HAL_TIM_MspPostInit+0xa0>)
 80024da:	f000 fb29 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024de:	e01c      	b.n	800251a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIM_MspPostInit+0xa4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d117      	bne.n	800251a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6193      	str	r3, [r2, #24]
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_TIM_MspPostInit+0x9c>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002502:	2303      	movs	r3, #3
 8002504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2302      	movs	r3, #2
 800250c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <HAL_TIM_MspPostInit+0xa8>)
 8002516:	f000 fb0b 	bl	8002b30 <HAL_GPIO_Init>
}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800
 8002530:	40000400 	.word	0x40000400
 8002534:	40010c00 	.word	0x40010c00

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_UART_MspInit+0x88>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d12f      	bne.n	80025b8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002562:	61d3      	str	r3, [r2, #28]
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_UART_MspInit+0x8c>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002588:	2304      	movs	r3, #4
 800258a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4619      	mov	r1, r3
 800259a:	480b      	ldr	r0, [pc, #44]	; (80025c8 <HAL_UART_MspInit+0x90>)
 800259c:	f000 fac8 	bl	8002b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025a0:	2308      	movs	r3, #8
 80025a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4619      	mov	r1, r3
 80025b2:	4805      	ldr	r0, [pc, #20]	; (80025c8 <HAL_UART_MspInit+0x90>)
 80025b4:	f000 fabc 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40004400 	.word	0x40004400
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010800 	.word	0x40010800

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <NMI_Handler+0x4>

080025d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <MemManage_Handler+0x4>

080025de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002612:	f000 f93f 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <TIM2_IRQHandler+0x10>)
 8002622:	f002 ffc3 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200002ec 	.word	0x200002ec

08002630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return 1;
 8002634:	2301      	movs	r3, #1
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <_kill>:

int _kill(int pid, int sig)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002648:	f005 fec4 	bl	80083d4 <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	2216      	movs	r2, #22
 8002650:	601a      	str	r2, [r3, #0]
  return -1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_exit>:

void _exit (int status)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002666:	f04f 31ff 	mov.w	r1, #4294967295
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffe7 	bl	800263e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002670:	e7fe      	b.n	8002670 <_exit+0x12>

08002672 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e00a      	b.n	800269a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002684:	f3af 8000 	nop.w
 8002688:	4601      	mov	r1, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	60ba      	str	r2, [r7, #8]
 8002690:	b2ca      	uxtb	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3301      	adds	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	dbf0      	blt.n	8002684 <_read+0x12>
  }

  return len;
 80026a2:	687b      	ldr	r3, [r7, #4]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e009      	b.n	80026d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fdc8 	bl	800225c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	dbf1      	blt.n	80026be <_write+0x12>
  }
  return len;
 80026da:	687b      	ldr	r3, [r7, #4]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <_close>:

int _close(int file)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800270a:	605a      	str	r2, [r3, #4]
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <_isatty>:

int _isatty(int file)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f005 fe2e 	bl	80083d4 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20005000 	.word	0x20005000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	200004f4 	.word	0x200004f4
 80027ac:	20000650 	.word	0x20000650

080027b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027bc:	f7ff fff8 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480b      	ldr	r0, [pc, #44]	; (80027f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027c2:	490c      	ldr	r1, [pc, #48]	; (80027f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027c4:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d8:	4c09      	ldr	r4, [pc, #36]	; (8002800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f005 fdfb 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ea:	f7fe fe27 	bl	800143c <main>
  bx lr
 80027ee:	4770      	bx	lr
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027f8:	0800b0dc 	.word	0x0800b0dc
  ldr r2, =_sbss
 80027fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002800:	2000064c 	.word	0x2000064c

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x28>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x28>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f947 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	200f      	movs	r0, #15
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fd32 	bl	800228c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f95f 	bl	8002b16 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 f927 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000000 	.word	0x20000000
 800288c:	20000008 	.word	0x20000008
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_IncTick+0x1c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_IncTick+0x20>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_IncTick+0x20>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000008 	.word	0x20000008
 80028b4:	200004f8 	.word	0x200004f8

080028b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b02      	ldr	r3, [pc, #8]	; (80028c8 <HAL_GetTick+0x10>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	200004f8 	.word	0x200004f8

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_Delay+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffe0 	bl	80028b8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000008 	.word	0x20000008

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <__NVIC_EnableIRQ+0x34>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100

080029b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	db0a      	blt.n	80029da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	490c      	ldr	r1, [pc, #48]	; (80029fc <__NVIC_SetPriority+0x4c>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	0112      	lsls	r2, r2, #4
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	440b      	add	r3, r1
 80029d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d8:	e00a      	b.n	80029f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <__NVIC_SetPriority+0x50>)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3b04      	subs	r3, #4
 80029e8:	0112      	lsls	r2, r2, #4
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	440b      	add	r3, r1
 80029ee:	761a      	strb	r2, [r3, #24]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000e100 	.word	0xe000e100
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f1c3 0307 	rsb	r3, r3, #7
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	bf28      	it	cs
 8002a22:	2304      	movcs	r3, #4
 8002a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2b06      	cmp	r3, #6
 8002a2c:	d902      	bls.n	8002a34 <NVIC_EncodePriority+0x30>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3b03      	subs	r3, #3
 8002a32:	e000      	b.n	8002a36 <NVIC_EncodePriority+0x32>
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	401a      	ands	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43d9      	mvns	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	4313      	orrs	r3, r2
         );
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff90 	bl	80029b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff2d 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff42 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff90 	bl	8002a04 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5f 	bl	80029b0 <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff35 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b08b      	sub	sp, #44	; 0x2c
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	e169      	b.n	8002e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b44:	2201      	movs	r2, #1
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	f040 8158 	bne.w	8002e12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a9a      	ldr	r2, [pc, #616]	; (8002dd0 <HAL_GPIO_Init+0x2a0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d05e      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b6c:	4a98      	ldr	r2, [pc, #608]	; (8002dd0 <HAL_GPIO_Init+0x2a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d875      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b72:	4a98      	ldr	r2, [pc, #608]	; (8002dd4 <HAL_GPIO_Init+0x2a4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d058      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b78:	4a96      	ldr	r2, [pc, #600]	; (8002dd4 <HAL_GPIO_Init+0x2a4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d86f      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b7e:	4a96      	ldr	r2, [pc, #600]	; (8002dd8 <HAL_GPIO_Init+0x2a8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d052      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b84:	4a94      	ldr	r2, [pc, #592]	; (8002dd8 <HAL_GPIO_Init+0x2a8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d869      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b8a:	4a94      	ldr	r2, [pc, #592]	; (8002ddc <HAL_GPIO_Init+0x2ac>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04c      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b90:	4a92      	ldr	r2, [pc, #584]	; (8002ddc <HAL_GPIO_Init+0x2ac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d863      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002b96:	4a92      	ldr	r2, [pc, #584]	; (8002de0 <HAL_GPIO_Init+0x2b0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d046      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
 8002b9c:	4a90      	ldr	r2, [pc, #576]	; (8002de0 <HAL_GPIO_Init+0x2b0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d85d      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002ba2:	2b12      	cmp	r3, #18
 8002ba4:	d82a      	bhi.n	8002bfc <HAL_GPIO_Init+0xcc>
 8002ba6:	2b12      	cmp	r3, #18
 8002ba8:	d859      	bhi.n	8002c5e <HAL_GPIO_Init+0x12e>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <HAL_GPIO_Init+0x80>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002c2b 	.word	0x08002c2b
 8002bb4:	08002c05 	.word	0x08002c05
 8002bb8:	08002c17 	.word	0x08002c17
 8002bbc:	08002c59 	.word	0x08002c59
 8002bc0:	08002c5f 	.word	0x08002c5f
 8002bc4:	08002c5f 	.word	0x08002c5f
 8002bc8:	08002c5f 	.word	0x08002c5f
 8002bcc:	08002c5f 	.word	0x08002c5f
 8002bd0:	08002c5f 	.word	0x08002c5f
 8002bd4:	08002c5f 	.word	0x08002c5f
 8002bd8:	08002c5f 	.word	0x08002c5f
 8002bdc:	08002c5f 	.word	0x08002c5f
 8002be0:	08002c5f 	.word	0x08002c5f
 8002be4:	08002c5f 	.word	0x08002c5f
 8002be8:	08002c5f 	.word	0x08002c5f
 8002bec:	08002c5f 	.word	0x08002c5f
 8002bf0:	08002c5f 	.word	0x08002c5f
 8002bf4:	08002c0d 	.word	0x08002c0d
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	4a79      	ldr	r2, [pc, #484]	; (8002de4 <HAL_GPIO_Init+0x2b4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c02:	e02c      	b.n	8002c5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	623b      	str	r3, [r7, #32]
          break;
 8002c0a:	e029      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	3304      	adds	r3, #4
 8002c12:	623b      	str	r3, [r7, #32]
          break;
 8002c14:	e024      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	623b      	str	r3, [r7, #32]
          break;
 8002c1e:	e01f      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	330c      	adds	r3, #12
 8002c26:	623b      	str	r3, [r7, #32]
          break;
 8002c28:	e01a      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c32:	2304      	movs	r3, #4
 8002c34:	623b      	str	r3, [r7, #32]
          break;
 8002c36:	e013      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c40:	2308      	movs	r3, #8
 8002c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	611a      	str	r2, [r3, #16]
          break;
 8002c4a:	e009      	b.n	8002c60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	615a      	str	r2, [r3, #20]
          break;
 8002c56:	e003      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
          break;
 8002c5c:	e000      	b.n	8002c60 <HAL_GPIO_Init+0x130>
          break;
 8002c5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2bff      	cmp	r3, #255	; 0xff
 8002c64:	d801      	bhi.n	8002c6a <HAL_GPIO_Init+0x13a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e001      	b.n	8002c6e <HAL_GPIO_Init+0x13e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2bff      	cmp	r3, #255	; 0xff
 8002c74:	d802      	bhi.n	8002c7c <HAL_GPIO_Init+0x14c>
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x152>
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	3b08      	subs	r3, #8
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	210f      	movs	r1, #15
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 80b1 	beq.w	8002e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6193      	str	r3, [r2, #24]
 8002cbc:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cc8:	4a48      	ldr	r2, [pc, #288]	; (8002dec <HAL_GPIO_Init+0x2bc>)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <HAL_GPIO_Init+0x2c0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_GPIO_Init+0x1ec>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3f      	ldr	r2, [pc, #252]	; (8002df4 <HAL_GPIO_Init+0x2c4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00d      	beq.n	8002d18 <HAL_GPIO_Init+0x1e8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	; (8002df8 <HAL_GPIO_Init+0x2c8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d007      	beq.n	8002d14 <HAL_GPIO_Init+0x1e4>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3d      	ldr	r2, [pc, #244]	; (8002dfc <HAL_GPIO_Init+0x2cc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_GPIO_Init+0x1e0>
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e006      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d10:	2304      	movs	r3, #4
 8002d12:	e004      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e002      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_GPIO_Init+0x1ee>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	f002 0203 	and.w	r2, r2, #3
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	4093      	lsls	r3, r2
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d2e:	492f      	ldr	r1, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x2bc>)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	492c      	ldr	r1, [pc, #176]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4928      	ldr	r1, [pc, #160]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4922      	ldr	r1, [pc, #136]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	491e      	ldr	r1, [pc, #120]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4918      	ldr	r1, [pc, #96]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	4914      	ldr	r1, [pc, #80]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d021      	beq.n	8002e04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
 8002dcc:	e021      	b.n	8002e12 <HAL_GPIO_Init+0x2e2>
 8002dce:	bf00      	nop
 8002dd0:	10320000 	.word	0x10320000
 8002dd4:	10310000 	.word	0x10310000
 8002dd8:	10220000 	.word	0x10220000
 8002ddc:	10210000 	.word	0x10210000
 8002de0:	10120000 	.word	0x10120000
 8002de4:	10110000 	.word	0x10110000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40010800 	.word	0x40010800
 8002df4:	40010c00 	.word	0x40010c00
 8002df8:	40011000 	.word	0x40011000
 8002dfc:	40011400 	.word	0x40011400
 8002e00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	4909      	ldr	r1, [pc, #36]	; (8002e34 <HAL_GPIO_Init+0x304>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	3301      	adds	r3, #1
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f47f ae8e 	bne.w	8002b44 <HAL_GPIO_Init+0x14>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	372c      	adds	r7, #44	; 0x2c
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e54:	e003      	b.n	8002e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	041a      	lsls	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e12b      	b.n	80030d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fa1e 	bl	80022d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ecc:	f001 fbf0 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 8002ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a81      	ldr	r2, [pc, #516]	; (80030dc <HAL_I2C_Init+0x274>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d807      	bhi.n	8002eec <HAL_I2C_Init+0x84>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_I2C_Init+0x278>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e006      	b.n	8002efa <HAL_I2C_Init+0x92>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a7d      	ldr	r2, [pc, #500]	; (80030e4 <HAL_I2C_Init+0x27c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bf94      	ite	ls
 8002ef4:	2301      	movls	r3, #1
 8002ef6:	2300      	movhi	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0e7      	b.n	80030d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a78      	ldr	r2, [pc, #480]	; (80030e8 <HAL_I2C_Init+0x280>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_I2C_Init+0x274>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d802      	bhi.n	8002f3c <HAL_I2C_Init+0xd4>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	e009      	b.n	8002f50 <HAL_I2C_Init+0xe8>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	4a69      	ldr	r2, [pc, #420]	; (80030ec <HAL_I2C_Init+0x284>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	3301      	adds	r3, #1
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	495c      	ldr	r1, [pc, #368]	; (80030dc <HAL_I2C_Init+0x274>)
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	d819      	bhi.n	8002fa4 <HAL_I2C_Init+0x13c>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e59      	subs	r1, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7e:	1c59      	adds	r1, r3, #1
 8002f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f84:	400b      	ands	r3, r1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_I2C_Init+0x138>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e59      	subs	r1, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9e:	e051      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	e04f      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d111      	bne.n	8002fd0 <HAL_I2C_Init+0x168>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e012      	b.n	8002ff6 <HAL_I2C_Init+0x18e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Init+0x196>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e022      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10e      	bne.n	8003024 <HAL_I2C_Init+0x1bc>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1e58      	subs	r0, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	440b      	add	r3, r1
 8003014:	fbb0 f3f3 	udiv	r3, r0, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003022:	e00f      	b.n	8003044 <HAL_I2C_Init+0x1dc>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	6809      	ldr	r1, [r1, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6911      	ldr	r1, [r2, #16]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	000186a0 	.word	0x000186a0
 80030e0:	001e847f 	.word	0x001e847f
 80030e4:	003d08ff 	.word	0x003d08ff
 80030e8:	431bde83 	.word	0x431bde83
 80030ec:	10624dd3 	.word	0x10624dd3

080030f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	817b      	strh	r3, [r7, #10]
 8003102:	460b      	mov	r3, r1
 8003104:	813b      	strh	r3, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800310a:	f7ff fbd5 	bl	80028b8 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	f040 80d9 	bne.w	80032d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2319      	movs	r3, #25
 8003124:	2201      	movs	r2, #1
 8003126:	496d      	ldr	r1, [pc, #436]	; (80032dc <HAL_I2C_Mem_Write+0x1ec>)
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fcc1 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
 8003136:	e0cc      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_I2C_Mem_Write+0x56>
 8003142:	2302      	movs	r3, #2
 8003144:	e0c5      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d007      	beq.n	800316c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2221      	movs	r2, #33	; 0x21
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a4d      	ldr	r2, [pc, #308]	; (80032e0 <HAL_I2C_Mem_Write+0x1f0>)
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ae:	88f8      	ldrh	r0, [r7, #6]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	8979      	ldrh	r1, [r7, #10]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4603      	mov	r3, r0
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 faf8 	bl	80037b4 <I2C_RequestMemoryWrite>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d052      	beq.n	8003270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e081      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fd86 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06b      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d11b      	bne.n	8003270 <HAL_I2C_Mem_Write+0x180>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1aa      	bne.n	80031ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fd79 	bl	8003d74 <I2C_WaitOnBTFFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	2b04      	cmp	r3, #4
 800328e:	d107      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e016      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	00100002 	.word	0x00100002
 80032e0:	ffff0000 	.word	0xffff0000

080032e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	; 0x30
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003302:	f7ff fad9 	bl	80028b8 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 8244 	bne.w	800379e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2319      	movs	r3, #25
 800331c:	2201      	movs	r2, #1
 800331e:	4982      	ldr	r1, [pc, #520]	; (8003528 <HAL_I2C_Mem_Read+0x244>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fbc5 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	e237      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_I2C_Mem_Read+0x5a>
 800333a:	2302      	movs	r3, #2
 800333c:	e230      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d007      	beq.n	8003364 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2222      	movs	r2, #34	; 0x22
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a62      	ldr	r2, [pc, #392]	; (800352c <HAL_I2C_Mem_Read+0x248>)
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a6:	88f8      	ldrh	r0, [r7, #6]
 80033a8:	893a      	ldrh	r2, [r7, #8]
 80033aa:	8979      	ldrh	r1, [r7, #10]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4603      	mov	r3, r0
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa92 	bl	80038e0 <I2C_RequestMemoryRead>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1ec      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e1c0      	b.n	8003778 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11e      	bne.n	800343c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800340e:	b672      	cpsid	i
}
 8003410:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003438:	b662      	cpsie	i
}
 800343a:	e035      	b.n	80034a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	2b02      	cmp	r3, #2
 8003442:	d11e      	bne.n	8003482 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003452:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003454:	b672      	cpsid	i
}
 8003456:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800347e:	b662      	cpsie	i
}
 8003480:	e012      	b.n	80034a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003490:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034a8:	e166      	b.n	8003778 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	f200 811f 	bhi.w	80036f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d123      	bne.n	8003504 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fc9f 	bl	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e167      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003502:	e139      	b.n	8003778 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	2b02      	cmp	r3, #2
 800350a:	d152      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2200      	movs	r2, #0
 8003514:	4906      	ldr	r1, [pc, #24]	; (8003530 <HAL_I2C_Mem_Read+0x24c>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 faca 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e13c      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
 8003526:	bf00      	nop
 8003528:	00100002 	.word	0x00100002
 800352c:	ffff0000 	.word	0xffff0000
 8003530:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
}
 8003536:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
}
 800357c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035b0:	e0e2      	b.n	8003778 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	2200      	movs	r2, #0
 80035ba:	497b      	ldr	r1, [pc, #492]	; (80037a8 <HAL_I2C_Mem_Read+0x4c4>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fa77 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0e9      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035dc:	b672      	cpsid	i
}
 80035de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003612:	4b66      	ldr	r3, [pc, #408]	; (80037ac <HAL_I2C_Mem_Read+0x4c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	08db      	lsrs	r3, r3, #3
 8003618:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_I2C_Mem_Read+0x4cc>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0a1a      	lsrs	r2, r3, #8
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	00da      	lsls	r2, r3, #3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	3b01      	subs	r3, #1
 8003630:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d118      	bne.n	800366a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800365a:	b662      	cpsie	i
}
 800365c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e09a      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d1d9      	bne.n	800362c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ba:	b662      	cpsie	i
}
 80036bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036f0:	e042      	b.n	8003778 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb84 	bl	8003e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e04c      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d118      	bne.n	8003778 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	f47f ae94 	bne.w	80034aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00010004 	.word	0x00010004
 80037ac:	20000000 	.word	0x20000000
 80037b0:	14f8b589 	.word	0x14f8b589

080037b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	460b      	mov	r3, r1
 80037c8:	813b      	strh	r3, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f960 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d103      	bne.n	800380e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e05f      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	492d      	ldr	r1, [pc, #180]	; (80038dc <I2C_RequestMemoryWrite+0x128>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f9bb 	bl	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04c      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa46 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02b      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]
 800388a:	e021      	b.n	80038d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b29b      	uxth	r3, r3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa20 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e005      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003908:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	2200      	movs	r2, #0
 8003922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f8c2 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003940:	d103      	bne.n	800394a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0aa      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800395c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	4952      	ldr	r1, [pc, #328]	; (8003aac <I2C_RequestMemoryRead+0x1cc>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f91d 	bl	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e097      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	6a39      	ldr	r1, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f9a8 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d107      	bne.n	80039b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e076      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039bc:	893b      	ldrh	r3, [r7, #8]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	e021      	b.n	8003a0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f982 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d107      	bne.n	80039fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e050      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f967 	bl	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00d      	beq.n	8003a38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d107      	bne.n	8003a34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e035      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f82b 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6e:	d103      	bne.n	8003a78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e013      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <I2C_RequestMemoryRead+0x1cc>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f886 	bl	8003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	00010002 	.word	0x00010002

08003ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac0:	e048      	b.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d044      	beq.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fe fef5 	bl	80028b8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d139      	bne.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10d      	bne.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	43da      	mvns	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	e00c      	b.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d116      	bne.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e023      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10d      	bne.n	8003b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	43da      	mvns	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	e00c      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4013      	ands	r3, r2
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d093      	beq.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb2:	e071      	b.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d123      	bne.n	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e067      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d041      	beq.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c14:	f7fe fe50 	bl	80028b8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d136      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10c      	bne.n	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e00b      	b.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e021      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10c      	bne.n	8003cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e00b      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f47f af6d 	bne.w	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf0:	e034      	b.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8e3 	bl	8003ebe <I2C_IsAcknowledgeFailed>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e034      	b.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d028      	beq.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7fe fdd5 	bl	80028b8 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11d      	bne.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d016      	beq.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e007      	b.n	8003d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d1c3      	bne.n	8003cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d80:	e034      	b.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f89b 	bl	8003ebe <I2C_IsAcknowledgeFailed>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e034      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d028      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fe fd8d 	bl	80028b8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d11d      	bne.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d016      	beq.n	8003dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d1c3      	bne.n	8003d82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e10:	e049      	b.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d119      	bne.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e030      	b.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fe fd30 	bl	80028b8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11d      	bne.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d016      	beq.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0220 	orr.w	r2, r3, #32
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d1ae      	bne.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d11b      	bne.n	8003f0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ede:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e272      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8087 	beq.w	800404a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f3c:	4b92      	ldr	r3, [pc, #584]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d00c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f48:	4b8f      	ldr	r3, [pc, #572]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d112      	bne.n	8003f7a <HAL_RCC_OscConfig+0x5e>
 8003f54:	4b8c      	ldr	r3, [pc, #560]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f62:	4b89      	ldr	r3, [pc, #548]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06c      	beq.n	8004048 <HAL_RCC_OscConfig+0x12c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d168      	bne.n	8004048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e24c      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x76>
 8003f84:	4b80      	ldr	r3, [pc, #512]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7f      	ldr	r2, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e02e      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b7b      	ldr	r3, [pc, #492]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7a      	ldr	r2, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b78      	ldr	r3, [pc, #480]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a77      	ldr	r2, [pc, #476]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e01d      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xbc>
 8003fbe:	4b72      	ldr	r3, [pc, #456]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a71      	ldr	r2, [pc, #452]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b6f      	ldr	r3, [pc, #444]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0xd4>
 8003fd8:	4b6b      	ldr	r3, [pc, #428]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a67      	ldr	r2, [pc, #412]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fc5e 	bl	80028b8 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe fc5a 	bl	80028b8 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e200      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0xe4>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe fc4a 	bl	80028b8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe fc46 	bl	80028b8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e1ec      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x10c>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d063      	beq.n	800411e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004056:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00b      	beq.n	800407a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004062:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d11c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x18c>
 800406e:	4b46      	ldr	r3, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_RCC_OscConfig+0x176>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e1c0      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004092:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4939      	ldr	r1, [pc, #228]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	e03a      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b0:	4b36      	ldr	r3, [pc, #216]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fbff 	bl	80028b8 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040be:	f7fe fbfb 	bl	80028b8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1a1      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4927      	ldr	r1, [pc, #156]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]
 80040f0:	e015      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_RCC_OscConfig+0x270>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe fbde 	bl	80028b8 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004100:	f7fe fbda 	bl	80028b8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e180      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03a      	beq.n	80041a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004138:	f7fe fbbe 	bl	80028b8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe fbba 	bl	80028b8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e160      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_RCC_OscConfig+0x26c>)
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800415e:	2001      	movs	r0, #1
 8004160:	f000 face 	bl	8004700 <RCC_Delay>
 8004164:	e01c      	b.n	80041a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416c:	f7fe fba4 	bl	80028b8 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004172:	e00f      	b.n	8004194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fe fba0 	bl	80028b8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d908      	bls.n	8004194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e146      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	42420000 	.word	0x42420000
 8004190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	4b92      	ldr	r3, [pc, #584]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e9      	bne.n	8004174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a6 	beq.w	80042fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	4a87      	ldr	r2, [pc, #540]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	61d3      	str	r3, [r2, #28]
 80041ca:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041da:	4b82      	ldr	r3, [pc, #520]	; (80043e4 <HAL_RCC_OscConfig+0x4c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d118      	bne.n	8004218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e6:	4b7f      	ldr	r3, [pc, #508]	; (80043e4 <HAL_RCC_OscConfig+0x4c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <HAL_RCC_OscConfig+0x4c8>)
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f2:	f7fe fb61 	bl	80028b8 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fe fb5d 	bl	80028b8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b64      	cmp	r3, #100	; 0x64
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e103      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420c:	4b75      	ldr	r3, [pc, #468]	; (80043e4 <HAL_RCC_OscConfig+0x4c8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x312>
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a6e      	ldr	r2, [pc, #440]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	e02d      	b.n	800428a <HAL_RCC_OscConfig+0x36e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10c      	bne.n	8004250 <HAL_RCC_OscConfig+0x334>
 8004236:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4a69      	ldr	r2, [pc, #420]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	f023 0301 	bic.w	r3, r3, #1
 8004240:	6213      	str	r3, [r2, #32]
 8004242:	4b67      	ldr	r3, [pc, #412]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4a66      	ldr	r2, [pc, #408]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	6213      	str	r3, [r2, #32]
 800424e:	e01c      	b.n	800428a <HAL_RCC_OscConfig+0x36e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x356>
 8004258:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4a60      	ldr	r2, [pc, #384]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	6213      	str	r3, [r2, #32]
 8004264:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a5d      	ldr	r2, [pc, #372]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x36e>
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4a5a      	ldr	r2, [pc, #360]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6213      	str	r3, [r2, #32]
 800427e:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fe fb11 	bl	80028b8 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe fb0d 	bl	80028b8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0b1      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RCC_OscConfig+0x37e>
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe fafb 	bl	80028b8 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fe faf7 	bl	80028b8 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e09b      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ee      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ee:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8087 	beq.w	8004412 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004304:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d061      	beq.n	80043d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d146      	bne.n	80043a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004318:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x4cc>)
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fe facb 	bl	80028b8 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004326:	f7fe fac7 	bl	80028b8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e06d      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004338:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d108      	bne.n	8004360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4921      	ldr	r1, [pc, #132]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a19      	ldr	r1, [r3, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	430b      	orrs	r3, r1
 8004372:	491b      	ldr	r1, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004378:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x4cc>)
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437e:	f7fe fa9b 	bl	80028b8 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004386:	f7fe fa97 	bl	80028b8 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e03d      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x46a>
 80043a4:	e035      	b.n	8004412 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_OscConfig+0x4cc>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fa84 	bl	80028b8 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fa80 	bl	80028b8 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e026      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x498>
 80043d2:	e01e      	b.n	8004412 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e019      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_OscConfig+0x500>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40021000 	.word	0x40021000

08004420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0d0      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d910      	bls.n	8004464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 0207 	bic.w	r2, r3, #7
 800444a:	4965      	ldr	r1, [pc, #404]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0b8      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004486:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004494:	4b53      	ldr	r3, [pc, #332]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800449e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	494d      	ldr	r1, [pc, #308]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d040      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d115      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e07f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e073      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06b      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4936      	ldr	r1, [pc, #216]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	4313      	orrs	r3, r2
 800450e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fe f9d2 	bl	80028b8 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	e00a      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004518:	f7fe f9ce 	bl	80028b8 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e053      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 020c 	and.w	r2, r3, #12
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1eb      	bne.n	8004518 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d210      	bcs.n	8004570 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4922      	ldr	r1, [pc, #136]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e032      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4916      	ldr	r1, [pc, #88]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	490e      	ldr	r1, [pc, #56]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ae:	f000 f821 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	490a      	ldr	r1, [pc, #40]	; (80045e8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	5ccb      	ldrb	r3, [r1, r3]
 80045c2:	fa22 f303 	lsr.w	r3, r2, r3
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <HAL_RCC_ClockConfig+0x1cc>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1d0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe f930 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800acf0 	.word	0x0800acf0
 80045ec:	20000000 	.word	0x20000000
 80045f0:	20000004 	.word	0x20000004

080045f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800460e:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <HAL_RCC_GetSysClockFreq+0x94>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b04      	cmp	r3, #4
 800461c:	d002      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x30>
 800461e:	2b08      	cmp	r3, #8
 8004620:	d003      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x36>
 8004622:	e027      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCC_GetSysClockFreq+0x98>)
 8004626:	613b      	str	r3, [r7, #16]
      break;
 8004628:	e027      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	0c9b      	lsrs	r3, r3, #18
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004634:	5cd3      	ldrb	r3, [r2, r3]
 8004636:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <HAL_RCC_GetSysClockFreq+0x94>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	0c5b      	lsrs	r3, r3, #17
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <HAL_RCC_GetSysClockFreq+0xa0>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <HAL_RCC_GetSysClockFreq+0x98>)
 8004656:	fb03 f202 	mul.w	r2, r3, r2
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e004      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	613b      	str	r3, [r7, #16]
      break;
 8004672:	e002      	b.n	800467a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetSysClockFreq+0x98>)
 8004676:	613b      	str	r3, [r7, #16]
      break;
 8004678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467a:	693b      	ldr	r3, [r7, #16]
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	007a1200 	.word	0x007a1200
 8004690:	0800ad08 	.word	0x0800ad08
 8004694:	0800ad18 	.word	0x0800ad18
 8004698:	003d0900 	.word	0x003d0900

0800469c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <HAL_RCC_GetHCLKFreq+0x10>)
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	20000000 	.word	0x20000000

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046b4:	f7ff fff2 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046b8:	4602      	mov	r2, r0
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	4903      	ldr	r1, [pc, #12]	; (80046d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c6:	5ccb      	ldrb	r3, [r1, r3]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40021000 	.word	0x40021000
 80046d4:	0800ad00 	.word	0x0800ad00

080046d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046dc:	f7ff ffde 	bl	800469c <HAL_RCC_GetHCLKFreq>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	0adb      	lsrs	r3, r3, #11
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	4903      	ldr	r1, [pc, #12]	; (80046fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ee:	5ccb      	ldrb	r3, [r1, r3]
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0800ad00 	.word	0x0800ad00

08004700 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <RCC_Delay+0x34>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <RCC_Delay+0x38>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0a5b      	lsrs	r3, r3, #9
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800471c:	bf00      	nop
  }
  while (Delay --);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	60fa      	str	r2, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f9      	bne.n	800471c <RCC_Delay+0x1c>
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	20000000 	.word	0x20000000
 8004738:	10624dd3 	.word	0x10624dd3

0800473c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e076      	b.n	800483c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	d108      	bne.n	8004768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475e:	d009      	beq.n	8004774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
 8004766:	e005      	b.n	8004774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd fddc 	bl	800234c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	ea42 0103 	orr.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	0c1a      	lsrs	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f002 0204 	and.w	r2, r2, #4
 800481a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69da      	ldr	r2, [r3, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Transmit+0x22>
 8004862:	2302      	movs	r3, #2
 8004864:	e12d      	b.n	8004ac2 <HAL_SPI_Transmit+0x27e>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800486e:	f7fe f823 	bl	80028b8 <HAL_GetTick>
 8004872:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d002      	beq.n	800488a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004888:	e116      	b.n	8004ab8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SPI_Transmit+0x52>
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
    goto error;
 800489a:	e10d      	b.n	8004ab8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2203      	movs	r2, #3
 80048a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e2:	d10f      	bne.n	8004904 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d007      	beq.n	8004922 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d14f      	bne.n	80049cc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Transmit+0xf6>
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d142      	bne.n	80049c0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800495e:	e02f      	b.n	80049c0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d112      	bne.n	8004994 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	86da      	strh	r2, [r3, #54]	; 0x36
 8004992:	e015      	b.n	80049c0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004994:	f7fd ff90 	bl	80028b8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d803      	bhi.n	80049ac <HAL_SPI_Transmit+0x168>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d102      	bne.n	80049b2 <HAL_SPI_Transmit+0x16e>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049be:	e07b      	b.n	8004ab8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ca      	bne.n	8004960 <HAL_SPI_Transmit+0x11c>
 80049ca:	e050      	b.n	8004a6e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SPI_Transmit+0x196>
 80049d4:	8afb      	ldrh	r3, [r7, #22]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d144      	bne.n	8004a64 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a00:	e030      	b.n	8004a64 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d113      	bne.n	8004a38 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	7812      	ldrb	r2, [r2, #0]
 8004a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a36:	e015      	b.n	8004a64 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a38:	f7fd ff3e 	bl	80028b8 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d803      	bhi.n	8004a50 <HAL_SPI_Transmit+0x20c>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Transmit+0x212>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a62:	e029      	b.n	8004ab8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1c9      	bne.n	8004a02 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fbd8 	bl	8005228 <SPI_EndRxTxTransaction>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e003      	b.n	8004ab8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b088      	sub	sp, #32
 8004ace:	af02      	add	r7, sp, #8
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d002      	beq.n	8004af0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
 8004aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aee:	e0fb      	b.n	8004ce8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af8:	d112      	bne.n	8004b20 <HAL_SPI_Receive+0x56>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10e      	bne.n	8004b20 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2204      	movs	r2, #4
 8004b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f8ef 	bl	8004cfa <HAL_SPI_TransmitReceive>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	e0e8      	b.n	8004cf2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Receive+0x64>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e0e1      	b.n	8004cf2 <HAL_SPI_Receive+0x228>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b36:	f7fd febf 	bl	80028b8 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Receive+0x7e>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b4c:	e0cc      	b.n	8004ce8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2204      	movs	r2, #4
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88fa      	ldrh	r2, [r7, #6]
 8004b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b94:	d10f      	bne.n	8004bb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d007      	beq.n	8004bd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d16a      	bne.n	8004cb2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bdc:	e032      	b.n	8004c44 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d115      	bne.n	8004c18 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f103 020c 	add.w	r2, r3, #12
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c16:	e015      	b.n	8004c44 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c18:	f7fd fe4e 	bl	80028b8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d803      	bhi.n	8004c30 <HAL_SPI_Receive+0x166>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d102      	bne.n	8004c36 <HAL_SPI_Receive+0x16c>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c42:	e051      	b.n	8004ce8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1c7      	bne.n	8004bde <HAL_SPI_Receive+0x114>
 8004c4e:	e035      	b.n	8004cbc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d113      	bne.n	8004c86 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	b292      	uxth	r2, r2
 8004c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c84:	e015      	b.n	8004cb2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c86:	f7fd fe17 	bl	80028b8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d803      	bhi.n	8004c9e <HAL_SPI_Receive+0x1d4>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d102      	bne.n	8004ca4 <HAL_SPI_Receive+0x1da>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cb0:	e01a      	b.n	8004ce8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1c9      	bne.n	8004c50 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fa5f 	bl	8005184 <SPI_EndRxTransaction>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
 8004cde:	e003      	b.n	8004ce8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b08c      	sub	sp, #48	; 0x30
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x26>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e198      	b.n	8005052 <HAL_SPI_TransmitReceive+0x358>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d28:	f7fd fdc6 	bl	80028b8 <HAL_GetTick>
 8004d2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d00f      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x70>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d50:	d107      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <HAL_SPI_TransmitReceive+0x68>
 8004d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d003      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
 8004d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d68:	e16d      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x82>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x82>
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d82:	e160      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d003      	beq.n	8004d98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2205      	movs	r2, #5
 8004d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	887a      	ldrh	r2, [r7, #2]
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d007      	beq.n	8004dec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df4:	d17c      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x10a>
 8004dfe:	8b7b      	ldrh	r3, [r7, #26]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d16a      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e28:	e057      	b.n	8004eda <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d11b      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x176>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x176>
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d113      	bne.n	8004e70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d119      	bne.n	8004eb2 <HAL_SPI_TransmitReceive+0x1b8>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d014      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	b292      	uxth	r2, r2
 8004e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	1c9a      	adds	r2, r3, #2
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eb2:	f7fd fd01 	bl	80028b8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d80b      	bhi.n	8004eda <HAL_SPI_TransmitReceive+0x1e0>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d007      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ed8:	e0b5      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1a2      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x130>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d19d      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x130>
 8004eee:	e080      	b.n	8004ff2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x204>
 8004ef8:	8b7b      	ldrh	r3, [r7, #26]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d16f      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f24:	e05b      	b.n	8004fde <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11c      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x274>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x274>
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d114      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d119      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2b6>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d014      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fac:	2301      	movs	r3, #1
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fb0:	f7fd fc82 	bl	80028b8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d803      	bhi.n	8004fc8 <HAL_SPI_TransmitReceive+0x2ce>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x2d4>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004fdc:	e033      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d19e      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x22c>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d199      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f916 	bl	8005228 <SPI_EndRxTxTransaction>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d006      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800500e:	e01a      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503c:	e003      	b.n	8005046 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800504e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005052:	4618      	mov	r0, r3
 8005054:	3730      	adds	r7, #48	; 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005068:	b2db      	uxtb	r3, r3
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005084:	f7fd fc18 	bl	80028b8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4413      	add	r3, r2
 8005092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005094:	f7fd fc10 	bl	80028b8 <HAL_GetTick>
 8005098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	0d1b      	lsrs	r3, r3, #20
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	e054      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d050      	beq.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b4:	f7fd fc00 	bl	80028b8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d902      	bls.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d13d      	bne.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d111      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ec:	d004      	beq.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d107      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005110:	d10f      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e017      	b.n	8005176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d19b      	bne.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000000 	.word	0x20000000

08005184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005198:	d111      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a2:	d004      	beq.n	80051ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d107      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c6:	d117      	bne.n	80051f8 <SPI_EndRxTransaction+0x74>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d112      	bne.n	80051f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	2101      	movs	r1, #1
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff49 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e013      	b.n	8005220 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	2180      	movs	r1, #128	; 0x80
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff36 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e000      	b.n	8005220 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff ff18 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e000      	b.n	800525c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e041      	b.n	80052fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fd f8da 	bl	8002444 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 fbcc 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e041      	b.n	8005398 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fd f859 	bl	80023e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f000 fb7d 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x24>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e022      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d109      	bne.n	80053de <HAL_TIM_PWM_Start+0x3e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e015      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start+0x58>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e008      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e05e      	b.n	80054d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0x82>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0x92>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b08      	cmp	r3, #8
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fcde 	bl	8005e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_TIM_PWM_Start+0x138>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d107      	bne.n	8005472 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_TIM_PWM_Start+0x138>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIM_PWM_Start+0xfa>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d009      	beq.n	800549a <HAL_TIM_PWM_Start+0xfa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a14      	ldr	r2, [pc, #80]	; (80054dc <HAL_TIM_PWM_Start+0x13c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIM_PWM_Start+0xfa>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <HAL_TIM_PWM_Start+0x140>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d111      	bne.n	80054be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d010      	beq.n	80054ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	e007      	b.n	80054ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800

080054e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc8c 	bl	8005e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a29      	ldr	r2, [pc, #164]	; (80055a8 <HAL_TIM_PWM_Stop+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d117      	bne.n	8005536 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10f      	bne.n	8005536 <HAL_TIM_PWM_Stop+0x52>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	f240 4344 	movw	r3, #1092	; 0x444
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_TIM_PWM_Stop+0x52>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <HAL_TIM_PWM_Stop+0x82>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	f240 4344 	movw	r3, #1092	; 0x444
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <HAL_TIM_PWM_Stop+0x82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Stop+0x92>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005574:	e013      	b.n	800559e <HAL_TIM_PWM_Stop+0xba>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Stop+0xa2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005584:	e00b      	b.n	800559e <HAL_TIM_PWM_Stop+0xba>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Stop+0xb2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005594:	e003      	b.n	800559e <HAL_TIM_PWM_Stop+0xba>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40012c00 	.word	0x40012c00

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa0b 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9fe 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fa0d 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9e1 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9d4 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9e3 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9b7 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9aa 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9b9 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f98d 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f980 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f98f 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fd54 	bl	80021d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fc38 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f953 	bl	8005a2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fc03 	bl	8005fba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_TIM_OC_ConfigChannel+0x1e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e048      	b.n	800586c <HAL_TIM_OC_ConfigChannel+0xb0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b0c      	cmp	r3, #12
 80057e6:	d839      	bhi.n	800585c <HAL_TIM_OC_ConfigChannel+0xa0>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005825 	.word	0x08005825
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	08005833 	.word	0x08005833
 8005804:	0800585d 	.word	0x0800585d
 8005808:	0800585d 	.word	0x0800585d
 800580c:	0800585d 	.word	0x0800585d
 8005810:	08005841 	.word	0x08005841
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800585d 	.word	0x0800585d
 800581c:	0800585d 	.word	0x0800585d
 8005820:	0800584f 	.word	0x0800584f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f96a 	bl	8005b04 <TIM_OC1_SetConfig>
      break;
 8005830:	e017      	b.n	8005862 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f9c9 	bl	8005bd0 <TIM_OC2_SetConfig>
      break;
 800583e:	e010      	b.n	8005862 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa2c 	bl	8005ca4 <TIM_OC3_SetConfig>
      break;
 800584c:	e009      	b.n	8005862 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fa8f 	bl	8005d78 <TIM_OC4_SetConfig>
      break;
 800585a:	e002      	b.n	8005862 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800588e:	2302      	movs	r3, #2
 8005890:	e0ae      	b.n	80059f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b0c      	cmp	r3, #12
 800589e:	f200 809f 	bhi.w	80059e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058dd 	.word	0x080058dd
 80058ac:	080059e1 	.word	0x080059e1
 80058b0:	080059e1 	.word	0x080059e1
 80058b4:	080059e1 	.word	0x080059e1
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	080059e1 	.word	0x080059e1
 80058c0:	080059e1 	.word	0x080059e1
 80058c4:	080059e1 	.word	0x080059e1
 80058c8:	0800595f 	.word	0x0800595f
 80058cc:	080059e1 	.word	0x080059e1
 80058d0:	080059e1 	.word	0x080059e1
 80058d4:	080059e1 	.word	0x080059e1
 80058d8:	0800599f 	.word	0x0800599f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f90e 	bl	8005b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	619a      	str	r2, [r3, #24]
      break;
 800591a:	e064      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f954 	bl	8005bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6999      	ldr	r1, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	619a      	str	r2, [r3, #24]
      break;
 800595c:	e043      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f99d 	bl	8005ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0208 	orr.w	r2, r2, #8
 8005978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0204 	bic.w	r2, r2, #4
 8005988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69d9      	ldr	r1, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	61da      	str	r2, [r3, #28]
      break;
 800599c:	e023      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f9e7 	bl	8005d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	021a      	lsls	r2, r3, #8
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	61da      	str	r2, [r3, #28]
      break;
 80059de:	e002      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	75fb      	strb	r3, [r7, #23]
      break;
 80059e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <TIM_Base_SetConfig+0xb8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00b      	beq.n	8005a70 <TIM_Base_SetConfig+0x30>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d007      	beq.n	8005a70 <TIM_Base_SetConfig+0x30>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a26      	ldr	r2, [pc, #152]	; (8005afc <TIM_Base_SetConfig+0xbc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0x30>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <TIM_Base_SetConfig+0xc0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d108      	bne.n	8005a82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <TIM_Base_SetConfig+0xb8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0x62>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0x62>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <TIM_Base_SetConfig+0xbc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0x62>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <TIM_Base_SetConfig+0xc0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a07      	ldr	r2, [pc, #28]	; (8005af8 <TIM_Base_SetConfig+0xb8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	615a      	str	r2, [r3, #20]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800

08005b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0201 	bic.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 0302 	bic.w	r3, r3, #2
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <TIM_OC1_SetConfig+0xc8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10c      	bne.n	8005b7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0308 	bic.w	r3, r3, #8
 8005b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0304 	bic.w	r3, r3, #4
 8005b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <TIM_OC1_SetConfig+0xc8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d111      	bne.n	8005ba6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	621a      	str	r2, [r3, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00

08005bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0210 	bic.w	r2, r3, #16
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0320 	bic.w	r3, r3, #32
 8005c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <TIM_OC2_SetConfig+0xd0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10d      	bne.n	8005c4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <TIM_OC2_SetConfig+0xd0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d113      	bne.n	8005c7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00

08005ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <TIM_OC3_SetConfig+0xd0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d10d      	bne.n	8005d1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <TIM_OC3_SetConfig+0xd0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d113      	bne.n	8005d4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00

08005d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a0f      	ldr	r2, [pc, #60]	; (8005e10 <TIM_OC4_SetConfig+0x98>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d109      	bne.n	8005dec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	40012c00 	.word	0x40012c00

08005e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e046      	b.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800

08005f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e03d      	b.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e042      	b.n	8006076 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fc fa97 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	; 0x24
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006020:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f91c 	bl	8006260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006036:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006046:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006056:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b08a      	sub	sp, #40	; 0x28
 8006082:	af02      	add	r7, sp, #8
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	d16d      	bne.n	800617a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_UART_Transmit+0x2c>
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e066      	b.n	800617c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2221      	movs	r2, #33	; 0x21
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060bc:	f7fc fbfc 	bl	80028b8 <HAL_GetTick>
 80060c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	d108      	bne.n	80060ea <HAL_UART_Transmit+0x6c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e003      	b.n	80060f2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060f2:	e02a      	b.n	800614a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f840 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e036      	b.n	800617c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006122:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	3302      	adds	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e007      	b.n	800613c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1cf      	bne.n	80060f4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2200      	movs	r2, #0
 800615c:	2140      	movs	r1, #64	; 0x40
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f810 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e006      	b.n	800617c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b090      	sub	sp, #64	; 0x40
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	e050      	b.n	8006238 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d04c      	beq.n	8006238 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800619e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061a4:	f7fc fb88 	bl	80028b8 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d241      	bcs.n	8006238 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061d4:	637a      	str	r2, [r7, #52]	; 0x34
 80061d6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	613b      	str	r3, [r7, #16]
   return(result);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3314      	adds	r3, #20
 8006206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006208:	623a      	str	r2, [r7, #32]
 800620a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	6a3a      	ldr	r2, [r7, #32]
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	61bb      	str	r3, [r7, #24]
   return(result);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e5      	bne.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e00f      	b.n	8006258 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	429a      	cmp	r2, r3
 8006254:	d09f      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3740      	adds	r7, #64	; 0x40
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800629a:	f023 030c 	bic.w	r3, r3, #12
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <UART_SetConfig+0x114>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062c8:	f7fe fa06 	bl	80046d8 <HAL_RCC_GetPCLK2Freq>
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	e002      	b.n	80062d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fe f9ee 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 80062d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009a      	lsls	r2, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	4a22      	ldr	r2, [pc, #136]	; (8006378 <UART_SetConfig+0x118>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	0119      	lsls	r1, r3, #4
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009a      	lsls	r2, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	fbb2 f2f3 	udiv	r2, r2, r3
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <UART_SetConfig+0x118>)
 800630e:	fba3 0302 	umull	r0, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	2064      	movs	r0, #100	; 0x64
 8006316:	fb00 f303 	mul.w	r3, r0, r3
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	3332      	adds	r3, #50	; 0x32
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <UART_SetConfig+0x118>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632c:	4419      	add	r1, r3
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009a      	lsls	r2, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	fbb2 f2f3 	udiv	r2, r2, r3
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <UART_SetConfig+0x118>)
 8006346:	fba3 0302 	umull	r0, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2064      	movs	r0, #100	; 0x64
 800634e:	fb00 f303 	mul.w	r3, r0, r3
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	3332      	adds	r3, #50	; 0x32
 8006358:	4a07      	ldr	r2, [pc, #28]	; (8006378 <UART_SetConfig+0x118>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	440a      	add	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40013800 	.word	0x40013800
 8006378:	51eb851f 	.word	0x51eb851f

0800637c <filter_init>:
 */

#include "RC_Filters.h"


void filter_init (filter_t*filter , float cutoff_freq , float sample_time) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]

// compute the rc time constant fro the cutoff freq
float RC = ( 1.0f / (6.283185307f * cutoff_freq)) ;
 8006388:	4918      	ldr	r1, [pc, #96]	; (80063ec <filter_init+0x70>)
 800638a:	68b8      	ldr	r0, [r7, #8]
 800638c:	f7fa fcda 	bl	8000d44 <__aeabi_fmul>
 8006390:	4603      	mov	r3, r0
 8006392:	4619      	mov	r1, r3
 8006394:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006398:	f7fa fd88 	bl	8000eac <__aeabi_fdiv>
 800639c:	4603      	mov	r3, r0
 800639e:	617b      	str	r3, [r7, #20]
// calculate the (RC/(T + RC))
filter->coeff1 = (RC/(sample_time + RC)) ;
 80063a0:	6979      	ldr	r1, [r7, #20]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fa fbc6 	bl	8000b34 <__addsf3>
 80063a8:	4603      	mov	r3, r0
 80063aa:	4619      	mov	r1, r3
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f7fa fd7d 	bl	8000eac <__aeabi_fdiv>
 80063b2:	4603      	mov	r3, r0
 80063b4:	461a      	mov	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	609a      	str	r2, [r3, #8]
// calculate the (T/(T + RC))
filter->coeff2 = (sample_time / (sample_time + RC)) ;
 80063ba:	6979      	ldr	r1, [r7, #20]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7fa fbb9 	bl	8000b34 <__addsf3>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fa fd70 	bl	8000eac <__aeabi_fdiv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	60da      	str	r2, [r3, #12]

filter->out_now = 0 ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
filter->out_prev= 0 ;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]

}
 80063e4:	bf00      	nop
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40c90fdb 	.word	0x40c90fdb

080063f0 <filter_update>:

float filter_update(filter_t*filter  , float measuremnt ) {
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]

filter->out_prev = filter->out_now ;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]
filter->out_now = ( filter->coeff1*(filter->out_prev) + filter->coeff2*(measuremnt) );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fa fc99 	bl	8000d44 <__aeabi_fmul>
 8006412:	4603      	mov	r3, r0
 8006414:	461c      	mov	r4, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7fa fc91 	bl	8000d44 <__aeabi_fmul>
 8006422:	4603      	mov	r3, r0
 8006424:	4619      	mov	r1, r3
 8006426:	4620      	mov	r0, r4
 8006428:	f7fa fb84 	bl	8000b34 <__addsf3>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]

return (filter->out_now) ;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]

}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bd90      	pop	{r4, r7, pc}

08006440 <Self_test_mpu6050>:
#include "mpu6050_driver.h"
#define DEBUG_mpu 0
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

void Self_test_mpu6050(I2C_HandleTypeDef *hi2c) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b092      	sub	sp, #72	; 0x48
 8006444:	af04      	add	r7, sp, #16
 8006446:	6078      	str	r0, [r7, #4]

	 uint8_t data[4] = {0} ;
 8006448:	2300      	movs	r3, #0
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t  Gyro_ST[3] = {0};
 800644c:	4bc8      	ldr	r3, [pc, #800]	; (8006770 <Self_test_mpu6050+0x330>)
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	853b      	strh	r3, [r7, #40]	; 0x28
 8006452:	2300      	movs	r3, #0
 8006454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 uint8_t  ACCL_ST[3] = {0} ;
 8006458:	4bc5      	ldr	r3, [pc, #788]	; (8006770 <Self_test_mpu6050+0x330>)
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 float Gyro_FT[3] = {0} ;
 8006464:	f107 0318 	add.w	r3, r7, #24
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	609a      	str	r2, [r3, #8]
	 float Accl_FT[3] = {0} ;
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	609a      	str	r2, [r3, #8]

	 // begin test
	 data[0] = 0xE0;
 800647c:	23e0      	movs	r3, #224	; 0xe0
 800647e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable gyro self test
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	2301      	movs	r3, #1
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2301      	movs	r3, #1
 8006494:	221b      	movs	r2, #27
 8006496:	21d0      	movs	r1, #208	; 0xd0
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7fc fe29 	bl	80030f0 <HAL_I2C_Mem_Write>
	 data[0] = 0xF0 ;
 800649e:	23f0      	movs	r3, #240	; 0xf0
 80064a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable accel self test
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	2301      	movs	r3, #1
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	221c      	movs	r2, #28
 80064b8:	21d0      	movs	r1, #208	; 0xd0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fc fe18 	bl	80030f0 <HAL_I2C_Mem_Write>
	 HAL_Delay(150) ;
 80064c0:	2096      	movs	r0, #150	; 0x96
 80064c2:	f7fc fa03 	bl	80028cc <HAL_Delay>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_X, 1, &data[0], 1, HAL_MAX_DELAY) ;
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	2301      	movs	r3, #1
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2301      	movs	r3, #1
 80064d8:	220d      	movs	r2, #13
 80064da:	21d0      	movs	r1, #208	; 0xd0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fc ff01 	bl	80032e4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Y, 1, &data[1], 1, HAL_MAX_DELAY) ;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	9302      	str	r3, [sp, #8]
 80064e8:	2301      	movs	r3, #1
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064f0:	3301      	adds	r3, #1
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2301      	movs	r3, #1
 80064f6:	220e      	movs	r2, #14
 80064f8:	21d0      	movs	r1, #208	; 0xd0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fef2 	bl	80032e4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Z, 1, &data[2], 1, HAL_MAX_DELAY) ;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	2301      	movs	r3, #1
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800650e:	3302      	adds	r3, #2
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2301      	movs	r3, #1
 8006514:	220f      	movs	r2, #15
 8006516:	21d0      	movs	r1, #208	; 0xd0
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fc fee3 	bl	80032e4 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_A, 1, &data[3], 1, HAL_MAX_DELAY) ;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	2301      	movs	r3, #1
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800652c:	3303      	adds	r3, #3
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2301      	movs	r3, #1
 8006532:	2210      	movs	r2, #16
 8006534:	21d0      	movs	r1, #208	; 0xd0
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fc fed4 	bl	80032e4 <HAL_I2C_Mem_Read>

	 Gyro_ST[0] = (data[0] & 0x1F) ;	// X
 800653c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 Gyro_ST[1] = (data[1] & 0x1F) ;	// Y
 800654a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 Gyro_ST[2] = (data[2] & 0x1F) ;	// Z
 8006558:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	 ACCL_ST[0] = (((data[0] &  0xE0 ) >> 3) | ((data[3] & 0x30 ) >> 4));	//X
 8006566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800656a:	10db      	asrs	r3, r3, #3
 800656c:	b25b      	sxtb	r3, r3
 800656e:	f003 031c 	and.w	r3, r3, #28
 8006572:	b25a      	sxtb	r2, r3
 8006574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006578:	111b      	asrs	r3, r3, #4
 800657a:	b25b      	sxtb	r3, r3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	b25b      	sxtb	r3, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	b25b      	sxtb	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 ACCL_ST[1] = (((data[1] &  0xE0 ) >> 3) | ((data[3] & 0x0C ) >> 2));	//Y
 800658c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006590:	10db      	asrs	r3, r3, #3
 8006592:	b25b      	sxtb	r3, r3
 8006594:	f003 031c 	and.w	r3, r3, #28
 8006598:	b25a      	sxtb	r2, r3
 800659a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800659e:	109b      	asrs	r3, r3, #2
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b25b      	sxtb	r3, r3
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 ACCL_ST[2] = (((data[2] &  0xE0 ) >> 3) | ((data[3] & 0x03 ) >> 0)); //Z
 80065b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80065b6:	10db      	asrs	r3, r3, #3
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	f003 031c 	and.w	r3, r3, #28
 80065be:	b25a      	sxtb	r2, r3
 80065c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065c4:	b25b      	sxtb	r3, r3
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	b25b      	sxtb	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("ACC_ST[0] %u \n" , ACCL_ST[0]) ;
	printf("ACC_ST[1] %u \n" , ACCL_ST[1]) ;
	printf("ACC_ST[2] %u \n" , ACCL_ST[3]) ;
#endif

	Gyro_FT[0] = 25.0*131.0*(powf(1.406,Gyro_ST[0]) - 1.0) ;
 80065d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fa fb5a 	bl	8000c94 <__aeabi_ui2f>
 80065e0:	4603      	mov	r3, r0
 80065e2:	4619      	mov	r1, r3
 80065e4:	4863      	ldr	r0, [pc, #396]	; (8006774 <Self_test_mpu6050+0x334>)
 80065e6:	f003 fd51 	bl	800a08c <powf>
 80065ea:	4603      	mov	r3, r0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7f9 ff1b 	bl	8000428 <__aeabi_f2d>
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	4b60      	ldr	r3, [pc, #384]	; (8006778 <Self_test_mpu6050+0x338>)
 80065f8:	f7f9 fdb6 	bl	8000168 <__aeabi_dsub>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	a354      	add	r3, pc, #336	; (adr r3, 8006758 <Self_test_mpu6050+0x318>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 ff65 	bl	80004d8 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f7fa fa37 	bl	8000a88 <__aeabi_d2f>
 800661a:	4603      	mov	r3, r0
 800661c:	61bb      	str	r3, [r7, #24]
	Gyro_FT[1] = -25.0*131.0*(powf(1.406,Gyro_ST[1]) - 1.0) ;
 800661e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006622:	4618      	mov	r0, r3
 8006624:	f7fa fb36 	bl	8000c94 <__aeabi_ui2f>
 8006628:	4603      	mov	r3, r0
 800662a:	4619      	mov	r1, r3
 800662c:	4851      	ldr	r0, [pc, #324]	; (8006774 <Self_test_mpu6050+0x334>)
 800662e:	f003 fd2d 	bl	800a08c <powf>
 8006632:	4603      	mov	r3, r0
 8006634:	4618      	mov	r0, r3
 8006636:	f7f9 fef7 	bl	8000428 <__aeabi_f2d>
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	4b4e      	ldr	r3, [pc, #312]	; (8006778 <Self_test_mpu6050+0x338>)
 8006640:	f7f9 fd92 	bl	8000168 <__aeabi_dsub>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4610      	mov	r0, r2
 800664a:	4619      	mov	r1, r3
 800664c:	a344      	add	r3, pc, #272	; (adr r3, 8006760 <Self_test_mpu6050+0x320>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 ff41 	bl	80004d8 <__aeabi_dmul>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f7fa fa13 	bl	8000a88 <__aeabi_d2f>
 8006662:	4603      	mov	r3, r0
 8006664:	61fb      	str	r3, [r7, #28]
	Gyro_FT[2] = 25.0*131.0*(powf(1.406,Gyro_ST[2]) - 1.0) ;
 8006666:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800666a:	4618      	mov	r0, r3
 800666c:	f7fa fb12 	bl	8000c94 <__aeabi_ui2f>
 8006670:	4603      	mov	r3, r0
 8006672:	4619      	mov	r1, r3
 8006674:	483f      	ldr	r0, [pc, #252]	; (8006774 <Self_test_mpu6050+0x334>)
 8006676:	f003 fd09 	bl	800a08c <powf>
 800667a:	4603      	mov	r3, r0
 800667c:	4618      	mov	r0, r3
 800667e:	f7f9 fed3 	bl	8000428 <__aeabi_f2d>
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <Self_test_mpu6050+0x338>)
 8006688:	f7f9 fd6e 	bl	8000168 <__aeabi_dsub>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
 8006694:	a330      	add	r3, pc, #192	; (adr r3, 8006758 <Self_test_mpu6050+0x318>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 ff1d 	bl	80004d8 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fa f9ef 	bl	8000a88 <__aeabi_d2f>
 80066aa:	4603      	mov	r3, r0
 80066ac:	623b      	str	r3, [r7, #32]

	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[0] - 1.0)/(30)))); ;
 80066ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7f9 fea6 	bl	8000404 <__aeabi_i2d>
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	4b2e      	ldr	r3, [pc, #184]	; (8006778 <Self_test_mpu6050+0x338>)
 80066be:	f7f9 fd53 	bl	8000168 <__aeabi_dsub>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	4b2b      	ldr	r3, [pc, #172]	; (800677c <Self_test_mpu6050+0x33c>)
 80066d0:	f7fa f82c 	bl	800072c <__aeabi_ddiv>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
 80066d8:	4610      	mov	r0, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	f7fa f9d4 	bl	8000a88 <__aeabi_d2f>
 80066e0:	4603      	mov	r3, r0
 80066e2:	4619      	mov	r1, r3
 80066e4:	4826      	ldr	r0, [pc, #152]	; (8006780 <Self_test_mpu6050+0x340>)
 80066e6:	f003 fcd1 	bl	800a08c <powf>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7f9 fe9b 	bl	8000428 <__aeabi_f2d>
 80066f2:	a31d      	add	r3, pc, #116	; (adr r3, 8006768 <Self_test_mpu6050+0x328>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 feee 	bl	80004d8 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4610      	mov	r0, r2
 8006702:	4619      	mov	r1, r3
 8006704:	f7fa f9c0 	bl	8000a88 <__aeabi_d2f>
 8006708:	4603      	mov	r3, r0
 800670a:	60fb      	str	r3, [r7, #12]
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
							  ((ACCL_ST[1] - 1.0)/(30))));
 800670c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006710:	4618      	mov	r0, r3
 8006712:	f7f9 fe77 	bl	8000404 <__aeabi_i2d>
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	4b17      	ldr	r3, [pc, #92]	; (8006778 <Self_test_mpu6050+0x338>)
 800671c:	f7f9 fd24 	bl	8000168 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <Self_test_mpu6050+0x33c>)
 800672e:	f7f9 fffd 	bl	800072c <__aeabi_ddiv>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7fa f9a5 	bl	8000a88 <__aeabi_d2f>
 800673e:	4603      	mov	r3, r0
 8006740:	4619      	mov	r1, r3
 8006742:	480f      	ldr	r0, [pc, #60]	; (8006780 <Self_test_mpu6050+0x340>)
 8006744:	f003 fca2 	bl	800a08c <powf>
 8006748:	4603      	mov	r3, r0
 800674a:	4618      	mov	r0, r3
 800674c:	f7f9 fe6c 	bl	8000428 <__aeabi_f2d>
 8006750:	e018      	b.n	8006784 <Self_test_mpu6050+0x344>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
 8006758:	00000000 	.word	0x00000000
 800675c:	40a99600 	.word	0x40a99600
 8006760:	00000000 	.word	0x00000000
 8006764:	c0a99600 	.word	0xc0a99600
 8006768:	5c28f5c3 	.word	0x5c28f5c3
 800676c:	4095c28f 	.word	0x4095c28f
 8006770:	0800aab0 	.word	0x0800aab0
 8006774:	3fb3f7cf 	.word	0x3fb3f7cf
 8006778:	3ff00000 	.word	0x3ff00000
 800677c:	403e0000 	.word	0x403e0000
 8006780:	402d2d2d 	.word	0x402d2d2d
 8006784:	a366      	add	r3, pc, #408	; (adr r3, 8006920 <Self_test_mpu6050+0x4e0>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	f7f9 fea5 	bl	80004d8 <__aeabi_dmul>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f7fa f977 	bl	8000a88 <__aeabi_d2f>
 800679a:	4603      	mov	r3, r0
 800679c:	613b      	str	r3, [r7, #16]
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[2] - 1.0)/(30)))) ;
 800679e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7f9 fe2e 	bl	8000404 <__aeabi_i2d>
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	4b5e      	ldr	r3, [pc, #376]	; (8006928 <Self_test_mpu6050+0x4e8>)
 80067ae:	f7f9 fcdb 	bl	8000168 <__aeabi_dsub>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	4b5b      	ldr	r3, [pc, #364]	; (800692c <Self_test_mpu6050+0x4ec>)
 80067c0:	f7f9 ffb4 	bl	800072c <__aeabi_ddiv>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	f7fa f95c 	bl	8000a88 <__aeabi_d2f>
 80067d0:	4603      	mov	r3, r0
 80067d2:	4619      	mov	r1, r3
 80067d4:	4856      	ldr	r0, [pc, #344]	; (8006930 <Self_test_mpu6050+0x4f0>)
 80067d6:	f003 fc59 	bl	800a08c <powf>
 80067da:	4603      	mov	r3, r0
 80067dc:	4618      	mov	r0, r3
 80067de:	f7f9 fe23 	bl	8000428 <__aeabi_f2d>
 80067e2:	a34f      	add	r3, pc, #316	; (adr r3, 8006920 <Self_test_mpu6050+0x4e0>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fe76 	bl	80004d8 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4610      	mov	r0, r2
 80067f2:	4619      	mov	r1, r3
 80067f4:	f7fa f948 	bl	8000a88 <__aeabi_d2f>
 80067f8:	4603      	mov	r3, r0
 80067fa:	617b      	str	r3, [r7, #20]
	printf("ACC_FT[0] %f \n" , Accl_FT[0]) ;
	printf("ACC_FT[1] %f \n" , Accl_FT[1]) ;
	printf("ACC_FT[2] %f \n" , Accl_FT[3]) ;
#endif

	float temp = 0 ;
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 8006802:	2300      	movs	r3, #0
 8006804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006808:	e03a      	b.n	8006880 <Self_test_mpu6050+0x440>
	temp = (100 + ((( Gyro_ST[i]- Gyro_FT[i] )/ Gyro_FT[i] )*100 ));
 800680a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800680e:	3338      	adds	r3, #56	; 0x38
 8006810:	443b      	add	r3, r7
 8006812:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fa fa40 	bl	8000c9c <__aeabi_i2f>
 800681c:	4602      	mov	r2, r0
 800681e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	3338      	adds	r3, #56	; 0x38
 8006826:	443b      	add	r3, r7
 8006828:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7fa f97e 	bl	8000b30 <__aeabi_fsub>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	3338      	adds	r3, #56	; 0x38
 8006840:	443b      	add	r3, r7
 8006842:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fa fb2f 	bl	8000eac <__aeabi_fdiv>
 800684e:	4603      	mov	r3, r0
 8006850:	4938      	ldr	r1, [pc, #224]	; (8006934 <Self_test_mpu6050+0x4f4>)
 8006852:	4618      	mov	r0, r3
 8006854:	f7fa fa76 	bl	8000d44 <__aeabi_fmul>
 8006858:	4603      	mov	r3, r0
 800685a:	4936      	ldr	r1, [pc, #216]	; (8006934 <Self_test_mpu6050+0x4f4>)
 800685c:	4618      	mov	r0, r3
 800685e:	f7fa f969 	bl	8000b34 <__addsf3>
 8006862:	4603      	mov	r3, r0
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Gyro %f \n", temp) ;
 8006866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006868:	f7f9 fdde 	bl	8000428 <__aeabi_f2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4831      	ldr	r0, [pc, #196]	; (8006938 <Self_test_mpu6050+0x4f8>)
 8006872:	f001 fc07 	bl	8008084 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 8006876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800687a:	3301      	adds	r3, #1
 800687c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006884:	2b02      	cmp	r3, #2
 8006886:	d9c0      	bls.n	800680a <Self_test_mpu6050+0x3ca>
	}
temp = 0 ;
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 800688e:	2300      	movs	r3, #0
 8006890:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006894:	e03a      	b.n	800690c <Self_test_mpu6050+0x4cc>

	temp = (100 + ((( ACCL_ST[i]- Accl_FT[i] )/ Accl_FT[i] )*100 ));
 8006896:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800689a:	3338      	adds	r3, #56	; 0x38
 800689c:	443b      	add	r3, r7
 800689e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fa f9fa 	bl	8000c9c <__aeabi_i2f>
 80068a8:	4602      	mov	r2, r0
 80068aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	3338      	adds	r3, #56	; 0x38
 80068b2:	443b      	add	r3, r7
 80068b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f7fa f938 	bl	8000b30 <__aeabi_fsub>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	3338      	adds	r3, #56	; 0x38
 80068cc:	443b      	add	r3, r7
 80068ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fa fae9 	bl	8000eac <__aeabi_fdiv>
 80068da:	4603      	mov	r3, r0
 80068dc:	4915      	ldr	r1, [pc, #84]	; (8006934 <Self_test_mpu6050+0x4f4>)
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fa fa30 	bl	8000d44 <__aeabi_fmul>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4913      	ldr	r1, [pc, #76]	; (8006934 <Self_test_mpu6050+0x4f4>)
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fa f923 	bl	8000b34 <__addsf3>
 80068ee:	4603      	mov	r3, r0
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Accl %f \n", temp) ;
 80068f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068f4:	f7f9 fd98 	bl	8000428 <__aeabi_f2d>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	480f      	ldr	r0, [pc, #60]	; (800693c <Self_test_mpu6050+0x4fc>)
 80068fe:	f001 fbc1 	bl	8008084 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 8006902:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006906:	3301      	adds	r3, #1
 8006908:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800690c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006910:	2b02      	cmp	r3, #2
 8006912:	d9c0      	bls.n	8006896 <Self_test_mpu6050+0x456>
	}
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	3738      	adds	r7, #56	; 0x38
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	5c28f5c3 	.word	0x5c28f5c3
 8006924:	4095c28f 	.word	0x4095c28f
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	403e0000 	.word	0x403e0000
 8006930:	402d2d2d 	.word	0x402d2d2d
 8006934:	42c80000 	.word	0x42c80000
 8006938:	0800aa78 	.word	0x0800aa78
 800693c:	0800aa94 	.word	0x0800aa94

08006940 <Mpu6050_Init>:

void Mpu6050_Init(I2C_HandleTypeDef *hi2c ){
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af04      	add	r7, sp, #16
 8006946:	6078      	str	r0, [r7, #4]
uint8_t data = 0x00;
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]

//who am I
data = MPU_DATASHEET_ADDR ;
 800694c:	2368      	movs	r3, #104	; 0x68
 800694e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, WHO_AM_I, 1, &data, 1, HAL_MAX_DELAY) ;
 8006950:	f04f 33ff 	mov.w	r3, #4294967295
 8006954:	9302      	str	r3, [sp, #8]
 8006956:	2301      	movs	r3, #1
 8006958:	9301      	str	r3, [sp, #4]
 800695a:	f107 030f 	add.w	r3, r7, #15
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2301      	movs	r3, #1
 8006962:	2275      	movs	r2, #117	; 0x75
 8006964:	21d0      	movs	r1, #208	; 0xd0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc fcbc 	bl	80032e4 <HAL_I2C_Mem_Read>
if (data != MPU_DATASHEET_ADDR) {
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b68      	cmp	r3, #104	; 0x68
 8006970:	d003      	beq.n	800697a <Mpu6050_Init+0x3a>
	printf("who am i error \n");
 8006972:	488f      	ldr	r0, [pc, #572]	; (8006bb0 <Mpu6050_Init+0x270>)
 8006974:	f001 fbec 	bl	8008150 <puts>
 8006978:	e007      	b.n	800698a <Mpu6050_Init+0x4a>
}else if (data == MPU_DATASHEET_ADDR ) {
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b68      	cmp	r3, #104	; 0x68
 800697e:	d104      	bne.n	800698a <Mpu6050_Init+0x4a>
	printf("who am I value : %x \n", data) ;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	4619      	mov	r1, r3
 8006984:	488b      	ldr	r0, [pc, #556]	; (8006bb4 <Mpu6050_Init+0x274>)
 8006986:	f001 fb7d 	bl	8008084 <iprintf>
}

// power mannagment 1
data = 0x01 ;
 800698a:	2301      	movs	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	9302      	str	r3, [sp, #8]
 8006994:	2301      	movs	r3, #1
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	f107 030f 	add.w	r3, r7, #15
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2301      	movs	r3, #1
 80069a0:	226b      	movs	r2, #107	; 0x6b
 80069a2:	21d0      	movs	r1, #208	; 0xd0
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7fc fba3 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	2301      	movs	r3, #1
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	f107 030f 	add.w	r3, r7, #15
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	2301      	movs	r3, #1
 80069bc:	226b      	movs	r2, #107	; 0x6b
 80069be:	21d0      	movs	r1, #208	; 0xd0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fc fc8f 	bl	80032e4 <HAL_I2C_Mem_Read>
if (data != 0x01) {
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d003      	beq.n	80069d4 <Mpu6050_Init+0x94>
	printf("pwr_mgmt1 error \n");
 80069cc:	487a      	ldr	r0, [pc, #488]	; (8006bb8 <Mpu6050_Init+0x278>)
 80069ce:	f001 fbbf 	bl	8008150 <puts>
 80069d2:	e007      	b.n	80069e4 <Mpu6050_Init+0xa4>
}else if (data == 0x01 ) {
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d104      	bne.n	80069e4 <Mpu6050_Init+0xa4>
	printf("pwr_mgmt1 value : %d \n", data) ;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	4619      	mov	r1, r3
 80069de:	4877      	ldr	r0, [pc, #476]	; (8006bbc <Mpu6050_Init+0x27c>)
 80069e0:	f001 fb50 	bl	8008084 <iprintf>
}


// Configuration CONFIG 0x1A 26
data = 0x01;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	2301      	movs	r3, #1
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	f107 030f 	add.w	r3, r7, #15
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2301      	movs	r3, #1
 80069fa:	221a      	movs	r2, #26
 80069fc:	21d0      	movs	r1, #208	; 0xd0
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fc fb76 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	f107 030f 	add.w	r3, r7, #15
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	2301      	movs	r3, #1
 8006a16:	221a      	movs	r2, #26
 8006a18:	21d0      	movs	r1, #208	; 0xd0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fc fc62 	bl	80032e4 <HAL_I2C_Mem_Read>

if (data != 0x01) {
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d003      	beq.n	8006a2e <Mpu6050_Init+0xee>
	printf("config error \n");
 8006a26:	4866      	ldr	r0, [pc, #408]	; (8006bc0 <Mpu6050_Init+0x280>)
 8006a28:	f001 fb92 	bl	8008150 <puts>
 8006a2c:	e007      	b.n	8006a3e <Mpu6050_Init+0xfe>
}else if (data == 0x01 ) {
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d104      	bne.n	8006a3e <Mpu6050_Init+0xfe>
	printf("config value : %d \n", data) ;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	4619      	mov	r1, r3
 8006a38:	4862      	ldr	r0, [pc, #392]	; (8006bc4 <Mpu6050_Init+0x284>)
 8006a3a:	f001 fb23 	bl	8008084 <iprintf>
}

// Sample rate divider
data = 0x04;
 8006a3e:	2304      	movs	r3, #4
 8006a40:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295
 8006a46:	9302      	str	r3, [sp, #8]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	f107 030f 	add.w	r3, r7, #15
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	2301      	movs	r3, #1
 8006a54:	2219      	movs	r2, #25
 8006a56:	21d0      	movs	r1, #208	; 0xd0
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fc fb49 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	2301      	movs	r3, #1
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	f107 030f 	add.w	r3, r7, #15
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2219      	movs	r2, #25
 8006a72:	21d0      	movs	r1, #208	; 0xd0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fc fc35 	bl	80032e4 <HAL_I2C_Mem_Read>

if (data != 0x04) {
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d003      	beq.n	8006a88 <Mpu6050_Init+0x148>
	printf("sample rate divider error \n");
 8006a80:	4851      	ldr	r0, [pc, #324]	; (8006bc8 <Mpu6050_Init+0x288>)
 8006a82:	f001 fb65 	bl	8008150 <puts>
 8006a86:	e007      	b.n	8006a98 <Mpu6050_Init+0x158>
}else if (data == 0x04 ) {
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d104      	bne.n	8006a98 <Mpu6050_Init+0x158>
	printf("sample rate divider value : %d \n", data) ;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	4619      	mov	r1, r3
 8006a92:	484e      	ldr	r0, [pc, #312]	; (8006bcc <Mpu6050_Init+0x28c>)
 8006a94:	f001 faf6 	bl	8008084 <iprintf>
}


// Gyro Config
data = 0x08;
 8006a98:	2308      	movs	r3, #8
 8006a9a:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f107 030f 	add.w	r3, r7, #15
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2301      	movs	r3, #1
 8006aae:	221b      	movs	r2, #27
 8006ab0:	21d0      	movs	r1, #208	; 0xd0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc fb1c 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f107 030f 	add.w	r3, r7, #15
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	221b      	movs	r2, #27
 8006acc:	21d0      	movs	r1, #208	; 0xd0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fc fc08 	bl	80032e4 <HAL_I2C_Mem_Read>

if (data != 0x08) {
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d003      	beq.n	8006ae2 <Mpu6050_Init+0x1a2>
	printf("Gyro config error \n ");
 8006ada:	483d      	ldr	r0, [pc, #244]	; (8006bd0 <Mpu6050_Init+0x290>)
 8006adc:	f001 fad2 	bl	8008084 <iprintf>
 8006ae0:	e007      	b.n	8006af2 <Mpu6050_Init+0x1b2>
}else if (data == 0x08 ) {
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d104      	bne.n	8006af2 <Mpu6050_Init+0x1b2>
	printf("gyro config value : %d \n", data) ;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	4619      	mov	r1, r3
 8006aec:	4839      	ldr	r0, [pc, #228]	; (8006bd4 <Mpu6050_Init+0x294>)
 8006aee:	f001 fac9 	bl	8008084 <iprintf>
}

// Accl Config
data = 0x00;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	2301      	movs	r3, #1
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	f107 030f 	add.w	r3, r7, #15
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2301      	movs	r3, #1
 8006b08:	221c      	movs	r2, #28
 8006b0a:	21d0      	movs	r1, #208	; 0xd0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fc faef 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	9302      	str	r3, [sp, #8]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f107 030f 	add.w	r3, r7, #15
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	2301      	movs	r3, #1
 8006b24:	221c      	movs	r2, #28
 8006b26:	21d0      	movs	r1, #208	; 0xd0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fc fbdb 	bl	80032e4 <HAL_I2C_Mem_Read>

if (data != 0x00) {
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <Mpu6050_Init+0x1fc>
	printf("Accl config error \n");
 8006b34:	4828      	ldr	r0, [pc, #160]	; (8006bd8 <Mpu6050_Init+0x298>)
 8006b36:	f001 fb0b 	bl	8008150 <puts>
 8006b3a:	e007      	b.n	8006b4c <Mpu6050_Init+0x20c>
}else if (data == 0x00 ) {
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <Mpu6050_Init+0x20c>
	printf("Accl config value : %d \n", data) ;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	4619      	mov	r1, r3
 8006b46:	4825      	ldr	r0, [pc, #148]	; (8006bdc <Mpu6050_Init+0x29c>)
 8006b48:	f001 fa9c 	bl	8008084 <iprintf>
}

// signal path reset
data = 0x07 ;
 8006b4c:	2307      	movs	r3, #7
 8006b4e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295
 8006b54:	9302      	str	r3, [sp, #8]
 8006b56:	2301      	movs	r3, #1
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	f107 030f 	add.w	r3, r7, #15
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2301      	movs	r3, #1
 8006b62:	2268      	movs	r2, #104	; 0x68
 8006b64:	21d0      	movs	r1, #208	; 0xd0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fc fac2 	bl	80030f0 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	2301      	movs	r3, #1
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f107 030f 	add.w	r3, r7, #15
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	2268      	movs	r2, #104	; 0x68
 8006b80:	21d0      	movs	r1, #208	; 0xd0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fc fbae 	bl	80032e4 <HAL_I2C_Mem_Read>
if (data != 0x07) {
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b07      	cmp	r3, #7
 8006b8c:	d003      	beq.n	8006b96 <Mpu6050_Init+0x256>
	printf("(ignore) signal path reset error cannot read write only \n");
 8006b8e:	4814      	ldr	r0, [pc, #80]	; (8006be0 <Mpu6050_Init+0x2a0>)
 8006b90:	f001 fade 	bl	8008150 <puts>
}else if (data == 0x07 ) {
	printf("signal path reset value : %d \n", data) ;
}

}
 8006b94:	e007      	b.n	8006ba6 <Mpu6050_Init+0x266>
}else if (data == 0x07 ) {
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b07      	cmp	r3, #7
 8006b9a:	d104      	bne.n	8006ba6 <Mpu6050_Init+0x266>
	printf("signal path reset value : %d \n", data) ;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4810      	ldr	r0, [pc, #64]	; (8006be4 <Mpu6050_Init+0x2a4>)
 8006ba2:	f001 fa6f 	bl	8008084 <iprintf>
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0800aab4 	.word	0x0800aab4
 8006bb4:	0800aac4 	.word	0x0800aac4
 8006bb8:	0800aadc 	.word	0x0800aadc
 8006bbc:	0800aaf0 	.word	0x0800aaf0
 8006bc0:	0800ab08 	.word	0x0800ab08
 8006bc4:	0800ab18 	.word	0x0800ab18
 8006bc8:	0800ab2c 	.word	0x0800ab2c
 8006bcc:	0800ab48 	.word	0x0800ab48
 8006bd0:	0800ab6c 	.word	0x0800ab6c
 8006bd4:	0800ab84 	.word	0x0800ab84
 8006bd8:	0800aba0 	.word	0x0800aba0
 8006bdc:	0800abb4 	.word	0x0800abb4
 8006be0:	0800abd0 	.word	0x0800abd0
 8006be4:	0800ac0c 	.word	0x0800ac0c

08006be8 <get_Accl>:

void get_Accl(I2C_HandleTypeDef *hi2c , MPU_Accl_Val_t * Accl_Data ){
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]

	uint8_t data [6];
	int16_t accel_x = 0 ;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y = 0 ;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z = 0 ;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	827b      	strh	r3, [r7, #18]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,ACCEL_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8006bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006c02:	9302      	str	r3, [sp, #8]
 8006c04:	2306      	movs	r3, #6
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	f107 030c 	add.w	r3, r7, #12
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	223b      	movs	r2, #59	; 0x3b
 8006c12:	21d0      	movs	r1, #208	; 0xd0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fc fb65 	bl	80032e4 <HAL_I2C_Mem_Read>

	accel_x = data[0] << 8 | data[1] ;
 8006c1a:	7b3b      	ldrb	r3, [r7, #12]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b21a      	sxth	r2, r3
 8006c20:	7b7b      	ldrb	r3, [r7, #13]
 8006c22:	b21b      	sxth	r3, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	82fb      	strh	r3, [r7, #22]
	accel_y = data[2] << 8 | data[3] ;
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	b21a      	sxth	r2, r3
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	b21b      	sxth	r3, r3
 8006c32:	4313      	orrs	r3, r2
 8006c34:	82bb      	strh	r3, [r7, #20]
    accel_z = data[4] << 8 | data[5] ;
 8006c36:	7c3b      	ldrb	r3, [r7, #16]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	b21a      	sxth	r2, r3
 8006c3c:	7c7b      	ldrb	r3, [r7, #17]
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	827b      	strh	r3, [r7, #18]

    Accl_Data->pitch = (float)( (float)accel_x  / (float)16384 )*(float)9.8 ;
 8006c44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fa f827 	bl	8000c9c <__aeabi_i2f>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fa f929 	bl	8000eac <__aeabi_fdiv>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4919      	ldr	r1, [pc, #100]	; (8006cc4 <get_Accl+0xdc>)
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fa f870 	bl	8000d44 <__aeabi_fmul>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
    Accl_Data->roll  = (float)( (float)accel_y  / (float)16384 )*(float)9.8 ;
 8006c6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fa f813 	bl	8000c9c <__aeabi_i2f>
 8006c76:	4603      	mov	r3, r0
 8006c78:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fa f915 	bl	8000eac <__aeabi_fdiv>
 8006c82:	4603      	mov	r3, r0
 8006c84:	490f      	ldr	r1, [pc, #60]	; (8006cc4 <get_Accl+0xdc>)
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fa f85c 	bl	8000d44 <__aeabi_fmul>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	605a      	str	r2, [r3, #4]
    Accl_Data->yaw   = (float)( (float)accel_z  / (float)16384 )*(float)9.8 ;
 8006c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7f9 ffff 	bl	8000c9c <__aeabi_i2f>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fa f901 	bl	8000eac <__aeabi_fdiv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4905      	ldr	r1, [pc, #20]	; (8006cc4 <get_Accl+0xdc>)
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa f848 	bl	8000d44 <__aeabi_fmul>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	609a      	str	r2, [r3, #8]

	printf("[DEBUG] pitch_a: %0.1lf ,roll_a=  %0.1lf ,yaw_a=  %0.1lf \n" , Accl_Data->pitch , Accl_Data->roll, Accl_Data->yaw);
#endif


}
 8006cbc:	bf00      	nop
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	411ccccd 	.word	0x411ccccd

08006cc8 <get_gyro>:

void get_gyro(I2C_HandleTypeDef *hi2c , MPU_Gyro_Val_t * Gyro_Data , MPU_Gyro_calib_t * Calib_Data) {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b08c      	sub	sp, #48	; 0x30
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]

	uint8_t data [6];
	int16_t gyro_x = 0 ;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	83fb      	strh	r3, [r7, #30]
	int16_t gyro_y = 0 ;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	83bb      	strh	r3, [r7, #28]
	int16_t gyro_z = 0 ;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	837b      	strh	r3, [r7, #26]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	9302      	str	r3, [sp, #8]
 8006ce6:	2306      	movs	r3, #6
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	f107 0314 	add.w	r3, r7, #20
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	2243      	movs	r2, #67	; 0x43
 8006cf4:	21d0      	movs	r1, #208	; 0xd0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7fc faf4 	bl	80032e4 <HAL_I2C_Mem_Read>

	gyro_x = data[0] << 8 | data[1] ;
 8006cfc:	7d3b      	ldrb	r3, [r7, #20]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	b21a      	sxth	r2, r3
 8006d02:	7d7b      	ldrb	r3, [r7, #21]
 8006d04:	b21b      	sxth	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	83fb      	strh	r3, [r7, #30]
    gyro_y = data[2] << 8 | data[3] ;
 8006d0a:	7dbb      	ldrb	r3, [r7, #22]
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	b21a      	sxth	r2, r3
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	b21b      	sxth	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	83bb      	strh	r3, [r7, #28]
	gyro_z = data[4] << 8 | data[5] ;
 8006d18:	7e3b      	ldrb	r3, [r7, #24]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	b21a      	sxth	r2, r3
 8006d1e:	7e7b      	ldrb	r3, [r7, #25]
 8006d20:	b21b      	sxth	r3, r3
 8006d22:	4313      	orrs	r3, r2
 8006d24:	837b      	strh	r3, [r7, #26]

	Gyro_Data->pitch = ( gyro_x  / 65.5 ) - Calib_Data->pitch ;
 8006d26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fb6a 	bl	8000404 <__aeabi_i2d>
 8006d30:	a333      	add	r3, pc, #204	; (adr r3, 8006e00 <get_gyro+0x138>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fcf9 	bl	800072c <__aeabi_ddiv>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4614      	mov	r4, r2
 8006d40:	461d      	mov	r5, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 fb6e 	bl	8000428 <__aeabi_f2d>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fa08 	bl	8000168 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f7f9 fe92 	bl	8000a88 <__aeabi_d2f>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	601a      	str	r2, [r3, #0]
	Gyro_Data->roll  = ( gyro_y  / 65.5 ) - Calib_Data->roll;
 8006d6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7f9 fb48 	bl	8000404 <__aeabi_i2d>
 8006d74:	a322      	add	r3, pc, #136	; (adr r3, 8006e00 <get_gyro+0x138>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fcd7 	bl	800072c <__aeabi_ddiv>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7f9 fb4c 	bl	8000428 <__aeabi_f2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	f7f9 fe70 	bl	8000a88 <__aeabi_d2f>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	605a      	str	r2, [r3, #4]
	Gyro_Data->yaw   = ( gyro_z  / 65.5 ) - Calib_Data->yaw ;
 8006dae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7f9 fb26 	bl	8000404 <__aeabi_i2d>
 8006db8:	a311      	add	r3, pc, #68	; (adr r3, 8006e00 <get_gyro+0x138>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fcb5 	bl	800072c <__aeabi_ddiv>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	461d      	mov	r5, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7f9 fb2a 	bl	8000428 <__aeabi_f2d>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f7f9 f9c4 	bl	8000168 <__aeabi_dsub>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7f9 fe4e 	bl	8000a88 <__aeabi_d2f>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	609a      	str	r2, [r3, #8]
#if DEBUG_mpu

	printf("[DEBUG] pitch: %0.1lf ,roll=  %0.1lf ,yaw=  %0.1lf \n" , Gyro_Data->pitch , Gyro_Data->roll, Gyro_Data->yaw);
#endif

}
 8006df2:	bf00      	nop
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	f3af 8000 	nop.w
 8006e00:	00000000 	.word	0x00000000
 8006e04:	40506000 	.word	0x40506000

08006e08 <gyro_calibrate>:

void gyro_calibrate (I2C_HandleTypeDef *hi2c , MPU_Gyro_calib_t * Calib_Data){
 8006e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e0c:	b094      	sub	sp, #80	; 0x50
 8006e0e:	af04      	add	r7, sp, #16
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
	uint8_t data [6];
	int16_t gyro_x = 0 ;
 8006e14:	2300      	movs	r3, #0
 8006e16:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyro_y = 0 ;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t gyro_z = 0 ;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	843b      	strh	r3, [r7, #32]

	float pitch , yaw , roll ;
	double pitch_cal =  0, yaw_cal =  0, roll_cal = 0;
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,16000  );
 8006e44:	4b8a      	ldr	r3, [pc, #552]	; (8007070 <gyro_calibrate+0x268>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8006e4c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8006e4e:	210c      	movs	r1, #12
 8006e50:	4887      	ldr	r0, [pc, #540]	; (8007070 <gyro_calibrate+0x268>)
 8006e52:	f7fe faa5 	bl	80053a0 <HAL_TIM_PWM_Start>
	printf("/////////// CALIBRATING GYRO \\\\\\\\\\\\\\\\\\\\ \n") ;
 8006e56:	4887      	ldr	r0, [pc, #540]	; (8007074 <gyro_calibrate+0x26c>)
 8006e58:	f001 f97a 	bl	8008150 <puts>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e60:	e085      	b.n	8006f6e <gyro_calibrate+0x166>

		// needed to communicate with i2c based devices like gyroscope mpu6050
	   HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	2306      	movs	r3, #6
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2301      	movs	r3, #1
 8006e74:	2243      	movs	r2, #67	; 0x43
 8006e76:	21d0      	movs	r1, #208	; 0xd0
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fc fa33 	bl	80032e4 <HAL_I2C_Mem_Read>

	   gyro_x = data[0] << 8 | data[1] ;
 8006e7e:	7b3b      	ldrb	r3, [r7, #12]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b21a      	sxth	r2, r3
 8006e84:	7b7b      	ldrb	r3, [r7, #13]
 8006e86:	b21b      	sxth	r3, r3
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
	   gyro_y = data[2] << 8 | data[3] ;
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	b21a      	sxth	r2, r3
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	b21b      	sxth	r3, r3
 8006e96:	4313      	orrs	r3, r2
 8006e98:	847b      	strh	r3, [r7, #34]	; 0x22
	   gyro_z = data[4] << 8 | data[5] ;
 8006e9a:	7c3b      	ldrb	r3, [r7, #16]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	b21a      	sxth	r2, r3
 8006ea0:	7c7b      	ldrb	r3, [r7, #17]
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	843b      	strh	r3, [r7, #32]

	   pitch = gyro_x  / 65.5 ; // change in x
 8006ea8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7f9 faa9 	bl	8000404 <__aeabi_i2d>
 8006eb2:	a36d      	add	r3, pc, #436	; (adr r3, 8007068 <gyro_calibrate+0x260>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fc38 	bl	800072c <__aeabi_ddiv>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f7f9 fde0 	bl	8000a88 <__aeabi_d2f>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	61fb      	str	r3, [r7, #28]
	   roll  = gyro_y  / 65.5 ;	// change in y
 8006ecc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7f9 fa97 	bl	8000404 <__aeabi_i2d>
 8006ed6:	a364      	add	r3, pc, #400	; (adr r3, 8007068 <gyro_calibrate+0x260>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 fc26 	bl	800072c <__aeabi_ddiv>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	f7f9 fdce 	bl	8000a88 <__aeabi_d2f>
 8006eec:	4603      	mov	r3, r0
 8006eee:	61bb      	str	r3, [r7, #24]
	   yaw   = gyro_z  / 65.5 ;	// change in z
 8006ef0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7f9 fa85 	bl	8000404 <__aeabi_i2d>
 8006efa:	a35b      	add	r3, pc, #364	; (adr r3, 8007068 <gyro_calibrate+0x260>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f7f9 fc14 	bl	800072c <__aeabi_ddiv>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f7f9 fdbc 	bl	8000a88 <__aeabi_d2f>
 8006f10:	4603      	mov	r3, r0
 8006f12:	617b      	str	r3, [r7, #20]

	   pitch_cal += pitch ;  // this means pitch_cal = pitch + pitch_cal
 8006f14:	69f8      	ldr	r0, [r7, #28]
 8006f16:	f7f9 fa87 	bl	8000428 <__aeabi_f2d>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f22:	f7f9 f923 	bl	800016c <__adddf3>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	   roll_cal += roll ;
 8006f2e:	69b8      	ldr	r0, [r7, #24]
 8006f30:	f7f9 fa7a 	bl	8000428 <__aeabi_f2d>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f3c:	f7f9 f916 	bl	800016c <__adddf3>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	   yaw_cal += yaw ;
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f7f9 fa6d 	bl	8000428 <__aeabi_f2d>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f56:	f7f9 f909 	bl	800016c <__adddf3>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	   HAL_Delay(1) ;
 8006f62:	2001      	movs	r0, #1
 8006f64:	f7fb fcb2 	bl	80028cc <HAL_Delay>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8006f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006f74:	f4ff af75 	bcc.w	8006e62 <gyro_calibrate+0x5a>
	}

	// taking average
	pitch_cal = pitch_cal/ 4000  ;
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <gyro_calibrate+0x270>)
 8006f7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006f82:	f7f9 fbd3 	bl	800072c <__aeabi_ddiv>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	roll_cal  = roll_cal / 4000  ;
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	4b39      	ldr	r3, [pc, #228]	; (8007078 <gyro_calibrate+0x270>)
 8006f94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f98:	f7f9 fbc8 	bl	800072c <__aeabi_ddiv>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	yaw_cal   = yaw_cal  / 4000  ;
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	4b33      	ldr	r3, [pc, #204]	; (8007078 <gyro_calibrate+0x270>)
 8006faa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006fae:	f7f9 fbbd 	bl	800072c <__aeabi_ddiv>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	printf("cal values are  %lf , %lf , %lf \n" , pitch_cal , roll_cal , yaw_cal);
 8006fba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8006fca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fce:	482b      	ldr	r0, [pc, #172]	; (800707c <gyro_calibrate+0x274>)
 8006fd0:	f001 f858 	bl	8008084 <iprintf>

	Calib_Data->pitch = pitch_cal ;
 8006fd4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006fd8:	f7f9 fd56 	bl	8000a88 <__aeabi_d2f>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	601a      	str	r2, [r3, #0]
	Calib_Data->roll  = roll_cal;
 8006fe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fe6:	f7f9 fd4f 	bl	8000a88 <__aeabi_d2f>
 8006fea:	4602      	mov	r2, r0
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	605a      	str	r2, [r3, #4]
	Calib_Data->yaw   = yaw_cal;
 8006ff0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006ff4:	f7f9 fd48 	bl	8000a88 <__aeabi_d2f>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]

	printf("cal values are =  pitch : %lf ,roll: %lf ,yaw: %lf \n" , Calib_Data->pitch ,Calib_Data->roll , Calib_Data->yaw);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 fa10 	bl	8000428 <__aeabi_f2d>
 8007008:	4680      	mov	r8, r0
 800700a:	4689      	mov	r9, r1
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4618      	mov	r0, r3
 8007012:	f7f9 fa09 	bl	8000428 <__aeabi_f2d>
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 fa02 	bl	8000428 <__aeabi_f2d>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800702c:	e9cd 4500 	strd	r4, r5, [sp]
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	4812      	ldr	r0, [pc, #72]	; (8007080 <gyro_calibrate+0x278>)
 8007036:	f001 f825 	bl	8008084 <iprintf>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <gyro_calibrate+0x268>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <gyro_calibrate+0x268>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800704a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 800704c:	2108      	movs	r1, #8
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <gyro_calibrate+0x268>)
 8007050:	f7fe f9a6 	bl	80053a0 <HAL_TIM_PWM_Start>
printf("/////////////// DONE GYRO CALIBRATION \\\\\\\\\\\\\\\\\\\\ \n") ;
 8007054:	480b      	ldr	r0, [pc, #44]	; (8007084 <gyro_calibrate+0x27c>)
 8007056:	f001 f87b 	bl	8008150 <puts>

	}
	printf("[DEBUG] ///////// SAMPLE DATA END \\\\\\\\\\\ \n") ;
#endif

}
 800705a:	bf00      	nop
 800705c:	3740      	adds	r7, #64	; 0x40
 800705e:	46bd      	mov	sp, r7
 8007060:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007064:	f3af 8000 	nop.w
 8007068:	00000000 	.word	0x00000000
 800706c:	40506000 	.word	0x40506000
 8007070:	20000334 	.word	0x20000334
 8007074:	0800ac2c 	.word	0x0800ac2c
 8007078:	40af4000 	.word	0x40af4000
 800707c:	0800ac58 	.word	0x0800ac58
 8007080:	0800ac7c 	.word	0x0800ac7c
 8007084:	0800acb4 	.word	0x0800acb4

08007088 <pid_init>:
 */

#include "pid.h"


void pid_init(pidController_t* pidController) {
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
pidController->prevErrro      = 0 ;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	615a      	str	r2, [r3, #20]
pidController->prevMeasurment = 0 ;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	619a      	str	r2, [r3, #24]
pidController->intgrator 	  = 0 ;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	61da      	str	r2, [r3, #28]
pidController->derevative 	  = 0 ;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	621a      	str	r2, [r3, #32]
pidController->out      	  = 0 ;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	635a      	str	r2, [r3, #52]	; 0x34

}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <pid_update>:


float pid_update(pidController_t* pidController , float setPoint ,float measuremnt ) {
 80070c2:	b5b0      	push	{r4, r5, r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]

	// get the Error
	float error = setPoint - measuremnt ;
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	68b8      	ldr	r0, [r7, #8]
 80070d2:	f7f9 fd2d 	bl	8000b30 <__aeabi_fsub>
 80070d6:	4603      	mov	r3, r0
 80070d8:	617b      	str	r3, [r7, #20]
	// proportional controller
	float proportional = error*pidController->p_gain ;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4619      	mov	r1, r3
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f7f9 fe2f 	bl	8000d44 <__aeabi_fmul>
 80070e6:	4603      	mov	r3, r0
 80070e8:	613b      	str	r3, [r7, #16]

	// integrator controller
	pidController->intgrator = pidController->intgrator + ((pidController->i_gain*pidController->sampling_time)/ 2)*(error + pidController->prevErrro) ;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	69dc      	ldr	r4, [r3, #28]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7f9 fe23 	bl	8000d44 <__aeabi_fmul>
 80070fe:	4603      	mov	r3, r0
 8007100:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007104:	4618      	mov	r0, r3
 8007106:	f7f9 fed1 	bl	8000eac <__aeabi_fdiv>
 800710a:	4603      	mov	r3, r0
 800710c:	461d      	mov	r5, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	6979      	ldr	r1, [r7, #20]
 8007114:	4618      	mov	r0, r3
 8007116:	f7f9 fd0d 	bl	8000b34 <__addsf3>
 800711a:	4603      	mov	r3, r0
 800711c:	4619      	mov	r1, r3
 800711e:	4628      	mov	r0, r5
 8007120:	f7f9 fe10 	bl	8000d44 <__aeabi_fmul>
 8007124:	4603      	mov	r3, r0
 8007126:	4619      	mov	r1, r3
 8007128:	4620      	mov	r0, r4
 800712a:	f7f9 fd03 	bl	8000b34 <__addsf3>
 800712e:	4603      	mov	r3, r0
 8007130:	461a      	mov	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61da      	str	r2, [r3, #28]
	// integral anti wind up
	// clamping the integrator
	if (pidController->intgrator  > pidController->limitMaxInt ) {
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	69da      	ldr	r2, [r3, #28]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7f9 ffbb 	bl	80010bc <__aeabi_fcmpgt>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <pid_update+0x94>
		pidController->intgrator = pidController->limitMaxInt  ;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	61da      	str	r2, [r3, #28]
 8007154:	e00e      	b.n	8007174 <pid_update+0xb2>
	}else if (pidController->intgrator < pidController->limitMinInt) {
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7f9 ff8d 	bl	8001080 <__aeabi_fcmplt>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <pid_update+0xb2>
		pidController->intgrator = pidController->limitMinInt ;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	61da      	str	r2, [r3, #28]
	}

	// Derivative controller using derevative on measurement
	pidController->derevative = -((2*pidController->d_gain)*(measuremnt -pidController->prevMeasurment)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4619      	mov	r1, r3
 800717a:	4618      	mov	r0, r3
 800717c:	f7f9 fcda 	bl	8000b34 <__addsf3>
 8007180:	4603      	mov	r3, r0
 8007182:	461c      	mov	r4, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7f9 fcd0 	bl	8000b30 <__aeabi_fsub>
 8007190:	4603      	mov	r3, r0
 8007192:	4619      	mov	r1, r3
 8007194:	4620      	mov	r0, r4
 8007196:	f7f9 fdd5 	bl	8000d44 <__aeabi_fmul>
 800719a:	4603      	mov	r3, r0
 800719c:	461d      	mov	r5, r3
								+ pidController->derevative*(2*pidController->filter_sampling_time - pidController->sampling_time))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1c      	ldr	r4, [r3, #32]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	4619      	mov	r1, r3
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7f9 fcc3 	bl	8000b34 <__addsf3>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7f9 fcb9 	bl	8000b30 <__aeabi_fsub>
 80071be:	4603      	mov	r3, r0
 80071c0:	4619      	mov	r1, r3
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7f9 fdbe 	bl	8000d44 <__aeabi_fmul>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4619      	mov	r1, r3
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7f9 fcb1 	bl	8000b34 <__addsf3>
 80071d2:	4603      	mov	r3, r0
	pidController->derevative = -((2*pidController->d_gain)*(measuremnt -pidController->prevMeasurment)
 80071d4:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
								/ (pidController->sampling_time + 2*pidController->filter_sampling_time) ;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68dd      	ldr	r5, [r3, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	4619      	mov	r1, r3
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7f9 fca6 	bl	8000b34 <__addsf3>
 80071e8:	4603      	mov	r3, r0
 80071ea:	4619      	mov	r1, r3
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7f9 fca1 	bl	8000b34 <__addsf3>
 80071f2:	4603      	mov	r3, r0
 80071f4:	4619      	mov	r1, r3
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7f9 fe58 	bl	8000eac <__aeabi_fdiv>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
	pidController->derevative = -((2*pidController->d_gain)*(measuremnt -pidController->prevMeasurment)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	621a      	str	r2, [r3, #32]

	// compute the final output
	pidController->out = proportional + pidController->intgrator + pidController->derevative ;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	6939      	ldr	r1, [r7, #16]
 800720a:	4618      	mov	r0, r3
 800720c:	f7f9 fc92 	bl	8000b34 <__addsf3>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7f9 fc8a 	bl	8000b34 <__addsf3>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	635a      	str	r2, [r3, #52]	; 0x34

	// set the limits
   if (pidController->out > pidController->limitMax) {
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	4619      	mov	r1, r3
 8007232:	4610      	mov	r0, r2
 8007234:	f7f9 ff42 	bl	80010bc <__aeabi_fcmpgt>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <pid_update+0x186>

		pidController->out = pidController->limitMax;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	635a      	str	r2, [r3, #52]	; 0x34
 8007246:	e00e      	b.n	8007266 <pid_update+0x1a4>

	} else if (pidController->out < pidController->limitMin) {
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7f9 ff14 	bl	8001080 <__aeabi_fcmplt>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <pid_update+0x1a4>

		pidController->out = pidController->limitMin;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	635a      	str	r2, [r3, #52]	; 0x34

	}
pidController->prevErrro = error ;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	615a      	str	r2, [r3, #20]
pidController->prevMeasurment = measuremnt;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	619a      	str	r2, [r3, #24]
 return pidController->out;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bdb0      	pop	{r4, r5, r7, pc}

0800727e <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007290:	b2db      	uxtb	r3, r3
 8007292:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8007294:	2300      	movs	r3, #0
 8007296:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6958      	ldr	r0, [r3, #20]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2200      	movs	r2, #0
 80072a8:	4619      	mov	r1, r3
 80072aa:	f7fb fdc5 	bl	8002e38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6998      	ldr	r0, [r3, #24]
 80072b4:	f107 010f 	add.w	r1, r7, #15
 80072b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072bc:	2201      	movs	r2, #1
 80072be:	f7fd fac1 	bl	8004844 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80072c2:	bf00      	nop
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd fec5 	bl	800505a <HAL_SPI_GetState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d1f6      	bne.n	80072c4 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6998      	ldr	r0, [r3, #24]
 80072dc:	f107 010e 	add.w	r1, r7, #14
 80072e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e4:	2201      	movs	r2, #1
 80072e6:	f7fd fbf0 	bl	8004aca <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80072ea:	bf00      	nop
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd feb1 	bl	800505a <HAL_SPI_GetState>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d1f6      	bne.n	80072ec <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6958      	ldr	r0, [r3, #20]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	b29b      	uxth	r3, r3
 800730c:	2201      	movs	r2, #1
 800730e:	4619      	mov	r1, r3
 8007310:	f7fb fd92 	bl	8002e38 <HAL_GPIO_WritePin>
	return rxByte;
 8007314:	7bbb      	ldrb	r3, [r7, #14]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
 800732a:	4613      	mov	r3, r2
 800732c:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007334:	b2db      	uxtb	r3, r3
 8007336:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6958      	ldr	r0, [r3, #20]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	b29b      	uxth	r3, r3
 8007346:	2200      	movs	r2, #0
 8007348:	4619      	mov	r1, r3
 800734a:	f7fb fd75 	bl	8002e38 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6998      	ldr	r0, [r3, #24]
 8007354:	f107 010f 	add.w	r1, r7, #15
 8007358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800735c:	2201      	movs	r2, #1
 800735e:	f7fd fa71 	bl	8004844 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8007362:	bf00      	nop
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4618      	mov	r0, r3
 800736c:	f7fd fe75 	bl	800505a <HAL_SPI_GetState>
 8007370:	4603      	mov	r3, r0
 8007372:	2b01      	cmp	r3, #1
 8007374:	d1f6      	bne.n	8007364 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6998      	ldr	r0, [r3, #24]
 800737c:	1cb9      	adds	r1, r7, #2
 800737e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007382:	2201      	movs	r2, #1
 8007384:	f7fd fa5e 	bl	8004844 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8007388:	bf00      	nop
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	4618      	mov	r0, r3
 8007392:	f7fd fe62 	bl	800505a <HAL_SPI_GetState>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d1f6      	bne.n	800738a <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6958      	ldr	r0, [r3, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2201      	movs	r2, #1
 80073ac:	4619      	mov	r1, r3
 80073ae:	f7fb fd43 	bl	8002e38 <HAL_GPIO_WritePin>
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <lora_init>:

uint8_t lora_init(lora_t * module){
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6858      	ldr	r0, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	4619      	mov	r1, r3
 80073d6:	f7fb fd2f 	bl	8002e38 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80073da:	200a      	movs	r0, #10
 80073dc:	f7fb fa76 	bl	80028cc <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6858      	ldr	r0, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2201      	movs	r2, #1
 80073f0:	4619      	mov	r1, r3
 80073f2:	f7fb fd21 	bl	8002e38 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80073f6:	200a      	movs	r0, #10
 80073f8:	f7fb fa68 	bl	80028cc <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 80073fc:	2142      	movs	r1, #66	; 0x42
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff ff3d 	bl	800727e <lora_read_reg>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b12      	cmp	r3, #18
 800740c:	d006      	beq.n	800741c <lora_init+0x60>
		printf("%d \n" ,ret );
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	4619      	mov	r1, r3
 8007412:	4820      	ldr	r0, [pc, #128]	; (8007494 <lora_init+0xd8>)
 8007414:	f000 fe36 	bl	8008084 <iprintf>
		return 1;
 8007418:	2301      	movs	r3, #1
 800741a:	e037      	b.n	800748c <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 800741c:	2280      	movs	r2, #128	; 0x80
 800741e:	2101      	movs	r1, #1
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff7c 	bl	800731e <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <lora_init+0xdc>)
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8bf 	bl	80075b8 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800743a:	2200      	movs	r2, #0
 800743c:	210e      	movs	r1, #14
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ff6d 	bl	800731e <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8007444:	2200      	movs	r2, #0
 8007446:	210f      	movs	r1, #15
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff ff68 	bl	800731e <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 800744e:	210c      	movs	r1, #12
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff14 	bl	800727e <lora_read_reg>
 8007456:	4603      	mov	r3, r0
 8007458:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	f043 0303 	orr.w	r3, r3, #3
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	210c      	movs	r1, #12
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff ff59 	bl	800731e <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 800746c:	2204      	movs	r2, #4
 800746e:	2126      	movs	r1, #38	; 0x26
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff54 	bl	800731e <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 8007476:	228f      	movs	r2, #143	; 0x8f
 8007478:	2109      	movs	r1, #9
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff ff4f 	bl	800731e <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8007480:	2281      	movs	r2, #129	; 0x81
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff ff4a 	bl	800731e <lora_write_reg>
	return 0;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	0800ace8 	.word	0x0800ace8
 8007498:	0800ad20 	.word	0x0800ad20

0800749c <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 80074a8:	2112      	movs	r1, #18
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fee7 	bl	800727e <lora_read_reg>
 80074b0:	4603      	mov	r3, r0
 80074b2:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x92);
 80074b4:	2292      	movs	r2, #146	; 0x92
 80074b6:	211d      	movs	r1, #29
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ff30 	bl	800731e <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	2112      	movs	r1, #18
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff ff29 	bl	800731e <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01d      	beq.n	8007512 <lora_prasePacket+0x76>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d118      	bne.n	8007512 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 80074e0:	2113      	movs	r1, #19
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fecb 	bl	800727e <lora_read_reg>
 80074e8:	4603      	mov	r3, r0
 80074ea:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 80074ec:	2110      	movs	r1, #16
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fec5 	bl	800727e <lora_read_reg>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	210d      	movs	r1, #13
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff0f 	bl	800731e <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 8007500:	2281      	movs	r2, #129	; 0x81
 8007502:	2101      	movs	r1, #1
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff0a 	bl	800731e <lora_write_reg>
		packetIndex = 0;
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <lora_prasePacket+0xb4>)
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	e010      	b.n	8007534 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8007512:	2101      	movs	r1, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff feb2 	bl	800727e <lora_read_reg>
 800751a:	4603      	mov	r3, r0
 800751c:	2b86      	cmp	r3, #134	; 0x86
 800751e:	d009      	beq.n	8007534 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8007520:	2200      	movs	r2, #0
 8007522:	210d      	movs	r1, #13
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fefa 	bl	800731e <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800752a:	2286      	movs	r2, #134	; 0x86
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff fef5 	bl	800731e <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <lora_prasePacket+0xa8>
		return -1;
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	e000      	b.n	8007546 <lora_prasePacket+0xaa>
	}
	return packetLength;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	200004fc 	.word	0x200004fc

08007554 <lora_available>:

uint8_t lora_available(lora_t * module){
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 800755c:	2113      	movs	r1, #19
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fe8d 	bl	800727e <lora_read_reg>
 8007564:	4603      	mov	r3, r0
 8007566:	461a      	mov	r2, r3
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <lora_available+0x24>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	b2db      	uxtb	r3, r3
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200004fc 	.word	0x200004fc

0800757c <lora_read>:

uint8_t lora_read(lora_t * module){
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ffe5 	bl	8007554 <lora_available>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <lora_read+0x18>
		return 0;
 8007590:	2300      	movs	r3, #0
 8007592:	e00a      	b.n	80075aa <lora_read+0x2e>
	packetIndex++;
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <lora_read+0x38>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <lora_read+0x38>)
 800759e:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fe6b 	bl	800727e <lora_read_reg>
 80075a8:	4603      	mov	r3, r0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200004fc 	.word	0x200004fc

080075b8 <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80075c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c8:	f04f 0000 	mov.w	r0, #0
 80075cc:	f04f 0100 	mov.w	r1, #0
 80075d0:	04d9      	lsls	r1, r3, #19
 80075d2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80075d6:	04d0      	lsls	r0, r2, #19
 80075d8:	4a19      	ldr	r2, [pc, #100]	; (8007640 <lora_set_frequency+0x88>)
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	f7f9 fdad 	bl	800113c <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 80075ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	0c02      	lsrs	r2, r0, #16
 80075f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80075fc:	0c0b      	lsrs	r3, r1, #16
 80075fe:	b2d3      	uxtb	r3, r2
 8007600:	461a      	mov	r2, r3
 8007602:	2106      	movs	r1, #6
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff fe8a 	bl	800731e <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 800760a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	0a02      	lsrs	r2, r0, #8
 8007618:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800761c:	0a0b      	lsrs	r3, r1, #8
 800761e:	b2d3      	uxtb	r3, r2
 8007620:	461a      	mov	r2, r3
 8007622:	2107      	movs	r1, #7
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7ff fe7a 	bl	800731e <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800762a:	7c3b      	ldrb	r3, [r7, #16]
 800762c:	461a      	mov	r2, r3
 800762e:	2108      	movs	r1, #8
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fe74 	bl	800731e <lora_write_reg>
}
 8007636:	bf00      	nop
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	01e84800 	.word	0x01e84800

08007644 <__cvt>:
 8007644:	2b00      	cmp	r3, #0
 8007646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764a:	461f      	mov	r7, r3
 800764c:	bfbb      	ittet	lt
 800764e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007652:	461f      	movlt	r7, r3
 8007654:	2300      	movge	r3, #0
 8007656:	232d      	movlt	r3, #45	; 0x2d
 8007658:	b088      	sub	sp, #32
 800765a:	4614      	mov	r4, r2
 800765c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800765e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007660:	7013      	strb	r3, [r2, #0]
 8007662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007664:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007668:	f023 0820 	bic.w	r8, r3, #32
 800766c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007670:	d005      	beq.n	800767e <__cvt+0x3a>
 8007672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007676:	d100      	bne.n	800767a <__cvt+0x36>
 8007678:	3501      	adds	r5, #1
 800767a:	2302      	movs	r3, #2
 800767c:	e000      	b.n	8007680 <__cvt+0x3c>
 800767e:	2303      	movs	r3, #3
 8007680:	aa07      	add	r2, sp, #28
 8007682:	9204      	str	r2, [sp, #16]
 8007684:	aa06      	add	r2, sp, #24
 8007686:	e9cd a202 	strd	sl, r2, [sp, #8]
 800768a:	e9cd 3500 	strd	r3, r5, [sp]
 800768e:	4622      	mov	r2, r4
 8007690:	463b      	mov	r3, r7
 8007692:	f000 ff65 	bl	8008560 <_dtoa_r>
 8007696:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800769a:	4606      	mov	r6, r0
 800769c:	d102      	bne.n	80076a4 <__cvt+0x60>
 800769e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076a0:	07db      	lsls	r3, r3, #31
 80076a2:	d522      	bpl.n	80076ea <__cvt+0xa6>
 80076a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076a8:	eb06 0905 	add.w	r9, r6, r5
 80076ac:	d110      	bne.n	80076d0 <__cvt+0x8c>
 80076ae:	7833      	ldrb	r3, [r6, #0]
 80076b0:	2b30      	cmp	r3, #48	; 0x30
 80076b2:	d10a      	bne.n	80076ca <__cvt+0x86>
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	4620      	mov	r0, r4
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 f974 	bl	80009a8 <__aeabi_dcmpeq>
 80076c0:	b918      	cbnz	r0, 80076ca <__cvt+0x86>
 80076c2:	f1c5 0501 	rsb	r5, r5, #1
 80076c6:	f8ca 5000 	str.w	r5, [sl]
 80076ca:	f8da 3000 	ldr.w	r3, [sl]
 80076ce:	4499      	add	r9, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	4620      	mov	r0, r4
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 f966 	bl	80009a8 <__aeabi_dcmpeq>
 80076dc:	b108      	cbz	r0, 80076e2 <__cvt+0x9e>
 80076de:	f8cd 901c 	str.w	r9, [sp, #28]
 80076e2:	2230      	movs	r2, #48	; 0x30
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	454b      	cmp	r3, r9
 80076e8:	d307      	bcc.n	80076fa <__cvt+0xb6>
 80076ea:	4630      	mov	r0, r6
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80076f0:	1b9b      	subs	r3, r3, r6
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	b008      	add	sp, #32
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	9107      	str	r1, [sp, #28]
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e7f0      	b.n	80076e4 <__cvt+0xa0>

08007702 <__exponent>:
 8007702:	4603      	mov	r3, r0
 8007704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	f803 2b02 	strb.w	r2, [r3], #2
 800770c:	bfb6      	itet	lt
 800770e:	222d      	movlt	r2, #45	; 0x2d
 8007710:	222b      	movge	r2, #43	; 0x2b
 8007712:	4249      	neglt	r1, r1
 8007714:	2909      	cmp	r1, #9
 8007716:	7042      	strb	r2, [r0, #1]
 8007718:	dd2a      	ble.n	8007770 <__exponent+0x6e>
 800771a:	f10d 0207 	add.w	r2, sp, #7
 800771e:	4617      	mov	r7, r2
 8007720:	260a      	movs	r6, #10
 8007722:	fb91 f5f6 	sdiv	r5, r1, r6
 8007726:	4694      	mov	ip, r2
 8007728:	fb06 1415 	mls	r4, r6, r5, r1
 800772c:	3430      	adds	r4, #48	; 0x30
 800772e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007732:	460c      	mov	r4, r1
 8007734:	2c63      	cmp	r4, #99	; 0x63
 8007736:	4629      	mov	r1, r5
 8007738:	f102 32ff 	add.w	r2, r2, #4294967295
 800773c:	dcf1      	bgt.n	8007722 <__exponent+0x20>
 800773e:	3130      	adds	r1, #48	; 0x30
 8007740:	f1ac 0402 	sub.w	r4, ip, #2
 8007744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007748:	4622      	mov	r2, r4
 800774a:	1c41      	adds	r1, r0, #1
 800774c:	42ba      	cmp	r2, r7
 800774e:	d30a      	bcc.n	8007766 <__exponent+0x64>
 8007750:	f10d 0209 	add.w	r2, sp, #9
 8007754:	eba2 020c 	sub.w	r2, r2, ip
 8007758:	42bc      	cmp	r4, r7
 800775a:	bf88      	it	hi
 800775c:	2200      	movhi	r2, #0
 800775e:	4413      	add	r3, r2
 8007760:	1a18      	subs	r0, r3, r0
 8007762:	b003      	add	sp, #12
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007766:	f812 5b01 	ldrb.w	r5, [r2], #1
 800776a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800776e:	e7ed      	b.n	800774c <__exponent+0x4a>
 8007770:	2330      	movs	r3, #48	; 0x30
 8007772:	3130      	adds	r1, #48	; 0x30
 8007774:	7083      	strb	r3, [r0, #2]
 8007776:	70c1      	strb	r1, [r0, #3]
 8007778:	1d03      	adds	r3, r0, #4
 800777a:	e7f1      	b.n	8007760 <__exponent+0x5e>

0800777c <_printf_float>:
 800777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	b091      	sub	sp, #68	; 0x44
 8007782:	460c      	mov	r4, r1
 8007784:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007788:	4616      	mov	r6, r2
 800778a:	461f      	mov	r7, r3
 800778c:	4605      	mov	r5, r0
 800778e:	f000 fdd7 	bl	8008340 <_localeconv_r>
 8007792:	6803      	ldr	r3, [r0, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	9309      	str	r3, [sp, #36]	; 0x24
 8007798:	f7f8 fcda 	bl	8000150 <strlen>
 800779c:	2300      	movs	r3, #0
 800779e:	930e      	str	r3, [sp, #56]	; 0x38
 80077a0:	f8d8 3000 	ldr.w	r3, [r8]
 80077a4:	900a      	str	r0, [sp, #40]	; 0x28
 80077a6:	3307      	adds	r3, #7
 80077a8:	f023 0307 	bic.w	r3, r3, #7
 80077ac:	f103 0208 	add.w	r2, r3, #8
 80077b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80077b4:	f8d4 b000 	ldr.w	fp, [r4]
 80077b8:	f8c8 2000 	str.w	r2, [r8]
 80077bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 80077c0:	4652      	mov	r2, sl
 80077c2:	4643      	mov	r3, r8
 80077c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80077cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80077ce:	f04f 32ff 	mov.w	r2, #4294967295
 80077d2:	4650      	mov	r0, sl
 80077d4:	4b9c      	ldr	r3, [pc, #624]	; (8007a48 <_printf_float+0x2cc>)
 80077d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077d8:	f7f9 f918 	bl	8000a0c <__aeabi_dcmpun>
 80077dc:	bb70      	cbnz	r0, 800783c <_printf_float+0xc0>
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	4650      	mov	r0, sl
 80077e4:	4b98      	ldr	r3, [pc, #608]	; (8007a48 <_printf_float+0x2cc>)
 80077e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077e8:	f7f9 f8f2 	bl	80009d0 <__aeabi_dcmple>
 80077ec:	bb30      	cbnz	r0, 800783c <_printf_float+0xc0>
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	4650      	mov	r0, sl
 80077f4:	4641      	mov	r1, r8
 80077f6:	f7f9 f8e1 	bl	80009bc <__aeabi_dcmplt>
 80077fa:	b110      	cbz	r0, 8007802 <_printf_float+0x86>
 80077fc:	232d      	movs	r3, #45	; 0x2d
 80077fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007802:	4a92      	ldr	r2, [pc, #584]	; (8007a4c <_printf_float+0x2d0>)
 8007804:	4b92      	ldr	r3, [pc, #584]	; (8007a50 <_printf_float+0x2d4>)
 8007806:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800780a:	bf94      	ite	ls
 800780c:	4690      	movls	r8, r2
 800780e:	4698      	movhi	r8, r3
 8007810:	2303      	movs	r3, #3
 8007812:	f04f 0a00 	mov.w	sl, #0
 8007816:	6123      	str	r3, [r4, #16]
 8007818:	f02b 0304 	bic.w	r3, fp, #4
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	4633      	mov	r3, r6
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	9700      	str	r7, [sp, #0]
 8007826:	aa0f      	add	r2, sp, #60	; 0x3c
 8007828:	f000 f9d6 	bl	8007bd8 <_printf_common>
 800782c:	3001      	adds	r0, #1
 800782e:	f040 8090 	bne.w	8007952 <_printf_float+0x1d6>
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	b011      	add	sp, #68	; 0x44
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	4652      	mov	r2, sl
 800783e:	4643      	mov	r3, r8
 8007840:	4650      	mov	r0, sl
 8007842:	4641      	mov	r1, r8
 8007844:	f7f9 f8e2 	bl	8000a0c <__aeabi_dcmpun>
 8007848:	b148      	cbz	r0, 800785e <_printf_float+0xe2>
 800784a:	f1b8 0f00 	cmp.w	r8, #0
 800784e:	bfb8      	it	lt
 8007850:	232d      	movlt	r3, #45	; 0x2d
 8007852:	4a80      	ldr	r2, [pc, #512]	; (8007a54 <_printf_float+0x2d8>)
 8007854:	bfb8      	it	lt
 8007856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800785a:	4b7f      	ldr	r3, [pc, #508]	; (8007a58 <_printf_float+0x2dc>)
 800785c:	e7d3      	b.n	8007806 <_printf_float+0x8a>
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	d142      	bne.n	80078ee <_printf_float+0x172>
 8007868:	2306      	movs	r3, #6
 800786a:	6063      	str	r3, [r4, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	9206      	str	r2, [sp, #24]
 8007870:	aa0e      	add	r2, sp, #56	; 0x38
 8007872:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007876:	aa0d      	add	r2, sp, #52	; 0x34
 8007878:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800787c:	9203      	str	r2, [sp, #12]
 800787e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007882:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	4652      	mov	r2, sl
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	4628      	mov	r0, r5
 8007890:	4643      	mov	r3, r8
 8007892:	910b      	str	r1, [sp, #44]	; 0x2c
 8007894:	f7ff fed6 	bl	8007644 <__cvt>
 8007898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800789a:	4680      	mov	r8, r0
 800789c:	2947      	cmp	r1, #71	; 0x47
 800789e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078a0:	d108      	bne.n	80078b4 <_printf_float+0x138>
 80078a2:	1cc8      	adds	r0, r1, #3
 80078a4:	db02      	blt.n	80078ac <_printf_float+0x130>
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	4299      	cmp	r1, r3
 80078aa:	dd40      	ble.n	800792e <_printf_float+0x1b2>
 80078ac:	f1a9 0902 	sub.w	r9, r9, #2
 80078b0:	fa5f f989 	uxtb.w	r9, r9
 80078b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078b8:	d81f      	bhi.n	80078fa <_printf_float+0x17e>
 80078ba:	464a      	mov	r2, r9
 80078bc:	3901      	subs	r1, #1
 80078be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078c2:	910d      	str	r1, [sp, #52]	; 0x34
 80078c4:	f7ff ff1d 	bl	8007702 <__exponent>
 80078c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ca:	4682      	mov	sl, r0
 80078cc:	1813      	adds	r3, r2, r0
 80078ce:	2a01      	cmp	r2, #1
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	dc02      	bgt.n	80078da <_printf_float+0x15e>
 80078d4:	6822      	ldr	r2, [r4, #0]
 80078d6:	07d2      	lsls	r2, r2, #31
 80078d8:	d501      	bpl.n	80078de <_printf_float+0x162>
 80078da:	3301      	adds	r3, #1
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d09b      	beq.n	800781e <_printf_float+0xa2>
 80078e6:	232d      	movs	r3, #45	; 0x2d
 80078e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ec:	e797      	b.n	800781e <_printf_float+0xa2>
 80078ee:	2947      	cmp	r1, #71	; 0x47
 80078f0:	d1bc      	bne.n	800786c <_printf_float+0xf0>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1ba      	bne.n	800786c <_printf_float+0xf0>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e7b7      	b.n	800786a <_printf_float+0xee>
 80078fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80078fe:	d118      	bne.n	8007932 <_printf_float+0x1b6>
 8007900:	2900      	cmp	r1, #0
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	dd0b      	ble.n	800791e <_printf_float+0x1a2>
 8007906:	6121      	str	r1, [r4, #16]
 8007908:	b913      	cbnz	r3, 8007910 <_printf_float+0x194>
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	07d0      	lsls	r0, r2, #31
 800790e:	d502      	bpl.n	8007916 <_printf_float+0x19a>
 8007910:	3301      	adds	r3, #1
 8007912:	440b      	add	r3, r1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	f04f 0a00 	mov.w	sl, #0
 800791a:	65a1      	str	r1, [r4, #88]	; 0x58
 800791c:	e7df      	b.n	80078de <_printf_float+0x162>
 800791e:	b913      	cbnz	r3, 8007926 <_printf_float+0x1aa>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	07d2      	lsls	r2, r2, #31
 8007924:	d501      	bpl.n	800792a <_printf_float+0x1ae>
 8007926:	3302      	adds	r3, #2
 8007928:	e7f4      	b.n	8007914 <_printf_float+0x198>
 800792a:	2301      	movs	r3, #1
 800792c:	e7f2      	b.n	8007914 <_printf_float+0x198>
 800792e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007934:	4299      	cmp	r1, r3
 8007936:	db05      	blt.n	8007944 <_printf_float+0x1c8>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	6121      	str	r1, [r4, #16]
 800793c:	07d8      	lsls	r0, r3, #31
 800793e:	d5ea      	bpl.n	8007916 <_printf_float+0x19a>
 8007940:	1c4b      	adds	r3, r1, #1
 8007942:	e7e7      	b.n	8007914 <_printf_float+0x198>
 8007944:	2900      	cmp	r1, #0
 8007946:	bfcc      	ite	gt
 8007948:	2201      	movgt	r2, #1
 800794a:	f1c1 0202 	rsble	r2, r1, #2
 800794e:	4413      	add	r3, r2
 8007950:	e7e0      	b.n	8007914 <_printf_float+0x198>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	055a      	lsls	r2, r3, #21
 8007956:	d407      	bmi.n	8007968 <_printf_float+0x1ec>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	4642      	mov	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d12b      	bne.n	80079be <_printf_float+0x242>
 8007966:	e764      	b.n	8007832 <_printf_float+0xb6>
 8007968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800796c:	f240 80dd 	bls.w	8007b2a <_printf_float+0x3ae>
 8007970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	f7f9 f816 	bl	80009a8 <__aeabi_dcmpeq>
 800797c:	2800      	cmp	r0, #0
 800797e:	d033      	beq.n	80079e8 <_printf_float+0x26c>
 8007980:	2301      	movs	r3, #1
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	4a35      	ldr	r2, [pc, #212]	; (8007a5c <_printf_float+0x2e0>)
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f af51 	beq.w	8007832 <_printf_float+0xb6>
 8007990:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007994:	429a      	cmp	r2, r3
 8007996:	db02      	blt.n	800799e <_printf_float+0x222>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07d8      	lsls	r0, r3, #31
 800799c:	d50f      	bpl.n	80079be <_printf_float+0x242>
 800799e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f af42 	beq.w	8007832 <_printf_float+0xb6>
 80079ae:	f04f 0800 	mov.w	r8, #0
 80079b2:	f104 091a 	add.w	r9, r4, #26
 80079b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b8:	3b01      	subs	r3, #1
 80079ba:	4543      	cmp	r3, r8
 80079bc:	dc09      	bgt.n	80079d2 <_printf_float+0x256>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	079b      	lsls	r3, r3, #30
 80079c2:	f100 8104 	bmi.w	8007bce <_printf_float+0x452>
 80079c6:	68e0      	ldr	r0, [r4, #12]
 80079c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079ca:	4298      	cmp	r0, r3
 80079cc:	bfb8      	it	lt
 80079ce:	4618      	movlt	r0, r3
 80079d0:	e731      	b.n	8007836 <_printf_float+0xba>
 80079d2:	2301      	movs	r3, #1
 80079d4:	464a      	mov	r2, r9
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	f43f af28 	beq.w	8007832 <_printf_float+0xb6>
 80079e2:	f108 0801 	add.w	r8, r8, #1
 80079e6:	e7e6      	b.n	80079b6 <_printf_float+0x23a>
 80079e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dc38      	bgt.n	8007a60 <_printf_float+0x2e4>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <_printf_float+0x2e0>)
 80079f6:	47b8      	blx	r7
 80079f8:	3001      	adds	r0, #1
 80079fa:	f43f af1a 	beq.w	8007832 <_printf_float+0xb6>
 80079fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d102      	bne.n	8007a0c <_printf_float+0x290>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	07d9      	lsls	r1, r3, #31
 8007a0a:	d5d8      	bpl.n	80079be <_printf_float+0x242>
 8007a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af0b 	beq.w	8007832 <_printf_float+0xb6>
 8007a1c:	f04f 0900 	mov.w	r9, #0
 8007a20:	f104 0a1a 	add.w	sl, r4, #26
 8007a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a26:	425b      	negs	r3, r3
 8007a28:	454b      	cmp	r3, r9
 8007a2a:	dc01      	bgt.n	8007a30 <_printf_float+0x2b4>
 8007a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a2e:	e794      	b.n	800795a <_printf_float+0x1de>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4652      	mov	r2, sl
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f aef9 	beq.w	8007832 <_printf_float+0xb6>
 8007a40:	f109 0901 	add.w	r9, r9, #1
 8007a44:	e7ee      	b.n	8007a24 <_printf_float+0x2a8>
 8007a46:	bf00      	nop
 8007a48:	7fefffff 	.word	0x7fefffff
 8007a4c:	0800ad40 	.word	0x0800ad40
 8007a50:	0800ad44 	.word	0x0800ad44
 8007a54:	0800ad48 	.word	0x0800ad48
 8007a58:	0800ad4c 	.word	0x0800ad4c
 8007a5c:	0800ad50 	.word	0x0800ad50
 8007a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bfa8      	it	ge
 8007a68:	461a      	movge	r2, r3
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	4691      	mov	r9, r2
 8007a6e:	dc37      	bgt.n	8007ae0 <_printf_float+0x364>
 8007a70:	f04f 0b00 	mov.w	fp, #0
 8007a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a78:	f104 021a 	add.w	r2, r4, #26
 8007a7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a80:	ebaa 0309 	sub.w	r3, sl, r9
 8007a84:	455b      	cmp	r3, fp
 8007a86:	dc33      	bgt.n	8007af0 <_printf_float+0x374>
 8007a88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	db3b      	blt.n	8007b08 <_printf_float+0x38c>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07da      	lsls	r2, r3, #31
 8007a94:	d438      	bmi.n	8007b08 <_printf_float+0x38c>
 8007a96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a9a:	eba2 0903 	sub.w	r9, r2, r3
 8007a9e:	eba2 020a 	sub.w	r2, r2, sl
 8007aa2:	4591      	cmp	r9, r2
 8007aa4:	bfa8      	it	ge
 8007aa6:	4691      	movge	r9, r2
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	dc34      	bgt.n	8007b18 <_printf_float+0x39c>
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ab6:	f104 0a1a 	add.w	sl, r4, #26
 8007aba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	eba3 0309 	sub.w	r3, r3, r9
 8007ac4:	4543      	cmp	r3, r8
 8007ac6:	f77f af7a 	ble.w	80079be <_printf_float+0x242>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4652      	mov	r2, sl
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f aeac 	beq.w	8007832 <_printf_float+0xb6>
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	e7ec      	b.n	8007aba <_printf_float+0x33e>
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1c0      	bne.n	8007a70 <_printf_float+0x2f4>
 8007aee:	e6a0      	b.n	8007832 <_printf_float+0xb6>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4631      	mov	r1, r6
 8007af4:	4628      	mov	r0, r5
 8007af6:	920b      	str	r2, [sp, #44]	; 0x2c
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f ae99 	beq.w	8007832 <_printf_float+0xb6>
 8007b00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b02:	f10b 0b01 	add.w	fp, fp, #1
 8007b06:	e7b9      	b.n	8007a7c <_printf_float+0x300>
 8007b08:	4631      	mov	r1, r6
 8007b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1bf      	bne.n	8007a96 <_printf_float+0x31a>
 8007b16:	e68c      	b.n	8007832 <_printf_float+0xb6>
 8007b18:	464b      	mov	r3, r9
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	eb08 020a 	add.w	r2, r8, sl
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	d1c2      	bne.n	8007aae <_printf_float+0x332>
 8007b28:	e683      	b.n	8007832 <_printf_float+0xb6>
 8007b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b2c:	2a01      	cmp	r2, #1
 8007b2e:	dc01      	bgt.n	8007b34 <_printf_float+0x3b8>
 8007b30:	07db      	lsls	r3, r3, #31
 8007b32:	d539      	bpl.n	8007ba8 <_printf_float+0x42c>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4642      	mov	r2, r8
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f ae77 	beq.w	8007832 <_printf_float+0xb6>
 8007b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f ae6f 	beq.w	8007832 <_printf_float+0xb6>
 8007b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007b60:	f7f8 ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8007b64:	b9d8      	cbnz	r0, 8007b9e <_printf_float+0x422>
 8007b66:	f109 33ff 	add.w	r3, r9, #4294967295
 8007b6a:	f108 0201 	add.w	r2, r8, #1
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	d10e      	bne.n	8007b96 <_printf_float+0x41a>
 8007b78:	e65b      	b.n	8007832 <_printf_float+0xb6>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	f43f ae54 	beq.w	8007832 <_printf_float+0xb6>
 8007b8a:	f108 0801 	add.w	r8, r8, #1
 8007b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b90:	3b01      	subs	r3, #1
 8007b92:	4543      	cmp	r3, r8
 8007b94:	dcf1      	bgt.n	8007b7a <_printf_float+0x3fe>
 8007b96:	4653      	mov	r3, sl
 8007b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b9c:	e6de      	b.n	800795c <_printf_float+0x1e0>
 8007b9e:	f04f 0800 	mov.w	r8, #0
 8007ba2:	f104 091a 	add.w	r9, r4, #26
 8007ba6:	e7f2      	b.n	8007b8e <_printf_float+0x412>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4642      	mov	r2, r8
 8007bac:	e7df      	b.n	8007b6e <_printf_float+0x3f2>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	464a      	mov	r2, r9
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b8      	blx	r7
 8007bb8:	3001      	adds	r0, #1
 8007bba:	f43f ae3a 	beq.w	8007832 <_printf_float+0xb6>
 8007bbe:	f108 0801 	add.w	r8, r8, #1
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007bc6:	1a5b      	subs	r3, r3, r1
 8007bc8:	4543      	cmp	r3, r8
 8007bca:	dcf0      	bgt.n	8007bae <_printf_float+0x432>
 8007bcc:	e6fb      	b.n	80079c6 <_printf_float+0x24a>
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	f104 0919 	add.w	r9, r4, #25
 8007bd6:	e7f4      	b.n	8007bc2 <_printf_float+0x446>

08007bd8 <_printf_common>:
 8007bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	4616      	mov	r6, r2
 8007bde:	4699      	mov	r9, r3
 8007be0:	688a      	ldr	r2, [r1, #8]
 8007be2:	690b      	ldr	r3, [r1, #16]
 8007be4:	4607      	mov	r7, r0
 8007be6:	4293      	cmp	r3, r2
 8007be8:	bfb8      	it	lt
 8007bea:	4613      	movlt	r3, r2
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bf8:	b10a      	cbz	r2, 8007bfe <_printf_common+0x26>
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	0699      	lsls	r1, r3, #26
 8007c02:	bf42      	ittt	mi
 8007c04:	6833      	ldrmi	r3, [r6, #0]
 8007c06:	3302      	addmi	r3, #2
 8007c08:	6033      	strmi	r3, [r6, #0]
 8007c0a:	6825      	ldr	r5, [r4, #0]
 8007c0c:	f015 0506 	ands.w	r5, r5, #6
 8007c10:	d106      	bne.n	8007c20 <_printf_common+0x48>
 8007c12:	f104 0a19 	add.w	sl, r4, #25
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	6832      	ldr	r2, [r6, #0]
 8007c1a:	1a9b      	subs	r3, r3, r2
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dc2b      	bgt.n	8007c78 <_printf_common+0xa0>
 8007c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c24:	1e13      	subs	r3, r2, #0
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	bf18      	it	ne
 8007c2a:	2301      	movne	r3, #1
 8007c2c:	0692      	lsls	r2, r2, #26
 8007c2e:	d430      	bmi.n	8007c92 <_printf_common+0xba>
 8007c30:	4649      	mov	r1, r9
 8007c32:	4638      	mov	r0, r7
 8007c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d023      	beq.n	8007c86 <_printf_common+0xae>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	6922      	ldr	r2, [r4, #16]
 8007c42:	f003 0306 	and.w	r3, r3, #6
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	bf14      	ite	ne
 8007c4a:	2500      	movne	r5, #0
 8007c4c:	6833      	ldreq	r3, [r6, #0]
 8007c4e:	f04f 0600 	mov.w	r6, #0
 8007c52:	bf08      	it	eq
 8007c54:	68e5      	ldreq	r5, [r4, #12]
 8007c56:	f104 041a 	add.w	r4, r4, #26
 8007c5a:	bf08      	it	eq
 8007c5c:	1aed      	subeq	r5, r5, r3
 8007c5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007c62:	bf08      	it	eq
 8007c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bfc4      	itt	gt
 8007c6c:	1a9b      	subgt	r3, r3, r2
 8007c6e:	18ed      	addgt	r5, r5, r3
 8007c70:	42b5      	cmp	r5, r6
 8007c72:	d11a      	bne.n	8007caa <_printf_common+0xd2>
 8007c74:	2000      	movs	r0, #0
 8007c76:	e008      	b.n	8007c8a <_printf_common+0xb2>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	4638      	mov	r0, r7
 8007c80:	47c0      	blx	r8
 8007c82:	3001      	adds	r0, #1
 8007c84:	d103      	bne.n	8007c8e <_printf_common+0xb6>
 8007c86:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8e:	3501      	adds	r5, #1
 8007c90:	e7c1      	b.n	8007c16 <_printf_common+0x3e>
 8007c92:	2030      	movs	r0, #48	; 0x30
 8007c94:	18e1      	adds	r1, r4, r3
 8007c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ca0:	4422      	add	r2, r4
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ca8:	e7c2      	b.n	8007c30 <_printf_common+0x58>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4622      	mov	r2, r4
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	47c0      	blx	r8
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d0e6      	beq.n	8007c86 <_printf_common+0xae>
 8007cb8:	3601      	adds	r6, #1
 8007cba:	e7d9      	b.n	8007c70 <_printf_common+0x98>

08007cbc <_printf_i>:
 8007cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	7e0f      	ldrb	r7, [r1, #24]
 8007cc2:	4691      	mov	r9, r2
 8007cc4:	2f78      	cmp	r7, #120	; 0x78
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	460c      	mov	r4, r1
 8007cca:	469a      	mov	sl, r3
 8007ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cd2:	d807      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cd4:	2f62      	cmp	r7, #98	; 0x62
 8007cd6:	d80a      	bhi.n	8007cee <_printf_i+0x32>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f000 80d5 	beq.w	8007e88 <_printf_i+0x1cc>
 8007cde:	2f58      	cmp	r7, #88	; 0x58
 8007ce0:	f000 80c1 	beq.w	8007e66 <_printf_i+0x1aa>
 8007ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cec:	e03a      	b.n	8007d64 <_printf_i+0xa8>
 8007cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cf2:	2b15      	cmp	r3, #21
 8007cf4:	d8f6      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cf6:	a101      	add	r1, pc, #4	; (adr r1, 8007cfc <_printf_i+0x40>)
 8007cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007ce5 	.word	0x08007ce5
 8007d08:	08007ce5 	.word	0x08007ce5
 8007d0c:	08007ce5 	.word	0x08007ce5
 8007d10:	08007ce5 	.word	0x08007ce5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007ce5 	.word	0x08007ce5
 8007d1c:	08007ce5 	.word	0x08007ce5
 8007d20:	08007ce5 	.word	0x08007ce5
 8007d24:	08007ce5 	.word	0x08007ce5
 8007d28:	08007e6f 	.word	0x08007e6f
 8007d2c:	08007d95 	.word	0x08007d95
 8007d30:	08007e29 	.word	0x08007e29
 8007d34:	08007ce5 	.word	0x08007ce5
 8007d38:	08007ce5 	.word	0x08007ce5
 8007d3c:	08007e91 	.word	0x08007e91
 8007d40:	08007ce5 	.word	0x08007ce5
 8007d44:	08007d95 	.word	0x08007d95
 8007d48:	08007ce5 	.word	0x08007ce5
 8007d4c:	08007ce5 	.word	0x08007ce5
 8007d50:	08007e31 	.word	0x08007e31
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	602a      	str	r2, [r5, #0]
 8007d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d64:	2301      	movs	r3, #1
 8007d66:	e0a0      	b.n	8007eaa <_printf_i+0x1ee>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	0607      	lsls	r7, r0, #24
 8007d6e:	f103 0104 	add.w	r1, r3, #4
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	d501      	bpl.n	8007d7a <_printf_i+0xbe>
 8007d76:	681e      	ldr	r6, [r3, #0]
 8007d78:	e003      	b.n	8007d82 <_printf_i+0xc6>
 8007d7a:	0646      	lsls	r6, r0, #25
 8007d7c:	d5fb      	bpl.n	8007d76 <_printf_i+0xba>
 8007d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	da03      	bge.n	8007d8e <_printf_i+0xd2>
 8007d86:	232d      	movs	r3, #45	; 0x2d
 8007d88:	4276      	negs	r6, r6
 8007d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8e:	230a      	movs	r3, #10
 8007d90:	4859      	ldr	r0, [pc, #356]	; (8007ef8 <_printf_i+0x23c>)
 8007d92:	e012      	b.n	8007dba <_printf_i+0xfe>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	6029      	str	r1, [r5, #0]
 8007d9c:	0605      	lsls	r5, r0, #24
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0xe8>
 8007da0:	681e      	ldr	r6, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0xee>
 8007da4:	0641      	lsls	r1, r0, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0xe4>
 8007da8:	881e      	ldrh	r6, [r3, #0]
 8007daa:	2f6f      	cmp	r7, #111	; 0x6f
 8007dac:	bf0c      	ite	eq
 8007dae:	2308      	moveq	r3, #8
 8007db0:	230a      	movne	r3, #10
 8007db2:	4851      	ldr	r0, [pc, #324]	; (8007ef8 <_printf_i+0x23c>)
 8007db4:	2100      	movs	r1, #0
 8007db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dba:	6865      	ldr	r5, [r4, #4]
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	bfa8      	it	ge
 8007dc0:	6821      	ldrge	r1, [r4, #0]
 8007dc2:	60a5      	str	r5, [r4, #8]
 8007dc4:	bfa4      	itt	ge
 8007dc6:	f021 0104 	bicge.w	r1, r1, #4
 8007dca:	6021      	strge	r1, [r4, #0]
 8007dcc:	b90e      	cbnz	r6, 8007dd2 <_printf_i+0x116>
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	d04b      	beq.n	8007e6a <_printf_i+0x1ae>
 8007dd2:	4615      	mov	r5, r2
 8007dd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dd8:	fb03 6711 	mls	r7, r3, r1, r6
 8007ddc:	5dc7      	ldrb	r7, [r0, r7]
 8007dde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007de2:	4637      	mov	r7, r6
 8007de4:	42bb      	cmp	r3, r7
 8007de6:	460e      	mov	r6, r1
 8007de8:	d9f4      	bls.n	8007dd4 <_printf_i+0x118>
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d10b      	bne.n	8007e06 <_printf_i+0x14a>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	07de      	lsls	r6, r3, #31
 8007df2:	d508      	bpl.n	8007e06 <_printf_i+0x14a>
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	6861      	ldr	r1, [r4, #4]
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	bfde      	ittt	le
 8007dfc:	2330      	movle	r3, #48	; 0x30
 8007dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e06:	1b52      	subs	r2, r2, r5
 8007e08:	6122      	str	r2, [r4, #16]
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4640      	mov	r0, r8
 8007e10:	f8cd a000 	str.w	sl, [sp]
 8007e14:	aa03      	add	r2, sp, #12
 8007e16:	f7ff fedf 	bl	8007bd8 <_printf_common>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d14a      	bne.n	8007eb4 <_printf_i+0x1f8>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	b004      	add	sp, #16
 8007e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	f043 0320 	orr.w	r3, r3, #32
 8007e2e:	6023      	str	r3, [r4, #0]
 8007e30:	2778      	movs	r7, #120	; 0x78
 8007e32:	4832      	ldr	r0, [pc, #200]	; (8007efc <_printf_i+0x240>)
 8007e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	6829      	ldr	r1, [r5, #0]
 8007e3c:	061f      	lsls	r7, r3, #24
 8007e3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e42:	d402      	bmi.n	8007e4a <_printf_i+0x18e>
 8007e44:	065f      	lsls	r7, r3, #25
 8007e46:	bf48      	it	mi
 8007e48:	b2b6      	uxthmi	r6, r6
 8007e4a:	07df      	lsls	r7, r3, #31
 8007e4c:	bf48      	it	mi
 8007e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e52:	6029      	str	r1, [r5, #0]
 8007e54:	bf48      	it	mi
 8007e56:	6023      	strmi	r3, [r4, #0]
 8007e58:	b91e      	cbnz	r6, 8007e62 <_printf_i+0x1a6>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f023 0320 	bic.w	r3, r3, #32
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	2310      	movs	r3, #16
 8007e64:	e7a6      	b.n	8007db4 <_printf_i+0xf8>
 8007e66:	4824      	ldr	r0, [pc, #144]	; (8007ef8 <_printf_i+0x23c>)
 8007e68:	e7e4      	b.n	8007e34 <_printf_i+0x178>
 8007e6a:	4615      	mov	r5, r2
 8007e6c:	e7bd      	b.n	8007dea <_printf_i+0x12e>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	6826      	ldr	r6, [r4, #0]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	6961      	ldr	r1, [r4, #20]
 8007e76:	6028      	str	r0, [r5, #0]
 8007e78:	0635      	lsls	r5, r6, #24
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	d501      	bpl.n	8007e82 <_printf_i+0x1c6>
 8007e7e:	6019      	str	r1, [r3, #0]
 8007e80:	e002      	b.n	8007e88 <_printf_i+0x1cc>
 8007e82:	0670      	lsls	r0, r6, #25
 8007e84:	d5fb      	bpl.n	8007e7e <_printf_i+0x1c2>
 8007e86:	8019      	strh	r1, [r3, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	e7bc      	b.n	8007e0a <_printf_i+0x14e>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2100      	movs	r1, #0
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	681d      	ldr	r5, [r3, #0]
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 fac6 	bl	800842e <memchr>
 8007ea2:	b108      	cbz	r0, 8007ea8 <_printf_i+0x1ec>
 8007ea4:	1b40      	subs	r0, r0, r5
 8007ea6:	6060      	str	r0, [r4, #4]
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	2300      	movs	r3, #0
 8007eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb2:	e7aa      	b.n	8007e0a <_printf_i+0x14e>
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	47d0      	blx	sl
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d0ad      	beq.n	8007e1e <_printf_i+0x162>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	079b      	lsls	r3, r3, #30
 8007ec6:	d413      	bmi.n	8007ef0 <_printf_i+0x234>
 8007ec8:	68e0      	ldr	r0, [r4, #12]
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	4298      	cmp	r0, r3
 8007ece:	bfb8      	it	lt
 8007ed0:	4618      	movlt	r0, r3
 8007ed2:	e7a6      	b.n	8007e22 <_printf_i+0x166>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4649      	mov	r1, r9
 8007eda:	4640      	mov	r0, r8
 8007edc:	47d0      	blx	sl
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d09d      	beq.n	8007e1e <_printf_i+0x162>
 8007ee2:	3501      	adds	r5, #1
 8007ee4:	68e3      	ldr	r3, [r4, #12]
 8007ee6:	9903      	ldr	r1, [sp, #12]
 8007ee8:	1a5b      	subs	r3, r3, r1
 8007eea:	42ab      	cmp	r3, r5
 8007eec:	dcf2      	bgt.n	8007ed4 <_printf_i+0x218>
 8007eee:	e7eb      	b.n	8007ec8 <_printf_i+0x20c>
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	f104 0619 	add.w	r6, r4, #25
 8007ef6:	e7f5      	b.n	8007ee4 <_printf_i+0x228>
 8007ef8:	0800ad52 	.word	0x0800ad52
 8007efc:	0800ad63 	.word	0x0800ad63

08007f00 <std>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0e:	6083      	str	r3, [r0, #8]
 8007f10:	8181      	strh	r1, [r0, #12]
 8007f12:	6643      	str	r3, [r0, #100]	; 0x64
 8007f14:	81c2      	strh	r2, [r0, #14]
 8007f16:	6183      	str	r3, [r0, #24]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	305c      	adds	r0, #92	; 0x5c
 8007f1e:	f000 fa07 	bl	8008330 <memset>
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <std+0x58>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	6263      	str	r3, [r4, #36]	; 0x24
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <std+0x5c>)
 8007f2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <std+0x60>)
 8007f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <std+0x64>)
 8007f32:	6323      	str	r3, [r4, #48]	; 0x30
 8007f34:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <std+0x68>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d006      	beq.n	8007f48 <std+0x48>
 8007f3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f3e:	4294      	cmp	r4, r2
 8007f40:	d002      	beq.n	8007f48 <std+0x48>
 8007f42:	33d0      	adds	r3, #208	; 0xd0
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d105      	bne.n	8007f54 <std+0x54>
 8007f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f50:	f000 ba6a 	b.w	8008428 <__retarget_lock_init_recursive>
 8007f54:	bd10      	pop	{r4, pc}
 8007f56:	bf00      	nop
 8007f58:	08008161 	.word	0x08008161
 8007f5c:	08008183 	.word	0x08008183
 8007f60:	080081bb 	.word	0x080081bb
 8007f64:	080081df 	.word	0x080081df
 8007f68:	20000500 	.word	0x20000500

08007f6c <stdio_exit_handler>:
 8007f6c:	4a02      	ldr	r2, [pc, #8]	; (8007f78 <stdio_exit_handler+0xc>)
 8007f6e:	4903      	ldr	r1, [pc, #12]	; (8007f7c <stdio_exit_handler+0x10>)
 8007f70:	4803      	ldr	r0, [pc, #12]	; (8007f80 <stdio_exit_handler+0x14>)
 8007f72:	f000 b869 	b.w	8008048 <_fwalk_sglue>
 8007f76:	bf00      	nop
 8007f78:	2000000c 	.word	0x2000000c
 8007f7c:	08009d99 	.word	0x08009d99
 8007f80:	20000018 	.word	0x20000018

08007f84 <cleanup_stdio>:
 8007f84:	6841      	ldr	r1, [r0, #4]
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <cleanup_stdio+0x34>)
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	d001      	beq.n	8007f94 <cleanup_stdio+0x10>
 8007f90:	f001 ff02 	bl	8009d98 <_fflush_r>
 8007f94:	68a1      	ldr	r1, [r4, #8]
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <cleanup_stdio+0x38>)
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <cleanup_stdio+0x1e>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fefb 	bl	8009d98 <_fflush_r>
 8007fa2:	68e1      	ldr	r1, [r4, #12]
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <cleanup_stdio+0x3c>)
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d004      	beq.n	8007fb4 <cleanup_stdio+0x30>
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f001 bef2 	b.w	8009d98 <_fflush_r>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000500 	.word	0x20000500
 8007fbc:	20000568 	.word	0x20000568
 8007fc0:	200005d0 	.word	0x200005d0

08007fc4 <global_stdio_init.part.0>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <global_stdio_init.part.0+0x30>)
 8007fc8:	4c0b      	ldr	r4, [pc, #44]	; (8007ff8 <global_stdio_init.part.0+0x34>)
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <global_stdio_init.part.0+0x38>)
 8007fcc:	4620      	mov	r0, r4
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f7ff ff94 	bl	8007f00 <std>
 8007fd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2109      	movs	r1, #9
 8007fe0:	f7ff ff8e 	bl	8007f00 <std>
 8007fe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fe8:	2202      	movs	r2, #2
 8007fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fee:	2112      	movs	r1, #18
 8007ff0:	f7ff bf86 	b.w	8007f00 <std>
 8007ff4:	20000638 	.word	0x20000638
 8007ff8:	20000500 	.word	0x20000500
 8007ffc:	08007f6d 	.word	0x08007f6d

08008000 <__sfp_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sfp_lock_acquire+0x8>)
 8008002:	f000 ba12 	b.w	800842a <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	20000641 	.word	0x20000641

0800800c <__sfp_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_release+0x8>)
 800800e:	f000 ba0d 	b.w	800842c <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	20000641 	.word	0x20000641

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sfp_lock_acquire>
 8008020:	6a23      	ldr	r3, [r4, #32]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sfp_lock_release>
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <__sinit+0x28>)
 800802e:	6223      	str	r3, [r4, #32]
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <__sinit+0x2c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f5      	bne.n	8008024 <__sinit+0xc>
 8008038:	f7ff ffc4 	bl	8007fc4 <global_stdio_init.part.0>
 800803c:	e7f2      	b.n	8008024 <__sinit+0xc>
 800803e:	bf00      	nop
 8008040:	08007f85 	.word	0x08007f85
 8008044:	20000638 	.word	0x20000638

08008048 <_fwalk_sglue>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	4607      	mov	r7, r0
 800804e:	4688      	mov	r8, r1
 8008050:	4614      	mov	r4, r2
 8008052:	2600      	movs	r6, #0
 8008054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008058:	f1b9 0901 	subs.w	r9, r9, #1
 800805c:	d505      	bpl.n	800806a <_fwalk_sglue+0x22>
 800805e:	6824      	ldr	r4, [r4, #0]
 8008060:	2c00      	cmp	r4, #0
 8008062:	d1f7      	bne.n	8008054 <_fwalk_sglue+0xc>
 8008064:	4630      	mov	r0, r6
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d907      	bls.n	8008080 <_fwalk_sglue+0x38>
 8008070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008074:	3301      	adds	r3, #1
 8008076:	d003      	beq.n	8008080 <_fwalk_sglue+0x38>
 8008078:	4629      	mov	r1, r5
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	4306      	orrs	r6, r0
 8008080:	3568      	adds	r5, #104	; 0x68
 8008082:	e7e9      	b.n	8008058 <_fwalk_sglue+0x10>

08008084 <iprintf>:
 8008084:	b40f      	push	{r0, r1, r2, r3}
 8008086:	b507      	push	{r0, r1, r2, lr}
 8008088:	4906      	ldr	r1, [pc, #24]	; (80080a4 <iprintf+0x20>)
 800808a:	ab04      	add	r3, sp, #16
 800808c:	6808      	ldr	r0, [r1, #0]
 800808e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008092:	6881      	ldr	r1, [r0, #8]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	f001 fce3 	bl	8009a60 <_vfiprintf_r>
 800809a:	b003      	add	sp, #12
 800809c:	f85d eb04 	ldr.w	lr, [sp], #4
 80080a0:	b004      	add	sp, #16
 80080a2:	4770      	bx	lr
 80080a4:	20000064 	.word	0x20000064

080080a8 <_puts_r>:
 80080a8:	6a03      	ldr	r3, [r0, #32]
 80080aa:	b570      	push	{r4, r5, r6, lr}
 80080ac:	4605      	mov	r5, r0
 80080ae:	460e      	mov	r6, r1
 80080b0:	6884      	ldr	r4, [r0, #8]
 80080b2:	b90b      	cbnz	r3, 80080b8 <_puts_r+0x10>
 80080b4:	f7ff ffb0 	bl	8008018 <__sinit>
 80080b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ba:	07db      	lsls	r3, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_puts_r+0x22>
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	0598      	lsls	r0, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_puts_r+0x22>
 80080c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c6:	f000 f9b0 	bl	800842a <__retarget_lock_acquire_recursive>
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	0719      	lsls	r1, r3, #28
 80080ce:	d513      	bpl.n	80080f8 <_puts_r+0x50>
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	b18b      	cbz	r3, 80080f8 <_puts_r+0x50>
 80080d4:	3e01      	subs	r6, #1
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080dc:	3b01      	subs	r3, #1
 80080de:	60a3      	str	r3, [r4, #8]
 80080e0:	b9e9      	cbnz	r1, 800811e <_puts_r+0x76>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da2e      	bge.n	8008144 <_puts_r+0x9c>
 80080e6:	4622      	mov	r2, r4
 80080e8:	210a      	movs	r1, #10
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f87b 	bl	80081e6 <__swbuf_r>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d007      	beq.n	8008104 <_puts_r+0x5c>
 80080f4:	250a      	movs	r5, #10
 80080f6:	e007      	b.n	8008108 <_puts_r+0x60>
 80080f8:	4621      	mov	r1, r4
 80080fa:	4628      	mov	r0, r5
 80080fc:	f000 f8b0 	bl	8008260 <__swsetup_r>
 8008100:	2800      	cmp	r0, #0
 8008102:	d0e7      	beq.n	80080d4 <_puts_r+0x2c>
 8008104:	f04f 35ff 	mov.w	r5, #4294967295
 8008108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800810a:	07da      	lsls	r2, r3, #31
 800810c:	d405      	bmi.n	800811a <_puts_r+0x72>
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	059b      	lsls	r3, r3, #22
 8008112:	d402      	bmi.n	800811a <_puts_r+0x72>
 8008114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008116:	f000 f989 	bl	800842c <__retarget_lock_release_recursive>
 800811a:	4628      	mov	r0, r5
 800811c:	bd70      	pop	{r4, r5, r6, pc}
 800811e:	2b00      	cmp	r3, #0
 8008120:	da04      	bge.n	800812c <_puts_r+0x84>
 8008122:	69a2      	ldr	r2, [r4, #24]
 8008124:	429a      	cmp	r2, r3
 8008126:	dc06      	bgt.n	8008136 <_puts_r+0x8e>
 8008128:	290a      	cmp	r1, #10
 800812a:	d004      	beq.n	8008136 <_puts_r+0x8e>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	7019      	strb	r1, [r3, #0]
 8008134:	e7cf      	b.n	80080d6 <_puts_r+0x2e>
 8008136:	4622      	mov	r2, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f000 f854 	bl	80081e6 <__swbuf_r>
 800813e:	3001      	adds	r0, #1
 8008140:	d1c9      	bne.n	80080d6 <_puts_r+0x2e>
 8008142:	e7df      	b.n	8008104 <_puts_r+0x5c>
 8008144:	250a      	movs	r5, #10
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	6022      	str	r2, [r4, #0]
 800814c:	701d      	strb	r5, [r3, #0]
 800814e:	e7db      	b.n	8008108 <_puts_r+0x60>

08008150 <puts>:
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <puts+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfa7 	b.w	80080a8 <_puts_r>
 800815a:	bf00      	nop
 800815c:	20000064 	.word	0x20000064

08008160 <__sread>:
 8008160:	b510      	push	{r4, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	f000 f910 	bl	800838c <_read_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	bfab      	itete	ge
 8008170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008172:	89a3      	ldrhlt	r3, [r4, #12]
 8008174:	181b      	addge	r3, r3, r0
 8008176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800817a:	bfac      	ite	ge
 800817c:	6563      	strge	r3, [r4, #84]	; 0x54
 800817e:	81a3      	strhlt	r3, [r4, #12]
 8008180:	bd10      	pop	{r4, pc}

08008182 <__swrite>:
 8008182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008186:	461f      	mov	r7, r3
 8008188:	898b      	ldrh	r3, [r1, #12]
 800818a:	4605      	mov	r5, r0
 800818c:	05db      	lsls	r3, r3, #23
 800818e:	460c      	mov	r4, r1
 8008190:	4616      	mov	r6, r2
 8008192:	d505      	bpl.n	80081a0 <__swrite+0x1e>
 8008194:	2302      	movs	r3, #2
 8008196:	2200      	movs	r2, #0
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	f000 f8e4 	bl	8008368 <_lseek_r>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	4632      	mov	r2, r6
 80081a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	4628      	mov	r0, r5
 80081ac:	463b      	mov	r3, r7
 80081ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b6:	f000 b8fb 	b.w	80083b0 <_write_r>

080081ba <__sseek>:
 80081ba:	b510      	push	{r4, lr}
 80081bc:	460c      	mov	r4, r1
 80081be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c2:	f000 f8d1 	bl	8008368 <_lseek_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	bf15      	itete	ne
 80081cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081d6:	81a3      	strheq	r3, [r4, #12]
 80081d8:	bf18      	it	ne
 80081da:	81a3      	strhne	r3, [r4, #12]
 80081dc:	bd10      	pop	{r4, pc}

080081de <__sclose>:
 80081de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e2:	f000 b8b1 	b.w	8008348 <_close_r>

080081e6 <__swbuf_r>:
 80081e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e8:	460e      	mov	r6, r1
 80081ea:	4614      	mov	r4, r2
 80081ec:	4605      	mov	r5, r0
 80081ee:	b118      	cbz	r0, 80081f8 <__swbuf_r+0x12>
 80081f0:	6a03      	ldr	r3, [r0, #32]
 80081f2:	b90b      	cbnz	r3, 80081f8 <__swbuf_r+0x12>
 80081f4:	f7ff ff10 	bl	8008018 <__sinit>
 80081f8:	69a3      	ldr	r3, [r4, #24]
 80081fa:	60a3      	str	r3, [r4, #8]
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	071a      	lsls	r2, r3, #28
 8008200:	d525      	bpl.n	800824e <__swbuf_r+0x68>
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	b31b      	cbz	r3, 800824e <__swbuf_r+0x68>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	6922      	ldr	r2, [r4, #16]
 800820a:	b2f6      	uxtb	r6, r6
 800820c:	1a98      	subs	r0, r3, r2
 800820e:	6963      	ldr	r3, [r4, #20]
 8008210:	4637      	mov	r7, r6
 8008212:	4283      	cmp	r3, r0
 8008214:	dc04      	bgt.n	8008220 <__swbuf_r+0x3a>
 8008216:	4621      	mov	r1, r4
 8008218:	4628      	mov	r0, r5
 800821a:	f001 fdbd 	bl	8009d98 <_fflush_r>
 800821e:	b9e0      	cbnz	r0, 800825a <__swbuf_r+0x74>
 8008220:	68a3      	ldr	r3, [r4, #8]
 8008222:	3b01      	subs	r3, #1
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	701e      	strb	r6, [r3, #0]
 800822e:	6962      	ldr	r2, [r4, #20]
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	429a      	cmp	r2, r3
 8008234:	d004      	beq.n	8008240 <__swbuf_r+0x5a>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	07db      	lsls	r3, r3, #31
 800823a:	d506      	bpl.n	800824a <__swbuf_r+0x64>
 800823c:	2e0a      	cmp	r6, #10
 800823e:	d104      	bne.n	800824a <__swbuf_r+0x64>
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f001 fda8 	bl	8009d98 <_fflush_r>
 8008248:	b938      	cbnz	r0, 800825a <__swbuf_r+0x74>
 800824a:	4638      	mov	r0, r7
 800824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800824e:	4621      	mov	r1, r4
 8008250:	4628      	mov	r0, r5
 8008252:	f000 f805 	bl	8008260 <__swsetup_r>
 8008256:	2800      	cmp	r0, #0
 8008258:	d0d5      	beq.n	8008206 <__swbuf_r+0x20>
 800825a:	f04f 37ff 	mov.w	r7, #4294967295
 800825e:	e7f4      	b.n	800824a <__swbuf_r+0x64>

08008260 <__swsetup_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4b2a      	ldr	r3, [pc, #168]	; (800830c <__swsetup_r+0xac>)
 8008264:	4605      	mov	r5, r0
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	460c      	mov	r4, r1
 800826a:	b118      	cbz	r0, 8008274 <__swsetup_r+0x14>
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b90b      	cbnz	r3, 8008274 <__swsetup_r+0x14>
 8008270:	f7ff fed2 	bl	8008018 <__sinit>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800827a:	0718      	lsls	r0, r3, #28
 800827c:	d422      	bmi.n	80082c4 <__swsetup_r+0x64>
 800827e:	06d9      	lsls	r1, r3, #27
 8008280:	d407      	bmi.n	8008292 <__swsetup_r+0x32>
 8008282:	2309      	movs	r3, #9
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	e034      	b.n	80082fc <__swsetup_r+0x9c>
 8008292:	0758      	lsls	r0, r3, #29
 8008294:	d512      	bpl.n	80082bc <__swsetup_r+0x5c>
 8008296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008298:	b141      	cbz	r1, 80082ac <__swsetup_r+0x4c>
 800829a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800829e:	4299      	cmp	r1, r3
 80082a0:	d002      	beq.n	80082a8 <__swsetup_r+0x48>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 ff40 	bl	8009128 <_free_r>
 80082a8:	2300      	movs	r3, #0
 80082aa:	6363      	str	r3, [r4, #52]	; 0x34
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	2300      	movs	r3, #0
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f043 0308 	orr.w	r3, r3, #8
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	b94b      	cbnz	r3, 80082dc <__swsetup_r+0x7c>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d2:	d003      	beq.n	80082dc <__swsetup_r+0x7c>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f001 fdab 	bl	8009e32 <__smakebuf_r>
 80082dc:	89a0      	ldrh	r0, [r4, #12]
 80082de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e2:	f010 0301 	ands.w	r3, r0, #1
 80082e6:	d00a      	beq.n	80082fe <__swsetup_r+0x9e>
 80082e8:	2300      	movs	r3, #0
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	6963      	ldr	r3, [r4, #20]
 80082ee:	425b      	negs	r3, r3
 80082f0:	61a3      	str	r3, [r4, #24]
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	b943      	cbnz	r3, 8008308 <__swsetup_r+0xa8>
 80082f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082fa:	d1c4      	bne.n	8008286 <__swsetup_r+0x26>
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	0781      	lsls	r1, r0, #30
 8008300:	bf58      	it	pl
 8008302:	6963      	ldrpl	r3, [r4, #20]
 8008304:	60a3      	str	r3, [r4, #8]
 8008306:	e7f4      	b.n	80082f2 <__swsetup_r+0x92>
 8008308:	2000      	movs	r0, #0
 800830a:	e7f7      	b.n	80082fc <__swsetup_r+0x9c>
 800830c:	20000064 	.word	0x20000064

08008310 <memcmp>:
 8008310:	b510      	push	{r4, lr}
 8008312:	3901      	subs	r1, #1
 8008314:	4402      	add	r2, r0
 8008316:	4290      	cmp	r0, r2
 8008318:	d101      	bne.n	800831e <memcmp+0xe>
 800831a:	2000      	movs	r0, #0
 800831c:	e005      	b.n	800832a <memcmp+0x1a>
 800831e:	7803      	ldrb	r3, [r0, #0]
 8008320:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008324:	42a3      	cmp	r3, r4
 8008326:	d001      	beq.n	800832c <memcmp+0x1c>
 8008328:	1b18      	subs	r0, r3, r4
 800832a:	bd10      	pop	{r4, pc}
 800832c:	3001      	adds	r0, #1
 800832e:	e7f2      	b.n	8008316 <memcmp+0x6>

08008330 <memset>:
 8008330:	4603      	mov	r3, r0
 8008332:	4402      	add	r2, r0
 8008334:	4293      	cmp	r3, r2
 8008336:	d100      	bne.n	800833a <memset+0xa>
 8008338:	4770      	bx	lr
 800833a:	f803 1b01 	strb.w	r1, [r3], #1
 800833e:	e7f9      	b.n	8008334 <memset+0x4>

08008340 <_localeconv_r>:
 8008340:	4800      	ldr	r0, [pc, #0]	; (8008344 <_localeconv_r+0x4>)
 8008342:	4770      	bx	lr
 8008344:	20000158 	.word	0x20000158

08008348 <_close_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	2300      	movs	r3, #0
 800834c:	4d05      	ldr	r5, [pc, #20]	; (8008364 <_close_r+0x1c>)
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7fa f9c6 	bl	80026e4 <_close>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_close_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_close_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	2000063c 	.word	0x2000063c

08008368 <_lseek_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	2200      	movs	r2, #0
 8008372:	4d05      	ldr	r5, [pc, #20]	; (8008388 <_lseek_r+0x20>)
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f7fa f9d8 	bl	800272c <_lseek>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_lseek_r+0x1e>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_lseek_r+0x1e>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	2000063c 	.word	0x2000063c

0800838c <_read_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	4611      	mov	r1, r2
 8008394:	2200      	movs	r2, #0
 8008396:	4d05      	ldr	r5, [pc, #20]	; (80083ac <_read_r+0x20>)
 8008398:	602a      	str	r2, [r5, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f7fa f969 	bl	8002672 <_read>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_read_r+0x1e>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_read_r+0x1e>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	2000063c 	.word	0x2000063c

080083b0 <_write_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4604      	mov	r4, r0
 80083b4:	4608      	mov	r0, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	4d05      	ldr	r5, [pc, #20]	; (80083d0 <_write_r+0x20>)
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7fa f974 	bl	80026ac <_write>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_write_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_write_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	2000063c 	.word	0x2000063c

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000064 	.word	0x20000064

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	2600      	movs	r6, #0
 80083e4:	4d0c      	ldr	r5, [pc, #48]	; (8008418 <__libc_init_array+0x38>)
 80083e6:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e8:	1b64      	subs	r4, r4, r5
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	42a6      	cmp	r6, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	f002 fae6 	bl	800a9c0 <_init>
 80083f4:	2600      	movs	r6, #0
 80083f6:	4d0a      	ldr	r5, [pc, #40]	; (8008420 <__libc_init_array+0x40>)
 80083f8:	4c0a      	ldr	r4, [pc, #40]	; (8008424 <__libc_init_array+0x44>)
 80083fa:	1b64      	subs	r4, r4, r5
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	42a6      	cmp	r6, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f855 3b04 	ldr.w	r3, [r5], #4
 8008408:	4798      	blx	r3
 800840a:	3601      	adds	r6, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008412:	4798      	blx	r3
 8008414:	3601      	adds	r6, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	0800b0d4 	.word	0x0800b0d4
 800841c:	0800b0d4 	.word	0x0800b0d4
 8008420:	0800b0d4 	.word	0x0800b0d4
 8008424:	0800b0d8 	.word	0x0800b0d8

08008428 <__retarget_lock_init_recursive>:
 8008428:	4770      	bx	lr

0800842a <__retarget_lock_acquire_recursive>:
 800842a:	4770      	bx	lr

0800842c <__retarget_lock_release_recursive>:
 800842c:	4770      	bx	lr

0800842e <memchr>:
 800842e:	4603      	mov	r3, r0
 8008430:	b510      	push	{r4, lr}
 8008432:	b2c9      	uxtb	r1, r1
 8008434:	4402      	add	r2, r0
 8008436:	4293      	cmp	r3, r2
 8008438:	4618      	mov	r0, r3
 800843a:	d101      	bne.n	8008440 <memchr+0x12>
 800843c:	2000      	movs	r0, #0
 800843e:	e003      	b.n	8008448 <memchr+0x1a>
 8008440:	7804      	ldrb	r4, [r0, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	428c      	cmp	r4, r1
 8008446:	d1f6      	bne.n	8008436 <memchr+0x8>
 8008448:	bd10      	pop	{r4, pc}

0800844a <quorem>:
 800844a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844e:	6903      	ldr	r3, [r0, #16]
 8008450:	690c      	ldr	r4, [r1, #16]
 8008452:	4607      	mov	r7, r0
 8008454:	42a3      	cmp	r3, r4
 8008456:	db7f      	blt.n	8008558 <quorem+0x10e>
 8008458:	3c01      	subs	r4, #1
 800845a:	f100 0514 	add.w	r5, r0, #20
 800845e:	f101 0814 	add.w	r8, r1, #20
 8008462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800846c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008470:	3301      	adds	r3, #1
 8008472:	429a      	cmp	r2, r3
 8008474:	fbb2 f6f3 	udiv	r6, r2, r3
 8008478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800847c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008480:	d331      	bcc.n	80084e6 <quorem+0x9c>
 8008482:	f04f 0e00 	mov.w	lr, #0
 8008486:	4640      	mov	r0, r8
 8008488:	46ac      	mov	ip, r5
 800848a:	46f2      	mov	sl, lr
 800848c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008490:	b293      	uxth	r3, r2
 8008492:	fb06 e303 	mla	r3, r6, r3, lr
 8008496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800849a:	0c1a      	lsrs	r2, r3, #16
 800849c:	b29b      	uxth	r3, r3
 800849e:	fb06 220e 	mla	r2, r6, lr, r2
 80084a2:	ebaa 0303 	sub.w	r3, sl, r3
 80084a6:	f8dc a000 	ldr.w	sl, [ip]
 80084aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084ae:	fa1f fa8a 	uxth.w	sl, sl
 80084b2:	4453      	add	r3, sl
 80084b4:	f8dc a000 	ldr.w	sl, [ip]
 80084b8:	b292      	uxth	r2, r2
 80084ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084c8:	4581      	cmp	r9, r0
 80084ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084ce:	f84c 3b04 	str.w	r3, [ip], #4
 80084d2:	d2db      	bcs.n	800848c <quorem+0x42>
 80084d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80084d8:	b92b      	cbnz	r3, 80084e6 <quorem+0x9c>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	3b04      	subs	r3, #4
 80084de:	429d      	cmp	r5, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	d32d      	bcc.n	8008540 <quorem+0xf6>
 80084e4:	613c      	str	r4, [r7, #16]
 80084e6:	4638      	mov	r0, r7
 80084e8:	f001 f994 	bl	8009814 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	db23      	blt.n	8008538 <quorem+0xee>
 80084f0:	4629      	mov	r1, r5
 80084f2:	2000      	movs	r0, #0
 80084f4:	3601      	adds	r6, #1
 80084f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80084fa:	f8d1 c000 	ldr.w	ip, [r1]
 80084fe:	b293      	uxth	r3, r2
 8008500:	1ac3      	subs	r3, r0, r3
 8008502:	0c12      	lsrs	r2, r2, #16
 8008504:	fa1f f08c 	uxth.w	r0, ip
 8008508:	4403      	add	r3, r0
 800850a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800850e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008518:	45c1      	cmp	r9, r8
 800851a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800851e:	f841 3b04 	str.w	r3, [r1], #4
 8008522:	d2e8      	bcs.n	80084f6 <quorem+0xac>
 8008524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008528:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800852c:	b922      	cbnz	r2, 8008538 <quorem+0xee>
 800852e:	3b04      	subs	r3, #4
 8008530:	429d      	cmp	r5, r3
 8008532:	461a      	mov	r2, r3
 8008534:	d30a      	bcc.n	800854c <quorem+0x102>
 8008536:	613c      	str	r4, [r7, #16]
 8008538:	4630      	mov	r0, r6
 800853a:	b003      	add	sp, #12
 800853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	3b04      	subs	r3, #4
 8008544:	2a00      	cmp	r2, #0
 8008546:	d1cd      	bne.n	80084e4 <quorem+0x9a>
 8008548:	3c01      	subs	r4, #1
 800854a:	e7c8      	b.n	80084de <quorem+0x94>
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	3b04      	subs	r3, #4
 8008550:	2a00      	cmp	r2, #0
 8008552:	d1f0      	bne.n	8008536 <quorem+0xec>
 8008554:	3c01      	subs	r4, #1
 8008556:	e7eb      	b.n	8008530 <quorem+0xe6>
 8008558:	2000      	movs	r0, #0
 800855a:	e7ee      	b.n	800853a <quorem+0xf0>
 800855c:	0000      	movs	r0, r0
	...

08008560 <_dtoa_r>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	461f      	mov	r7, r3
 8008568:	69c4      	ldr	r4, [r0, #28]
 800856a:	b099      	sub	sp, #100	; 0x64
 800856c:	4605      	mov	r5, r0
 800856e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008572:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008576:	b974      	cbnz	r4, 8008596 <_dtoa_r+0x36>
 8008578:	2010      	movs	r0, #16
 800857a:	f000 fe1d 	bl	80091b8 <malloc>
 800857e:	4602      	mov	r2, r0
 8008580:	61e8      	str	r0, [r5, #28]
 8008582:	b920      	cbnz	r0, 800858e <_dtoa_r+0x2e>
 8008584:	21ef      	movs	r1, #239	; 0xef
 8008586:	4bac      	ldr	r3, [pc, #688]	; (8008838 <_dtoa_r+0x2d8>)
 8008588:	48ac      	ldr	r0, [pc, #688]	; (800883c <_dtoa_r+0x2dc>)
 800858a:	f001 fccf 	bl	8009f2c <__assert_func>
 800858e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008592:	6004      	str	r4, [r0, #0]
 8008594:	60c4      	str	r4, [r0, #12]
 8008596:	69eb      	ldr	r3, [r5, #28]
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	b151      	cbz	r1, 80085b2 <_dtoa_r+0x52>
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	2301      	movs	r3, #1
 80085a0:	4093      	lsls	r3, r2
 80085a2:	604a      	str	r2, [r1, #4]
 80085a4:	608b      	str	r3, [r1, #8]
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 fefa 	bl	80093a0 <_Bfree>
 80085ac:	2200      	movs	r2, #0
 80085ae:	69eb      	ldr	r3, [r5, #28]
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	1e3b      	subs	r3, r7, #0
 80085b4:	bfaf      	iteee	ge
 80085b6:	2300      	movge	r3, #0
 80085b8:	2201      	movlt	r2, #1
 80085ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085be:	9305      	strlt	r3, [sp, #20]
 80085c0:	bfa8      	it	ge
 80085c2:	f8c8 3000 	strge.w	r3, [r8]
 80085c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80085ca:	4b9d      	ldr	r3, [pc, #628]	; (8008840 <_dtoa_r+0x2e0>)
 80085cc:	bfb8      	it	lt
 80085ce:	f8c8 2000 	strlt.w	r2, [r8]
 80085d2:	ea33 0309 	bics.w	r3, r3, r9
 80085d6:	d119      	bne.n	800860c <_dtoa_r+0xac>
 80085d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80085dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085e4:	4333      	orrs	r3, r6
 80085e6:	f000 8589 	beq.w	80090fc <_dtoa_r+0xb9c>
 80085ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085ec:	b953      	cbnz	r3, 8008604 <_dtoa_r+0xa4>
 80085ee:	4b95      	ldr	r3, [pc, #596]	; (8008844 <_dtoa_r+0x2e4>)
 80085f0:	e023      	b.n	800863a <_dtoa_r+0xda>
 80085f2:	4b95      	ldr	r3, [pc, #596]	; (8008848 <_dtoa_r+0x2e8>)
 80085f4:	9303      	str	r3, [sp, #12]
 80085f6:	3308      	adds	r3, #8
 80085f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	9803      	ldr	r0, [sp, #12]
 80085fe:	b019      	add	sp, #100	; 0x64
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4b8f      	ldr	r3, [pc, #572]	; (8008844 <_dtoa_r+0x2e4>)
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	3303      	adds	r3, #3
 800860a:	e7f5      	b.n	80085f8 <_dtoa_r+0x98>
 800860c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008610:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	f7f8 f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8008620:	4680      	mov	r8, r0
 8008622:	b160      	cbz	r0, 800863e <_dtoa_r+0xde>
 8008624:	2301      	movs	r3, #1
 8008626:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 8562 	beq.w	80090f6 <_dtoa_r+0xb96>
 8008632:	4b86      	ldr	r3, [pc, #536]	; (800884c <_dtoa_r+0x2ec>)
 8008634:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	3b01      	subs	r3, #1
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	e7de      	b.n	80085fc <_dtoa_r+0x9c>
 800863e:	ab16      	add	r3, sp, #88	; 0x58
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	ab17      	add	r3, sp, #92	; 0x5c
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	4628      	mov	r0, r5
 8008648:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800864c:	f001 f98a 	bl	8009964 <__d2b>
 8008650:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008654:	4682      	mov	sl, r0
 8008656:	2c00      	cmp	r4, #0
 8008658:	d07e      	beq.n	8008758 <_dtoa_r+0x1f8>
 800865a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800865e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008660:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008668:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800866c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008670:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008674:	4619      	mov	r1, r3
 8008676:	2200      	movs	r2, #0
 8008678:	4b75      	ldr	r3, [pc, #468]	; (8008850 <_dtoa_r+0x2f0>)
 800867a:	f7f7 fd75 	bl	8000168 <__aeabi_dsub>
 800867e:	a368      	add	r3, pc, #416	; (adr r3, 8008820 <_dtoa_r+0x2c0>)
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f7f7 ff28 	bl	80004d8 <__aeabi_dmul>
 8008688:	a367      	add	r3, pc, #412	; (adr r3, 8008828 <_dtoa_r+0x2c8>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 fd6d 	bl	800016c <__adddf3>
 8008692:	4606      	mov	r6, r0
 8008694:	4620      	mov	r0, r4
 8008696:	460f      	mov	r7, r1
 8008698:	f7f7 feb4 	bl	8000404 <__aeabi_i2d>
 800869c:	a364      	add	r3, pc, #400	; (adr r3, 8008830 <_dtoa_r+0x2d0>)
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	f7f7 ff19 	bl	80004d8 <__aeabi_dmul>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4630      	mov	r0, r6
 80086ac:	4639      	mov	r1, r7
 80086ae:	f7f7 fd5d 	bl	800016c <__adddf3>
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	f7f8 f9bf 	bl	8000a38 <__aeabi_d2iz>
 80086ba:	2200      	movs	r2, #0
 80086bc:	4683      	mov	fp, r0
 80086be:	2300      	movs	r3, #0
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 f97a 	bl	80009bc <__aeabi_dcmplt>
 80086c8:	b148      	cbz	r0, 80086de <_dtoa_r+0x17e>
 80086ca:	4658      	mov	r0, fp
 80086cc:	f7f7 fe9a 	bl	8000404 <__aeabi_i2d>
 80086d0:	4632      	mov	r2, r6
 80086d2:	463b      	mov	r3, r7
 80086d4:	f7f8 f968 	bl	80009a8 <__aeabi_dcmpeq>
 80086d8:	b908      	cbnz	r0, 80086de <_dtoa_r+0x17e>
 80086da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086de:	f1bb 0f16 	cmp.w	fp, #22
 80086e2:	d857      	bhi.n	8008794 <_dtoa_r+0x234>
 80086e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086e8:	4b5a      	ldr	r3, [pc, #360]	; (8008854 <_dtoa_r+0x2f4>)
 80086ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f7f8 f963 	bl	80009bc <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d04e      	beq.n	8008798 <_dtoa_r+0x238>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008700:	930f      	str	r3, [sp, #60]	; 0x3c
 8008702:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008704:	1b1b      	subs	r3, r3, r4
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	bf46      	itte	mi
 800870a:	f1c3 0901 	rsbmi	r9, r3, #1
 800870e:	2300      	movmi	r3, #0
 8008710:	f04f 0900 	movpl.w	r9, #0
 8008714:	9209      	str	r2, [sp, #36]	; 0x24
 8008716:	bf48      	it	mi
 8008718:	9309      	strmi	r3, [sp, #36]	; 0x24
 800871a:	f1bb 0f00 	cmp.w	fp, #0
 800871e:	db3d      	blt.n	800879c <_dtoa_r+0x23c>
 8008720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008722:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008726:	445b      	add	r3, fp
 8008728:	9309      	str	r3, [sp, #36]	; 0x24
 800872a:	2300      	movs	r3, #0
 800872c:	930a      	str	r3, [sp, #40]	; 0x28
 800872e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008730:	2b09      	cmp	r3, #9
 8008732:	d867      	bhi.n	8008804 <_dtoa_r+0x2a4>
 8008734:	2b05      	cmp	r3, #5
 8008736:	bfc4      	itt	gt
 8008738:	3b04      	subgt	r3, #4
 800873a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800873c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800873e:	bfc8      	it	gt
 8008740:	2400      	movgt	r4, #0
 8008742:	f1a3 0302 	sub.w	r3, r3, #2
 8008746:	bfd8      	it	le
 8008748:	2401      	movle	r4, #1
 800874a:	2b03      	cmp	r3, #3
 800874c:	f200 8086 	bhi.w	800885c <_dtoa_r+0x2fc>
 8008750:	e8df f003 	tbb	[pc, r3]
 8008754:	5637392c 	.word	0x5637392c
 8008758:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800875c:	441c      	add	r4, r3
 800875e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008762:	2b20      	cmp	r3, #32
 8008764:	bfc1      	itttt	gt
 8008766:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800876a:	fa09 f903 	lslgt.w	r9, r9, r3
 800876e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008772:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008776:	bfd6      	itet	le
 8008778:	f1c3 0320 	rsble	r3, r3, #32
 800877c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008780:	fa06 f003 	lslle.w	r0, r6, r3
 8008784:	f7f7 fe2e 	bl	80003e4 <__aeabi_ui2d>
 8008788:	2201      	movs	r2, #1
 800878a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800878e:	3c01      	subs	r4, #1
 8008790:	9213      	str	r2, [sp, #76]	; 0x4c
 8008792:	e76f      	b.n	8008674 <_dtoa_r+0x114>
 8008794:	2301      	movs	r3, #1
 8008796:	e7b3      	b.n	8008700 <_dtoa_r+0x1a0>
 8008798:	900f      	str	r0, [sp, #60]	; 0x3c
 800879a:	e7b2      	b.n	8008702 <_dtoa_r+0x1a2>
 800879c:	f1cb 0300 	rsb	r3, fp, #0
 80087a0:	930a      	str	r3, [sp, #40]	; 0x28
 80087a2:	2300      	movs	r3, #0
 80087a4:	eba9 090b 	sub.w	r9, r9, fp
 80087a8:	930e      	str	r3, [sp, #56]	; 0x38
 80087aa:	e7c0      	b.n	800872e <_dtoa_r+0x1ce>
 80087ac:	2300      	movs	r3, #0
 80087ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	dc55      	bgt.n	8008862 <_dtoa_r+0x302>
 80087b6:	2301      	movs	r3, #1
 80087b8:	461a      	mov	r2, r3
 80087ba:	9306      	str	r3, [sp, #24]
 80087bc:	9308      	str	r3, [sp, #32]
 80087be:	9223      	str	r2, [sp, #140]	; 0x8c
 80087c0:	e00b      	b.n	80087da <_dtoa_r+0x27a>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7f3      	b.n	80087ae <_dtoa_r+0x24e>
 80087c6:	2300      	movs	r3, #0
 80087c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087cc:	445b      	add	r3, fp
 80087ce:	9306      	str	r3, [sp, #24]
 80087d0:	3301      	adds	r3, #1
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	9308      	str	r3, [sp, #32]
 80087d6:	bfb8      	it	lt
 80087d8:	2301      	movlt	r3, #1
 80087da:	2100      	movs	r1, #0
 80087dc:	2204      	movs	r2, #4
 80087de:	69e8      	ldr	r0, [r5, #28]
 80087e0:	f102 0614 	add.w	r6, r2, #20
 80087e4:	429e      	cmp	r6, r3
 80087e6:	d940      	bls.n	800886a <_dtoa_r+0x30a>
 80087e8:	6041      	str	r1, [r0, #4]
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 fd98 	bl	8009320 <_Balloc>
 80087f0:	9003      	str	r0, [sp, #12]
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d13c      	bne.n	8008870 <_dtoa_r+0x310>
 80087f6:	4602      	mov	r2, r0
 80087f8:	f240 11af 	movw	r1, #431	; 0x1af
 80087fc:	4b16      	ldr	r3, [pc, #88]	; (8008858 <_dtoa_r+0x2f8>)
 80087fe:	e6c3      	b.n	8008588 <_dtoa_r+0x28>
 8008800:	2301      	movs	r3, #1
 8008802:	e7e1      	b.n	80087c8 <_dtoa_r+0x268>
 8008804:	2401      	movs	r4, #1
 8008806:	2300      	movs	r3, #0
 8008808:	940b      	str	r4, [sp, #44]	; 0x2c
 800880a:	9322      	str	r3, [sp, #136]	; 0x88
 800880c:	f04f 33ff 	mov.w	r3, #4294967295
 8008810:	2200      	movs	r2, #0
 8008812:	9306      	str	r3, [sp, #24]
 8008814:	9308      	str	r3, [sp, #32]
 8008816:	2312      	movs	r3, #18
 8008818:	e7d1      	b.n	80087be <_dtoa_r+0x25e>
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w
 8008820:	636f4361 	.word	0x636f4361
 8008824:	3fd287a7 	.word	0x3fd287a7
 8008828:	8b60c8b3 	.word	0x8b60c8b3
 800882c:	3fc68a28 	.word	0x3fc68a28
 8008830:	509f79fb 	.word	0x509f79fb
 8008834:	3fd34413 	.word	0x3fd34413
 8008838:	0800ad81 	.word	0x0800ad81
 800883c:	0800ad98 	.word	0x0800ad98
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	0800ad7d 	.word	0x0800ad7d
 8008848:	0800ad74 	.word	0x0800ad74
 800884c:	0800ad51 	.word	0x0800ad51
 8008850:	3ff80000 	.word	0x3ff80000
 8008854:	0800ae88 	.word	0x0800ae88
 8008858:	0800adf0 	.word	0x0800adf0
 800885c:	2301      	movs	r3, #1
 800885e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008860:	e7d4      	b.n	800880c <_dtoa_r+0x2ac>
 8008862:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008864:	9306      	str	r3, [sp, #24]
 8008866:	9308      	str	r3, [sp, #32]
 8008868:	e7b7      	b.n	80087da <_dtoa_r+0x27a>
 800886a:	3101      	adds	r1, #1
 800886c:	0052      	lsls	r2, r2, #1
 800886e:	e7b7      	b.n	80087e0 <_dtoa_r+0x280>
 8008870:	69eb      	ldr	r3, [r5, #28]
 8008872:	9a03      	ldr	r2, [sp, #12]
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	2b0e      	cmp	r3, #14
 800887a:	f200 80a8 	bhi.w	80089ce <_dtoa_r+0x46e>
 800887e:	2c00      	cmp	r4, #0
 8008880:	f000 80a5 	beq.w	80089ce <_dtoa_r+0x46e>
 8008884:	f1bb 0f00 	cmp.w	fp, #0
 8008888:	dd34      	ble.n	80088f4 <_dtoa_r+0x394>
 800888a:	4b9a      	ldr	r3, [pc, #616]	; (8008af4 <_dtoa_r+0x594>)
 800888c:	f00b 020f 	and.w	r2, fp, #15
 8008890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008894:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800889c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80088a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80088a4:	d016      	beq.n	80088d4 <_dtoa_r+0x374>
 80088a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088aa:	4b93      	ldr	r3, [pc, #588]	; (8008af8 <_dtoa_r+0x598>)
 80088ac:	2703      	movs	r7, #3
 80088ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088b2:	f7f7 ff3b 	bl	800072c <__aeabi_ddiv>
 80088b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ba:	f004 040f 	and.w	r4, r4, #15
 80088be:	4e8e      	ldr	r6, [pc, #568]	; (8008af8 <_dtoa_r+0x598>)
 80088c0:	b954      	cbnz	r4, 80088d8 <_dtoa_r+0x378>
 80088c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ca:	f7f7 ff2f 	bl	800072c <__aeabi_ddiv>
 80088ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d2:	e029      	b.n	8008928 <_dtoa_r+0x3c8>
 80088d4:	2702      	movs	r7, #2
 80088d6:	e7f2      	b.n	80088be <_dtoa_r+0x35e>
 80088d8:	07e1      	lsls	r1, r4, #31
 80088da:	d508      	bpl.n	80088ee <_dtoa_r+0x38e>
 80088dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e4:	f7f7 fdf8 	bl	80004d8 <__aeabi_dmul>
 80088e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088ec:	3701      	adds	r7, #1
 80088ee:	1064      	asrs	r4, r4, #1
 80088f0:	3608      	adds	r6, #8
 80088f2:	e7e5      	b.n	80088c0 <_dtoa_r+0x360>
 80088f4:	f000 80a5 	beq.w	8008a42 <_dtoa_r+0x4e2>
 80088f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088fc:	f1cb 0400 	rsb	r4, fp, #0
 8008900:	4b7c      	ldr	r3, [pc, #496]	; (8008af4 <_dtoa_r+0x594>)
 8008902:	f004 020f 	and.w	r2, r4, #15
 8008906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fde3 	bl	80004d8 <__aeabi_dmul>
 8008912:	2702      	movs	r7, #2
 8008914:	2300      	movs	r3, #0
 8008916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800891a:	4e77      	ldr	r6, [pc, #476]	; (8008af8 <_dtoa_r+0x598>)
 800891c:	1124      	asrs	r4, r4, #4
 800891e:	2c00      	cmp	r4, #0
 8008920:	f040 8084 	bne.w	8008a2c <_dtoa_r+0x4cc>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1d2      	bne.n	80088ce <_dtoa_r+0x36e>
 8008928:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800892c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8087 	beq.w	8008a46 <_dtoa_r+0x4e6>
 8008938:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800893c:	2200      	movs	r2, #0
 800893e:	4b6f      	ldr	r3, [pc, #444]	; (8008afc <_dtoa_r+0x59c>)
 8008940:	f7f8 f83c 	bl	80009bc <__aeabi_dcmplt>
 8008944:	2800      	cmp	r0, #0
 8008946:	d07e      	beq.n	8008a46 <_dtoa_r+0x4e6>
 8008948:	9b08      	ldr	r3, [sp, #32]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d07b      	beq.n	8008a46 <_dtoa_r+0x4e6>
 800894e:	9b06      	ldr	r3, [sp, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dd38      	ble.n	80089c6 <_dtoa_r+0x466>
 8008954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008958:	2200      	movs	r2, #0
 800895a:	4b69      	ldr	r3, [pc, #420]	; (8008b00 <_dtoa_r+0x5a0>)
 800895c:	f7f7 fdbc 	bl	80004d8 <__aeabi_dmul>
 8008960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008964:	9c06      	ldr	r4, [sp, #24]
 8008966:	f10b 38ff 	add.w	r8, fp, #4294967295
 800896a:	3701      	adds	r7, #1
 800896c:	4638      	mov	r0, r7
 800896e:	f7f7 fd49 	bl	8000404 <__aeabi_i2d>
 8008972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008976:	f7f7 fdaf 	bl	80004d8 <__aeabi_dmul>
 800897a:	2200      	movs	r2, #0
 800897c:	4b61      	ldr	r3, [pc, #388]	; (8008b04 <_dtoa_r+0x5a4>)
 800897e:	f7f7 fbf5 	bl	800016c <__adddf3>
 8008982:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008986:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800898a:	9611      	str	r6, [sp, #68]	; 0x44
 800898c:	2c00      	cmp	r4, #0
 800898e:	d15d      	bne.n	8008a4c <_dtoa_r+0x4ec>
 8008990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008994:	2200      	movs	r2, #0
 8008996:	4b5c      	ldr	r3, [pc, #368]	; (8008b08 <_dtoa_r+0x5a8>)
 8008998:	f7f7 fbe6 	bl	8000168 <__aeabi_dsub>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089a4:	4633      	mov	r3, r6
 80089a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089a8:	f7f8 f826 	bl	80009f8 <__aeabi_dcmpgt>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	f040 8295 	bne.w	8008edc <_dtoa_r+0x97c>
 80089b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089bc:	f7f7 fffe 	bl	80009bc <__aeabi_dcmplt>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	f040 8289 	bne.w	8008ed8 <_dtoa_r+0x978>
 80089c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80089ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f2c0 8151 	blt.w	8008c78 <_dtoa_r+0x718>
 80089d6:	f1bb 0f0e 	cmp.w	fp, #14
 80089da:	f300 814d 	bgt.w	8008c78 <_dtoa_r+0x718>
 80089de:	4b45      	ldr	r3, [pc, #276]	; (8008af4 <_dtoa_r+0x594>)
 80089e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f280 80da 	bge.w	8008ba8 <_dtoa_r+0x648>
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f300 80d6 	bgt.w	8008ba8 <_dtoa_r+0x648>
 80089fc:	f040 826b 	bne.w	8008ed6 <_dtoa_r+0x976>
 8008a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a04:	2200      	movs	r2, #0
 8008a06:	4b40      	ldr	r3, [pc, #256]	; (8008b08 <_dtoa_r+0x5a8>)
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a10:	f7f7 ffe8 	bl	80009e4 <__aeabi_dcmpge>
 8008a14:	9c08      	ldr	r4, [sp, #32]
 8008a16:	4626      	mov	r6, r4
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f040 8241 	bne.w	8008ea0 <_dtoa_r+0x940>
 8008a1e:	2331      	movs	r3, #49	; 0x31
 8008a20:	9f03      	ldr	r7, [sp, #12]
 8008a22:	f10b 0b01 	add.w	fp, fp, #1
 8008a26:	f807 3b01 	strb.w	r3, [r7], #1
 8008a2a:	e23d      	b.n	8008ea8 <_dtoa_r+0x948>
 8008a2c:	07e2      	lsls	r2, r4, #31
 8008a2e:	d505      	bpl.n	8008a3c <_dtoa_r+0x4dc>
 8008a30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a34:	f7f7 fd50 	bl	80004d8 <__aeabi_dmul>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	3701      	adds	r7, #1
 8008a3c:	1064      	asrs	r4, r4, #1
 8008a3e:	3608      	adds	r6, #8
 8008a40:	e76d      	b.n	800891e <_dtoa_r+0x3be>
 8008a42:	2702      	movs	r7, #2
 8008a44:	e770      	b.n	8008928 <_dtoa_r+0x3c8>
 8008a46:	46d8      	mov	r8, fp
 8008a48:	9c08      	ldr	r4, [sp, #32]
 8008a4a:	e78f      	b.n	800896c <_dtoa_r+0x40c>
 8008a4c:	9903      	ldr	r1, [sp, #12]
 8008a4e:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <_dtoa_r+0x594>)
 8008a50:	4421      	add	r1, r4
 8008a52:	9112      	str	r1, [sp, #72]	; 0x48
 8008a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a62:	2900      	cmp	r1, #0
 8008a64:	d054      	beq.n	8008b10 <_dtoa_r+0x5b0>
 8008a66:	2000      	movs	r0, #0
 8008a68:	4928      	ldr	r1, [pc, #160]	; (8008b0c <_dtoa_r+0x5ac>)
 8008a6a:	f7f7 fe5f 	bl	800072c <__aeabi_ddiv>
 8008a6e:	463b      	mov	r3, r7
 8008a70:	4632      	mov	r2, r6
 8008a72:	f7f7 fb79 	bl	8000168 <__aeabi_dsub>
 8008a76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a7a:	9f03      	ldr	r7, [sp, #12]
 8008a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a80:	f7f7 ffda 	bl	8000a38 <__aeabi_d2iz>
 8008a84:	4604      	mov	r4, r0
 8008a86:	f7f7 fcbd 	bl	8000404 <__aeabi_i2d>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a92:	f7f7 fb69 	bl	8000168 <__aeabi_dsub>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	3430      	adds	r4, #48	; 0x30
 8008a9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008aa4:	f807 4b01 	strb.w	r4, [r7], #1
 8008aa8:	f7f7 ff88 	bl	80009bc <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d173      	bne.n	8008b98 <_dtoa_r+0x638>
 8008ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	4911      	ldr	r1, [pc, #68]	; (8008afc <_dtoa_r+0x59c>)
 8008ab8:	f7f7 fb56 	bl	8000168 <__aeabi_dsub>
 8008abc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ac0:	f7f7 ff7c 	bl	80009bc <__aeabi_dcmplt>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f040 80b6 	bne.w	8008c36 <_dtoa_r+0x6d6>
 8008aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008acc:	429f      	cmp	r7, r3
 8008ace:	f43f af7a 	beq.w	80089c6 <_dtoa_r+0x466>
 8008ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <_dtoa_r+0x5a0>)
 8008ada:	f7f7 fcfd 	bl	80004d8 <__aeabi_dmul>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <_dtoa_r+0x5a0>)
 8008aea:	f7f7 fcf5 	bl	80004d8 <__aeabi_dmul>
 8008aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008af2:	e7c3      	b.n	8008a7c <_dtoa_r+0x51c>
 8008af4:	0800ae88 	.word	0x0800ae88
 8008af8:	0800ae60 	.word	0x0800ae60
 8008afc:	3ff00000 	.word	0x3ff00000
 8008b00:	40240000 	.word	0x40240000
 8008b04:	401c0000 	.word	0x401c0000
 8008b08:	40140000 	.word	0x40140000
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 fce0 	bl	80004d8 <__aeabi_dmul>
 8008b18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b1e:	9c03      	ldr	r4, [sp, #12]
 8008b20:	9314      	str	r3, [sp, #80]	; 0x50
 8008b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b26:	f7f7 ff87 	bl	8000a38 <__aeabi_d2iz>
 8008b2a:	9015      	str	r0, [sp, #84]	; 0x54
 8008b2c:	f7f7 fc6a 	bl	8000404 <__aeabi_i2d>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b38:	f7f7 fb16 	bl	8000168 <__aeabi_dsub>
 8008b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b3e:	4606      	mov	r6, r0
 8008b40:	3330      	adds	r3, #48	; 0x30
 8008b42:	f804 3b01 	strb.w	r3, [r4], #1
 8008b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b48:	460f      	mov	r7, r1
 8008b4a:	429c      	cmp	r4, r3
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	d124      	bne.n	8008b9c <_dtoa_r+0x63c>
 8008b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b56:	4baf      	ldr	r3, [pc, #700]	; (8008e14 <_dtoa_r+0x8b4>)
 8008b58:	f7f7 fb08 	bl	800016c <__adddf3>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d163      	bne.n	8008c34 <_dtoa_r+0x6d4>
 8008b6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b70:	2000      	movs	r0, #0
 8008b72:	49a8      	ldr	r1, [pc, #672]	; (8008e14 <_dtoa_r+0x8b4>)
 8008b74:	f7f7 faf8 	bl	8000168 <__aeabi_dsub>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f43f af1e 	beq.w	80089c6 <_dtoa_r+0x466>
 8008b8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b8c:	1e7b      	subs	r3, r7, #1
 8008b8e:	9314      	str	r3, [sp, #80]	; 0x50
 8008b90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b94:	2b30      	cmp	r3, #48	; 0x30
 8008b96:	d0f8      	beq.n	8008b8a <_dtoa_r+0x62a>
 8008b98:	46c3      	mov	fp, r8
 8008b9a:	e03b      	b.n	8008c14 <_dtoa_r+0x6b4>
 8008b9c:	4b9e      	ldr	r3, [pc, #632]	; (8008e18 <_dtoa_r+0x8b8>)
 8008b9e:	f7f7 fc9b 	bl	80004d8 <__aeabi_dmul>
 8008ba2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ba6:	e7bc      	b.n	8008b22 <_dtoa_r+0x5c2>
 8008ba8:	9f03      	ldr	r7, [sp, #12]
 8008baa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	f7f7 fdb9 	bl	800072c <__aeabi_ddiv>
 8008bba:	f7f7 ff3d 	bl	8000a38 <__aeabi_d2iz>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f7f7 fc20 	bl	8000404 <__aeabi_i2d>
 8008bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc8:	f7f7 fc86 	bl	80004d8 <__aeabi_dmul>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4640      	mov	r0, r8
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	f7f7 fac8 	bl	8000168 <__aeabi_dsub>
 8008bd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008bdc:	f807 6b01 	strb.w	r6, [r7], #1
 8008be0:	9e03      	ldr	r6, [sp, #12]
 8008be2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008be6:	1bbe      	subs	r6, r7, r6
 8008be8:	45b4      	cmp	ip, r6
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	d136      	bne.n	8008c5e <_dtoa_r+0x6fe>
 8008bf0:	f7f7 fabc 	bl	800016c <__adddf3>
 8008bf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4689      	mov	r9, r1
 8008bfc:	f7f7 fefc 	bl	80009f8 <__aeabi_dcmpgt>
 8008c00:	bb58      	cbnz	r0, 8008c5a <_dtoa_r+0x6fa>
 8008c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8008c0e:	b108      	cbz	r0, 8008c14 <_dtoa_r+0x6b4>
 8008c10:	07e3      	lsls	r3, r4, #31
 8008c12:	d422      	bmi.n	8008c5a <_dtoa_r+0x6fa>
 8008c14:	4651      	mov	r1, sl
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 fbc2 	bl	80093a0 <_Bfree>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c20:	703b      	strb	r3, [r7, #0]
 8008c22:	f10b 0301 	add.w	r3, fp, #1
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f43f ace6 	beq.w	80085fc <_dtoa_r+0x9c>
 8008c30:	601f      	str	r7, [r3, #0]
 8008c32:	e4e3      	b.n	80085fc <_dtoa_r+0x9c>
 8008c34:	4627      	mov	r7, r4
 8008c36:	463b      	mov	r3, r7
 8008c38:	461f      	mov	r7, r3
 8008c3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c3e:	2a39      	cmp	r2, #57	; 0x39
 8008c40:	d107      	bne.n	8008c52 <_dtoa_r+0x6f2>
 8008c42:	9a03      	ldr	r2, [sp, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d1f7      	bne.n	8008c38 <_dtoa_r+0x6d8>
 8008c48:	2230      	movs	r2, #48	; 0x30
 8008c4a:	9903      	ldr	r1, [sp, #12]
 8008c4c:	f108 0801 	add.w	r8, r8, #1
 8008c50:	700a      	strb	r2, [r1, #0]
 8008c52:	781a      	ldrb	r2, [r3, #0]
 8008c54:	3201      	adds	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e79e      	b.n	8008b98 <_dtoa_r+0x638>
 8008c5a:	46d8      	mov	r8, fp
 8008c5c:	e7eb      	b.n	8008c36 <_dtoa_r+0x6d6>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4b6d      	ldr	r3, [pc, #436]	; (8008e18 <_dtoa_r+0x8b8>)
 8008c62:	f7f7 fc39 	bl	80004d8 <__aeabi_dmul>
 8008c66:	2200      	movs	r2, #0
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	4689      	mov	r9, r1
 8008c6e:	f7f7 fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d09b      	beq.n	8008bae <_dtoa_r+0x64e>
 8008c76:	e7cd      	b.n	8008c14 <_dtoa_r+0x6b4>
 8008c78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	f000 80c4 	beq.w	8008e08 <_dtoa_r+0x8a8>
 8008c80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c82:	2a01      	cmp	r2, #1
 8008c84:	f300 80a8 	bgt.w	8008dd8 <_dtoa_r+0x878>
 8008c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	f000 80a0 	beq.w	8008dd0 <_dtoa_r+0x870>
 8008c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c94:	464f      	mov	r7, r9
 8008c96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	441a      	add	r2, r3
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	4499      	add	r9, r3
 8008ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ca4:	f000 fc32 	bl	800950c <__i2b>
 8008ca8:	4606      	mov	r6, r0
 8008caa:	b15f      	cbz	r7, 8008cc4 <_dtoa_r+0x764>
 8008cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	dd08      	ble.n	8008cc4 <_dtoa_r+0x764>
 8008cb2:	42bb      	cmp	r3, r7
 8008cb4:	bfa8      	it	ge
 8008cb6:	463b      	movge	r3, r7
 8008cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cba:	eba9 0903 	sub.w	r9, r9, r3
 8008cbe:	1aff      	subs	r7, r7, r3
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc6:	b1f3      	cbz	r3, 8008d06 <_dtoa_r+0x7a6>
 8008cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 80a0 	beq.w	8008e10 <_dtoa_r+0x8b0>
 8008cd0:	2c00      	cmp	r4, #0
 8008cd2:	dd10      	ble.n	8008cf6 <_dtoa_r+0x796>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f000 fcd5 	bl	8009688 <__pow5mult>
 8008cde:	4652      	mov	r2, sl
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f000 fc27 	bl	8009538 <__multiply>
 8008cea:	4680      	mov	r8, r0
 8008cec:	4651      	mov	r1, sl
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 fb56 	bl	80093a0 <_Bfree>
 8008cf4:	46c2      	mov	sl, r8
 8008cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf8:	1b1a      	subs	r2, r3, r4
 8008cfa:	d004      	beq.n	8008d06 <_dtoa_r+0x7a6>
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 fcc2 	bl	8009688 <__pow5mult>
 8008d04:	4682      	mov	sl, r0
 8008d06:	2101      	movs	r1, #1
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 fbff 	bl	800950c <__i2b>
 8008d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d10:	4604      	mov	r4, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f340 8082 	ble.w	8008e1c <_dtoa_r+0x8bc>
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f000 fcb3 	bl	8009688 <__pow5mult>
 8008d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d24:	4604      	mov	r4, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	dd7b      	ble.n	8008e22 <_dtoa_r+0x8c2>
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d34:	6918      	ldr	r0, [r3, #16]
 8008d36:	f000 fb9b 	bl	8009470 <__hi0bits>
 8008d3a:	f1c0 0020 	rsb	r0, r0, #32
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	4418      	add	r0, r3
 8008d42:	f010 001f 	ands.w	r0, r0, #31
 8008d46:	f000 8092 	beq.w	8008e6e <_dtoa_r+0x90e>
 8008d4a:	f1c0 0320 	rsb	r3, r0, #32
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	f340 8085 	ble.w	8008e5e <_dtoa_r+0x8fe>
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	f1c0 001c 	rsb	r0, r0, #28
 8008d5a:	4403      	add	r3, r0
 8008d5c:	4481      	add	r9, r0
 8008d5e:	4407      	add	r7, r0
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	f1b9 0f00 	cmp.w	r9, #0
 8008d66:	dd05      	ble.n	8008d74 <_dtoa_r+0x814>
 8008d68:	4651      	mov	r1, sl
 8008d6a:	464a      	mov	r2, r9
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f000 fce5 	bl	800973c <__lshift>
 8008d72:	4682      	mov	sl, r0
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd05      	ble.n	8008d86 <_dtoa_r+0x826>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f000 fcdc 	bl	800973c <__lshift>
 8008d84:	4604      	mov	r4, r0
 8008d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d072      	beq.n	8008e72 <_dtoa_r+0x912>
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	4650      	mov	r0, sl
 8008d90:	f000 fd40 	bl	8009814 <__mcmp>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	da6c      	bge.n	8008e72 <_dtoa_r+0x912>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4651      	mov	r1, sl
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 fb20 	bl	80093e4 <__multadd>
 8008da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da6:	4682      	mov	sl, r0
 8008da8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 81ac 	beq.w	800910a <_dtoa_r+0xbaa>
 8008db2:	2300      	movs	r3, #0
 8008db4:	4631      	mov	r1, r6
 8008db6:	220a      	movs	r2, #10
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 fb13 	bl	80093e4 <__multadd>
 8008dbe:	9b06      	ldr	r3, [sp, #24]
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f300 8093 	bgt.w	8008eee <_dtoa_r+0x98e>
 8008dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	dc59      	bgt.n	8008e82 <_dtoa_r+0x922>
 8008dce:	e08e      	b.n	8008eee <_dtoa_r+0x98e>
 8008dd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dd6:	e75d      	b.n	8008c94 <_dtoa_r+0x734>
 8008dd8:	9b08      	ldr	r3, [sp, #32]
 8008dda:	1e5c      	subs	r4, r3, #1
 8008ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dde:	42a3      	cmp	r3, r4
 8008de0:	bfbf      	itttt	lt
 8008de2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008de4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008de6:	1ae3      	sublt	r3, r4, r3
 8008de8:	18d2      	addlt	r2, r2, r3
 8008dea:	bfa8      	it	ge
 8008dec:	1b1c      	subge	r4, r3, r4
 8008dee:	9b08      	ldr	r3, [sp, #32]
 8008df0:	bfbe      	ittt	lt
 8008df2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008df4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008df6:	2400      	movlt	r4, #0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfb5      	itete	lt
 8008dfc:	eba9 0703 	sublt.w	r7, r9, r3
 8008e00:	464f      	movge	r7, r9
 8008e02:	2300      	movlt	r3, #0
 8008e04:	9b08      	ldrge	r3, [sp, #32]
 8008e06:	e747      	b.n	8008c98 <_dtoa_r+0x738>
 8008e08:	464f      	mov	r7, r9
 8008e0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008e0e:	e74c      	b.n	8008caa <_dtoa_r+0x74a>
 8008e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e12:	e773      	b.n	8008cfc <_dtoa_r+0x79c>
 8008e14:	3fe00000 	.word	0x3fe00000
 8008e18:	40240000 	.word	0x40240000
 8008e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	dc18      	bgt.n	8008e54 <_dtoa_r+0x8f4>
 8008e22:	9b04      	ldr	r3, [sp, #16]
 8008e24:	b9b3      	cbnz	r3, 8008e54 <_dtoa_r+0x8f4>
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2c:	b993      	cbnz	r3, 8008e54 <_dtoa_r+0x8f4>
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e34:	0d1b      	lsrs	r3, r3, #20
 8008e36:	051b      	lsls	r3, r3, #20
 8008e38:	b17b      	cbz	r3, 8008e5a <_dtoa_r+0x8fa>
 8008e3a:	f04f 0801 	mov.w	r8, #1
 8008e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e40:	f109 0901 	add.w	r9, r9, #1
 8008e44:	3301      	adds	r3, #1
 8008e46:	9309      	str	r3, [sp, #36]	; 0x24
 8008e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f47f af6f 	bne.w	8008d2e <_dtoa_r+0x7ce>
 8008e50:	2001      	movs	r0, #1
 8008e52:	e774      	b.n	8008d3e <_dtoa_r+0x7de>
 8008e54:	f04f 0800 	mov.w	r8, #0
 8008e58:	e7f6      	b.n	8008e48 <_dtoa_r+0x8e8>
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	e7f4      	b.n	8008e48 <_dtoa_r+0x8e8>
 8008e5e:	d080      	beq.n	8008d62 <_dtoa_r+0x802>
 8008e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e62:	331c      	adds	r3, #28
 8008e64:	441a      	add	r2, r3
 8008e66:	4499      	add	r9, r3
 8008e68:	441f      	add	r7, r3
 8008e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6c:	e779      	b.n	8008d62 <_dtoa_r+0x802>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	e7f6      	b.n	8008e60 <_dtoa_r+0x900>
 8008e72:	9b08      	ldr	r3, [sp, #32]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	dc34      	bgt.n	8008ee2 <_dtoa_r+0x982>
 8008e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	dd31      	ble.n	8008ee2 <_dtoa_r+0x982>
 8008e7e:	9b08      	ldr	r3, [sp, #32]
 8008e80:	9306      	str	r3, [sp, #24]
 8008e82:	9b06      	ldr	r3, [sp, #24]
 8008e84:	b963      	cbnz	r3, 8008ea0 <_dtoa_r+0x940>
 8008e86:	4621      	mov	r1, r4
 8008e88:	2205      	movs	r2, #5
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 faaa 	bl	80093e4 <__multadd>
 8008e90:	4601      	mov	r1, r0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4650      	mov	r0, sl
 8008e96:	f000 fcbd 	bl	8009814 <__mcmp>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f73f adbf 	bgt.w	8008a1e <_dtoa_r+0x4be>
 8008ea0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ea2:	9f03      	ldr	r7, [sp, #12]
 8008ea4:	ea6f 0b03 	mvn.w	fp, r3
 8008ea8:	f04f 0800 	mov.w	r8, #0
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 fa76 	bl	80093a0 <_Bfree>
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	f43f aead 	beq.w	8008c14 <_dtoa_r+0x6b4>
 8008eba:	f1b8 0f00 	cmp.w	r8, #0
 8008ebe:	d005      	beq.n	8008ecc <_dtoa_r+0x96c>
 8008ec0:	45b0      	cmp	r8, r6
 8008ec2:	d003      	beq.n	8008ecc <_dtoa_r+0x96c>
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 fa6a 	bl	80093a0 <_Bfree>
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 fa66 	bl	80093a0 <_Bfree>
 8008ed4:	e69e      	b.n	8008c14 <_dtoa_r+0x6b4>
 8008ed6:	2400      	movs	r4, #0
 8008ed8:	4626      	mov	r6, r4
 8008eda:	e7e1      	b.n	8008ea0 <_dtoa_r+0x940>
 8008edc:	46c3      	mov	fp, r8
 8008ede:	4626      	mov	r6, r4
 8008ee0:	e59d      	b.n	8008a1e <_dtoa_r+0x4be>
 8008ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80c8 	beq.w	800907a <_dtoa_r+0xb1a>
 8008eea:	9b08      	ldr	r3, [sp, #32]
 8008eec:	9306      	str	r3, [sp, #24]
 8008eee:	2f00      	cmp	r7, #0
 8008ef0:	dd05      	ble.n	8008efe <_dtoa_r+0x99e>
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	463a      	mov	r2, r7
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 fc20 	bl	800973c <__lshift>
 8008efc:	4606      	mov	r6, r0
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	d05b      	beq.n	8008fbc <_dtoa_r+0xa5c>
 8008f04:	4628      	mov	r0, r5
 8008f06:	6871      	ldr	r1, [r6, #4]
 8008f08:	f000 fa0a 	bl	8009320 <_Balloc>
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	b928      	cbnz	r0, 8008f1c <_dtoa_r+0x9bc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f16:	4b81      	ldr	r3, [pc, #516]	; (800911c <_dtoa_r+0xbbc>)
 8008f18:	f7ff bb36 	b.w	8008588 <_dtoa_r+0x28>
 8008f1c:	6932      	ldr	r2, [r6, #16]
 8008f1e:	f106 010c 	add.w	r1, r6, #12
 8008f22:	3202      	adds	r2, #2
 8008f24:	0092      	lsls	r2, r2, #2
 8008f26:	300c      	adds	r0, #12
 8008f28:	f000 fff2 	bl	8009f10 <memcpy>
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 fc03 	bl	800973c <__lshift>
 8008f36:	46b0      	mov	r8, r6
 8008f38:	4606      	mov	r6, r0
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	9a03      	ldr	r2, [sp, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	9308      	str	r3, [sp, #32]
 8008f42:	9b06      	ldr	r3, [sp, #24]
 8008f44:	4413      	add	r3, r2
 8008f46:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	4621      	mov	r1, r4
 8008f54:	3b01      	subs	r3, #1
 8008f56:	4650      	mov	r0, sl
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	f7ff fa76 	bl	800844a <quorem>
 8008f5e:	4641      	mov	r1, r8
 8008f60:	9006      	str	r0, [sp, #24]
 8008f62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f66:	4650      	mov	r0, sl
 8008f68:	f000 fc54 	bl	8009814 <__mcmp>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	9009      	str	r0, [sp, #36]	; 0x24
 8008f70:	4621      	mov	r1, r4
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 fc6a 	bl	800984c <__mdiff>
 8008f78:	68c2      	ldr	r2, [r0, #12]
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	bb02      	cbnz	r2, 8008fc0 <_dtoa_r+0xa60>
 8008f7e:	4601      	mov	r1, r0
 8008f80:	4650      	mov	r0, sl
 8008f82:	f000 fc47 	bl	8009814 <__mcmp>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	920c      	str	r2, [sp, #48]	; 0x30
 8008f8e:	f000 fa07 	bl	80093a0 <_Bfree>
 8008f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f96:	9f08      	ldr	r7, [sp, #32]
 8008f98:	ea43 0102 	orr.w	r1, r3, r2
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f9e:	4319      	orrs	r1, r3
 8008fa0:	d110      	bne.n	8008fc4 <_dtoa_r+0xa64>
 8008fa2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fa6:	d029      	beq.n	8008ffc <_dtoa_r+0xa9c>
 8008fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd02      	ble.n	8008fb4 <_dtoa_r+0xa54>
 8008fae:	9b06      	ldr	r3, [sp, #24]
 8008fb0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	f883 9000 	strb.w	r9, [r3]
 8008fba:	e777      	b.n	8008eac <_dtoa_r+0x94c>
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	e7ba      	b.n	8008f36 <_dtoa_r+0x9d6>
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	e7e1      	b.n	8008f88 <_dtoa_r+0xa28>
 8008fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	db04      	blt.n	8008fd4 <_dtoa_r+0xa74>
 8008fca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008fcc:	430b      	orrs	r3, r1
 8008fce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	d120      	bne.n	8009016 <_dtoa_r+0xab6>
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	dded      	ble.n	8008fb4 <_dtoa_r+0xa54>
 8008fd8:	4651      	mov	r1, sl
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fbad 	bl	800973c <__lshift>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	f000 fc15 	bl	8009814 <__mcmp>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	dc03      	bgt.n	8008ff6 <_dtoa_r+0xa96>
 8008fee:	d1e1      	bne.n	8008fb4 <_dtoa_r+0xa54>
 8008ff0:	f019 0f01 	tst.w	r9, #1
 8008ff4:	d0de      	beq.n	8008fb4 <_dtoa_r+0xa54>
 8008ff6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ffa:	d1d8      	bne.n	8008fae <_dtoa_r+0xa4e>
 8008ffc:	2339      	movs	r3, #57	; 0x39
 8008ffe:	9a04      	ldr	r2, [sp, #16]
 8009000:	7013      	strb	r3, [r2, #0]
 8009002:	463b      	mov	r3, r7
 8009004:	461f      	mov	r7, r3
 8009006:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800900a:	3b01      	subs	r3, #1
 800900c:	2a39      	cmp	r2, #57	; 0x39
 800900e:	d06b      	beq.n	80090e8 <_dtoa_r+0xb88>
 8009010:	3201      	adds	r2, #1
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e74a      	b.n	8008eac <_dtoa_r+0x94c>
 8009016:	2a00      	cmp	r2, #0
 8009018:	dd07      	ble.n	800902a <_dtoa_r+0xaca>
 800901a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800901e:	d0ed      	beq.n	8008ffc <_dtoa_r+0xa9c>
 8009020:	9a04      	ldr	r2, [sp, #16]
 8009022:	f109 0301 	add.w	r3, r9, #1
 8009026:	7013      	strb	r3, [r2, #0]
 8009028:	e740      	b.n	8008eac <_dtoa_r+0x94c>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800902e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009032:	4293      	cmp	r3, r2
 8009034:	d042      	beq.n	80090bc <_dtoa_r+0xb5c>
 8009036:	4651      	mov	r1, sl
 8009038:	2300      	movs	r3, #0
 800903a:	220a      	movs	r2, #10
 800903c:	4628      	mov	r0, r5
 800903e:	f000 f9d1 	bl	80093e4 <__multadd>
 8009042:	45b0      	cmp	r8, r6
 8009044:	4682      	mov	sl, r0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	f04f 020a 	mov.w	r2, #10
 800904e:	4641      	mov	r1, r8
 8009050:	4628      	mov	r0, r5
 8009052:	d107      	bne.n	8009064 <_dtoa_r+0xb04>
 8009054:	f000 f9c6 	bl	80093e4 <__multadd>
 8009058:	4680      	mov	r8, r0
 800905a:	4606      	mov	r6, r0
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	3301      	adds	r3, #1
 8009060:	9308      	str	r3, [sp, #32]
 8009062:	e775      	b.n	8008f50 <_dtoa_r+0x9f0>
 8009064:	f000 f9be 	bl	80093e4 <__multadd>
 8009068:	4631      	mov	r1, r6
 800906a:	4680      	mov	r8, r0
 800906c:	2300      	movs	r3, #0
 800906e:	220a      	movs	r2, #10
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f9b7 	bl	80093e4 <__multadd>
 8009076:	4606      	mov	r6, r0
 8009078:	e7f0      	b.n	800905c <_dtoa_r+0xafc>
 800907a:	9b08      	ldr	r3, [sp, #32]
 800907c:	9306      	str	r3, [sp, #24]
 800907e:	9f03      	ldr	r7, [sp, #12]
 8009080:	4621      	mov	r1, r4
 8009082:	4650      	mov	r0, sl
 8009084:	f7ff f9e1 	bl	800844a <quorem>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800908e:	f807 9b01 	strb.w	r9, [r7], #1
 8009092:	1afa      	subs	r2, r7, r3
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	4293      	cmp	r3, r2
 8009098:	dd07      	ble.n	80090aa <_dtoa_r+0xb4a>
 800909a:	4651      	mov	r1, sl
 800909c:	2300      	movs	r3, #0
 800909e:	220a      	movs	r2, #10
 80090a0:	4628      	mov	r0, r5
 80090a2:	f000 f99f 	bl	80093e4 <__multadd>
 80090a6:	4682      	mov	sl, r0
 80090a8:	e7ea      	b.n	8009080 <_dtoa_r+0xb20>
 80090aa:	9b06      	ldr	r3, [sp, #24]
 80090ac:	f04f 0800 	mov.w	r8, #0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfcc      	ite	gt
 80090b4:	461f      	movgt	r7, r3
 80090b6:	2701      	movle	r7, #1
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	441f      	add	r7, r3
 80090bc:	4651      	mov	r1, sl
 80090be:	2201      	movs	r2, #1
 80090c0:	4628      	mov	r0, r5
 80090c2:	f000 fb3b 	bl	800973c <__lshift>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4682      	mov	sl, r0
 80090ca:	f000 fba3 	bl	8009814 <__mcmp>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dc97      	bgt.n	8009002 <_dtoa_r+0xaa2>
 80090d2:	d102      	bne.n	80090da <_dtoa_r+0xb7a>
 80090d4:	f019 0f01 	tst.w	r9, #1
 80090d8:	d193      	bne.n	8009002 <_dtoa_r+0xaa2>
 80090da:	463b      	mov	r3, r7
 80090dc:	461f      	mov	r7, r3
 80090de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090e2:	2a30      	cmp	r2, #48	; 0x30
 80090e4:	d0fa      	beq.n	80090dc <_dtoa_r+0xb7c>
 80090e6:	e6e1      	b.n	8008eac <_dtoa_r+0x94c>
 80090e8:	9a03      	ldr	r2, [sp, #12]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d18a      	bne.n	8009004 <_dtoa_r+0xaa4>
 80090ee:	2331      	movs	r3, #49	; 0x31
 80090f0:	f10b 0b01 	add.w	fp, fp, #1
 80090f4:	e797      	b.n	8009026 <_dtoa_r+0xac6>
 80090f6:	4b0a      	ldr	r3, [pc, #40]	; (8009120 <_dtoa_r+0xbc0>)
 80090f8:	f7ff ba9f 	b.w	800863a <_dtoa_r+0xda>
 80090fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f47f aa77 	bne.w	80085f2 <_dtoa_r+0x92>
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <_dtoa_r+0xbc4>)
 8009106:	f7ff ba98 	b.w	800863a <_dtoa_r+0xda>
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	dcb6      	bgt.n	800907e <_dtoa_r+0xb1e>
 8009110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009112:	2b02      	cmp	r3, #2
 8009114:	f73f aeb5 	bgt.w	8008e82 <_dtoa_r+0x922>
 8009118:	e7b1      	b.n	800907e <_dtoa_r+0xb1e>
 800911a:	bf00      	nop
 800911c:	0800adf0 	.word	0x0800adf0
 8009120:	0800ad50 	.word	0x0800ad50
 8009124:	0800ad74 	.word	0x0800ad74

08009128 <_free_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4605      	mov	r5, r0
 800912c:	2900      	cmp	r1, #0
 800912e:	d040      	beq.n	80091b2 <_free_r+0x8a>
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f0c      	subs	r4, r1, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	18e4      	addlt	r4, r4, r3
 800913c:	f000 f8e4 	bl	8009308 <__malloc_lock>
 8009140:	4a1c      	ldr	r2, [pc, #112]	; (80091b4 <_free_r+0x8c>)
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	b933      	cbnz	r3, 8009154 <_free_r+0x2c>
 8009146:	6063      	str	r3, [r4, #4]
 8009148:	6014      	str	r4, [r2, #0]
 800914a:	4628      	mov	r0, r5
 800914c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009150:	f000 b8e0 	b.w	8009314 <__malloc_unlock>
 8009154:	42a3      	cmp	r3, r4
 8009156:	d908      	bls.n	800916a <_free_r+0x42>
 8009158:	6820      	ldr	r0, [r4, #0]
 800915a:	1821      	adds	r1, r4, r0
 800915c:	428b      	cmp	r3, r1
 800915e:	bf01      	itttt	eq
 8009160:	6819      	ldreq	r1, [r3, #0]
 8009162:	685b      	ldreq	r3, [r3, #4]
 8009164:	1809      	addeq	r1, r1, r0
 8009166:	6021      	streq	r1, [r4, #0]
 8009168:	e7ed      	b.n	8009146 <_free_r+0x1e>
 800916a:	461a      	mov	r2, r3
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	b10b      	cbz	r3, 8009174 <_free_r+0x4c>
 8009170:	42a3      	cmp	r3, r4
 8009172:	d9fa      	bls.n	800916a <_free_r+0x42>
 8009174:	6811      	ldr	r1, [r2, #0]
 8009176:	1850      	adds	r0, r2, r1
 8009178:	42a0      	cmp	r0, r4
 800917a:	d10b      	bne.n	8009194 <_free_r+0x6c>
 800917c:	6820      	ldr	r0, [r4, #0]
 800917e:	4401      	add	r1, r0
 8009180:	1850      	adds	r0, r2, r1
 8009182:	4283      	cmp	r3, r0
 8009184:	6011      	str	r1, [r2, #0]
 8009186:	d1e0      	bne.n	800914a <_free_r+0x22>
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4408      	add	r0, r1
 800918e:	6010      	str	r0, [r2, #0]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	e7da      	b.n	800914a <_free_r+0x22>
 8009194:	d902      	bls.n	800919c <_free_r+0x74>
 8009196:	230c      	movs	r3, #12
 8009198:	602b      	str	r3, [r5, #0]
 800919a:	e7d6      	b.n	800914a <_free_r+0x22>
 800919c:	6820      	ldr	r0, [r4, #0]
 800919e:	1821      	adds	r1, r4, r0
 80091a0:	428b      	cmp	r3, r1
 80091a2:	bf01      	itttt	eq
 80091a4:	6819      	ldreq	r1, [r3, #0]
 80091a6:	685b      	ldreq	r3, [r3, #4]
 80091a8:	1809      	addeq	r1, r1, r0
 80091aa:	6021      	streq	r1, [r4, #0]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	6054      	str	r4, [r2, #4]
 80091b0:	e7cb      	b.n	800914a <_free_r+0x22>
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000644 	.word	0x20000644

080091b8 <malloc>:
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <malloc+0xc>)
 80091ba:	4601      	mov	r1, r0
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f000 b823 	b.w	8009208 <_malloc_r>
 80091c2:	bf00      	nop
 80091c4:	20000064 	.word	0x20000064

080091c8 <sbrk_aligned>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4e0e      	ldr	r6, [pc, #56]	; (8009204 <sbrk_aligned+0x3c>)
 80091cc:	460c      	mov	r4, r1
 80091ce:	6831      	ldr	r1, [r6, #0]
 80091d0:	4605      	mov	r5, r0
 80091d2:	b911      	cbnz	r1, 80091da <sbrk_aligned+0x12>
 80091d4:	f000 fe8c 	bl	8009ef0 <_sbrk_r>
 80091d8:	6030      	str	r0, [r6, #0]
 80091da:	4621      	mov	r1, r4
 80091dc:	4628      	mov	r0, r5
 80091de:	f000 fe87 	bl	8009ef0 <_sbrk_r>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d00a      	beq.n	80091fc <sbrk_aligned+0x34>
 80091e6:	1cc4      	adds	r4, r0, #3
 80091e8:	f024 0403 	bic.w	r4, r4, #3
 80091ec:	42a0      	cmp	r0, r4
 80091ee:	d007      	beq.n	8009200 <sbrk_aligned+0x38>
 80091f0:	1a21      	subs	r1, r4, r0
 80091f2:	4628      	mov	r0, r5
 80091f4:	f000 fe7c 	bl	8009ef0 <_sbrk_r>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d101      	bne.n	8009200 <sbrk_aligned+0x38>
 80091fc:	f04f 34ff 	mov.w	r4, #4294967295
 8009200:	4620      	mov	r0, r4
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	20000648 	.word	0x20000648

08009208 <_malloc_r>:
 8009208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800920c:	1ccd      	adds	r5, r1, #3
 800920e:	f025 0503 	bic.w	r5, r5, #3
 8009212:	3508      	adds	r5, #8
 8009214:	2d0c      	cmp	r5, #12
 8009216:	bf38      	it	cc
 8009218:	250c      	movcc	r5, #12
 800921a:	2d00      	cmp	r5, #0
 800921c:	4607      	mov	r7, r0
 800921e:	db01      	blt.n	8009224 <_malloc_r+0x1c>
 8009220:	42a9      	cmp	r1, r5
 8009222:	d905      	bls.n	8009230 <_malloc_r+0x28>
 8009224:	230c      	movs	r3, #12
 8009226:	2600      	movs	r6, #0
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	4630      	mov	r0, r6
 800922c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009304 <_malloc_r+0xfc>
 8009234:	f000 f868 	bl	8009308 <__malloc_lock>
 8009238:	f8d8 3000 	ldr.w	r3, [r8]
 800923c:	461c      	mov	r4, r3
 800923e:	bb5c      	cbnz	r4, 8009298 <_malloc_r+0x90>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff ffc0 	bl	80091c8 <sbrk_aligned>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	4604      	mov	r4, r0
 800924c:	d155      	bne.n	80092fa <_malloc_r+0xf2>
 800924e:	f8d8 4000 	ldr.w	r4, [r8]
 8009252:	4626      	mov	r6, r4
 8009254:	2e00      	cmp	r6, #0
 8009256:	d145      	bne.n	80092e4 <_malloc_r+0xdc>
 8009258:	2c00      	cmp	r4, #0
 800925a:	d048      	beq.n	80092ee <_malloc_r+0xe6>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	4631      	mov	r1, r6
 8009260:	4638      	mov	r0, r7
 8009262:	eb04 0903 	add.w	r9, r4, r3
 8009266:	f000 fe43 	bl	8009ef0 <_sbrk_r>
 800926a:	4581      	cmp	r9, r0
 800926c:	d13f      	bne.n	80092ee <_malloc_r+0xe6>
 800926e:	6821      	ldr	r1, [r4, #0]
 8009270:	4638      	mov	r0, r7
 8009272:	1a6d      	subs	r5, r5, r1
 8009274:	4629      	mov	r1, r5
 8009276:	f7ff ffa7 	bl	80091c8 <sbrk_aligned>
 800927a:	3001      	adds	r0, #1
 800927c:	d037      	beq.n	80092ee <_malloc_r+0xe6>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	442b      	add	r3, r5
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	f8d8 3000 	ldr.w	r3, [r8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d038      	beq.n	80092fe <_malloc_r+0xf6>
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	42a2      	cmp	r2, r4
 8009290:	d12b      	bne.n	80092ea <_malloc_r+0xe2>
 8009292:	2200      	movs	r2, #0
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	e00f      	b.n	80092b8 <_malloc_r+0xb0>
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	1b52      	subs	r2, r2, r5
 800929c:	d41f      	bmi.n	80092de <_malloc_r+0xd6>
 800929e:	2a0b      	cmp	r2, #11
 80092a0:	d917      	bls.n	80092d2 <_malloc_r+0xca>
 80092a2:	1961      	adds	r1, r4, r5
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	6025      	str	r5, [r4, #0]
 80092a8:	bf18      	it	ne
 80092aa:	6059      	strne	r1, [r3, #4]
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	bf08      	it	eq
 80092b0:	f8c8 1000 	streq.w	r1, [r8]
 80092b4:	5162      	str	r2, [r4, r5]
 80092b6:	604b      	str	r3, [r1, #4]
 80092b8:	4638      	mov	r0, r7
 80092ba:	f104 060b 	add.w	r6, r4, #11
 80092be:	f000 f829 	bl	8009314 <__malloc_unlock>
 80092c2:	f026 0607 	bic.w	r6, r6, #7
 80092c6:	1d23      	adds	r3, r4, #4
 80092c8:	1af2      	subs	r2, r6, r3
 80092ca:	d0ae      	beq.n	800922a <_malloc_r+0x22>
 80092cc:	1b9b      	subs	r3, r3, r6
 80092ce:	50a3      	str	r3, [r4, r2]
 80092d0:	e7ab      	b.n	800922a <_malloc_r+0x22>
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	6862      	ldr	r2, [r4, #4]
 80092d6:	d1dd      	bne.n	8009294 <_malloc_r+0x8c>
 80092d8:	f8c8 2000 	str.w	r2, [r8]
 80092dc:	e7ec      	b.n	80092b8 <_malloc_r+0xb0>
 80092de:	4623      	mov	r3, r4
 80092e0:	6864      	ldr	r4, [r4, #4]
 80092e2:	e7ac      	b.n	800923e <_malloc_r+0x36>
 80092e4:	4634      	mov	r4, r6
 80092e6:	6876      	ldr	r6, [r6, #4]
 80092e8:	e7b4      	b.n	8009254 <_malloc_r+0x4c>
 80092ea:	4613      	mov	r3, r2
 80092ec:	e7cc      	b.n	8009288 <_malloc_r+0x80>
 80092ee:	230c      	movs	r3, #12
 80092f0:	4638      	mov	r0, r7
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	f000 f80e 	bl	8009314 <__malloc_unlock>
 80092f8:	e797      	b.n	800922a <_malloc_r+0x22>
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	e7dc      	b.n	80092b8 <_malloc_r+0xb0>
 80092fe:	605b      	str	r3, [r3, #4]
 8009300:	deff      	udf	#255	; 0xff
 8009302:	bf00      	nop
 8009304:	20000644 	.word	0x20000644

08009308 <__malloc_lock>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__malloc_lock+0x8>)
 800930a:	f7ff b88e 	b.w	800842a <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	20000640 	.word	0x20000640

08009314 <__malloc_unlock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_unlock+0x8>)
 8009316:	f7ff b889 	b.w	800842c <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	20000640 	.word	0x20000640

08009320 <_Balloc>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	69c6      	ldr	r6, [r0, #28]
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	b976      	cbnz	r6, 8009348 <_Balloc+0x28>
 800932a:	2010      	movs	r0, #16
 800932c:	f7ff ff44 	bl	80091b8 <malloc>
 8009330:	4602      	mov	r2, r0
 8009332:	61e0      	str	r0, [r4, #28]
 8009334:	b920      	cbnz	r0, 8009340 <_Balloc+0x20>
 8009336:	216b      	movs	r1, #107	; 0x6b
 8009338:	4b17      	ldr	r3, [pc, #92]	; (8009398 <_Balloc+0x78>)
 800933a:	4818      	ldr	r0, [pc, #96]	; (800939c <_Balloc+0x7c>)
 800933c:	f000 fdf6 	bl	8009f2c <__assert_func>
 8009340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009344:	6006      	str	r6, [r0, #0]
 8009346:	60c6      	str	r6, [r0, #12]
 8009348:	69e6      	ldr	r6, [r4, #28]
 800934a:	68f3      	ldr	r3, [r6, #12]
 800934c:	b183      	cbz	r3, 8009370 <_Balloc+0x50>
 800934e:	69e3      	ldr	r3, [r4, #28]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009356:	b9b8      	cbnz	r0, 8009388 <_Balloc+0x68>
 8009358:	2101      	movs	r1, #1
 800935a:	fa01 f605 	lsl.w	r6, r1, r5
 800935e:	1d72      	adds	r2, r6, #5
 8009360:	4620      	mov	r0, r4
 8009362:	0092      	lsls	r2, r2, #2
 8009364:	f000 fe00 	bl	8009f68 <_calloc_r>
 8009368:	b160      	cbz	r0, 8009384 <_Balloc+0x64>
 800936a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800936e:	e00e      	b.n	800938e <_Balloc+0x6e>
 8009370:	2221      	movs	r2, #33	; 0x21
 8009372:	2104      	movs	r1, #4
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fdf7 	bl	8009f68 <_calloc_r>
 800937a:	69e3      	ldr	r3, [r4, #28]
 800937c:	60f0      	str	r0, [r6, #12]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e4      	bne.n	800934e <_Balloc+0x2e>
 8009384:	2000      	movs	r0, #0
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	6802      	ldr	r2, [r0, #0]
 800938a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800938e:	2300      	movs	r3, #0
 8009390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009394:	e7f7      	b.n	8009386 <_Balloc+0x66>
 8009396:	bf00      	nop
 8009398:	0800ad81 	.word	0x0800ad81
 800939c:	0800ae01 	.word	0x0800ae01

080093a0 <_Bfree>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	69c6      	ldr	r6, [r0, #28]
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b976      	cbnz	r6, 80093c8 <_Bfree+0x28>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f7ff ff04 	bl	80091b8 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	61e8      	str	r0, [r5, #28]
 80093b4:	b920      	cbnz	r0, 80093c0 <_Bfree+0x20>
 80093b6:	218f      	movs	r1, #143	; 0x8f
 80093b8:	4b08      	ldr	r3, [pc, #32]	; (80093dc <_Bfree+0x3c>)
 80093ba:	4809      	ldr	r0, [pc, #36]	; (80093e0 <_Bfree+0x40>)
 80093bc:	f000 fdb6 	bl	8009f2c <__assert_func>
 80093c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c4:	6006      	str	r6, [r0, #0]
 80093c6:	60c6      	str	r6, [r0, #12]
 80093c8:	b13c      	cbz	r4, 80093da <_Bfree+0x3a>
 80093ca:	69eb      	ldr	r3, [r5, #28]
 80093cc:	6862      	ldr	r2, [r4, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093d4:	6021      	str	r1, [r4, #0]
 80093d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	0800ad81 	.word	0x0800ad81
 80093e0:	0800ae01 	.word	0x0800ae01

080093e4 <__multadd>:
 80093e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	4607      	mov	r7, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	461e      	mov	r6, r3
 80093ee:	2000      	movs	r0, #0
 80093f0:	690d      	ldr	r5, [r1, #16]
 80093f2:	f101 0c14 	add.w	ip, r1, #20
 80093f6:	f8dc 3000 	ldr.w	r3, [ip]
 80093fa:	3001      	adds	r0, #1
 80093fc:	b299      	uxth	r1, r3
 80093fe:	fb02 6101 	mla	r1, r2, r1, r6
 8009402:	0c1e      	lsrs	r6, r3, #16
 8009404:	0c0b      	lsrs	r3, r1, #16
 8009406:	fb02 3306 	mla	r3, r2, r6, r3
 800940a:	b289      	uxth	r1, r1
 800940c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009410:	4285      	cmp	r5, r0
 8009412:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009416:	f84c 1b04 	str.w	r1, [ip], #4
 800941a:	dcec      	bgt.n	80093f6 <__multadd+0x12>
 800941c:	b30e      	cbz	r6, 8009462 <__multadd+0x7e>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	42ab      	cmp	r3, r5
 8009422:	dc19      	bgt.n	8009458 <__multadd+0x74>
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4638      	mov	r0, r7
 8009428:	3101      	adds	r1, #1
 800942a:	f7ff ff79 	bl	8009320 <_Balloc>
 800942e:	4680      	mov	r8, r0
 8009430:	b928      	cbnz	r0, 800943e <__multadd+0x5a>
 8009432:	4602      	mov	r2, r0
 8009434:	21ba      	movs	r1, #186	; 0xba
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <__multadd+0x84>)
 8009438:	480c      	ldr	r0, [pc, #48]	; (800946c <__multadd+0x88>)
 800943a:	f000 fd77 	bl	8009f2c <__assert_func>
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	f104 010c 	add.w	r1, r4, #12
 8009444:	3202      	adds	r2, #2
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	300c      	adds	r0, #12
 800944a:	f000 fd61 	bl	8009f10 <memcpy>
 800944e:	4621      	mov	r1, r4
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff ffa5 	bl	80093a0 <_Bfree>
 8009456:	4644      	mov	r4, r8
 8009458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800945c:	3501      	adds	r5, #1
 800945e:	615e      	str	r6, [r3, #20]
 8009460:	6125      	str	r5, [r4, #16]
 8009462:	4620      	mov	r0, r4
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	0800adf0 	.word	0x0800adf0
 800946c:	0800ae01 	.word	0x0800ae01

08009470 <__hi0bits>:
 8009470:	0c02      	lsrs	r2, r0, #16
 8009472:	0412      	lsls	r2, r2, #16
 8009474:	4603      	mov	r3, r0
 8009476:	b9ca      	cbnz	r2, 80094ac <__hi0bits+0x3c>
 8009478:	0403      	lsls	r3, r0, #16
 800947a:	2010      	movs	r0, #16
 800947c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009480:	bf04      	itt	eq
 8009482:	021b      	lsleq	r3, r3, #8
 8009484:	3008      	addeq	r0, #8
 8009486:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800948a:	bf04      	itt	eq
 800948c:	011b      	lsleq	r3, r3, #4
 800948e:	3004      	addeq	r0, #4
 8009490:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009494:	bf04      	itt	eq
 8009496:	009b      	lsleq	r3, r3, #2
 8009498:	3002      	addeq	r0, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	db05      	blt.n	80094aa <__hi0bits+0x3a>
 800949e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80094a2:	f100 0001 	add.w	r0, r0, #1
 80094a6:	bf08      	it	eq
 80094a8:	2020      	moveq	r0, #32
 80094aa:	4770      	bx	lr
 80094ac:	2000      	movs	r0, #0
 80094ae:	e7e5      	b.n	800947c <__hi0bits+0xc>

080094b0 <__lo0bits>:
 80094b0:	6803      	ldr	r3, [r0, #0]
 80094b2:	4602      	mov	r2, r0
 80094b4:	f013 0007 	ands.w	r0, r3, #7
 80094b8:	d00b      	beq.n	80094d2 <__lo0bits+0x22>
 80094ba:	07d9      	lsls	r1, r3, #31
 80094bc:	d421      	bmi.n	8009502 <__lo0bits+0x52>
 80094be:	0798      	lsls	r0, r3, #30
 80094c0:	bf49      	itett	mi
 80094c2:	085b      	lsrmi	r3, r3, #1
 80094c4:	089b      	lsrpl	r3, r3, #2
 80094c6:	2001      	movmi	r0, #1
 80094c8:	6013      	strmi	r3, [r2, #0]
 80094ca:	bf5c      	itt	pl
 80094cc:	2002      	movpl	r0, #2
 80094ce:	6013      	strpl	r3, [r2, #0]
 80094d0:	4770      	bx	lr
 80094d2:	b299      	uxth	r1, r3
 80094d4:	b909      	cbnz	r1, 80094da <__lo0bits+0x2a>
 80094d6:	2010      	movs	r0, #16
 80094d8:	0c1b      	lsrs	r3, r3, #16
 80094da:	b2d9      	uxtb	r1, r3
 80094dc:	b909      	cbnz	r1, 80094e2 <__lo0bits+0x32>
 80094de:	3008      	adds	r0, #8
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	0719      	lsls	r1, r3, #28
 80094e4:	bf04      	itt	eq
 80094e6:	091b      	lsreq	r3, r3, #4
 80094e8:	3004      	addeq	r0, #4
 80094ea:	0799      	lsls	r1, r3, #30
 80094ec:	bf04      	itt	eq
 80094ee:	089b      	lsreq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	d403      	bmi.n	80094fe <__lo0bits+0x4e>
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	f100 0001 	add.w	r0, r0, #1
 80094fc:	d003      	beq.n	8009506 <__lo0bits+0x56>
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	4770      	bx	lr
 8009502:	2000      	movs	r0, #0
 8009504:	4770      	bx	lr
 8009506:	2020      	movs	r0, #32
 8009508:	4770      	bx	lr
	...

0800950c <__i2b>:
 800950c:	b510      	push	{r4, lr}
 800950e:	460c      	mov	r4, r1
 8009510:	2101      	movs	r1, #1
 8009512:	f7ff ff05 	bl	8009320 <_Balloc>
 8009516:	4602      	mov	r2, r0
 8009518:	b928      	cbnz	r0, 8009526 <__i2b+0x1a>
 800951a:	f240 1145 	movw	r1, #325	; 0x145
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <__i2b+0x24>)
 8009520:	4804      	ldr	r0, [pc, #16]	; (8009534 <__i2b+0x28>)
 8009522:	f000 fd03 	bl	8009f2c <__assert_func>
 8009526:	2301      	movs	r3, #1
 8009528:	6144      	str	r4, [r0, #20]
 800952a:	6103      	str	r3, [r0, #16]
 800952c:	bd10      	pop	{r4, pc}
 800952e:	bf00      	nop
 8009530:	0800adf0 	.word	0x0800adf0
 8009534:	0800ae01 	.word	0x0800ae01

08009538 <__multiply>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	4691      	mov	r9, r2
 800953e:	690a      	ldr	r2, [r1, #16]
 8009540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009544:	460c      	mov	r4, r1
 8009546:	429a      	cmp	r2, r3
 8009548:	bfbe      	ittt	lt
 800954a:	460b      	movlt	r3, r1
 800954c:	464c      	movlt	r4, r9
 800954e:	4699      	movlt	r9, r3
 8009550:	6927      	ldr	r7, [r4, #16]
 8009552:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	eb07 060a 	add.w	r6, r7, sl
 800955e:	42b3      	cmp	r3, r6
 8009560:	b085      	sub	sp, #20
 8009562:	bfb8      	it	lt
 8009564:	3101      	addlt	r1, #1
 8009566:	f7ff fedb 	bl	8009320 <_Balloc>
 800956a:	b930      	cbnz	r0, 800957a <__multiply+0x42>
 800956c:	4602      	mov	r2, r0
 800956e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009572:	4b43      	ldr	r3, [pc, #268]	; (8009680 <__multiply+0x148>)
 8009574:	4843      	ldr	r0, [pc, #268]	; (8009684 <__multiply+0x14c>)
 8009576:	f000 fcd9 	bl	8009f2c <__assert_func>
 800957a:	f100 0514 	add.w	r5, r0, #20
 800957e:	462b      	mov	r3, r5
 8009580:	2200      	movs	r2, #0
 8009582:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009586:	4543      	cmp	r3, r8
 8009588:	d321      	bcc.n	80095ce <__multiply+0x96>
 800958a:	f104 0314 	add.w	r3, r4, #20
 800958e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009592:	f109 0314 	add.w	r3, r9, #20
 8009596:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800959a:	9202      	str	r2, [sp, #8]
 800959c:	1b3a      	subs	r2, r7, r4
 800959e:	3a15      	subs	r2, #21
 80095a0:	f022 0203 	bic.w	r2, r2, #3
 80095a4:	3204      	adds	r2, #4
 80095a6:	f104 0115 	add.w	r1, r4, #21
 80095aa:	428f      	cmp	r7, r1
 80095ac:	bf38      	it	cc
 80095ae:	2204      	movcc	r2, #4
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	9a02      	ldr	r2, [sp, #8]
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d80c      	bhi.n	80095d4 <__multiply+0x9c>
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	dd03      	ble.n	80095c6 <__multiply+0x8e>
 80095be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d05a      	beq.n	800967c <__multiply+0x144>
 80095c6:	6106      	str	r6, [r0, #16]
 80095c8:	b005      	add	sp, #20
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	f843 2b04 	str.w	r2, [r3], #4
 80095d2:	e7d8      	b.n	8009586 <__multiply+0x4e>
 80095d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80095d8:	f1ba 0f00 	cmp.w	sl, #0
 80095dc:	d023      	beq.n	8009626 <__multiply+0xee>
 80095de:	46a9      	mov	r9, r5
 80095e0:	f04f 0c00 	mov.w	ip, #0
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095ec:	f8d9 1000 	ldr.w	r1, [r9]
 80095f0:	fa1f fb82 	uxth.w	fp, r2
 80095f4:	b289      	uxth	r1, r1
 80095f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80095fa:	4461      	add	r1, ip
 80095fc:	f8d9 c000 	ldr.w	ip, [r9]
 8009600:	0c12      	lsrs	r2, r2, #16
 8009602:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009606:	fb0a c202 	mla	r2, sl, r2, ip
 800960a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800960e:	b289      	uxth	r1, r1
 8009610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009614:	4577      	cmp	r7, lr
 8009616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800961a:	f849 1b04 	str.w	r1, [r9], #4
 800961e:	d8e3      	bhi.n	80095e8 <__multiply+0xb0>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	f845 c002 	str.w	ip, [r5, r2]
 8009626:	9a03      	ldr	r2, [sp, #12]
 8009628:	3304      	adds	r3, #4
 800962a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800962e:	f1b9 0f00 	cmp.w	r9, #0
 8009632:	d021      	beq.n	8009678 <__multiply+0x140>
 8009634:	46ae      	mov	lr, r5
 8009636:	f04f 0a00 	mov.w	sl, #0
 800963a:	6829      	ldr	r1, [r5, #0]
 800963c:	f104 0c14 	add.w	ip, r4, #20
 8009640:	f8bc b000 	ldrh.w	fp, [ip]
 8009644:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009648:	b289      	uxth	r1, r1
 800964a:	fb09 220b 	mla	r2, r9, fp, r2
 800964e:	4452      	add	r2, sl
 8009650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009654:	f84e 1b04 	str.w	r1, [lr], #4
 8009658:	f85c 1b04 	ldr.w	r1, [ip], #4
 800965c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009660:	f8be 1000 	ldrh.w	r1, [lr]
 8009664:	4567      	cmp	r7, ip
 8009666:	fb09 110a 	mla	r1, r9, sl, r1
 800966a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800966e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009672:	d8e5      	bhi.n	8009640 <__multiply+0x108>
 8009674:	9a01      	ldr	r2, [sp, #4]
 8009676:	50a9      	str	r1, [r5, r2]
 8009678:	3504      	adds	r5, #4
 800967a:	e79a      	b.n	80095b2 <__multiply+0x7a>
 800967c:	3e01      	subs	r6, #1
 800967e:	e79c      	b.n	80095ba <__multiply+0x82>
 8009680:	0800adf0 	.word	0x0800adf0
 8009684:	0800ae01 	.word	0x0800ae01

08009688 <__pow5mult>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4615      	mov	r5, r2
 800968e:	f012 0203 	ands.w	r2, r2, #3
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	d007      	beq.n	80096a8 <__pow5mult+0x20>
 8009698:	4c25      	ldr	r4, [pc, #148]	; (8009730 <__pow5mult+0xa8>)
 800969a:	3a01      	subs	r2, #1
 800969c:	2300      	movs	r3, #0
 800969e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096a2:	f7ff fe9f 	bl	80093e4 <__multadd>
 80096a6:	4607      	mov	r7, r0
 80096a8:	10ad      	asrs	r5, r5, #2
 80096aa:	d03d      	beq.n	8009728 <__pow5mult+0xa0>
 80096ac:	69f4      	ldr	r4, [r6, #28]
 80096ae:	b97c      	cbnz	r4, 80096d0 <__pow5mult+0x48>
 80096b0:	2010      	movs	r0, #16
 80096b2:	f7ff fd81 	bl	80091b8 <malloc>
 80096b6:	4602      	mov	r2, r0
 80096b8:	61f0      	str	r0, [r6, #28]
 80096ba:	b928      	cbnz	r0, 80096c8 <__pow5mult+0x40>
 80096bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80096c0:	4b1c      	ldr	r3, [pc, #112]	; (8009734 <__pow5mult+0xac>)
 80096c2:	481d      	ldr	r0, [pc, #116]	; (8009738 <__pow5mult+0xb0>)
 80096c4:	f000 fc32 	bl	8009f2c <__assert_func>
 80096c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096cc:	6004      	str	r4, [r0, #0]
 80096ce:	60c4      	str	r4, [r0, #12]
 80096d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80096d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096d8:	b94c      	cbnz	r4, 80096ee <__pow5mult+0x66>
 80096da:	f240 2171 	movw	r1, #625	; 0x271
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ff14 	bl	800950c <__i2b>
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80096ec:	6003      	str	r3, [r0, #0]
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	07eb      	lsls	r3, r5, #31
 80096f4:	d50a      	bpl.n	800970c <__pow5mult+0x84>
 80096f6:	4639      	mov	r1, r7
 80096f8:	4622      	mov	r2, r4
 80096fa:	4630      	mov	r0, r6
 80096fc:	f7ff ff1c 	bl	8009538 <__multiply>
 8009700:	4680      	mov	r8, r0
 8009702:	4639      	mov	r1, r7
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff fe4b 	bl	80093a0 <_Bfree>
 800970a:	4647      	mov	r7, r8
 800970c:	106d      	asrs	r5, r5, #1
 800970e:	d00b      	beq.n	8009728 <__pow5mult+0xa0>
 8009710:	6820      	ldr	r0, [r4, #0]
 8009712:	b938      	cbnz	r0, 8009724 <__pow5mult+0x9c>
 8009714:	4622      	mov	r2, r4
 8009716:	4621      	mov	r1, r4
 8009718:	4630      	mov	r0, r6
 800971a:	f7ff ff0d 	bl	8009538 <__multiply>
 800971e:	6020      	str	r0, [r4, #0]
 8009720:	f8c0 9000 	str.w	r9, [r0]
 8009724:	4604      	mov	r4, r0
 8009726:	e7e4      	b.n	80096f2 <__pow5mult+0x6a>
 8009728:	4638      	mov	r0, r7
 800972a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800972e:	bf00      	nop
 8009730:	0800af50 	.word	0x0800af50
 8009734:	0800ad81 	.word	0x0800ad81
 8009738:	0800ae01 	.word	0x0800ae01

0800973c <__lshift>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	4607      	mov	r7, r0
 8009744:	4691      	mov	r9, r2
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	6849      	ldr	r1, [r1, #4]
 800974a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009754:	f108 0601 	add.w	r6, r8, #1
 8009758:	42b3      	cmp	r3, r6
 800975a:	db0b      	blt.n	8009774 <__lshift+0x38>
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff fddf 	bl	8009320 <_Balloc>
 8009762:	4605      	mov	r5, r0
 8009764:	b948      	cbnz	r0, 800977a <__lshift+0x3e>
 8009766:	4602      	mov	r2, r0
 8009768:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800976c:	4b27      	ldr	r3, [pc, #156]	; (800980c <__lshift+0xd0>)
 800976e:	4828      	ldr	r0, [pc, #160]	; (8009810 <__lshift+0xd4>)
 8009770:	f000 fbdc 	bl	8009f2c <__assert_func>
 8009774:	3101      	adds	r1, #1
 8009776:	005b      	lsls	r3, r3, #1
 8009778:	e7ee      	b.n	8009758 <__lshift+0x1c>
 800977a:	2300      	movs	r3, #0
 800977c:	f100 0114 	add.w	r1, r0, #20
 8009780:	f100 0210 	add.w	r2, r0, #16
 8009784:	4618      	mov	r0, r3
 8009786:	4553      	cmp	r3, sl
 8009788:	db33      	blt.n	80097f2 <__lshift+0xb6>
 800978a:	6920      	ldr	r0, [r4, #16]
 800978c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009790:	f104 0314 	add.w	r3, r4, #20
 8009794:	f019 091f 	ands.w	r9, r9, #31
 8009798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800979c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097a0:	d02b      	beq.n	80097fa <__lshift+0xbe>
 80097a2:	468a      	mov	sl, r1
 80097a4:	2200      	movs	r2, #0
 80097a6:	f1c9 0e20 	rsb	lr, r9, #32
 80097aa:	6818      	ldr	r0, [r3, #0]
 80097ac:	fa00 f009 	lsl.w	r0, r0, r9
 80097b0:	4310      	orrs	r0, r2
 80097b2:	f84a 0b04 	str.w	r0, [sl], #4
 80097b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ba:	459c      	cmp	ip, r3
 80097bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80097c0:	d8f3      	bhi.n	80097aa <__lshift+0x6e>
 80097c2:	ebac 0304 	sub.w	r3, ip, r4
 80097c6:	3b15      	subs	r3, #21
 80097c8:	f023 0303 	bic.w	r3, r3, #3
 80097cc:	3304      	adds	r3, #4
 80097ce:	f104 0015 	add.w	r0, r4, #21
 80097d2:	4584      	cmp	ip, r0
 80097d4:	bf38      	it	cc
 80097d6:	2304      	movcc	r3, #4
 80097d8:	50ca      	str	r2, [r1, r3]
 80097da:	b10a      	cbz	r2, 80097e0 <__lshift+0xa4>
 80097dc:	f108 0602 	add.w	r6, r8, #2
 80097e0:	3e01      	subs	r6, #1
 80097e2:	4638      	mov	r0, r7
 80097e4:	4621      	mov	r1, r4
 80097e6:	612e      	str	r6, [r5, #16]
 80097e8:	f7ff fdda 	bl	80093a0 <_Bfree>
 80097ec:	4628      	mov	r0, r5
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80097f6:	3301      	adds	r3, #1
 80097f8:	e7c5      	b.n	8009786 <__lshift+0x4a>
 80097fa:	3904      	subs	r1, #4
 80097fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009800:	459c      	cmp	ip, r3
 8009802:	f841 2f04 	str.w	r2, [r1, #4]!
 8009806:	d8f9      	bhi.n	80097fc <__lshift+0xc0>
 8009808:	e7ea      	b.n	80097e0 <__lshift+0xa4>
 800980a:	bf00      	nop
 800980c:	0800adf0 	.word	0x0800adf0
 8009810:	0800ae01 	.word	0x0800ae01

08009814 <__mcmp>:
 8009814:	4603      	mov	r3, r0
 8009816:	690a      	ldr	r2, [r1, #16]
 8009818:	6900      	ldr	r0, [r0, #16]
 800981a:	b530      	push	{r4, r5, lr}
 800981c:	1a80      	subs	r0, r0, r2
 800981e:	d10d      	bne.n	800983c <__mcmp+0x28>
 8009820:	3314      	adds	r3, #20
 8009822:	3114      	adds	r1, #20
 8009824:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009828:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800982c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009834:	4295      	cmp	r5, r2
 8009836:	d002      	beq.n	800983e <__mcmp+0x2a>
 8009838:	d304      	bcc.n	8009844 <__mcmp+0x30>
 800983a:	2001      	movs	r0, #1
 800983c:	bd30      	pop	{r4, r5, pc}
 800983e:	42a3      	cmp	r3, r4
 8009840:	d3f4      	bcc.n	800982c <__mcmp+0x18>
 8009842:	e7fb      	b.n	800983c <__mcmp+0x28>
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	e7f8      	b.n	800983c <__mcmp+0x28>
	...

0800984c <__mdiff>:
 800984c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	460d      	mov	r5, r1
 8009852:	4607      	mov	r7, r0
 8009854:	4611      	mov	r1, r2
 8009856:	4628      	mov	r0, r5
 8009858:	4614      	mov	r4, r2
 800985a:	f7ff ffdb 	bl	8009814 <__mcmp>
 800985e:	1e06      	subs	r6, r0, #0
 8009860:	d111      	bne.n	8009886 <__mdiff+0x3a>
 8009862:	4631      	mov	r1, r6
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff fd5b 	bl	8009320 <_Balloc>
 800986a:	4602      	mov	r2, r0
 800986c:	b928      	cbnz	r0, 800987a <__mdiff+0x2e>
 800986e:	f240 2137 	movw	r1, #567	; 0x237
 8009872:	4b3a      	ldr	r3, [pc, #232]	; (800995c <__mdiff+0x110>)
 8009874:	483a      	ldr	r0, [pc, #232]	; (8009960 <__mdiff+0x114>)
 8009876:	f000 fb59 	bl	8009f2c <__assert_func>
 800987a:	2301      	movs	r3, #1
 800987c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009880:	4610      	mov	r0, r2
 8009882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	bfa4      	itt	ge
 8009888:	4623      	movge	r3, r4
 800988a:	462c      	movge	r4, r5
 800988c:	4638      	mov	r0, r7
 800988e:	6861      	ldr	r1, [r4, #4]
 8009890:	bfa6      	itte	ge
 8009892:	461d      	movge	r5, r3
 8009894:	2600      	movge	r6, #0
 8009896:	2601      	movlt	r6, #1
 8009898:	f7ff fd42 	bl	8009320 <_Balloc>
 800989c:	4602      	mov	r2, r0
 800989e:	b918      	cbnz	r0, 80098a8 <__mdiff+0x5c>
 80098a0:	f240 2145 	movw	r1, #581	; 0x245
 80098a4:	4b2d      	ldr	r3, [pc, #180]	; (800995c <__mdiff+0x110>)
 80098a6:	e7e5      	b.n	8009874 <__mdiff+0x28>
 80098a8:	f102 0814 	add.w	r8, r2, #20
 80098ac:	46c2      	mov	sl, r8
 80098ae:	f04f 0c00 	mov.w	ip, #0
 80098b2:	6927      	ldr	r7, [r4, #16]
 80098b4:	60c6      	str	r6, [r0, #12]
 80098b6:	692e      	ldr	r6, [r5, #16]
 80098b8:	f104 0014 	add.w	r0, r4, #20
 80098bc:	f105 0914 	add.w	r9, r5, #20
 80098c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80098c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098c8:	3410      	adds	r4, #16
 80098ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80098ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80098d2:	fa1f f18b 	uxth.w	r1, fp
 80098d6:	4461      	add	r1, ip
 80098d8:	fa1f fc83 	uxth.w	ip, r3
 80098dc:	0c1b      	lsrs	r3, r3, #16
 80098de:	eba1 010c 	sub.w	r1, r1, ip
 80098e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098ea:	b289      	uxth	r1, r1
 80098ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80098f0:	454e      	cmp	r6, r9
 80098f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80098f6:	f84a 1b04 	str.w	r1, [sl], #4
 80098fa:	d8e6      	bhi.n	80098ca <__mdiff+0x7e>
 80098fc:	1b73      	subs	r3, r6, r5
 80098fe:	3b15      	subs	r3, #21
 8009900:	f023 0303 	bic.w	r3, r3, #3
 8009904:	3515      	adds	r5, #21
 8009906:	3304      	adds	r3, #4
 8009908:	42ae      	cmp	r6, r5
 800990a:	bf38      	it	cc
 800990c:	2304      	movcc	r3, #4
 800990e:	4418      	add	r0, r3
 8009910:	4443      	add	r3, r8
 8009912:	461e      	mov	r6, r3
 8009914:	4605      	mov	r5, r0
 8009916:	4575      	cmp	r5, lr
 8009918:	d30e      	bcc.n	8009938 <__mdiff+0xec>
 800991a:	f10e 0103 	add.w	r1, lr, #3
 800991e:	1a09      	subs	r1, r1, r0
 8009920:	f021 0103 	bic.w	r1, r1, #3
 8009924:	3803      	subs	r0, #3
 8009926:	4586      	cmp	lr, r0
 8009928:	bf38      	it	cc
 800992a:	2100      	movcc	r1, #0
 800992c:	440b      	add	r3, r1
 800992e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009932:	b189      	cbz	r1, 8009958 <__mdiff+0x10c>
 8009934:	6117      	str	r7, [r2, #16]
 8009936:	e7a3      	b.n	8009880 <__mdiff+0x34>
 8009938:	f855 8b04 	ldr.w	r8, [r5], #4
 800993c:	fa1f f188 	uxth.w	r1, r8
 8009940:	4461      	add	r1, ip
 8009942:	140c      	asrs	r4, r1, #16
 8009944:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009948:	b289      	uxth	r1, r1
 800994a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800994e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009952:	f846 1b04 	str.w	r1, [r6], #4
 8009956:	e7de      	b.n	8009916 <__mdiff+0xca>
 8009958:	3f01      	subs	r7, #1
 800995a:	e7e8      	b.n	800992e <__mdiff+0xe2>
 800995c:	0800adf0 	.word	0x0800adf0
 8009960:	0800ae01 	.word	0x0800ae01

08009964 <__d2b>:
 8009964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009966:	2101      	movs	r1, #1
 8009968:	4617      	mov	r7, r2
 800996a:	461c      	mov	r4, r3
 800996c:	9e08      	ldr	r6, [sp, #32]
 800996e:	f7ff fcd7 	bl	8009320 <_Balloc>
 8009972:	4605      	mov	r5, r0
 8009974:	b930      	cbnz	r0, 8009984 <__d2b+0x20>
 8009976:	4602      	mov	r2, r0
 8009978:	f240 310f 	movw	r1, #783	; 0x30f
 800997c:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <__d2b+0xa4>)
 800997e:	4823      	ldr	r0, [pc, #140]	; (8009a0c <__d2b+0xa8>)
 8009980:	f000 fad4 	bl	8009f2c <__assert_func>
 8009984:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009988:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800998c:	bb24      	cbnz	r4, 80099d8 <__d2b+0x74>
 800998e:	2f00      	cmp	r7, #0
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	d026      	beq.n	80099e2 <__d2b+0x7e>
 8009994:	4668      	mov	r0, sp
 8009996:	9700      	str	r7, [sp, #0]
 8009998:	f7ff fd8a 	bl	80094b0 <__lo0bits>
 800999c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099a0:	b1e8      	cbz	r0, 80099de <__d2b+0x7a>
 80099a2:	f1c0 0320 	rsb	r3, r0, #32
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	430b      	orrs	r3, r1
 80099ac:	40c2      	lsrs	r2, r0
 80099ae:	616b      	str	r3, [r5, #20]
 80099b0:	9201      	str	r2, [sp, #4]
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bf14      	ite	ne
 80099b8:	2102      	movne	r1, #2
 80099ba:	2101      	moveq	r1, #1
 80099bc:	61ab      	str	r3, [r5, #24]
 80099be:	6129      	str	r1, [r5, #16]
 80099c0:	b1bc      	cbz	r4, 80099f2 <__d2b+0x8e>
 80099c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099c6:	4404      	add	r4, r0
 80099c8:	6034      	str	r4, [r6, #0]
 80099ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	6018      	str	r0, [r3, #0]
 80099d2:	4628      	mov	r0, r5
 80099d4:	b003      	add	sp, #12
 80099d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099dc:	e7d7      	b.n	800998e <__d2b+0x2a>
 80099de:	6169      	str	r1, [r5, #20]
 80099e0:	e7e7      	b.n	80099b2 <__d2b+0x4e>
 80099e2:	a801      	add	r0, sp, #4
 80099e4:	f7ff fd64 	bl	80094b0 <__lo0bits>
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	2101      	movs	r1, #1
 80099ec:	616b      	str	r3, [r5, #20]
 80099ee:	3020      	adds	r0, #32
 80099f0:	e7e5      	b.n	80099be <__d2b+0x5a>
 80099f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80099fa:	6030      	str	r0, [r6, #0]
 80099fc:	6918      	ldr	r0, [r3, #16]
 80099fe:	f7ff fd37 	bl	8009470 <__hi0bits>
 8009a02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a06:	e7e2      	b.n	80099ce <__d2b+0x6a>
 8009a08:	0800adf0 	.word	0x0800adf0
 8009a0c:	0800ae01 	.word	0x0800ae01

08009a10 <__sfputc_r>:
 8009a10:	6893      	ldr	r3, [r2, #8]
 8009a12:	b410      	push	{r4}
 8009a14:	3b01      	subs	r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	6093      	str	r3, [r2, #8]
 8009a1a:	da07      	bge.n	8009a2c <__sfputc_r+0x1c>
 8009a1c:	6994      	ldr	r4, [r2, #24]
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	db01      	blt.n	8009a26 <__sfputc_r+0x16>
 8009a22:	290a      	cmp	r1, #10
 8009a24:	d102      	bne.n	8009a2c <__sfputc_r+0x1c>
 8009a26:	bc10      	pop	{r4}
 8009a28:	f7fe bbdd 	b.w	80081e6 <__swbuf_r>
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	1c58      	adds	r0, r3, #1
 8009a30:	6010      	str	r0, [r2, #0]
 8009a32:	7019      	strb	r1, [r3, #0]
 8009a34:	4608      	mov	r0, r1
 8009a36:	bc10      	pop	{r4}
 8009a38:	4770      	bx	lr

08009a3a <__sfputs_r>:
 8009a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	4614      	mov	r4, r2
 8009a42:	18d5      	adds	r5, r2, r3
 8009a44:	42ac      	cmp	r4, r5
 8009a46:	d101      	bne.n	8009a4c <__sfputs_r+0x12>
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e007      	b.n	8009a5c <__sfputs_r+0x22>
 8009a4c:	463a      	mov	r2, r7
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a54:	f7ff ffdc 	bl	8009a10 <__sfputc_r>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d1f3      	bne.n	8009a44 <__sfputs_r+0xa>
 8009a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a60 <_vfiprintf_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	460d      	mov	r5, r1
 8009a66:	4614      	mov	r4, r2
 8009a68:	4698      	mov	r8, r3
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	b09d      	sub	sp, #116	; 0x74
 8009a6e:	b118      	cbz	r0, 8009a78 <_vfiprintf_r+0x18>
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b90b      	cbnz	r3, 8009a78 <_vfiprintf_r+0x18>
 8009a74:	f7fe fad0 	bl	8008018 <__sinit>
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x2a>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x2a>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7fe fcd0 	bl	800842a <__retarget_lock_acquire_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <_vfiprintf_r+0x34>
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	b99b      	cbnz	r3, 8009abc <_vfiprintf_r+0x5c>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7fe fbe2 	bl	8008260 <__swsetup_r>
 8009a9c:	b170      	cbz	r0, 8009abc <_vfiprintf_r+0x5c>
 8009a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa0:	07dc      	lsls	r4, r3, #31
 8009aa2:	d504      	bpl.n	8009aae <_vfiprintf_r+0x4e>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	0598      	lsls	r0, r3, #22
 8009ab2:	d4f7      	bmi.n	8009aa4 <_vfiprintf_r+0x44>
 8009ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab6:	f7fe fcb9 	bl	800842c <__retarget_lock_release_recursive>
 8009aba:	e7f3      	b.n	8009aa4 <_vfiprintf_r+0x44>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ac6:	2330      	movs	r3, #48	; 0x30
 8009ac8:	f04f 0901 	mov.w	r9, #1
 8009acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009c80 <_vfiprintf_r+0x220>
 8009ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ad8:	4623      	mov	r3, r4
 8009ada:	469a      	mov	sl, r3
 8009adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae0:	b10a      	cbz	r2, 8009ae6 <_vfiprintf_r+0x86>
 8009ae2:	2a25      	cmp	r2, #37	; 0x25
 8009ae4:	d1f9      	bne.n	8009ada <_vfiprintf_r+0x7a>
 8009ae6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aea:	d00b      	beq.n	8009b04 <_vfiprintf_r+0xa4>
 8009aec:	465b      	mov	r3, fp
 8009aee:	4622      	mov	r2, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff ffa1 	bl	8009a3a <__sfputs_r>
 8009af8:	3001      	adds	r0, #1
 8009afa:	f000 80a9 	beq.w	8009c50 <_vfiprintf_r+0x1f0>
 8009afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b00:	445a      	add	r2, fp
 8009b02:	9209      	str	r2, [sp, #36]	; 0x24
 8009b04:	f89a 3000 	ldrb.w	r3, [sl]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f000 80a1 	beq.w	8009c50 <_vfiprintf_r+0x1f0>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f04f 32ff 	mov.w	r2, #4294967295
 8009b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b18:	f10a 0a01 	add.w	sl, sl, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	9307      	str	r3, [sp, #28]
 8009b20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b24:	931a      	str	r3, [sp, #104]	; 0x68
 8009b26:	4654      	mov	r4, sl
 8009b28:	2205      	movs	r2, #5
 8009b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2e:	4854      	ldr	r0, [pc, #336]	; (8009c80 <_vfiprintf_r+0x220>)
 8009b30:	f7fe fc7d 	bl	800842e <memchr>
 8009b34:	9a04      	ldr	r2, [sp, #16]
 8009b36:	b9d8      	cbnz	r0, 8009b70 <_vfiprintf_r+0x110>
 8009b38:	06d1      	lsls	r1, r2, #27
 8009b3a:	bf44      	itt	mi
 8009b3c:	2320      	movmi	r3, #32
 8009b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b42:	0713      	lsls	r3, r2, #28
 8009b44:	bf44      	itt	mi
 8009b46:	232b      	movmi	r3, #43	; 0x2b
 8009b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b50:	2b2a      	cmp	r3, #42	; 0x2a
 8009b52:	d015      	beq.n	8009b80 <_vfiprintf_r+0x120>
 8009b54:	4654      	mov	r4, sl
 8009b56:	2000      	movs	r0, #0
 8009b58:	f04f 0c0a 	mov.w	ip, #10
 8009b5c:	9a07      	ldr	r2, [sp, #28]
 8009b5e:	4621      	mov	r1, r4
 8009b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b64:	3b30      	subs	r3, #48	; 0x30
 8009b66:	2b09      	cmp	r3, #9
 8009b68:	d94d      	bls.n	8009c06 <_vfiprintf_r+0x1a6>
 8009b6a:	b1b0      	cbz	r0, 8009b9a <_vfiprintf_r+0x13a>
 8009b6c:	9207      	str	r2, [sp, #28]
 8009b6e:	e014      	b.n	8009b9a <_vfiprintf_r+0x13a>
 8009b70:	eba0 0308 	sub.w	r3, r0, r8
 8009b74:	fa09 f303 	lsl.w	r3, r9, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	46a2      	mov	sl, r4
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	e7d2      	b.n	8009b26 <_vfiprintf_r+0xc6>
 8009b80:	9b03      	ldr	r3, [sp, #12]
 8009b82:	1d19      	adds	r1, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	9103      	str	r1, [sp, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfbb      	ittet	lt
 8009b8c:	425b      	neglt	r3, r3
 8009b8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b92:	9307      	strge	r3, [sp, #28]
 8009b94:	9307      	strlt	r3, [sp, #28]
 8009b96:	bfb8      	it	lt
 8009b98:	9204      	strlt	r2, [sp, #16]
 8009b9a:	7823      	ldrb	r3, [r4, #0]
 8009b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b9e:	d10c      	bne.n	8009bba <_vfiprintf_r+0x15a>
 8009ba0:	7863      	ldrb	r3, [r4, #1]
 8009ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba4:	d134      	bne.n	8009c10 <_vfiprintf_r+0x1b0>
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	3402      	adds	r4, #2
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	9203      	str	r2, [sp, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bfb8      	it	lt
 8009bb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c84 <_vfiprintf_r+0x224>
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	7821      	ldrb	r1, [r4, #0]
 8009bc4:	f7fe fc33 	bl	800842e <memchr>
 8009bc8:	b138      	cbz	r0, 8009bda <_vfiprintf_r+0x17a>
 8009bca:	2240      	movs	r2, #64	; 0x40
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	eba0 000a 	sub.w	r0, r0, sl
 8009bd2:	4082      	lsls	r2, r0
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	9304      	str	r3, [sp, #16]
 8009bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bde:	2206      	movs	r2, #6
 8009be0:	4829      	ldr	r0, [pc, #164]	; (8009c88 <_vfiprintf_r+0x228>)
 8009be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009be6:	f7fe fc22 	bl	800842e <memchr>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d03f      	beq.n	8009c6e <_vfiprintf_r+0x20e>
 8009bee:	4b27      	ldr	r3, [pc, #156]	; (8009c8c <_vfiprintf_r+0x22c>)
 8009bf0:	bb1b      	cbnz	r3, 8009c3a <_vfiprintf_r+0x1da>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	3307      	adds	r3, #7
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c00:	443b      	add	r3, r7
 8009c02:	9309      	str	r3, [sp, #36]	; 0x24
 8009c04:	e768      	b.n	8009ad8 <_vfiprintf_r+0x78>
 8009c06:	460c      	mov	r4, r1
 8009c08:	2001      	movs	r0, #1
 8009c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c0e:	e7a6      	b.n	8009b5e <_vfiprintf_r+0xfe>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f04f 0c0a 	mov.w	ip, #10
 8009c16:	4619      	mov	r1, r3
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c22:	3a30      	subs	r2, #48	; 0x30
 8009c24:	2a09      	cmp	r2, #9
 8009c26:	d903      	bls.n	8009c30 <_vfiprintf_r+0x1d0>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <_vfiprintf_r+0x15a>
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	e7c4      	b.n	8009bba <_vfiprintf_r+0x15a>
 8009c30:	4604      	mov	r4, r0
 8009c32:	2301      	movs	r3, #1
 8009c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c38:	e7f0      	b.n	8009c1c <_vfiprintf_r+0x1bc>
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	462a      	mov	r2, r5
 8009c40:	4630      	mov	r0, r6
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <_vfiprintf_r+0x230>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	f7fd fd99 	bl	800777c <_printf_float>
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	1c78      	adds	r0, r7, #1
 8009c4e:	d1d6      	bne.n	8009bfe <_vfiprintf_r+0x19e>
 8009c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	d405      	bmi.n	8009c62 <_vfiprintf_r+0x202>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	059a      	lsls	r2, r3, #22
 8009c5a:	d402      	bmi.n	8009c62 <_vfiprintf_r+0x202>
 8009c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5e:	f7fe fbe5 	bl	800842c <__retarget_lock_release_recursive>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af1d 	bmi.w	8009aa4 <_vfiprintf_r+0x44>
 8009c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c6c:	e71c      	b.n	8009aa8 <_vfiprintf_r+0x48>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4630      	mov	r0, r6
 8009c76:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <_vfiprintf_r+0x230>)
 8009c78:	a904      	add	r1, sp, #16
 8009c7a:	f7fe f81f 	bl	8007cbc <_printf_i>
 8009c7e:	e7e4      	b.n	8009c4a <_vfiprintf_r+0x1ea>
 8009c80:	0800af5c 	.word	0x0800af5c
 8009c84:	0800af62 	.word	0x0800af62
 8009c88:	0800af66 	.word	0x0800af66
 8009c8c:	0800777d 	.word	0x0800777d
 8009c90:	08009a3b 	.word	0x08009a3b

08009c94 <__sflush_r>:
 8009c94:	898a      	ldrh	r2, [r1, #12]
 8009c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c98:	4605      	mov	r5, r0
 8009c9a:	0710      	lsls	r0, r2, #28
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	d457      	bmi.n	8009d50 <__sflush_r+0xbc>
 8009ca0:	684b      	ldr	r3, [r1, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	dc04      	bgt.n	8009cb0 <__sflush_r+0x1c>
 8009ca6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dc01      	bgt.n	8009cb0 <__sflush_r+0x1c>
 8009cac:	2000      	movs	r0, #0
 8009cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d0fa      	beq.n	8009cac <__sflush_r+0x18>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cbc:	682f      	ldr	r7, [r5, #0]
 8009cbe:	6a21      	ldr	r1, [r4, #32]
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	d032      	beq.n	8009d2a <__sflush_r+0x96>
 8009cc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	075a      	lsls	r2, r3, #29
 8009cca:	d505      	bpl.n	8009cd8 <__sflush_r+0x44>
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	1ac0      	subs	r0, r0, r3
 8009cd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd2:	b10b      	cbz	r3, 8009cd8 <__sflush_r+0x44>
 8009cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd6:	1ac0      	subs	r0, r0, r3
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4602      	mov	r2, r0
 8009cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cde:	4628      	mov	r0, r5
 8009ce0:	6a21      	ldr	r1, [r4, #32]
 8009ce2:	47b0      	blx	r6
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	d106      	bne.n	8009cf8 <__sflush_r+0x64>
 8009cea:	6829      	ldr	r1, [r5, #0]
 8009cec:	291d      	cmp	r1, #29
 8009cee:	d82b      	bhi.n	8009d48 <__sflush_r+0xb4>
 8009cf0:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <__sflush_r+0x100>)
 8009cf2:	410a      	asrs	r2, r1
 8009cf4:	07d6      	lsls	r6, r2, #31
 8009cf6:	d427      	bmi.n	8009d48 <__sflush_r+0xb4>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	6062      	str	r2, [r4, #4]
 8009cfc:	6922      	ldr	r2, [r4, #16]
 8009cfe:	04d9      	lsls	r1, r3, #19
 8009d00:	6022      	str	r2, [r4, #0]
 8009d02:	d504      	bpl.n	8009d0e <__sflush_r+0x7a>
 8009d04:	1c42      	adds	r2, r0, #1
 8009d06:	d101      	bne.n	8009d0c <__sflush_r+0x78>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b903      	cbnz	r3, 8009d0e <__sflush_r+0x7a>
 8009d0c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d10:	602f      	str	r7, [r5, #0]
 8009d12:	2900      	cmp	r1, #0
 8009d14:	d0ca      	beq.n	8009cac <__sflush_r+0x18>
 8009d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	d002      	beq.n	8009d24 <__sflush_r+0x90>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f7ff fa02 	bl	8009128 <_free_r>
 8009d24:	2000      	movs	r0, #0
 8009d26:	6360      	str	r0, [r4, #52]	; 0x34
 8009d28:	e7c1      	b.n	8009cae <__sflush_r+0x1a>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	47b0      	blx	r6
 8009d30:	1c41      	adds	r1, r0, #1
 8009d32:	d1c8      	bne.n	8009cc6 <__sflush_r+0x32>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0c5      	beq.n	8009cc6 <__sflush_r+0x32>
 8009d3a:	2b1d      	cmp	r3, #29
 8009d3c:	d001      	beq.n	8009d42 <__sflush_r+0xae>
 8009d3e:	2b16      	cmp	r3, #22
 8009d40:	d101      	bne.n	8009d46 <__sflush_r+0xb2>
 8009d42:	602f      	str	r7, [r5, #0]
 8009d44:	e7b2      	b.n	8009cac <__sflush_r+0x18>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	e7ae      	b.n	8009cae <__sflush_r+0x1a>
 8009d50:	690f      	ldr	r7, [r1, #16]
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	d0aa      	beq.n	8009cac <__sflush_r+0x18>
 8009d56:	0793      	lsls	r3, r2, #30
 8009d58:	bf18      	it	ne
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	680e      	ldr	r6, [r1, #0]
 8009d5e:	bf08      	it	eq
 8009d60:	694b      	ldreq	r3, [r1, #20]
 8009d62:	1bf6      	subs	r6, r6, r7
 8009d64:	600f      	str	r7, [r1, #0]
 8009d66:	608b      	str	r3, [r1, #8]
 8009d68:	2e00      	cmp	r6, #0
 8009d6a:	dd9f      	ble.n	8009cac <__sflush_r+0x18>
 8009d6c:	4633      	mov	r3, r6
 8009d6e:	463a      	mov	r2, r7
 8009d70:	4628      	mov	r0, r5
 8009d72:	6a21      	ldr	r1, [r4, #32]
 8009d74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009d78:	47e0      	blx	ip
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	dc06      	bgt.n	8009d8c <__sflush_r+0xf8>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d88:	81a3      	strh	r3, [r4, #12]
 8009d8a:	e790      	b.n	8009cae <__sflush_r+0x1a>
 8009d8c:	4407      	add	r7, r0
 8009d8e:	1a36      	subs	r6, r6, r0
 8009d90:	e7ea      	b.n	8009d68 <__sflush_r+0xd4>
 8009d92:	bf00      	nop
 8009d94:	dfbffffe 	.word	0xdfbffffe

08009d98 <_fflush_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	690b      	ldr	r3, [r1, #16]
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	460c      	mov	r4, r1
 8009da0:	b913      	cbnz	r3, 8009da8 <_fflush_r+0x10>
 8009da2:	2500      	movs	r5, #0
 8009da4:	4628      	mov	r0, r5
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
 8009da8:	b118      	cbz	r0, 8009db2 <_fflush_r+0x1a>
 8009daa:	6a03      	ldr	r3, [r0, #32]
 8009dac:	b90b      	cbnz	r3, 8009db2 <_fflush_r+0x1a>
 8009dae:	f7fe f933 	bl	8008018 <__sinit>
 8009db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d0f3      	beq.n	8009da2 <_fflush_r+0xa>
 8009dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dbc:	07d0      	lsls	r0, r2, #31
 8009dbe:	d404      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc0:	0599      	lsls	r1, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_fflush_r+0x32>
 8009dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc6:	f7fe fb30 	bl	800842a <__retarget_lock_acquire_recursive>
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7ff ff61 	bl	8009c94 <__sflush_r>
 8009dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	07da      	lsls	r2, r3, #31
 8009dd8:	d4e4      	bmi.n	8009da4 <_fflush_r+0xc>
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	d4e1      	bmi.n	8009da4 <_fflush_r+0xc>
 8009de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de2:	f7fe fb23 	bl	800842c <__retarget_lock_release_recursive>
 8009de6:	e7dd      	b.n	8009da4 <_fflush_r+0xc>

08009de8 <__swhatbuf_r>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	460c      	mov	r4, r1
 8009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df0:	4615      	mov	r5, r2
 8009df2:	2900      	cmp	r1, #0
 8009df4:	461e      	mov	r6, r3
 8009df6:	b096      	sub	sp, #88	; 0x58
 8009df8:	da0c      	bge.n	8009e14 <__swhatbuf_r+0x2c>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e02:	bf0c      	ite	eq
 8009e04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e08:	2340      	movne	r3, #64	; 0x40
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	6031      	str	r1, [r6, #0]
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	b016      	add	sp, #88	; 0x58
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	466a      	mov	r2, sp
 8009e16:	f000 f849 	bl	8009eac <_fstat_r>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	dbed      	blt.n	8009dfa <__swhatbuf_r+0x12>
 8009e1e:	9901      	ldr	r1, [sp, #4]
 8009e20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e28:	4259      	negs	r1, r3
 8009e2a:	4159      	adcs	r1, r3
 8009e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e30:	e7eb      	b.n	8009e0a <__swhatbuf_r+0x22>

08009e32 <__smakebuf_r>:
 8009e32:	898b      	ldrh	r3, [r1, #12]
 8009e34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e36:	079d      	lsls	r5, r3, #30
 8009e38:	4606      	mov	r6, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	d507      	bpl.n	8009e4e <__smakebuf_r+0x1c>
 8009e3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	2301      	movs	r3, #1
 8009e48:	6163      	str	r3, [r4, #20]
 8009e4a:	b002      	add	sp, #8
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	466a      	mov	r2, sp
 8009e50:	ab01      	add	r3, sp, #4
 8009e52:	f7ff ffc9 	bl	8009de8 <__swhatbuf_r>
 8009e56:	9900      	ldr	r1, [sp, #0]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7ff f9d4 	bl	8009208 <_malloc_r>
 8009e60:	b948      	cbnz	r0, 8009e76 <__smakebuf_r+0x44>
 8009e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e66:	059a      	lsls	r2, r3, #22
 8009e68:	d4ef      	bmi.n	8009e4a <__smakebuf_r+0x18>
 8009e6a:	f023 0303 	bic.w	r3, r3, #3
 8009e6e:	f043 0302 	orr.w	r3, r3, #2
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	e7e3      	b.n	8009e3e <__smakebuf_r+0xc>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	6020      	str	r0, [r4, #0]
 8009e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	9b00      	ldr	r3, [sp, #0]
 8009e82:	6120      	str	r0, [r4, #16]
 8009e84:	6163      	str	r3, [r4, #20]
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	b15b      	cbz	r3, 8009ea2 <__smakebuf_r+0x70>
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e90:	f000 f81e 	bl	8009ed0 <_isatty_r>
 8009e94:	b128      	cbz	r0, 8009ea2 <__smakebuf_r+0x70>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f023 0303 	bic.w	r3, r3, #3
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	81a3      	strh	r3, [r4, #12]
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	431d      	orrs	r5, r3
 8009ea6:	81a5      	strh	r5, [r4, #12]
 8009ea8:	e7cf      	b.n	8009e4a <__smakebuf_r+0x18>
	...

08009eac <_fstat_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4d06      	ldr	r5, [pc, #24]	; (8009ecc <_fstat_r+0x20>)
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	f7f8 fc1e 	bl	80026fa <_fstat>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d102      	bne.n	8009ec8 <_fstat_r+0x1c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	b103      	cbz	r3, 8009ec8 <_fstat_r+0x1c>
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000063c 	.word	0x2000063c

08009ed0 <_isatty_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4d05      	ldr	r5, [pc, #20]	; (8009eec <_isatty_r+0x1c>)
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	f7f8 fc1c 	bl	8002718 <_isatty>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_isatty_r+0x1a>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_isatty_r+0x1a>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	2000063c 	.word	0x2000063c

08009ef0 <_sbrk_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4d05      	ldr	r5, [pc, #20]	; (8009f0c <_sbrk_r+0x1c>)
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f8 fc22 	bl	8002744 <_sbrk>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_sbrk_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_sbrk_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	2000063c 	.word	0x2000063c

08009f10 <memcpy>:
 8009f10:	440a      	add	r2, r1
 8009f12:	4291      	cmp	r1, r2
 8009f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f18:	d100      	bne.n	8009f1c <memcpy+0xc>
 8009f1a:	4770      	bx	lr
 8009f1c:	b510      	push	{r4, lr}
 8009f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f28:	d1f9      	bne.n	8009f1e <memcpy+0xe>
 8009f2a:	bd10      	pop	{r4, pc}

08009f2c <__assert_func>:
 8009f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f2e:	4614      	mov	r4, r2
 8009f30:	461a      	mov	r2, r3
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <__assert_func+0x2c>)
 8009f34:	4605      	mov	r5, r0
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68d8      	ldr	r0, [r3, #12]
 8009f3a:	b14c      	cbz	r4, 8009f50 <__assert_func+0x24>
 8009f3c:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <__assert_func+0x30>)
 8009f3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f42:	9100      	str	r1, [sp, #0]
 8009f44:	462b      	mov	r3, r5
 8009f46:	4906      	ldr	r1, [pc, #24]	; (8009f60 <__assert_func+0x34>)
 8009f48:	f000 f842 	bl	8009fd0 <fiprintf>
 8009f4c:	f000 f852 	bl	8009ff4 <abort>
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <__assert_func+0x38>)
 8009f52:	461c      	mov	r4, r3
 8009f54:	e7f3      	b.n	8009f3e <__assert_func+0x12>
 8009f56:	bf00      	nop
 8009f58:	20000064 	.word	0x20000064
 8009f5c:	0800af77 	.word	0x0800af77
 8009f60:	0800af84 	.word	0x0800af84
 8009f64:	0800afb2 	.word	0x0800afb2

08009f68 <_calloc_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	fba1 5402 	umull	r5, r4, r1, r2
 8009f6e:	b934      	cbnz	r4, 8009f7e <_calloc_r+0x16>
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7ff f949 	bl	8009208 <_malloc_r>
 8009f76:	4606      	mov	r6, r0
 8009f78:	b928      	cbnz	r0, 8009f86 <_calloc_r+0x1e>
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	bd70      	pop	{r4, r5, r6, pc}
 8009f7e:	220c      	movs	r2, #12
 8009f80:	2600      	movs	r6, #0
 8009f82:	6002      	str	r2, [r0, #0]
 8009f84:	e7f9      	b.n	8009f7a <_calloc_r+0x12>
 8009f86:	462a      	mov	r2, r5
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f7fe f9d1 	bl	8008330 <memset>
 8009f8e:	e7f4      	b.n	8009f7a <_calloc_r+0x12>

08009f90 <__ascii_mbtowc>:
 8009f90:	b082      	sub	sp, #8
 8009f92:	b901      	cbnz	r1, 8009f96 <__ascii_mbtowc+0x6>
 8009f94:	a901      	add	r1, sp, #4
 8009f96:	b142      	cbz	r2, 8009faa <__ascii_mbtowc+0x1a>
 8009f98:	b14b      	cbz	r3, 8009fae <__ascii_mbtowc+0x1e>
 8009f9a:	7813      	ldrb	r3, [r2, #0]
 8009f9c:	600b      	str	r3, [r1, #0]
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	1e10      	subs	r0, r2, #0
 8009fa2:	bf18      	it	ne
 8009fa4:	2001      	movne	r0, #1
 8009fa6:	b002      	add	sp, #8
 8009fa8:	4770      	bx	lr
 8009faa:	4610      	mov	r0, r2
 8009fac:	e7fb      	b.n	8009fa6 <__ascii_mbtowc+0x16>
 8009fae:	f06f 0001 	mvn.w	r0, #1
 8009fb2:	e7f8      	b.n	8009fa6 <__ascii_mbtowc+0x16>

08009fb4 <__ascii_wctomb>:
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	b141      	cbz	r1, 8009fcc <__ascii_wctomb+0x18>
 8009fba:	2aff      	cmp	r2, #255	; 0xff
 8009fbc:	d904      	bls.n	8009fc8 <__ascii_wctomb+0x14>
 8009fbe:	228a      	movs	r2, #138	; 0x8a
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	4770      	bx	lr
 8009fc8:	2001      	movs	r0, #1
 8009fca:	700a      	strb	r2, [r1, #0]
 8009fcc:	4770      	bx	lr
	...

08009fd0 <fiprintf>:
 8009fd0:	b40e      	push	{r1, r2, r3}
 8009fd2:	b503      	push	{r0, r1, lr}
 8009fd4:	4601      	mov	r1, r0
 8009fd6:	ab03      	add	r3, sp, #12
 8009fd8:	4805      	ldr	r0, [pc, #20]	; (8009ff0 <fiprintf+0x20>)
 8009fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fde:	6800      	ldr	r0, [r0, #0]
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	f7ff fd3d 	bl	8009a60 <_vfiprintf_r>
 8009fe6:	b002      	add	sp, #8
 8009fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fec:	b003      	add	sp, #12
 8009fee:	4770      	bx	lr
 8009ff0:	20000064 	.word	0x20000064

08009ff4 <abort>:
 8009ff4:	2006      	movs	r0, #6
 8009ff6:	b508      	push	{r3, lr}
 8009ff8:	f000 f82c 	bl	800a054 <raise>
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	f7f8 fb2e 	bl	800265e <_exit>

0800a002 <_raise_r>:
 800a002:	291f      	cmp	r1, #31
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4604      	mov	r4, r0
 800a008:	460d      	mov	r5, r1
 800a00a:	d904      	bls.n	800a016 <_raise_r+0x14>
 800a00c:	2316      	movs	r3, #22
 800a00e:	6003      	str	r3, [r0, #0]
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a018:	b112      	cbz	r2, 800a020 <_raise_r+0x1e>
 800a01a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a01e:	b94b      	cbnz	r3, 800a034 <_raise_r+0x32>
 800a020:	4620      	mov	r0, r4
 800a022:	f000 f831 	bl	800a088 <_getpid_r>
 800a026:	462a      	mov	r2, r5
 800a028:	4601      	mov	r1, r0
 800a02a:	4620      	mov	r0, r4
 800a02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a030:	f000 b818 	b.w	800a064 <_kill_r>
 800a034:	2b01      	cmp	r3, #1
 800a036:	d00a      	beq.n	800a04e <_raise_r+0x4c>
 800a038:	1c59      	adds	r1, r3, #1
 800a03a:	d103      	bne.n	800a044 <_raise_r+0x42>
 800a03c:	2316      	movs	r3, #22
 800a03e:	6003      	str	r3, [r0, #0]
 800a040:	2001      	movs	r0, #1
 800a042:	e7e7      	b.n	800a014 <_raise_r+0x12>
 800a044:	2400      	movs	r4, #0
 800a046:	4628      	mov	r0, r5
 800a048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a04c:	4798      	blx	r3
 800a04e:	2000      	movs	r0, #0
 800a050:	e7e0      	b.n	800a014 <_raise_r+0x12>
	...

0800a054 <raise>:
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <raise+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f7ff bfd2 	b.w	800a002 <_raise_r>
 800a05e:	bf00      	nop
 800a060:	20000064 	.word	0x20000064

0800a064 <_kill_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	2300      	movs	r3, #0
 800a068:	4d06      	ldr	r5, [pc, #24]	; (800a084 <_kill_r+0x20>)
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	4611      	mov	r1, r2
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	f7f8 fae4 	bl	800263e <_kill>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	d102      	bne.n	800a080 <_kill_r+0x1c>
 800a07a:	682b      	ldr	r3, [r5, #0]
 800a07c:	b103      	cbz	r3, 800a080 <_kill_r+0x1c>
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	2000063c 	.word	0x2000063c

0800a088 <_getpid_r>:
 800a088:	f7f8 bad2 	b.w	8002630 <_getpid>

0800a08c <powf>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	460c      	mov	r4, r1
 800a090:	4606      	mov	r6, r0
 800a092:	f000 f851 	bl	800a138 <__ieee754_powf>
 800a096:	4621      	mov	r1, r4
 800a098:	4605      	mov	r5, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7f7 f818 	bl	80010d0 <__aeabi_fcmpun>
 800a0a0:	bb68      	cbnz	r0, 800a0fe <powf+0x72>
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7f6 ffe1 	bl	800106c <__aeabi_fcmpeq>
 800a0aa:	b190      	cbz	r0, 800a0d2 <powf+0x46>
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7f6 ffdc 	bl	800106c <__aeabi_fcmpeq>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d133      	bne.n	800a120 <powf+0x94>
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 f834 	bl	800a126 <finitef>
 800a0be:	b1f0      	cbz	r0, 800a0fe <powf+0x72>
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7f6 ffdc 	bl	8001080 <__aeabi_fcmplt>
 800a0c8:	b1c8      	cbz	r0, 800a0fe <powf+0x72>
 800a0ca:	f7fe f983 	bl	80083d4 <__errno>
 800a0ce:	2322      	movs	r3, #34	; 0x22
 800a0d0:	e014      	b.n	800a0fc <powf+0x70>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f827 	bl	800a126 <finitef>
 800a0d8:	b998      	cbnz	r0, 800a102 <powf+0x76>
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f823 	bl	800a126 <finitef>
 800a0e0:	b178      	cbz	r0, 800a102 <powf+0x76>
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 f81f 	bl	800a126 <finitef>
 800a0e8:	b158      	cbz	r0, 800a102 <powf+0x76>
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f7f6 ffef 	bl	80010d0 <__aeabi_fcmpun>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d0e9      	beq.n	800a0ca <powf+0x3e>
 800a0f6:	f7fe f96d 	bl	80083d4 <__errno>
 800a0fa:	2321      	movs	r3, #33	; 0x21
 800a0fc:	6003      	str	r3, [r0, #0]
 800a0fe:	4628      	mov	r0, r5
 800a100:	bd70      	pop	{r4, r5, r6, pc}
 800a102:	2100      	movs	r1, #0
 800a104:	4628      	mov	r0, r5
 800a106:	f7f6 ffb1 	bl	800106c <__aeabi_fcmpeq>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d0f7      	beq.n	800a0fe <powf+0x72>
 800a10e:	4630      	mov	r0, r6
 800a110:	f000 f809 	bl	800a126 <finitef>
 800a114:	2800      	cmp	r0, #0
 800a116:	d0f2      	beq.n	800a0fe <powf+0x72>
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 f804 	bl	800a126 <finitef>
 800a11e:	e7d3      	b.n	800a0c8 <powf+0x3c>
 800a120:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800a124:	e7eb      	b.n	800a0fe <powf+0x72>

0800a126 <finitef>:
 800a126:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a12a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a12e:	bfac      	ite	ge
 800a130:	2000      	movge	r0, #0
 800a132:	2001      	movlt	r0, #1
 800a134:	4770      	bx	lr
	...

0800a138 <__ieee754_powf>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 800a140:	4681      	mov	r9, r0
 800a142:	460f      	mov	r7, r1
 800a144:	4680      	mov	r8, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b087      	sub	sp, #28
 800a14a:	d10d      	bne.n	800a168 <__ieee754_powf+0x30>
 800a14c:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 800a150:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a154:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 800a158:	f240 8336 	bls.w	800a7c8 <__ieee754_powf+0x690>
 800a15c:	4639      	mov	r1, r7
 800a15e:	4648      	mov	r0, r9
 800a160:	f7f6 fce8 	bl	8000b34 <__addsf3>
 800a164:	4601      	mov	r1, r0
 800a166:	e040      	b.n	800a1ea <__ieee754_powf+0xb2>
 800a168:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a16c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a170:	dcf4      	bgt.n	800a15c <__ieee754_powf+0x24>
 800a172:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800a176:	dd08      	ble.n	800a18a <__ieee754_powf+0x52>
 800a178:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 800a17c:	d1ee      	bne.n	800a15c <__ieee754_powf+0x24>
 800a17e:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800a182:	0064      	lsls	r4, r4, #1
 800a184:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800a188:	e7e6      	b.n	800a158 <__ieee754_powf+0x20>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	da20      	bge.n	800a1d0 <__ieee754_powf+0x98>
 800a18e:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800a192:	da2e      	bge.n	800a1f2 <__ieee754_powf+0xba>
 800a194:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800a198:	f2c0 831b 	blt.w	800a7d2 <__ieee754_powf+0x69a>
 800a19c:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800a1a0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a1a4:	fa4a f503 	asr.w	r5, sl, r3
 800a1a8:	fa05 f303 	lsl.w	r3, r5, r3
 800a1ac:	4553      	cmp	r3, sl
 800a1ae:	f040 8310 	bne.w	800a7d2 <__ieee754_powf+0x69a>
 800a1b2:	f005 0501 	and.w	r5, r5, #1
 800a1b6:	f1c5 0502 	rsb	r5, r5, #2
 800a1ba:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800a1be:	d120      	bne.n	800a202 <__ieee754_powf+0xca>
 800a1c0:	2c00      	cmp	r4, #0
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	da11      	bge.n	800a1ea <__ieee754_powf+0xb2>
 800a1c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a1ca:	f7f6 fe6f 	bl	8000eac <__aeabi_fdiv>
 800a1ce:	e7c9      	b.n	800a164 <__ieee754_powf+0x2c>
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800a1d6:	d1f0      	bne.n	800a1ba <__ieee754_powf+0x82>
 800a1d8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800a1dc:	f000 82f4 	beq.w	800a7c8 <__ieee754_powf+0x690>
 800a1e0:	dd09      	ble.n	800a1f6 <__ieee754_powf+0xbe>
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	f2c0 82f3 	blt.w	800a7ce <__ieee754_powf+0x696>
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4608      	mov	r0, r1
 800a1ec:	b007      	add	sp, #28
 800a1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f2:	2502      	movs	r5, #2
 800a1f4:	e7ed      	b.n	800a1d2 <__ieee754_powf+0x9a>
 800a1f6:	2c00      	cmp	r4, #0
 800a1f8:	f280 82e9 	bge.w	800a7ce <__ieee754_powf+0x696>
 800a1fc:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800a200:	e7f3      	b.n	800a1ea <__ieee754_powf+0xb2>
 800a202:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a206:	d104      	bne.n	800a212 <__ieee754_powf+0xda>
 800a208:	4649      	mov	r1, r9
 800a20a:	4648      	mov	r0, r9
 800a20c:	f7f6 fd9a 	bl	8000d44 <__aeabi_fmul>
 800a210:	e7a8      	b.n	800a164 <__ieee754_powf+0x2c>
 800a212:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a216:	4648      	mov	r0, r9
 800a218:	d107      	bne.n	800a22a <__ieee754_powf+0xf2>
 800a21a:	f1b8 0f00 	cmp.w	r8, #0
 800a21e:	db04      	blt.n	800a22a <__ieee754_powf+0xf2>
 800a220:	b007      	add	sp, #28
 800a222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a226:	f000 bb5b 	b.w	800a8e0 <__ieee754_sqrtf>
 800a22a:	f000 faeb 	bl	800a804 <fabsf>
 800a22e:	4601      	mov	r1, r0
 800a230:	b126      	cbz	r6, 800a23c <__ieee754_powf+0x104>
 800a232:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a236:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a23a:	d117      	bne.n	800a26c <__ieee754_powf+0x134>
 800a23c:	2c00      	cmp	r4, #0
 800a23e:	da04      	bge.n	800a24a <__ieee754_powf+0x112>
 800a240:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a244:	f7f6 fe32 	bl	8000eac <__aeabi_fdiv>
 800a248:	4601      	mov	r1, r0
 800a24a:	f1b8 0f00 	cmp.w	r8, #0
 800a24e:	dacc      	bge.n	800a1ea <__ieee754_powf+0xb2>
 800a250:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800a254:	432e      	orrs	r6, r5
 800a256:	d104      	bne.n	800a262 <__ieee754_powf+0x12a>
 800a258:	4608      	mov	r0, r1
 800a25a:	f7f6 fc69 	bl	8000b30 <__aeabi_fsub>
 800a25e:	4601      	mov	r1, r0
 800a260:	e7b3      	b.n	800a1ca <__ieee754_powf+0x92>
 800a262:	2d01      	cmp	r5, #1
 800a264:	d1c1      	bne.n	800a1ea <__ieee754_powf+0xb2>
 800a266:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800a26a:	e77b      	b.n	800a164 <__ieee754_powf+0x2c>
 800a26c:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800a270:	3b01      	subs	r3, #1
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	432b      	orrs	r3, r5
 800a276:	d101      	bne.n	800a27c <__ieee754_powf+0x144>
 800a278:	4649      	mov	r1, r9
 800a27a:	e7ed      	b.n	800a258 <__ieee754_powf+0x120>
 800a27c:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 800a280:	f340 809e 	ble.w	800a3c0 <__ieee754_powf+0x288>
 800a284:	4b47      	ldr	r3, [pc, #284]	; (800a3a4 <__ieee754_powf+0x26c>)
 800a286:	429e      	cmp	r6, r3
 800a288:	dc07      	bgt.n	800a29a <__ieee754_powf+0x162>
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	da0a      	bge.n	800a2a4 <__ieee754_powf+0x16c>
 800a28e:	2000      	movs	r0, #0
 800a290:	b007      	add	sp, #28
 800a292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a296:	f000 bb1e 	b.w	800a8d6 <__math_oflowf>
 800a29a:	4b43      	ldr	r3, [pc, #268]	; (800a3a8 <__ieee754_powf+0x270>)
 800a29c:	429e      	cmp	r6, r3
 800a29e:	dd07      	ble.n	800a2b0 <__ieee754_powf+0x178>
 800a2a0:	2c00      	cmp	r4, #0
 800a2a2:	dcf4      	bgt.n	800a28e <__ieee754_powf+0x156>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	b007      	add	sp, #28
 800a2a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	f000 bb0f 	b.w	800a8ce <__math_uflowf>
 800a2b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a2b4:	f7f6 fc3c 	bl	8000b30 <__aeabi_fsub>
 800a2b8:	493c      	ldr	r1, [pc, #240]	; (800a3ac <__ieee754_powf+0x274>)
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	f7f6 fd42 	bl	8000d44 <__aeabi_fmul>
 800a2c0:	493b      	ldr	r1, [pc, #236]	; (800a3b0 <__ieee754_powf+0x278>)
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7f6 fd3d 	bl	8000d44 <__aeabi_fmul>
 800a2ca:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800a2ce:	4681      	mov	r9, r0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7f6 fd37 	bl	8000d44 <__aeabi_fmul>
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	4836      	ldr	r0, [pc, #216]	; (800a3b4 <__ieee754_powf+0x27c>)
 800a2da:	f7f6 fc29 	bl	8000b30 <__aeabi_fsub>
 800a2de:	4631      	mov	r1, r6
 800a2e0:	f7f6 fd30 	bl	8000d44 <__aeabi_fmul>
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a2ea:	f7f6 fc21 	bl	8000b30 <__aeabi_fsub>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7f6 fd26 	bl	8000d44 <__aeabi_fmul>
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	4650      	mov	r0, sl
 800a2fc:	f7f6 fd22 	bl	8000d44 <__aeabi_fmul>
 800a300:	492d      	ldr	r1, [pc, #180]	; (800a3b8 <__ieee754_powf+0x280>)
 800a302:	f7f6 fd1f 	bl	8000d44 <__aeabi_fmul>
 800a306:	4601      	mov	r1, r0
 800a308:	4648      	mov	r0, r9
 800a30a:	f7f6 fc11 	bl	8000b30 <__aeabi_fsub>
 800a30e:	4601      	mov	r1, r0
 800a310:	4606      	mov	r6, r0
 800a312:	4640      	mov	r0, r8
 800a314:	f7f6 fc0e 	bl	8000b34 <__addsf3>
 800a318:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800a31c:	f029 090f 	bic.w	r9, r9, #15
 800a320:	4641      	mov	r1, r8
 800a322:	4648      	mov	r0, r9
 800a324:	f7f6 fc04 	bl	8000b30 <__aeabi_fsub>
 800a328:	4601      	mov	r1, r0
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7f6 fc00 	bl	8000b30 <__aeabi_fsub>
 800a330:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	3d01      	subs	r5, #1
 800a338:	f024 040f 	bic.w	r4, r4, #15
 800a33c:	431d      	orrs	r5, r3
 800a33e:	4606      	mov	r6, r0
 800a340:	4621      	mov	r1, r4
 800a342:	4638      	mov	r0, r7
 800a344:	bf14      	ite	ne
 800a346:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800a34a:	4d1c      	ldreq	r5, [pc, #112]	; (800a3bc <__ieee754_powf+0x284>)
 800a34c:	f7f6 fbf0 	bl	8000b30 <__aeabi_fsub>
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 fcf7 	bl	8000d44 <__aeabi_fmul>
 800a356:	4639      	mov	r1, r7
 800a358:	4680      	mov	r8, r0
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7f6 fcf2 	bl	8000d44 <__aeabi_fmul>
 800a360:	4601      	mov	r1, r0
 800a362:	4640      	mov	r0, r8
 800a364:	f7f6 fbe6 	bl	8000b34 <__addsf3>
 800a368:	4621      	mov	r1, r4
 800a36a:	4606      	mov	r6, r0
 800a36c:	4648      	mov	r0, r9
 800a36e:	f7f6 fce9 	bl	8000d44 <__aeabi_fmul>
 800a372:	4601      	mov	r1, r0
 800a374:	4607      	mov	r7, r0
 800a376:	4681      	mov	r9, r0
 800a378:	4630      	mov	r0, r6
 800a37a:	f7f6 fbdb 	bl	8000b34 <__addsf3>
 800a37e:	2800      	cmp	r0, #0
 800a380:	4682      	mov	sl, r0
 800a382:	4680      	mov	r8, r0
 800a384:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a388:	f340 8200 	ble.w	800a78c <__ieee754_powf+0x654>
 800a38c:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800a390:	f340 814e 	ble.w	800a630 <__ieee754_powf+0x4f8>
 800a394:	2100      	movs	r1, #0
 800a396:	4628      	mov	r0, r5
 800a398:	f7f6 fe72 	bl	8001080 <__aeabi_fcmplt>
 800a39c:	3800      	subs	r0, #0
 800a39e:	bf18      	it	ne
 800a3a0:	2001      	movne	r0, #1
 800a3a2:	e775      	b.n	800a290 <__ieee754_powf+0x158>
 800a3a4:	3f7ffff3 	.word	0x3f7ffff3
 800a3a8:	3f800007 	.word	0x3f800007
 800a3ac:	3fb8aa00 	.word	0x3fb8aa00
 800a3b0:	36eca570 	.word	0x36eca570
 800a3b4:	3eaaaaab 	.word	0x3eaaaaab
 800a3b8:	3fb8aa3b 	.word	0x3fb8aa3b
 800a3bc:	bf800000 	.word	0xbf800000
 800a3c0:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800a3c4:	f040 8111 	bne.w	800a5ea <__ieee754_powf+0x4b2>
 800a3c8:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800a3cc:	f7f6 fcba 	bl	8000d44 <__aeabi_fmul>
 800a3d0:	f06f 0217 	mvn.w	r2, #23
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	15f3      	asrs	r3, r6, #23
 800a3d8:	3b7f      	subs	r3, #127	; 0x7f
 800a3da:	4413      	add	r3, r2
 800a3dc:	4a85      	ldr	r2, [pc, #532]	; (800a5f4 <__ieee754_powf+0x4bc>)
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	f3c6 0316 	ubfx	r3, r6, #0, #23
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 800a3ea:	dd08      	ble.n	800a3fe <__ieee754_powf+0x2c6>
 800a3ec:	4a82      	ldr	r2, [pc, #520]	; (800a5f8 <__ieee754_powf+0x4c0>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	f340 80fd 	ble.w	800a5ee <__ieee754_powf+0x4b6>
 800a3f4:	9b01      	ldr	r3, [sp, #4]
 800a3f6:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	2300      	movs	r3, #0
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	9900      	ldr	r1, [sp, #0]
 800a404:	4a7d      	ldr	r2, [pc, #500]	; (800a5fc <__ieee754_powf+0x4c4>)
 800a406:	4630      	mov	r0, r6
 800a408:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a40c:	9603      	str	r6, [sp, #12]
 800a40e:	4611      	mov	r1, r2
 800a410:	9205      	str	r2, [sp, #20]
 800a412:	f7f6 fb8d 	bl	8000b30 <__aeabi_fsub>
 800a416:	9a05      	ldr	r2, [sp, #20]
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	4683      	mov	fp, r0
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	9203      	str	r2, [sp, #12]
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	f7f6 fb86 	bl	8000b34 <__addsf3>
 800a428:	4601      	mov	r1, r0
 800a42a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a42e:	f7f6 fd3d 	bl	8000eac <__aeabi_fdiv>
 800a432:	4682      	mov	sl, r0
 800a434:	4601      	mov	r1, r0
 800a436:	4658      	mov	r0, fp
 800a438:	f7f6 fc84 	bl	8000d44 <__aeabi_fmul>
 800a43c:	1076      	asrs	r6, r6, #1
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800a444:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800a448:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800a44c:	f029 090f 	bic.w	r9, r9, #15
 800a450:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800a454:	4680      	mov	r8, r0
 800a456:	4631      	mov	r1, r6
 800a458:	4648      	mov	r0, r9
 800a45a:	f7f6 fc73 	bl	8000d44 <__aeabi_fmul>
 800a45e:	4601      	mov	r1, r0
 800a460:	4658      	mov	r0, fp
 800a462:	f7f6 fb65 	bl	8000b30 <__aeabi_fsub>
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	4683      	mov	fp, r0
 800a46a:	4611      	mov	r1, r2
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7f6 fb5f 	bl	8000b30 <__aeabi_fsub>
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	4601      	mov	r1, r0
 800a476:	4618      	mov	r0, r3
 800a478:	f7f6 fb5a 	bl	8000b30 <__aeabi_fsub>
 800a47c:	4649      	mov	r1, r9
 800a47e:	f7f6 fc61 	bl	8000d44 <__aeabi_fmul>
 800a482:	4601      	mov	r1, r0
 800a484:	4658      	mov	r0, fp
 800a486:	f7f6 fb53 	bl	8000b30 <__aeabi_fsub>
 800a48a:	4651      	mov	r1, sl
 800a48c:	f7f6 fc5a 	bl	8000d44 <__aeabi_fmul>
 800a490:	4641      	mov	r1, r8
 800a492:	4682      	mov	sl, r0
 800a494:	4640      	mov	r0, r8
 800a496:	f7f6 fc55 	bl	8000d44 <__aeabi_fmul>
 800a49a:	4606      	mov	r6, r0
 800a49c:	4958      	ldr	r1, [pc, #352]	; (800a600 <__ieee754_powf+0x4c8>)
 800a49e:	f7f6 fc51 	bl	8000d44 <__aeabi_fmul>
 800a4a2:	4958      	ldr	r1, [pc, #352]	; (800a604 <__ieee754_powf+0x4cc>)
 800a4a4:	f7f6 fb46 	bl	8000b34 <__addsf3>
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	f7f6 fc4b 	bl	8000d44 <__aeabi_fmul>
 800a4ae:	4956      	ldr	r1, [pc, #344]	; (800a608 <__ieee754_powf+0x4d0>)
 800a4b0:	f7f6 fb40 	bl	8000b34 <__addsf3>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	f7f6 fc45 	bl	8000d44 <__aeabi_fmul>
 800a4ba:	4954      	ldr	r1, [pc, #336]	; (800a60c <__ieee754_powf+0x4d4>)
 800a4bc:	f7f6 fb3a 	bl	8000b34 <__addsf3>
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	f7f6 fc3f 	bl	8000d44 <__aeabi_fmul>
 800a4c6:	4952      	ldr	r1, [pc, #328]	; (800a610 <__ieee754_powf+0x4d8>)
 800a4c8:	f7f6 fb34 	bl	8000b34 <__addsf3>
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	f7f6 fc39 	bl	8000d44 <__aeabi_fmul>
 800a4d2:	4950      	ldr	r1, [pc, #320]	; (800a614 <__ieee754_powf+0x4dc>)
 800a4d4:	f7f6 fb2e 	bl	8000b34 <__addsf3>
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4683      	mov	fp, r0
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7f6 fc31 	bl	8000d44 <__aeabi_fmul>
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4658      	mov	r0, fp
 800a4e6:	f7f6 fc2d 	bl	8000d44 <__aeabi_fmul>
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7f6 fb20 	bl	8000b34 <__addsf3>
 800a4f4:	4651      	mov	r1, sl
 800a4f6:	f7f6 fc25 	bl	8000d44 <__aeabi_fmul>
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	f7f6 fb1a 	bl	8000b34 <__addsf3>
 800a500:	4649      	mov	r1, r9
 800a502:	4683      	mov	fp, r0
 800a504:	4648      	mov	r0, r9
 800a506:	f7f6 fc1d 	bl	8000d44 <__aeabi_fmul>
 800a50a:	4943      	ldr	r1, [pc, #268]	; (800a618 <__ieee754_powf+0x4e0>)
 800a50c:	9003      	str	r0, [sp, #12]
 800a50e:	f7f6 fb11 	bl	8000b34 <__addsf3>
 800a512:	4659      	mov	r1, fp
 800a514:	f7f6 fb0e 	bl	8000b34 <__addsf3>
 800a518:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800a51c:	f026 060f 	bic.w	r6, r6, #15
 800a520:	4631      	mov	r1, r6
 800a522:	4648      	mov	r0, r9
 800a524:	f7f6 fc0e 	bl	8000d44 <__aeabi_fmul>
 800a528:	493b      	ldr	r1, [pc, #236]	; (800a618 <__ieee754_powf+0x4e0>)
 800a52a:	4681      	mov	r9, r0
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7f6 faff 	bl	8000b30 <__aeabi_fsub>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	4619      	mov	r1, r3
 800a536:	f7f6 fafb 	bl	8000b30 <__aeabi_fsub>
 800a53a:	4601      	mov	r1, r0
 800a53c:	4658      	mov	r0, fp
 800a53e:	f7f6 faf7 	bl	8000b30 <__aeabi_fsub>
 800a542:	4641      	mov	r1, r8
 800a544:	f7f6 fbfe 	bl	8000d44 <__aeabi_fmul>
 800a548:	4631      	mov	r1, r6
 800a54a:	4680      	mov	r8, r0
 800a54c:	4650      	mov	r0, sl
 800a54e:	f7f6 fbf9 	bl	8000d44 <__aeabi_fmul>
 800a552:	4601      	mov	r1, r0
 800a554:	4640      	mov	r0, r8
 800a556:	f7f6 faed 	bl	8000b34 <__addsf3>
 800a55a:	4682      	mov	sl, r0
 800a55c:	4601      	mov	r1, r0
 800a55e:	4648      	mov	r0, r9
 800a560:	f7f6 fae8 	bl	8000b34 <__addsf3>
 800a564:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800a568:	f026 060f 	bic.w	r6, r6, #15
 800a56c:	4630      	mov	r0, r6
 800a56e:	492b      	ldr	r1, [pc, #172]	; (800a61c <__ieee754_powf+0x4e4>)
 800a570:	f7f6 fbe8 	bl	8000d44 <__aeabi_fmul>
 800a574:	4649      	mov	r1, r9
 800a576:	4680      	mov	r8, r0
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f6 fad9 	bl	8000b30 <__aeabi_fsub>
 800a57e:	4601      	mov	r1, r0
 800a580:	4650      	mov	r0, sl
 800a582:	f7f6 fad5 	bl	8000b30 <__aeabi_fsub>
 800a586:	4926      	ldr	r1, [pc, #152]	; (800a620 <__ieee754_powf+0x4e8>)
 800a588:	f7f6 fbdc 	bl	8000d44 <__aeabi_fmul>
 800a58c:	4925      	ldr	r1, [pc, #148]	; (800a624 <__ieee754_powf+0x4ec>)
 800a58e:	4681      	mov	r9, r0
 800a590:	4630      	mov	r0, r6
 800a592:	f7f6 fbd7 	bl	8000d44 <__aeabi_fmul>
 800a596:	4601      	mov	r1, r0
 800a598:	4648      	mov	r0, r9
 800a59a:	f7f6 facb 	bl	8000b34 <__addsf3>
 800a59e:	4b22      	ldr	r3, [pc, #136]	; (800a628 <__ieee754_powf+0x4f0>)
 800a5a0:	9a00      	ldr	r2, [sp, #0]
 800a5a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5a6:	f7f6 fac5 	bl	8000b34 <__addsf3>
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	9801      	ldr	r0, [sp, #4]
 800a5ae:	f7f6 fb75 	bl	8000c9c <__aeabi_i2f>
 800a5b2:	4682      	mov	sl, r0
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <__ieee754_powf+0x4f4>)
 800a5b6:	9a00      	ldr	r2, [sp, #0]
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800a5be:	4640      	mov	r0, r8
 800a5c0:	f7f6 fab8 	bl	8000b34 <__addsf3>
 800a5c4:	4659      	mov	r1, fp
 800a5c6:	f7f6 fab5 	bl	8000b34 <__addsf3>
 800a5ca:	4651      	mov	r1, sl
 800a5cc:	f7f6 fab2 	bl	8000b34 <__addsf3>
 800a5d0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800a5d4:	f029 090f 	bic.w	r9, r9, #15
 800a5d8:	4651      	mov	r1, sl
 800a5da:	4648      	mov	r0, r9
 800a5dc:	f7f6 faa8 	bl	8000b30 <__aeabi_fsub>
 800a5e0:	4659      	mov	r1, fp
 800a5e2:	f7f6 faa5 	bl	8000b30 <__aeabi_fsub>
 800a5e6:	4641      	mov	r1, r8
 800a5e8:	e69c      	b.n	800a324 <__ieee754_powf+0x1ec>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	e6f3      	b.n	800a3d6 <__ieee754_powf+0x29e>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e706      	b.n	800a400 <__ieee754_powf+0x2c8>
 800a5f2:	bf00      	nop
 800a5f4:	001cc471 	.word	0x001cc471
 800a5f8:	005db3d6 	.word	0x005db3d6
 800a5fc:	0800b0b4 	.word	0x0800b0b4
 800a600:	3e53f142 	.word	0x3e53f142
 800a604:	3e6c3255 	.word	0x3e6c3255
 800a608:	3e8ba305 	.word	0x3e8ba305
 800a60c:	3eaaaaab 	.word	0x3eaaaaab
 800a610:	3edb6db7 	.word	0x3edb6db7
 800a614:	3f19999a 	.word	0x3f19999a
 800a618:	40400000 	.word	0x40400000
 800a61c:	3f763800 	.word	0x3f763800
 800a620:	3f76384f 	.word	0x3f76384f
 800a624:	369dc3a0 	.word	0x369dc3a0
 800a628:	0800b0c4 	.word	0x0800b0c4
 800a62c:	0800b0bc 	.word	0x0800b0bc
 800a630:	f040 80c2 	bne.w	800a7b8 <__ieee754_powf+0x680>
 800a634:	4968      	ldr	r1, [pc, #416]	; (800a7d8 <__ieee754_powf+0x6a0>)
 800a636:	4630      	mov	r0, r6
 800a638:	f7f6 fa7c 	bl	8000b34 <__addsf3>
 800a63c:	4639      	mov	r1, r7
 800a63e:	4681      	mov	r9, r0
 800a640:	4650      	mov	r0, sl
 800a642:	f7f6 fa75 	bl	8000b30 <__aeabi_fsub>
 800a646:	4601      	mov	r1, r0
 800a648:	4648      	mov	r0, r9
 800a64a:	f7f6 fd37 	bl	80010bc <__aeabi_fcmpgt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	f47f aea0 	bne.w	800a394 <__ieee754_powf+0x25c>
 800a654:	15e4      	asrs	r4, r4, #23
 800a656:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 800a65a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 800a65e:	411c      	asrs	r4, r3
 800a660:	4444      	add	r4, r8
 800a662:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800a666:	495d      	ldr	r1, [pc, #372]	; (800a7dc <__ieee754_powf+0x6a4>)
 800a668:	3b7f      	subs	r3, #127	; 0x7f
 800a66a:	4119      	asrs	r1, r3
 800a66c:	4021      	ands	r1, r4
 800a66e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a672:	f1c3 0317 	rsb	r3, r3, #23
 800a676:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800a67a:	411c      	asrs	r4, r3
 800a67c:	f1b8 0f00 	cmp.w	r8, #0
 800a680:	4638      	mov	r0, r7
 800a682:	bfb8      	it	lt
 800a684:	4264      	neglt	r4, r4
 800a686:	f7f6 fa53 	bl	8000b30 <__aeabi_fsub>
 800a68a:	4681      	mov	r9, r0
 800a68c:	4631      	mov	r1, r6
 800a68e:	4648      	mov	r0, r9
 800a690:	f7f6 fa50 	bl	8000b34 <__addsf3>
 800a694:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800a698:	f027 070f 	bic.w	r7, r7, #15
 800a69c:	4638      	mov	r0, r7
 800a69e:	4950      	ldr	r1, [pc, #320]	; (800a7e0 <__ieee754_powf+0x6a8>)
 800a6a0:	f7f6 fb50 	bl	8000d44 <__aeabi_fmul>
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4680      	mov	r8, r0
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7f6 fa41 	bl	8000b30 <__aeabi_fsub>
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7f6 fa3d 	bl	8000b30 <__aeabi_fsub>
 800a6b6:	494b      	ldr	r1, [pc, #300]	; (800a7e4 <__ieee754_powf+0x6ac>)
 800a6b8:	f7f6 fb44 	bl	8000d44 <__aeabi_fmul>
 800a6bc:	494a      	ldr	r1, [pc, #296]	; (800a7e8 <__ieee754_powf+0x6b0>)
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7f6 fb3f 	bl	8000d44 <__aeabi_fmul>
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7f6 fa33 	bl	8000b34 <__addsf3>
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	f7f6 fa2e 	bl	8000b34 <__addsf3>
 800a6d8:	4641      	mov	r1, r8
 800a6da:	4606      	mov	r6, r0
 800a6dc:	f7f6 fa28 	bl	8000b30 <__aeabi_fsub>
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f7f6 fa24 	bl	8000b30 <__aeabi_fsub>
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4680      	mov	r8, r0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7f6 fb29 	bl	8000d44 <__aeabi_fmul>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	493d      	ldr	r1, [pc, #244]	; (800a7ec <__ieee754_powf+0x6b4>)
 800a6f6:	f7f6 fb25 	bl	8000d44 <__aeabi_fmul>
 800a6fa:	493d      	ldr	r1, [pc, #244]	; (800a7f0 <__ieee754_powf+0x6b8>)
 800a6fc:	f7f6 fa18 	bl	8000b30 <__aeabi_fsub>
 800a700:	4639      	mov	r1, r7
 800a702:	f7f6 fb1f 	bl	8000d44 <__aeabi_fmul>
 800a706:	493b      	ldr	r1, [pc, #236]	; (800a7f4 <__ieee754_powf+0x6bc>)
 800a708:	f7f6 fa14 	bl	8000b34 <__addsf3>
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f6 fb19 	bl	8000d44 <__aeabi_fmul>
 800a712:	4939      	ldr	r1, [pc, #228]	; (800a7f8 <__ieee754_powf+0x6c0>)
 800a714:	f7f6 fa0c 	bl	8000b30 <__aeabi_fsub>
 800a718:	4639      	mov	r1, r7
 800a71a:	f7f6 fb13 	bl	8000d44 <__aeabi_fmul>
 800a71e:	4937      	ldr	r1, [pc, #220]	; (800a7fc <__ieee754_powf+0x6c4>)
 800a720:	f7f6 fa08 	bl	8000b34 <__addsf3>
 800a724:	4639      	mov	r1, r7
 800a726:	f7f6 fb0d 	bl	8000d44 <__aeabi_fmul>
 800a72a:	4601      	mov	r1, r0
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7f6 f9ff 	bl	8000b30 <__aeabi_fsub>
 800a732:	4607      	mov	r7, r0
 800a734:	4601      	mov	r1, r0
 800a736:	4630      	mov	r0, r6
 800a738:	f7f6 fb04 	bl	8000d44 <__aeabi_fmul>
 800a73c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a740:	4681      	mov	r9, r0
 800a742:	4638      	mov	r0, r7
 800a744:	f7f6 f9f4 	bl	8000b30 <__aeabi_fsub>
 800a748:	4601      	mov	r1, r0
 800a74a:	4648      	mov	r0, r9
 800a74c:	f7f6 fbae 	bl	8000eac <__aeabi_fdiv>
 800a750:	4641      	mov	r1, r8
 800a752:	4607      	mov	r7, r0
 800a754:	4630      	mov	r0, r6
 800a756:	f7f6 faf5 	bl	8000d44 <__aeabi_fmul>
 800a75a:	4641      	mov	r1, r8
 800a75c:	f7f6 f9ea 	bl	8000b34 <__addsf3>
 800a760:	4601      	mov	r1, r0
 800a762:	4638      	mov	r0, r7
 800a764:	f7f6 f9e4 	bl	8000b30 <__aeabi_fsub>
 800a768:	4631      	mov	r1, r6
 800a76a:	f7f6 f9e1 	bl	8000b30 <__aeabi_fsub>
 800a76e:	4601      	mov	r1, r0
 800a770:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a774:	f7f6 f9dc 	bl	8000b30 <__aeabi_fsub>
 800a778:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800a77c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a780:	da20      	bge.n	800a7c4 <__ieee754_powf+0x68c>
 800a782:	4621      	mov	r1, r4
 800a784:	f000 f842 	bl	800a80c <scalbnf>
 800a788:	4629      	mov	r1, r5
 800a78a:	e53f      	b.n	800a20c <__ieee754_powf+0xd4>
 800a78c:	4b1c      	ldr	r3, [pc, #112]	; (800a800 <__ieee754_powf+0x6c8>)
 800a78e:	429c      	cmp	r4, r3
 800a790:	dd07      	ble.n	800a7a2 <__ieee754_powf+0x66a>
 800a792:	2100      	movs	r1, #0
 800a794:	4628      	mov	r0, r5
 800a796:	f7f6 fc73 	bl	8001080 <__aeabi_fcmplt>
 800a79a:	3800      	subs	r0, #0
 800a79c:	bf18      	it	ne
 800a79e:	2001      	movne	r0, #1
 800a7a0:	e581      	b.n	800a2a6 <__ieee754_powf+0x16e>
 800a7a2:	d109      	bne.n	800a7b8 <__ieee754_powf+0x680>
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	f7f6 f9c3 	bl	8000b30 <__aeabi_fsub>
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	f7f6 fc7c 	bl	80010a8 <__aeabi_fcmpge>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f43f af4f 	beq.w	800a654 <__ieee754_powf+0x51c>
 800a7b6:	e7ec      	b.n	800a792 <__ieee754_powf+0x65a>
 800a7b8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a7bc:	f73f af4a 	bgt.w	800a654 <__ieee754_powf+0x51c>
 800a7c0:	2400      	movs	r4, #0
 800a7c2:	e763      	b.n	800a68c <__ieee754_powf+0x554>
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	e7df      	b.n	800a788 <__ieee754_powf+0x650>
 800a7c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a7cc:	e50d      	b.n	800a1ea <__ieee754_powf+0xb2>
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	e50b      	b.n	800a1ea <__ieee754_powf+0xb2>
 800a7d2:	2500      	movs	r5, #0
 800a7d4:	e4f1      	b.n	800a1ba <__ieee754_powf+0x82>
 800a7d6:	bf00      	nop
 800a7d8:	3338aa3c 	.word	0x3338aa3c
 800a7dc:	ff800000 	.word	0xff800000
 800a7e0:	3f317200 	.word	0x3f317200
 800a7e4:	3f317218 	.word	0x3f317218
 800a7e8:	35bfbe8c 	.word	0x35bfbe8c
 800a7ec:	3331bb4c 	.word	0x3331bb4c
 800a7f0:	35ddea0e 	.word	0x35ddea0e
 800a7f4:	388ab355 	.word	0x388ab355
 800a7f8:	3b360b61 	.word	0x3b360b61
 800a7fc:	3e2aaaab 	.word	0x3e2aaaab
 800a800:	43160000 	.word	0x43160000

0800a804 <fabsf>:
 800a804:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a808:	4770      	bx	lr
	...

0800a80c <scalbnf>:
 800a80c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4603      	mov	r3, r0
 800a814:	460d      	mov	r5, r1
 800a816:	4604      	mov	r4, r0
 800a818:	d02e      	beq.n	800a878 <scalbnf+0x6c>
 800a81a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a81e:	d304      	bcc.n	800a82a <scalbnf+0x1e>
 800a820:	4601      	mov	r1, r0
 800a822:	f7f6 f987 	bl	8000b34 <__addsf3>
 800a826:	4603      	mov	r3, r0
 800a828:	e026      	b.n	800a878 <scalbnf+0x6c>
 800a82a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800a82e:	d118      	bne.n	800a862 <scalbnf+0x56>
 800a830:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800a834:	f7f6 fa86 	bl	8000d44 <__aeabi_fmul>
 800a838:	4a17      	ldr	r2, [pc, #92]	; (800a898 <scalbnf+0x8c>)
 800a83a:	4603      	mov	r3, r0
 800a83c:	4295      	cmp	r5, r2
 800a83e:	db0c      	blt.n	800a85a <scalbnf+0x4e>
 800a840:	4604      	mov	r4, r0
 800a842:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a846:	3a19      	subs	r2, #25
 800a848:	f24c 3150 	movw	r1, #50000	; 0xc350
 800a84c:	428d      	cmp	r5, r1
 800a84e:	dd0a      	ble.n	800a866 <scalbnf+0x5a>
 800a850:	4912      	ldr	r1, [pc, #72]	; (800a89c <scalbnf+0x90>)
 800a852:	4618      	mov	r0, r3
 800a854:	f361 001e 	bfi	r0, r1, #0, #31
 800a858:	e000      	b.n	800a85c <scalbnf+0x50>
 800a85a:	4911      	ldr	r1, [pc, #68]	; (800a8a0 <scalbnf+0x94>)
 800a85c:	f7f6 fa72 	bl	8000d44 <__aeabi_fmul>
 800a860:	e7e1      	b.n	800a826 <scalbnf+0x1a>
 800a862:	0dd2      	lsrs	r2, r2, #23
 800a864:	e7f0      	b.n	800a848 <scalbnf+0x3c>
 800a866:	1951      	adds	r1, r2, r5
 800a868:	29fe      	cmp	r1, #254	; 0xfe
 800a86a:	dcf1      	bgt.n	800a850 <scalbnf+0x44>
 800a86c:	2900      	cmp	r1, #0
 800a86e:	dd05      	ble.n	800a87c <scalbnf+0x70>
 800a870:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800a874:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800a878:	4618      	mov	r0, r3
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	f111 0f16 	cmn.w	r1, #22
 800a880:	da01      	bge.n	800a886 <scalbnf+0x7a>
 800a882:	4907      	ldr	r1, [pc, #28]	; (800a8a0 <scalbnf+0x94>)
 800a884:	e7e5      	b.n	800a852 <scalbnf+0x46>
 800a886:	f101 0019 	add.w	r0, r1, #25
 800a88a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800a88e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800a892:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800a896:	e7e1      	b.n	800a85c <scalbnf+0x50>
 800a898:	ffff3cb0 	.word	0xffff3cb0
 800a89c:	7149f2ca 	.word	0x7149f2ca
 800a8a0:	0da24260 	.word	0x0da24260

0800a8a4 <with_errnof>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	f7fd fd93 	bl	80083d4 <__errno>
 800a8ae:	6005      	str	r5, [r0, #0]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}

0800a8b4 <xflowf>:
 800a8b4:	b508      	push	{r3, lr}
 800a8b6:	b140      	cbz	r0, 800a8ca <xflowf+0x16>
 800a8b8:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800a8bc:	f7f6 fa42 	bl	8000d44 <__aeabi_fmul>
 800a8c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8c4:	2122      	movs	r1, #34	; 0x22
 800a8c6:	f7ff bfed 	b.w	800a8a4 <with_errnof>
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	e7f6      	b.n	800a8bc <xflowf+0x8>

0800a8ce <__math_uflowf>:
 800a8ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800a8d2:	f7ff bfef 	b.w	800a8b4 <xflowf>

0800a8d6 <__math_oflowf>:
 800a8d6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800a8da:	f7ff bfeb 	b.w	800a8b4 <xflowf>
	...

0800a8e0 <__ieee754_sqrtf>:
 800a8e0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a8e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	d30a      	bcc.n	800a908 <__ieee754_sqrtf+0x28>
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	f7f6 fa26 	bl	8000d44 <__aeabi_fmul>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7f6 f91a 	bl	8000b34 <__addsf3>
 800a900:	4604      	mov	r4, r0
 800a902:	4620      	mov	r0, r4
 800a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a908:	2a00      	cmp	r2, #0
 800a90a:	d0fa      	beq.n	800a902 <__ieee754_sqrtf+0x22>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	da06      	bge.n	800a91e <__ieee754_sqrtf+0x3e>
 800a910:	4601      	mov	r1, r0
 800a912:	f7f6 f90d 	bl	8000b30 <__aeabi_fsub>
 800a916:	4601      	mov	r1, r0
 800a918:	f7f6 fac8 	bl	8000eac <__aeabi_fdiv>
 800a91c:	e7f0      	b.n	800a900 <__ieee754_sqrtf+0x20>
 800a91e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800a922:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800a926:	d03e      	beq.n	800a9a6 <__ieee754_sqrtf+0xc6>
 800a928:	2400      	movs	r4, #0
 800a92a:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 800a92e:	07ca      	lsls	r2, r1, #31
 800a930:	f04f 0019 	mov.w	r0, #25
 800a934:	4626      	mov	r6, r4
 800a936:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800a93a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a93e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a942:	bf58      	it	pl
 800a944:	005b      	lslpl	r3, r3, #1
 800a946:	106d      	asrs	r5, r5, #1
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	1872      	adds	r2, r6, r1
 800a94c:	429a      	cmp	r2, r3
 800a94e:	bfcf      	iteee	gt
 800a950:	461a      	movgt	r2, r3
 800a952:	1856      	addle	r6, r2, r1
 800a954:	1864      	addle	r4, r4, r1
 800a956:	1a9a      	suble	r2, r3, r2
 800a958:	3801      	subs	r0, #1
 800a95a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800a95e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a962:	d1f2      	bne.n	800a94a <__ieee754_sqrtf+0x6a>
 800a964:	b1ba      	cbz	r2, 800a996 <__ieee754_sqrtf+0xb6>
 800a966:	4e14      	ldr	r6, [pc, #80]	; (800a9b8 <__ieee754_sqrtf+0xd8>)
 800a968:	4f14      	ldr	r7, [pc, #80]	; (800a9bc <__ieee754_sqrtf+0xdc>)
 800a96a:	6830      	ldr	r0, [r6, #0]
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	f7f6 f8df 	bl	8000b30 <__aeabi_fsub>
 800a972:	f8d6 8000 	ldr.w	r8, [r6]
 800a976:	4601      	mov	r1, r0
 800a978:	4640      	mov	r0, r8
 800a97a:	f7f6 fb8b 	bl	8001094 <__aeabi_fcmple>
 800a97e:	b150      	cbz	r0, 800a996 <__ieee754_sqrtf+0xb6>
 800a980:	6830      	ldr	r0, [r6, #0]
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	f7f6 f8d6 	bl	8000b34 <__addsf3>
 800a988:	6836      	ldr	r6, [r6, #0]
 800a98a:	4601      	mov	r1, r0
 800a98c:	4630      	mov	r0, r6
 800a98e:	f7f6 fb77 	bl	8001080 <__aeabi_fcmplt>
 800a992:	b168      	cbz	r0, 800a9b0 <__ieee754_sqrtf+0xd0>
 800a994:	3402      	adds	r4, #2
 800a996:	1064      	asrs	r4, r4, #1
 800a998:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800a99c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800a9a0:	e7af      	b.n	800a902 <__ieee754_sqrtf+0x22>
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	3201      	adds	r2, #1
 800a9a6:	0218      	lsls	r0, r3, #8
 800a9a8:	d5fb      	bpl.n	800a9a2 <__ieee754_sqrtf+0xc2>
 800a9aa:	3a01      	subs	r2, #1
 800a9ac:	1a89      	subs	r1, r1, r2
 800a9ae:	e7bb      	b.n	800a928 <__ieee754_sqrtf+0x48>
 800a9b0:	3401      	adds	r4, #1
 800a9b2:	f024 0401 	bic.w	r4, r4, #1
 800a9b6:	e7ee      	b.n	800a996 <__ieee754_sqrtf+0xb6>
 800a9b8:	200001d4 	.word	0x200001d4
 800a9bc:	200001d8 	.word	0x200001d8

0800a9c0 <_init>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	bf00      	nop
 800a9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c6:	bc08      	pop	{r3}
 800a9c8:	469e      	mov	lr, r3
 800a9ca:	4770      	bx	lr

0800a9cc <_fini>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	bf00      	nop
 800a9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d2:	bc08      	pop	{r3}
 800a9d4:	469e      	mov	lr, r3
 800a9d6:	4770      	bx	lr
