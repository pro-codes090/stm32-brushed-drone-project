
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007254  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08007368  08007368  00017368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007794  08007794  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800779c  0800779c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001d4  08007978  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08007978  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e72  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e8  00000000  00000000  000310b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000334a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc9  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019763  00000000  00000000  000353d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d6f  00000000  00000000  0004eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000913ca  00000000  00000000  000628ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b88  00000000  00000000  000f3c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f9800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800734c 	.word	0x0800734c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800734c 	.word	0x0800734c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b972 	b.w	8000d84 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14c      	bne.n	8000b62 <__udivmoddi4+0xaa>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d967      	bls.n	8000b9e <__udivmoddi4+0xe6>
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	b153      	cbz	r3, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad8:	f1c3 0220 	rsb	r2, r3, #32
 8000adc:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ae0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fbbe f1f7 	udiv	r1, lr, r7
 8000af2:	fa1f f58c 	uxth.w	r5, ip
 8000af6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000afa:	fb01 f005 	mul.w	r0, r1, r5
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 3eff 	add.w	lr, r1, #4294967295
 8000b10:	f080 8119 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8116 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b24:	fb07 2210 	mls	r2, r7, r0, r2
 8000b28:	fb00 f505 	mul.w	r5, r0, r5
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8104 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8101 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	2100      	movs	r1, #0
 8000b52:	1b64      	subs	r4, r4, r5
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa6>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xc0>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ea 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d148      	bne.n	8000c12 <__udivmoddi4+0x15a>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xd2>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2c2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4696      	mov	lr, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa6>
 8000b98:	e9c6 4e00 	strd	r4, lr, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xea>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 808e 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000bac:	1a88      	subs	r0, r1, r2
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0c17      	lsrs	r7, r2, #16
 8000bb2:	fa1f fe82 	uxth.w	lr, r2
 8000bb6:	fbb0 f5f7 	udiv	r5, r0, r7
 8000bba:	fb07 0015 	mls	r0, r7, r5, r0
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc4:	fb0e f005 	mul.w	r0, lr, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f200 80cc 	bhi.w	8000d74 <__udivmoddi4+0x2bc>
 8000bdc:	4645      	mov	r5, r8
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be4:	fb07 2210 	mls	r2, r7, r0, r2
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x150>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14e>
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	f200 80b4 	bhi.w	8000d6e <__udivmoddi4+0x2b6>
 8000c06:	4610      	mov	r0, r2
 8000c08:	eba4 040e 	sub.w	r4, r4, lr
 8000c0c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c10:	e7a0      	b.n	8000b54 <__udivmoddi4+0x9c>
 8000c12:	f1c1 0720 	rsb	r7, r1, #32
 8000c16:	408b      	lsls	r3, r1
 8000c18:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c20:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c28:	fbba f8f9 	udiv	r8, sl, r9
 8000c2c:	408d      	lsls	r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	432b      	orrs	r3, r5
 8000c3c:	fa00 f501 	lsl.w	r5, r0, r1
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	0c1c      	lsrs	r4, r3, #16
 8000c46:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c4a:	42a0      	cmp	r0, r4
 8000c4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c50:	d90b      	bls.n	8000c6a <__udivmoddi4+0x1b2>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5a:	f080 8086 	bcs.w	8000d6a <__udivmoddi4+0x2b2>
 8000c5e:	42a0      	cmp	r0, r4
 8000c60:	f240 8083 	bls.w	8000d6a <__udivmoddi4+0x2b2>
 8000c64:	f1a8 0802 	sub.w	r8, r8, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1a24      	subs	r4, r4, r0
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c72:	fb09 4413 	mls	r4, r9, r3, r4
 8000c76:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c7a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8a:	d26a      	bcs.n	8000d62 <__udivmoddi4+0x2aa>
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d968      	bls.n	8000d62 <__udivmoddi4+0x2aa>
 8000c90:	3b02      	subs	r3, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000c98:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9c:	eba4 040e 	sub.w	r4, r4, lr
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	46c8      	mov	r8, r9
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d067      	beq.n	8000d7e <__udivmoddi4+0x2c6>
 8000cae:	ebb5 0308 	subs.w	r3, r5, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	40cb      	lsrs	r3, r1
 8000cb8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbc:	431f      	orrs	r7, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e74a      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0020 	rsb	r0, r3, #32
 8000cd0:	40c1      	lsrs	r1, r0
 8000cd2:	409d      	lsls	r5, r3
 8000cd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	4328      	orrs	r0, r5
 8000cde:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce2:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	0c02      	lsrs	r2, r0, #16
 8000cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf0:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf4:	4291      	cmp	r1, r2
 8000cf6:	fa04 f403 	lsl.w	r4, r4, r3
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x256>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d22f      	bcs.n	8000d66 <__udivmoddi4+0x2ae>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d92d      	bls.n	8000d66 <__udivmoddi4+0x2ae>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	fbb2 f1f7 	udiv	r1, r2, r7
 8000d14:	fb07 2211 	mls	r2, r7, r1, r2
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d1e:	fb01 f20e 	mul.w	r2, r1, lr
 8000d22:	4282      	cmp	r2, r0
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x280>
 8000d26:	eb1c 0000 	adds.w	r0, ip, r0
 8000d2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d2e:	d216      	bcs.n	8000d5e <__udivmoddi4+0x2a6>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d914      	bls.n	8000d5e <__udivmoddi4+0x2a6>
 8000d34:	3902      	subs	r1, #2
 8000d36:	4460      	add	r0, ip
 8000d38:	1a80      	subs	r0, r0, r2
 8000d3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4631      	mov	r1, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e70b      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d46:	4671      	mov	r1, lr
 8000d48:	e6e9      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	e6fe      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d4e:	454d      	cmp	r5, r9
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb9 0802 	subs.w	r8, r9, r2
 8000d56:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a5      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	e7ea      	b.n	8000d38 <__udivmoddi4+0x280>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e796      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d66:	4645      	mov	r5, r8
 8000d68:	e7d1      	b.n	8000d0e <__udivmoddi4+0x256>
 8000d6a:	46d0      	mov	r8, sl
 8000d6c:	e77d      	b.n	8000c6a <__udivmoddi4+0x1b2>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e749      	b.n	8000c08 <__udivmoddi4+0x150>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e731      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xdc>
 8000d7e:	4631      	mov	r1, r6
 8000d80:	e6ed      	b.n	8000b5e <__udivmoddi4+0xa6>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f000 fe6d 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f88b 	bl	8000eac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Init();
 8000d96:	f000 fe69 	bl	8001a6c <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 fac1 	bl	8001320 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d9e:	f000 f8c5 	bl	8000f2c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000da2:	f000 fa93 	bl	80012cc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000da6:	f000 f927 	bl	8000ff8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000daa:	f000 fa27 	bl	80011fc <MX_TIM3_Init>
  MX_TIM2_Init();
 8000dae:	f000 f9cf 	bl	8001150 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000db2:	f000 f8eb 	bl	8000f8c <MX_SPI1_Init>
   //get_Accl(&hi2c1, &Accl_Data) ;
   //
   //printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);

   // config your wirelss module such as a lora module
   config_wireless();
 8000db6:	f000 fb0f 	bl	80013d8 <config_wireless>
   // recieve the channels
	for (uint8_t i = 0;  i < 10; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	e022      	b.n	8000e06 <main+0x7e>
	  ret = lora_prasePacket(&lora);
 8000dc0:	4834      	ldr	r0, [pc, #208]	; (8000e94 <main+0x10c>)
 8000dc2:	f003 fcdb 	bl	800477c <lora_prasePacket>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <main+0x110>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	  if(ret){
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <main+0x110>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d014      	beq.n	8000e00 <main+0x78>
		uint8_t i=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71bb      	strb	r3, [r7, #6]
		while( i <  8){
 8000dda:	e00a      	b.n	8000df2 <main+0x6a>
		buff[i] = lora_read(&lora);
 8000ddc:	79bc      	ldrb	r4, [r7, #6]
 8000dde:	482d      	ldr	r0, [pc, #180]	; (8000e94 <main+0x10c>)
 8000de0:	f003 fd3c 	bl	800485c <lora_read>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <main+0x114>)
 8000dea:	551a      	strb	r2, [r3, r4]
		i++;
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	3301      	adds	r3, #1
 8000df0:	71bb      	strb	r3, [r7, #6]
		while( i <  8){
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d9f1      	bls.n	8000ddc <main+0x54>
		 }
		printf("%s \n" , buff);
 8000df8:	4928      	ldr	r1, [pc, #160]	; (8000e9c <main+0x114>)
 8000dfa:	4829      	ldr	r0, [pc, #164]	; (8000ea0 <main+0x118>)
 8000dfc:	f004 fab2 	bl	8005364 <iprintf>
	for (uint8_t i = 0;  i < 10; i++) {
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	d9d9      	bls.n	8000dc0 <main+0x38>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rcv_channel();
 8000e0c:	f000 fb24 	bl	8001458 <rcv_channel>

		recived_channels.Roll    = buff[1] << 8 | buff[0] ;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <main+0x114>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <main+0x114>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <main+0x11c>)
 8000e24:	801a      	strh	r2, [r3, #0]
		recived_channels.Pitch   = buff[3] << 8 | buff[2] ;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <main+0x114>)
 8000e28:	78db      	ldrb	r3, [r3, #3]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <main+0x114>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21a      	sxth	r2, r3
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <main+0x11c>)
 8000e3a:	805a      	strh	r2, [r3, #2]
		recived_channels.Throtle = buff[5] << 8 | buff[4] ;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <main+0x114>)
 8000e3e:	795b      	ldrb	r3, [r3, #5]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <main+0x114>)
 8000e46:	791b      	ldrb	r3, [r3, #4]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <main+0x11c>)
 8000e52:	809a      	strh	r2, [r3, #4]
		recived_channels.Yaw     = buff[7] << 8 | buff[6] ;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <main+0x114>)
 8000e56:	79db      	ldrb	r3, [r3, #7]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <main+0x114>)
 8000e5e:	799b      	ldrb	r3, [r3, #6]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <main+0x11c>)
 8000e68:	80da      	strh	r2, [r3, #6]

		printf("data1 : %d  ,data2 : %d  ,data3 : %d   ,data4 : %d  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <main+0x11c>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <main+0x11c>)
 8000e74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e78:	461a      	mov	r2, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <main+0x11c>)
 8000e7c:	889b      	ldrh	r3, [r3, #4]
		printf("data1 : %d  ,data2 : %d  ,data3 : %d   ,data4 : %d  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000e7e:	4618      	mov	r0, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <main+0x11c>)
 8000e82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		printf("data1 : %d  ,data2 : %d  ,data3 : %d   ,data4 : %d  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <main+0x120>)
 8000e8c:	f004 fa6a 	bl	8005364 <iprintf>
	  rcv_channel();
 8000e90:	e7bc      	b.n	8000e0c <main+0x84>
 8000e92:	bf00      	nop
 8000e94:	200003d8 	.word	0x200003d8
 8000e98:	200003e0 	.word	0x200003e0
 8000e9c:	200003e4 	.word	0x200003e4
 8000ea0:	08007368 	.word	0x08007368
 8000ea4:	200003f4 	.word	0x200003f4
 8000ea8:	08007370 	.word	0x08007370

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b090      	sub	sp, #64	; 0x40
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	2228      	movs	r2, #40	; 0x28
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fb98 	bl	80055f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fa32 	bl	8002354 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000ef6:	f000 faf5 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fca0 	bl	8002858 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000f1e:	f000 fae1 	bl	80014e4 <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3740      	adds	r7, #64	; 0x40
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <MX_I2C1_Init+0x58>)
 8000f34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_I2C1_Init+0x5c>)
 8000f3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_I2C1_Init+0x54>)
 8000f6c:	f001 f8ae 	bl	80020cc <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000f76:	f000 fab5 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001f0 	.word	0x200001f0
 8000f84:	40005400 	.word	0x40005400
 8000f88:	00061a80 	.word	0x00061a80

08000f8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_SPI1_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fde:	f001 fdc9 	bl	8002b74 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f000 fa7c 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000244 	.word	0x20000244
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b092      	sub	sp, #72	; 0x48
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2220      	movs	r2, #32
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fae4 	bl	80055f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <MX_TIM1_Init+0x150>)
 800102a:	4a48      	ldr	r2, [pc, #288]	; (800114c <MX_TIM1_Init+0x154>)
 800102c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <MX_TIM1_Init+0x150>)
 8001030:	2264      	movs	r2, #100	; 0x64
 8001032:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <MX_TIM1_Init+0x150>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <MX_TIM1_Init+0x150>)
 800103c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <MX_TIM1_Init+0x150>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_TIM1_Init+0x150>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <MX_TIM1_Init+0x150>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001054:	483c      	ldr	r0, [pc, #240]	; (8001148 <MX_TIM1_Init+0x150>)
 8001056:	f002 fb70 	bl	800373a <HAL_TIM_PWM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001060:	f000 fa40 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001070:	4619      	mov	r1, r3
 8001072:	4835      	ldr	r0, [pc, #212]	; (8001148 <MX_TIM1_Init+0x150>)
 8001074:	f002 ffe4 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800107e:	f000 fa31 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	; 0x60
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4828      	ldr	r0, [pc, #160]	; (8001148 <MX_TIM1_Init+0x150>)
 80010a8:	f002 fcfa 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80010b2:	f000 fa17 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 80010b6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	2204      	movs	r2, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <MX_TIM1_Init+0x150>)
 80010c6:	f002 fceb 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010d0:	f000 fa08 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2208      	movs	r2, #8
 80010de:	4619      	mov	r1, r3
 80010e0:	4819      	ldr	r0, [pc, #100]	; (8001148 <MX_TIM1_Init+0x150>)
 80010e2:	f002 fcdd 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010ec:	f000 f9fa 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	220c      	movs	r2, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM1_Init+0x150>)
 80010fa:	f002 fcd1 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001104:	f000 f9ee 	bl	80014e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM1_Init+0x150>)
 800112c:	f002 ffe6 	bl	80040fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001136:	f000 f9d5 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM1_Init+0x150>)
 800113c:	f000 fad8 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3748      	adds	r7, #72	; 0x48
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000029c 	.word	0x2000029c
 800114c:	40012c00 	.word	0x40012c00

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_TIM2_Init+0xa8>)
 8001174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001178:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM2_Init+0xa8>)
 800117c:	2264      	movs	r2, #100	; 0x64
 800117e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM2_Init+0xa8>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM2_Init+0xa8>)
 8001188:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800118c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM2_Init+0xa8>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM2_Init+0xa8>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <MX_TIM2_Init+0xa8>)
 800119c:	f002 fa7e 	bl	800369c <HAL_TIM_OC_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011a6:	f000 f99d 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4619      	mov	r1, r3
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <MX_TIM2_Init+0xa8>)
 80011ba:	f002 ff41 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011c4:	f000 f98e 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_TIM2_Init+0xa8>)
 80011e0:	f002 fc02 	bl	80039e8 <HAL_TIM_OC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011ea:	f000 f97b 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002e4 	.word	0x200002e4

080011fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <MX_TIM3_Init+0xcc>)
 8001222:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001226:	2264      	movs	r2, #100	; 0x64
 8001228:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <MX_TIM3_Init+0xc8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001232:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001236:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_TIM3_Init+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001244:	481f      	ldr	r0, [pc, #124]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001246:	f002 fa78 	bl	800373a <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001250:	f000 f948 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	4818      	ldr	r0, [pc, #96]	; (80012c4 <MX_TIM3_Init+0xc8>)
 8001264:	f002 feec 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800126e:	f000 f939 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001276:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800127a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2208      	movs	r2, #8
 8001288:	4619      	mov	r1, r3
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <MX_TIM3_Init+0xc8>)
 800128c:	f002 fc08 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001296:	f000 f925 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	220c      	movs	r2, #12
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_TIM3_Init+0xc8>)
 80012a6:	f002 fbfb 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80012b0:	f000 f918 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <MX_TIM3_Init+0xc8>)
 80012b6:	f000 fa1b 	bl	80016f0 <HAL_TIM_MspPostInit>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000032c 	.word	0x2000032c
 80012c8:	40000400 	.word	0x40000400

080012cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f002 ff5d 	bl	80041c2 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f8e9 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000374 	.word	0x20000374
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <MX_GPIO_Init+0xac>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <MX_GPIO_Init+0xac>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_GPIO_Init+0xac>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_GPIO_Init+0xac>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <MX_GPIO_Init+0xac>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_GPIO_Init+0xac>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2110      	movs	r1, #16
 8001368:	4819      	ldr	r0, [pc, #100]	; (80013d0 <MX_GPIO_Init+0xb0>)
 800136a:	f000 fe97 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <MX_GPIO_Init+0xb4>)
 8001376:	f000 fe91 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800137a:	2310      	movs	r3, #16
 800137c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2302      	movs	r3, #2
 8001388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4619      	mov	r1, r3
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_GPIO_Init+0xb0>)
 8001392:	f000 fcff 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <MX_GPIO_Init+0xb4>)
 80013b0:	f000 fcf0 	bl	8001d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_GPIO_Init+0xb4>)
 80013c0:	f000 fce8 	bl	8001d94 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <config_wireless>:
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , RESET) ;
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 , RESET) ;

}

void config_wireless(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <config_wireless+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <config_wireless+0x68>)
 80013e0:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <config_wireless+0x64>)
 80013e4:	2220      	movs	r2, #32
 80013e6:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <config_wireless+0x64>)
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <config_wireless+0x6c>)
 80013ec:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <config_wireless+0x64>)
 80013f0:	2210      	movs	r2, #16
 80013f2:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <config_wireless+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <config_wireless+0x68>)
 80013f8:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <config_wireless+0x64>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <config_wireless+0x64>)
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <config_wireless+0x70>)
 8001406:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <config_wireless+0x74>)
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <config_wireless+0x64>)
 800140c:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <config_wireless+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 8001414:	e006      	b.n	8001424 <config_wireless+0x4c>
	printf("init Failed \n");
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <config_wireless+0x78>)
 8001418:	f004 f80a 	bl	8005430 <puts>
	HAL_Delay(1000);
 800141c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001420:	f000 fb86 	bl	8001b30 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <config_wireless+0x74>)
 8001426:	f003 f939 	bl	800469c <lora_init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f2      	bne.n	8001416 <config_wireless+0x3e>
	}
	printf("init success \n");
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <config_wireless+0x7c>)
 8001432:	f003 fffd 	bl	8005430 <puts>

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200003bc 	.word	0x200003bc
 8001440:	40010c00 	.word	0x40010c00
 8001444:	40010800 	.word	0x40010800
 8001448:	20000244 	.word	0x20000244
 800144c:	200003d8 	.word	0x200003d8
 8001450:	080073a8 	.word	0x080073a8
 8001454:	080073b8 	.word	0x080073b8

08001458 <rcv_channel>:

void rcv_channel(){
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

	  ret = lora_prasePacket(&lora);
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <rcv_channel+0x48>)
 8001460:	f003 f98c 	bl	800477c <lora_prasePacket>
 8001464:	4603      	mov	r3, r0
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <rcv_channel+0x4c>)
 800146a:	701a      	strb	r2, [r3, #0]
	  if(ret){
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <rcv_channel+0x4c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d010      	beq.n	8001496 <rcv_channel+0x3e>
		uint8_t i=0;
 8001474:	2300      	movs	r3, #0
 8001476:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 8001478:	e00a      	b.n	8001490 <rcv_channel+0x38>
		buff[i] = lora_read(&lora);
 800147a:	79fc      	ldrb	r4, [r7, #7]
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <rcv_channel+0x48>)
 800147e:	f003 f9ed 	bl	800485c <lora_read>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <rcv_channel+0x50>)
 8001488:	551a      	strb	r2, [r3, r4]
		i++;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3301      	adds	r3, #1
 800148e:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b07      	cmp	r3, #7
 8001494:	d9f1      	bls.n	800147a <rcv_channel+0x22>
	     }
	  }

}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	200003d8 	.word	0x200003d8
 80014a4:	200003e0 	.word	0x200003e0
 80014a8:	200003e4 	.word	0x200003e4

080014ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
	...

080014c0 <__io_putchar>:

void __io_putchar(int ch) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014c8:	1d39      	adds	r1, r7, #4
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	2201      	movs	r2, #1
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <__io_putchar+0x20>)
 80014d2:	f002 fec6 	bl	8004262 <HAL_UART_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000374 	.word	0x20000374

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_MspInit+0x40>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <HAL_MspInit+0x40>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_MspInit+0x40>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_MspInit+0x40>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_MspInit+0x40>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_MspInit+0x40>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <HAL_I2C_MspInit+0x70>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d123      	bne.n	800159c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001570:	2312      	movs	r3, #18
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	4619      	mov	r1, r3
 800157e:	480b      	ldr	r0, [pc, #44]	; (80015ac <HAL_I2C_MspInit+0x78>)
 8001580:	f000 fc08 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 800158a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_I2C_MspInit+0x74>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40005400 	.word	0x40005400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d12f      	bne.n	8001630 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_SPI_MspInit+0x8c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001600:	23a0      	movs	r3, #160	; 0xa0
 8001602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_SPI_MspInit+0x90>)
 8001614:	f000 fbbe 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	4619      	mov	r1, r3
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_SPI_MspInit+0x90>)
 800162c:	f000 fbb2 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40013000 	.word	0x40013000
 800163c:	40021000 	.word	0x40021000
 8001640:	40010800 	.word	0x40010800

08001644 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_TIM_PWM_MspInit+0x58>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10c      	bne.n	8001670 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 800165c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800166e:	e010      	b.n	8001692 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_TIM_PWM_MspInit+0x60>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10b      	bne.n	8001692 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40000400 	.word	0x40000400

080016a8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	d113      	bne.n	80016e2 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_OC_MspInit+0x44>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_TIM_OC_MspInit+0x44>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_TIM_OC_MspInit+0x44>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201c      	movs	r0, #28
 80016d8:	f000 fb25 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016dc:	201c      	movs	r0, #28
 80016de:	f000 fb3e 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_TIM_MspPostInit+0x98>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d119      	bne.n	8001744 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001728:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800172c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2302      	movs	r3, #2
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4619      	mov	r1, r3
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <HAL_TIM_MspPostInit+0xa0>)
 800173e:	f000 fb29 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001742:	e01c      	b.n	800177e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_TIM_MspPostInit+0xa4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d117      	bne.n	800177e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_TIM_MspPostInit+0x9c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001766:	2303      	movs	r3, #3
 8001768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <HAL_TIM_MspPostInit+0xa8>)
 800177a:	f000 fb0b 	bl	8001d94 <HAL_GPIO_Init>
}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800
 8001794:	40000400 	.word	0x40000400
 8001798:	40010c00 	.word	0x40010c00

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x88>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d12f      	bne.n	800181c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	61d3      	str	r3, [r2, #28]
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a13      	ldr	r2, [pc, #76]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_UART_MspInit+0x8c>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ec:	2304      	movs	r3, #4
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_UART_MspInit+0x90>)
 8001800:	f000 fac8 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001804:	2308      	movs	r3, #8
 8001806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_UART_MspInit+0x90>)
 8001818:	f000 fabc 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004400 	.word	0x40004400
 8001828:	40021000 	.word	0x40021000
 800182c:	40010800 	.word	0x40010800

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f93f 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM2_IRQHandler+0x10>)
 8001886:	f001 ffa7 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002e4 	.word	0x200002e4

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_kill>:

int _kill(int pid, int sig)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ac:	f003 fef2 	bl	8005694 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2216      	movs	r2, #22
 80018b4:	601a      	str	r2, [r3, #0]
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_exit>:

void _exit (int status)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffe7 	bl	80018a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d4:	e7fe      	b.n	80018d4 <_exit+0x12>

080018d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e00a      	b.n	80018fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e8:	f3af 8000 	nop.w
 80018ec:	4601      	mov	r1, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	60ba      	str	r2, [r7, #8]
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbf0      	blt.n	80018e8 <_read+0x12>
  }

  return len;
 8001906:	687b      	ldr	r3, [r7, #4]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e009      	b.n	8001936 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60ba      	str	r2, [r7, #8]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fdc8 	bl	80014c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf1      	blt.n	8001922 <_write+0x12>
  }
  return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_close>:

int _close(int file)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196e:	605a      	str	r2, [r3, #4]
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <_isatty>:

int _isatty(int file)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f003 fe5c 	bl	8005694 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20005000 	.word	0x20005000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	200003fc 	.word	0x200003fc
 8001a10:	20000558 	.word	0x20000558

08001a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a20:	f7ff fff8 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a26:	490c      	ldr	r1, [pc, #48]	; (8001a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a2c:	e002      	b.n	8001a34 <LoopCopyDataInit>

08001a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a32:	3304      	adds	r3, #4

08001a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a38:	d3f9      	bcc.n	8001a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a3c:	4c09      	ldr	r4, [pc, #36]	; (8001a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a40:	e001      	b.n	8001a46 <LoopFillZerobss>

08001a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a44:	3204      	adds	r2, #4

08001a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a48:	d3fb      	bcc.n	8001a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4a:	f003 fe29 	bl	80056a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4e:	f7ff f99b 	bl	8000d88 <main>
  bx lr
 8001a52:	4770      	bx	lr
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a5c:	080077a4 	.word	0x080077a4
  ldr r2, =_sbss
 8001a60:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a64:	20000554 	.word	0x20000554

08001a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_2_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x28>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x28>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f947 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	200f      	movs	r0, #15
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fd32 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40022000 	.word	0x40022000

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f95f 	bl	8001d7a <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f927 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x20>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <HAL_IncTick+0x20>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000008 	.word	0x20000008
 8001b18:	20000400 	.word	0x20000400

08001b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_GetTick+0x10>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000400 	.word	0x20000400

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffe0 	bl	8001b1c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4906      	ldr	r1, [pc, #24]	; (8001c10 <__NVIC_EnableIRQ+0x34>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff90 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff2d 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff42 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff90 	bl	8001c68 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5f 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff35 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e169      	b.n	800207c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8158 	bne.w	8002076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a9a      	ldr	r2, [pc, #616]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d05e      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a98      	ldr	r2, [pc, #608]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d875      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a98      	ldr	r2, [pc, #608]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d058      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001ddc:	4a96      	ldr	r2, [pc, #600]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d86f      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001de2:	4a96      	ldr	r2, [pc, #600]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d052      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001de8:	4a94      	ldr	r2, [pc, #592]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d869      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dee:	4a94      	ldr	r2, [pc, #592]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04c      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001df4:	4a92      	ldr	r2, [pc, #584]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d863      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a92      	ldr	r2, [pc, #584]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d046      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001e00:	4a90      	ldr	r2, [pc, #576]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d85d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d82a      	bhi.n	8001e60 <HAL_GPIO_Init+0xcc>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d859      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_GPIO_Init+0x80>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001e7b 	.word	0x08001e7b
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001ec3 	.word	0x08001ec3
 8001e28:	08001ec3 	.word	0x08001ec3
 8001e2c:	08001ec3 	.word	0x08001ec3
 8001e30:	08001ec3 	.word	0x08001ec3
 8001e34:	08001ec3 	.word	0x08001ec3
 8001e38:	08001ec3 	.word	0x08001ec3
 8001e3c:	08001ec3 	.word	0x08001ec3
 8001e40:	08001ec3 	.word	0x08001ec3
 8001e44:	08001ec3 	.word	0x08001ec3
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ec3 	.word	0x08001ec3
 8001e54:	08001ec3 	.word	0x08001ec3
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	4a79      	ldr	r2, [pc, #484]	; (8002048 <HAL_GPIO_Init+0x2b4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e66:	e02c      	b.n	8001ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e029      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e024      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e01f      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e01a      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e96:	2304      	movs	r3, #4
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e013      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	611a      	str	r2, [r3, #16]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	615a      	str	r2, [r3, #20]
          break;
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          break;
 8001ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
 8001ec8:	d801      	bhi.n	8001ece <HAL_GPIO_Init+0x13a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_Init+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_GPIO_Init+0x14c>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x152>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	210f      	movs	r1, #15
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80b1 	beq.w	8002076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a40      	ldr	r2, [pc, #256]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <HAL_GPIO_Init+0x2c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	; (800205c <HAL_GPIO_Init+0x2c8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e0>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f92:	492f      	ldr	r1, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	492c      	ldr	r1, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4928      	ldr	r1, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	491e      	ldr	r1, [pc, #120]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4914      	ldr	r1, [pc, #80]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d021      	beq.n	8002068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e021      	b.n	8002076 <HAL_GPIO_Init+0x2e2>
 8002032:	bf00      	nop
 8002034:	10320000 	.word	0x10320000
 8002038:	10310000 	.word	0x10310000
 800203c:	10220000 	.word	0x10220000
 8002040:	10210000 	.word	0x10210000
 8002044:	10120000 	.word	0x10120000
 8002048:	10110000 	.word	0x10110000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_GPIO_Init+0x304>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	43db      	mvns	r3, r3
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <HAL_GPIO_Init+0x304>)
 8002072:	4013      	ands	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f47f ae8e 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	372c      	adds	r7, #44	; 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e12b      	b.n	8002336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fa1e 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800211e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002130:	f000 fcda 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a81      	ldr	r2, [pc, #516]	; (8002340 <HAL_I2C_Init+0x274>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d807      	bhi.n	8002150 <HAL_I2C_Init+0x84>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_I2C_Init+0x278>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e006      	b.n	800215e <HAL_I2C_Init+0x92>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a7d      	ldr	r2, [pc, #500]	; (8002348 <HAL_I2C_Init+0x27c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0e7      	b.n	8002336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a78      	ldr	r2, [pc, #480]	; (800234c <HAL_I2C_Init+0x280>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_I2C_Init+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d802      	bhi.n	80021a0 <HAL_I2C_Init+0xd4>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	e009      	b.n	80021b4 <HAL_I2C_Init+0xe8>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_I2C_Init+0x284>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	495c      	ldr	r1, [pc, #368]	; (8002340 <HAL_I2C_Init+0x274>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d819      	bhi.n	8002208 <HAL_I2C_Init+0x13c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e59      	subs	r1, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_I2C_Init+0x138>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e59      	subs	r1, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	e051      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002204:	2304      	movs	r3, #4
 8002206:	e04f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_I2C_Init+0x168>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_I2C_Init+0x18e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x196>
 800225e:	2301      	movs	r3, #1
 8002260:	e022      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_I2C_Init+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e58      	subs	r0, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6911      	ldr	r1, [r2, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	000186a0 	.word	0x000186a0
 8002344:	001e847f 	.word	0x001e847f
 8002348:	003d08ff 	.word	0x003d08ff
 800234c:	431bde83 	.word	0x431bde83
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e272      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8087 	beq.w	8002482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d00c      	beq.n	800239a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002380:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d112      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 800238c:	4b8c      	ldr	r3, [pc, #560]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d10b      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06c      	beq.n	8002480 <HAL_RCC_OscConfig+0x12c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d168      	bne.n	8002480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e24c      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x76>
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7f      	ldr	r2, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e02e      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7a      	ldr	r2, [pc, #488]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xbc>
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a71      	ldr	r2, [pc, #452]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xd4>
 8002410:	4b6b      	ldr	r3, [pc, #428]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6a      	ldr	r2, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a67      	ldr	r2, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fb74 	bl	8001b1c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fb70 	bl	8001b1c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e200      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xe4>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fb60 	bl	8001b1c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fb5c 	bl	8001b1c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1ec      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x10c>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248e:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
 80024a6:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c0      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4939      	ldr	r1, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b36      	ldr	r3, [pc, #216]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fb15 	bl	8001b1c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7ff fb11 	bl	8001b1c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4927      	ldr	r1, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x270>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff faf4 	bl	8001b1c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7ff faf0 	bl	8001b1c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e180      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03a      	beq.n	80025d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d019      	beq.n	800259e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7ff fad4 	bl	8001b1c <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff fad0 	bl	8001b1c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e160      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 face 	bl	8002b38 <RCC_Delay>
 800259c:	e01c      	b.n	80025d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7ff faba 	bl	8001b1c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7ff fab6 	bl	8001b1c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e146      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	42420000 	.word	0x42420000
 80025c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	4b92      	ldr	r3, [pc, #584]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a6 	beq.w	8002732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a87      	ldr	r2, [pc, #540]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b82      	ldr	r3, [pc, #520]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7ff fa77 	bl	8001b1c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7ff fa73 	bl	8001b1c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e103      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x4c8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x312>
 8002658:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e02d      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x334>
 800266e:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	e01c      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x356>
 8002690:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a60      	ldr	r2, [pc, #384]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0x36e>
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a5a      	ldr	r2, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fa27 	bl	8001b1c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff fa23 	bl	8001b1c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0b1      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ee      	beq.n	80026d2 <HAL_RCC_OscConfig+0x37e>
 80026f4:	e014      	b.n	8002720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff fa11 	bl	8001b1c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff fa0d 	bl	8001b1c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e09b      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8087 	beq.w	800284a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d061      	beq.n	800280c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d146      	bne.n	80027de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7ff f9e1 	bl	8001b1c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7ff f9dd 	bl	8001b1c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e06d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4921      	ldr	r1, [pc, #132]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a19      	ldr	r1, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	430b      	orrs	r3, r1
 80027aa:	491b      	ldr	r1, [pc, #108]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b6:	f7ff f9b1 	bl	8001b1c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7ff f9ad 	bl	8001b1c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x46a>
 80027dc:	e035      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff f99a 	bl	8001b1c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7ff f996 	bl	8001b1c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x498>
 800280a:	e01e      	b.n	800284a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e019      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x500>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0d0      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b6a      	ldr	r3, [pc, #424]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4965      	ldr	r1, [pc, #404]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d040      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d115      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e073      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4936      	ldr	r1, [pc, #216]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7ff f8e8 	bl	8001b1c <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7ff f8e4 	bl	8001b1c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e053      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d210      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	; (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1cc>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1d0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f846 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	080073d0 	.word	0x080073d0
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x30>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x36>
 8002a5a:	e027      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	e027      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d010      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0c5b      	lsrs	r3, r3, #17
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	4a11      	ldr	r2, [pc, #68]	; (8002acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8e:	fb03 f202 	mul.w	r2, r3, r2
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	613b      	str	r3, [r7, #16]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	693b      	ldr	r3, [r7, #16]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	080073e8 	.word	0x080073e8
 8002acc:	080073f8 	.word	0x080073f8
 8002ad0:	003d0900 	.word	0x003d0900

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	20000000 	.word	0x20000000

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff2 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	080073e0 	.word	0x080073e0

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffde 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0adb      	lsrs	r3, r3, #11
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080073e0 	.word	0x080073e0

08002b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <RCC_Delay+0x34>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <RCC_Delay+0x38>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b54:	bf00      	nop
  }
  while (Delay --);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <RCC_Delay+0x1c>
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e076      	b.n	8002c74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d108      	bne.n	8002ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b96:	d009      	beq.n	8002bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
 8002b9e:	e005      	b.n	8002bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fcf2 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	ea42 0103 	orr.w	r1, r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	0c1a      	lsrs	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f002 0204 	and.w	r2, r2, #4
 8002c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_SPI_Transmit+0x22>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e12d      	b.n	8002efa <HAL_SPI_Transmit+0x27e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ca6:	f7fe ff39 	bl	8001b1c <HAL_GetTick>
 8002caa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc0:	e116      	b.n	8002ef0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_SPI_Transmit+0x52>
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cd2:	e10d      	b.n	8002ef0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1a:	d10f      	bne.n	8002d3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d007      	beq.n	8002d5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d62:	d14f      	bne.n	8002e04 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_Transmit+0xf6>
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d142      	bne.n	8002df8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	881a      	ldrh	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c9a      	adds	r2, r3, #2
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d96:	e02f      	b.n	8002df8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d112      	bne.n	8002dcc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	1c9a      	adds	r2, r3, #2
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dca:	e015      	b.n	8002df8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dcc:	f7fe fea6 	bl	8001b1c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d803      	bhi.n	8002de4 <HAL_SPI_Transmit+0x168>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d102      	bne.n	8002dea <HAL_SPI_Transmit+0x16e>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002df6:	e07b      	b.n	8002ef0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1ca      	bne.n	8002d98 <HAL_SPI_Transmit+0x11c>
 8002e02:	e050      	b.n	8002ea6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_SPI_Transmit+0x196>
 8002e0c:	8afb      	ldrh	r3, [r7, #22]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d144      	bne.n	8002e9c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e38:	e030      	b.n	8002e9c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d113      	bne.n	8002e70 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e6e:	e015      	b.n	8002e9c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e70:	f7fe fe54 	bl	8001b1c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d803      	bhi.n	8002e88 <HAL_SPI_Transmit+0x20c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d102      	bne.n	8002e8e <HAL_SPI_Transmit+0x212>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e9a:	e029      	b.n	8002ef0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1c9      	bne.n	8002e3a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fbd8 	bl	8003660 <SPI_EndRxTxTransaction>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e003      	b.n	8002ef0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b088      	sub	sp, #32
 8002f06:	af02      	add	r7, sp, #8
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f26:	e0fb      	b.n	8003120 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f30:	d112      	bne.n	8002f58 <HAL_SPI_Receive+0x56>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10e      	bne.n	8002f58 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8ef 	bl	8003132 <HAL_SPI_TransmitReceive>
 8002f54:	4603      	mov	r3, r0
 8002f56:	e0e8      	b.n	800312a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_SPI_Receive+0x64>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0e1      	b.n	800312a <HAL_SPI_Receive+0x228>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6e:	f7fe fdd5 	bl	8001b1c <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Receive+0x7e>
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f84:	e0cc      	b.n	8003120 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2204      	movs	r2, #4
 8002f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fcc:	d10f      	bne.n	8002fee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d007      	beq.n	800300c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d16a      	bne.n	80030ea <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003014:	e032      	b.n	800307c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d115      	bne.n	8003050 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f103 020c 	add.w	r2, r3, #12
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800304e:	e015      	b.n	800307c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003050:	f7fe fd64 	bl	8001b1c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d803      	bhi.n	8003068 <HAL_SPI_Receive+0x166>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d102      	bne.n	800306e <HAL_SPI_Receive+0x16c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800307a:	e051      	b.n	8003120 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1c7      	bne.n	8003016 <HAL_SPI_Receive+0x114>
 8003086:	e035      	b.n	80030f4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d113      	bne.n	80030be <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	b292      	uxth	r2, r2
 80030a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030bc:	e015      	b.n	80030ea <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030be:	f7fe fd2d 	bl	8001b1c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d803      	bhi.n	80030d6 <HAL_SPI_Receive+0x1d4>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d102      	bne.n	80030dc <HAL_SPI_Receive+0x1da>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030e8:	e01a      	b.n	8003120 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1c9      	bne.n	8003088 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa5f 	bl	80035bc <SPI_EndRxTransaction>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
 8003116:	e003      	b.n	8003120 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003128:	7dfb      	ldrb	r3, [r7, #23]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b08c      	sub	sp, #48	; 0x30
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003140:	2301      	movs	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_SPI_TransmitReceive+0x26>
 8003154:	2302      	movs	r3, #2
 8003156:	e198      	b.n	800348a <HAL_SPI_TransmitReceive+0x358>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003160:	f7fe fcdc 	bl	8001b1c <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800317a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317e:	2b01      	cmp	r3, #1
 8003180:	d00f      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x70>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003188:	d107      	bne.n	800319a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_SPI_TransmitReceive+0x68>
 8003192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031a0:	e16d      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x82>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x82>
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031ba:	e160      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d003      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	887a      	ldrh	r2, [r7, #2]
 80031e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	887a      	ldrh	r2, [r7, #2]
 80031f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	d007      	beq.n	8003224 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	d17c      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SPI_TransmitReceive+0x10a>
 8003236:	8b7b      	ldrh	r3, [r7, #26]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d16a      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	881a      	ldrh	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	1c9a      	adds	r2, r3, #2
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003260:	e057      	b.n	8003312 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d11b      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x176>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x176>
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d113      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	881a      	ldrh	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d119      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x1b8>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	b292      	uxth	r2, r2
 80032cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e6:	2301      	movs	r3, #1
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032ea:	f7fe fc17 	bl	8001b1c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d80b      	bhi.n	8003312 <HAL_SPI_TransmitReceive+0x1e0>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d007      	beq.n	8003312 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003310:	e0b5      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a2      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x130>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19d      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x130>
 8003326:	e080      	b.n	800342a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_TransmitReceive+0x204>
 8003330:	8b7b      	ldrh	r3, [r7, #26]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d16f      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	7812      	ldrb	r2, [r2, #0]
 8003342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335c:	e05b      	b.n	8003416 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11c      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x274>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d017      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x274>
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d114      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d119      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x2b6>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033e8:	f7fe fb98 	bl	8001b1c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d803      	bhi.n	8003400 <HAL_SPI_TransmitReceive+0x2ce>
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x2d4>
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003414:	e033      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d19e      	bne.n	800335e <HAL_SPI_TransmitReceive+0x22c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d199      	bne.n	800335e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f916 	bl	8003660 <SPI_EndRxTxTransaction>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003446:	e01a      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003474:	e003      	b.n	800347e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800348a:	4618      	mov	r0, r3
 800348c:	3730      	adds	r7, #48	; 0x30
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a0:	b2db      	uxtb	r3, r3
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034bc:	f7fe fb2e 	bl	8001b1c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034cc:	f7fe fb26 	bl	8001b1c <HAL_GetTick>
 80034d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	0d1b      	lsrs	r3, r3, #20
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034e2:	e054      	b.n	800358e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d050      	beq.n	800358e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ec:	f7fe fb16 	bl	8001b1c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d902      	bls.n	8003502 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d13d      	bne.n	800357e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003510:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d111      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x94>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	d004      	beq.n	8003530 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d107      	bne.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003548:	d10f      	bne.n	800356a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e017      	b.n	80035ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	3b01      	subs	r3, #1
 800358c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d19b      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d0:	d111      	bne.n	80035f6 <SPI_EndRxTransaction+0x3a>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035da:	d004      	beq.n	80035e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e4:	d107      	bne.n	80035f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fe:	d117      	bne.n	8003630 <SPI_EndRxTransaction+0x74>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d112      	bne.n	8003630 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	2101      	movs	r1, #1
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff ff49 	bl	80034ac <SPI_WaitFlagStateUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01a      	beq.n	8003656 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e013      	b.n	8003658 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff36 	bl	80034ac <SPI_WaitFlagStateUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e000      	b.n	8003658 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	; 0x80
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff ff18 	bl	80034ac <SPI_WaitFlagStateUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e000      	b.n	8003694 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e041      	b.n	8003732 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd fff0 	bl	80016a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 fac6 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e041      	b.n	80037d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd ff6f 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f000 fa77 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0202 	mvn.w	r2, #2
 8003804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa0b 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9fe 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa0d 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0204 	mvn.w	r2, #4
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9e1 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9d4 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f9e3 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0208 	mvn.w	r2, #8
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9b7 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f9aa 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f9b9 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0210 	mvn.w	r2, #16
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2208      	movs	r2, #8
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f98d 	bl	8003c36 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f980 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f98f 	bl	8003c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0201 	mvn.w	r2, #1
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fda8 	bl	80014ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fc14 	bl	80041b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f953 	bl	8003c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d107      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0220 	mvn.w	r2, #32
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fbdf 	bl	800419e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e048      	b.n	8003a98 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d839      	bhi.n	8003a88 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a89 	.word	0x08003a89
 8003a28:	08003a89 	.word	0x08003a89
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a89 	.word	0x08003a89
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a89 	.word	0x08003a89
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a89 	.word	0x08003a89
 8003a44:	08003a89 	.word	0x08003a89
 8003a48:	08003a89 	.word	0x08003a89
 8003a4c:	08003a7b 	.word	0x08003a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f96a 	bl	8003d30 <TIM_OC1_SetConfig>
      break;
 8003a5c:	e017      	b.n	8003a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f9c9 	bl	8003dfc <TIM_OC2_SetConfig>
      break;
 8003a6a:	e010      	b.n	8003a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fa2c 	bl	8003ed0 <TIM_OC3_SetConfig>
      break;
 8003a78:	e009      	b.n	8003a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fa8f 	bl	8003fa4 <TIM_OC4_SetConfig>
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e0ae      	b.n	8003c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	f200 809f 	bhi.w	8003c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003c0d 	.word	0x08003c0d
 8003adc:	08003c0d 	.word	0x08003c0d
 8003ae0:	08003c0d 	.word	0x08003c0d
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003c0d 	.word	0x08003c0d
 8003aec:	08003c0d 	.word	0x08003c0d
 8003af0:	08003c0d 	.word	0x08003c0d
 8003af4:	08003b8b 	.word	0x08003b8b
 8003af8:	08003c0d 	.word	0x08003c0d
 8003afc:	08003c0d 	.word	0x08003c0d
 8003b00:	08003c0d 	.word	0x08003c0d
 8003b04:	08003bcb 	.word	0x08003bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f90e 	bl	8003d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	619a      	str	r2, [r3, #24]
      break;
 8003b46:	e064      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f954 	bl	8003dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	619a      	str	r2, [r3, #24]
      break;
 8003b88:	e043      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f99d 	bl	8003ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0208 	orr.w	r2, r2, #8
 8003ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0204 	bic.w	r2, r2, #4
 8003bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	61da      	str	r2, [r3, #28]
      break;
 8003bc8:	e023      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f9e7 	bl	8003fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	61da      	str	r2, [r3, #28]
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d007      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <TIM_Base_SetConfig+0xbc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_Base_SetConfig+0x30>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_Base_SetConfig+0xc0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_Base_SetConfig+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0x62>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_Base_SetConfig+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d108      	bne.n	8003ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <TIM_Base_SetConfig+0xb8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f023 0201 	bic.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 0302 	bic.w	r3, r3, #2
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <TIM_OC1_SetConfig+0xc8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10c      	bne.n	8003da6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0308 	bic.w	r3, r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <TIM_OC1_SetConfig+0xc8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d111      	bne.n	8003dd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0210 	bic.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0320 	bic.w	r3, r3, #32
 8003e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <TIM_OC2_SetConfig+0xd0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC2_SetConfig+0xd0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d113      	bne.n	8003ea8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00

08003ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <TIM_OC3_SetConfig+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10d      	bne.n	8003f4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <TIM_OC3_SetConfig+0xd0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d113      	bne.n	8003f7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00

08003fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	031b      	lsls	r3, r3, #12
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <TIM_OC4_SetConfig+0x98>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d109      	bne.n	8004018 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800400a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	621a      	str	r2, [r3, #32]
}
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	40012c00 	.word	0x40012c00

08004040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e046      	b.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d009      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10c      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800

080040fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004114:	2302      	movs	r3, #2
 8004116:	e03d      	b.n	8004194 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e042      	b.n	800425a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fd fad7 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2224      	movs	r2, #36	; 0x24
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004204:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f91c 	bl	8004444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b08a      	sub	sp, #40	; 0x28
 8004266:	af02      	add	r7, sp, #8
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	d16d      	bne.n	800435e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_UART_Transmit+0x2c>
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e066      	b.n	8004360 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2221      	movs	r2, #33	; 0x21
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a0:	f7fd fc3c 	bl	8001b1c <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d108      	bne.n	80042ce <HAL_UART_Transmit+0x6c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e003      	b.n	80042d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d6:	e02a      	b.n	800432e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2200      	movs	r2, #0
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f840 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e036      	b.n	8004360 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004306:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3302      	adds	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e007      	b.n	8004320 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3301      	adds	r3, #1
 800431e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1cf      	bne.n	80042d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f810 	bl	8004368 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e006      	b.n	8004360 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3720      	adds	r7, #32
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b090      	sub	sp, #64	; 0x40
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004378:	e050      	b.n	800441c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d04c      	beq.n	800441c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <UART_WaitOnFlagUntilTimeout+0x30>
 8004388:	f7fd fbc8 	bl	8001b1c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004394:	429a      	cmp	r2, r3
 8004396:	d241      	bcs.n	800441c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b8:	637a      	str	r2, [r7, #52]	; 0x34
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3314      	adds	r3, #20
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ec:	623a      	str	r2, [r7, #32]
 80043ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69f9      	ldr	r1, [r7, #28]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00f      	b.n	800443c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	d09f      	beq.n	800437a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3740      	adds	r7, #64	; 0x40
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800447e:	f023 030c 	bic.w	r3, r3, #12
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	430b      	orrs	r3, r1
 800448a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <UART_SetConfig+0x114>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d103      	bne.n	80044b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7fe fb30 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	e002      	b.n	80044ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7fe fb18 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 80044b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009a      	lsls	r2, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <UART_SetConfig+0x118>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	0119      	lsls	r1, r3, #4
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f0:	4b1a      	ldr	r3, [pc, #104]	; (800455c <UART_SetConfig+0x118>)
 80044f2:	fba3 0302 	umull	r0, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2064      	movs	r0, #100	; 0x64
 80044fa:	fb00 f303 	mul.w	r3, r0, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	3332      	adds	r3, #50	; 0x32
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <UART_SetConfig+0x118>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	4419      	add	r1, r3
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009a      	lsls	r2, r3, #2
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fbb2 f2f3 	udiv	r2, r2, r3
 8004528:	4b0c      	ldr	r3, [pc, #48]	; (800455c <UART_SetConfig+0x118>)
 800452a:	fba3 0302 	umull	r0, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2064      	movs	r0, #100	; 0x64
 8004532:	fb00 f303 	mul.w	r3, r0, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	3332      	adds	r3, #50	; 0x32
 800453c:	4a07      	ldr	r2, [pc, #28]	; (800455c <UART_SetConfig+0x118>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	440a      	add	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004550:	bf00      	nop
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40013800 	.word	0x40013800
 800455c:	51eb851f 	.word	0x51eb851f

08004560 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004572:	b2db      	uxtb	r3, r3
 8004574:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004576:	2300      	movs	r3, #0
 8004578:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6958      	ldr	r0, [r3, #20]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	b29b      	uxth	r3, r3
 8004588:	2200      	movs	r2, #0
 800458a:	4619      	mov	r1, r3
 800458c:	f7fd fd86 	bl	800209c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6998      	ldr	r0, [r3, #24]
 8004596:	f107 010f 	add.w	r1, r7, #15
 800459a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459e:	2201      	movs	r2, #1
 80045a0:	f7fe fb6c 	bl	8002c7c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045a4:	bf00      	nop
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe ff70 	bl	8003492 <HAL_SPI_GetState>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d1f6      	bne.n	80045a6 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6998      	ldr	r0, [r3, #24]
 80045be:	f107 010e 	add.w	r1, r7, #14
 80045c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045c6:	2201      	movs	r2, #1
 80045c8:	f7fe fc9b 	bl	8002f02 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80045cc:	bf00      	nop
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe ff5c 	bl	8003492 <HAL_SPI_GetState>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d1f6      	bne.n	80045ce <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6958      	ldr	r0, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2201      	movs	r2, #1
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fd fd53 	bl	800209c <HAL_GPIO_WritePin>
	return rxByte;
 80045f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
 800460c:	4613      	mov	r3, r2
 800460e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004616:	b2db      	uxtb	r3, r3
 8004618:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6958      	ldr	r0, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	b29b      	uxth	r3, r3
 8004628:	2200      	movs	r2, #0
 800462a:	4619      	mov	r1, r3
 800462c:	f7fd fd36 	bl	800209c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6998      	ldr	r0, [r3, #24]
 8004636:	f107 010f 	add.w	r1, r7, #15
 800463a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800463e:	2201      	movs	r2, #1
 8004640:	f7fe fb1c 	bl	8002c7c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8004644:	bf00      	nop
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ff20 	bl	8003492 <HAL_SPI_GetState>
 8004652:	4603      	mov	r3, r0
 8004654:	2b01      	cmp	r3, #1
 8004656:	d1f6      	bne.n	8004646 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6998      	ldr	r0, [r3, #24]
 800465e:	1cb9      	adds	r1, r7, #2
 8004660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004664:	2201      	movs	r2, #1
 8004666:	f7fe fb09 	bl	8002c7c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800466a:	bf00      	nop
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe ff0d 	bl	8003492 <HAL_SPI_GetState>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d1f6      	bne.n	800466c <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6958      	ldr	r0, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	b29b      	uxth	r3, r3
 800468c:	2201      	movs	r2, #1
 800468e:	4619      	mov	r1, r3
 8004690:	f7fd fd04 	bl	800209c <HAL_GPIO_WritePin>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <lora_init>:

uint8_t lora_init(lora_t * module){
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6858      	ldr	r0, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fd fcf1 	bl	800209c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80046ba:	200a      	movs	r0, #10
 80046bc:	f7fd fa38 	bl	8001b30 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6858      	ldr	r0, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2201      	movs	r2, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fd fce3 	bl	800209c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80046d6:	200a      	movs	r0, #10
 80046d8:	f7fd fa2a 	bl	8001b30 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 80046dc:	2142      	movs	r1, #66	; 0x42
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff3e 	bl	8004560 <lora_read_reg>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b12      	cmp	r3, #18
 80046ec:	d006      	beq.n	80046fc <lora_init+0x60>
		printf("%d \n" ,ret );
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4820      	ldr	r0, [pc, #128]	; (8004774 <lora_init+0xd8>)
 80046f4:	f000 fe36 	bl	8005364 <iprintf>
		return 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e037      	b.n	800476c <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 80046fc:	2280      	movs	r2, #128	; 0x80
 80046fe:	2101      	movs	r1, #1
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff7d 	bl	8004600 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	791b      	ldrb	r3, [r3, #4]
 800470a:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <lora_init+0xdc>)
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8bf 	bl	8004898 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800471a:	2200      	movs	r2, #0
 800471c:	210e      	movs	r1, #14
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff6e 	bl	8004600 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8004724:	2200      	movs	r2, #0
 8004726:	210f      	movs	r1, #15
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff69 	bl	8004600 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 800472e:	210c      	movs	r1, #12
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff15 	bl	8004560 <lora_read_reg>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	f043 0303 	orr.w	r3, r3, #3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	210c      	movs	r1, #12
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ff5a 	bl	8004600 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 800474c:	2204      	movs	r2, #4
 800474e:	2126      	movs	r1, #38	; 0x26
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff55 	bl	8004600 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 8004756:	228f      	movs	r2, #143	; 0x8f
 8004758:	2109      	movs	r1, #9
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff50 	bl	8004600 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8004760:	2281      	movs	r2, #129	; 0x81
 8004762:	2101      	movs	r1, #1
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff ff4b 	bl	8004600 <lora_write_reg>
	return 0;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	080073c8 	.word	0x080073c8
 8004778:	08007400 	.word	0x08007400

0800477c <lora_prasePacket>:

int lora_prasePacket(lora_t * module){
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8004788:	2112      	movs	r1, #18
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fee8 	bl	8004560 <lora_read_reg>
 8004790:	4603      	mov	r3, r0
 8004792:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x92);
 8004794:	2292      	movs	r2, #146	; 0x92
 8004796:	211d      	movs	r1, #29
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff31 	bl	8004600 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	2112      	movs	r1, #18
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff2a 	bl	8004600 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <lora_prasePacket+0x76>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d118      	bne.n	80047f2 <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 80047c0:	2113      	movs	r1, #19
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fecc 	bl	8004560 <lora_read_reg>
 80047c8:	4603      	mov	r3, r0
 80047ca:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 80047cc:	2110      	movs	r1, #16
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fec6 	bl	8004560 <lora_read_reg>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	210d      	movs	r1, #13
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ff10 	bl	8004600 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 80047e0:	2281      	movs	r2, #129	; 0x81
 80047e2:	2101      	movs	r1, #1
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff0b 	bl	8004600 <lora_write_reg>
		packetIndex = 0;
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <lora_prasePacket+0xb4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e010      	b.n	8004814 <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80047f2:	2101      	movs	r1, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff feb3 	bl	8004560 <lora_read_reg>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b86      	cmp	r3, #134	; 0x86
 80047fe:	d009      	beq.n	8004814 <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8004800:	2200      	movs	r2, #0
 8004802:	210d      	movs	r1, #13
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fefb 	bl	8004600 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 800480a:	2286      	movs	r2, #134	; 0x86
 800480c:	2101      	movs	r1, #1
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fef6 	bl	8004600 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <lora_prasePacket+0xa8>
		return -1;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e000      	b.n	8004826 <lora_prasePacket+0xaa>
	}
	return packetLength;
 8004824:	68fb      	ldr	r3, [r7, #12]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000404 	.word	0x20000404

08004834 <lora_available>:

uint8_t lora_available(lora_t * module){
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 800483c:	2113      	movs	r1, #19
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fe8e 	bl	8004560 <lora_read_reg>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	4b03      	ldr	r3, [pc, #12]	; (8004858 <lora_available+0x24>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	b2db      	uxtb	r3, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000404 	.word	0x20000404

0800485c <lora_read>:

uint8_t lora_read(lora_t * module){
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ffe5 	bl	8004834 <lora_available>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <lora_read+0x18>
		return 0;
 8004870:	2300      	movs	r3, #0
 8004872:	e00a      	b.n	800488a <lora_read+0x2e>
	packetIndex++;
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <lora_read+0x38>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	3301      	adds	r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <lora_read+0x38>)
 800487e:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8004880:	2100      	movs	r1, #0
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fe6c 	bl	8004560 <lora_read_reg>
 8004888:	4603      	mov	r3, r0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000404 	.word	0x20000404

08004898 <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80048a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	04d9      	lsls	r1, r3, #19
 80048b2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80048b6:	04d0      	lsls	r0, r2, #19
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <lora_set_frequency+0x88>)
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f7fc f8e3 	bl	8000a88 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 80048ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	0c02      	lsrs	r2, r0, #16
 80048d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048dc:	0c0b      	lsrs	r3, r1, #16
 80048de:	b2d3      	uxtb	r3, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	2106      	movs	r1, #6
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fe8b 	bl	8004600 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 80048ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	0a02      	lsrs	r2, r0, #8
 80048f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80048fc:	0a0b      	lsrs	r3, r1, #8
 80048fe:	b2d3      	uxtb	r3, r2
 8004900:	461a      	mov	r2, r3
 8004902:	2107      	movs	r1, #7
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fe7b 	bl	8004600 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800490a:	7c3b      	ldrb	r3, [r7, #16]
 800490c:	461a      	mov	r2, r3
 800490e:	2108      	movs	r1, #8
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fe75 	bl	8004600 <lora_write_reg>
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	01e84800 	.word	0x01e84800

08004924 <__cvt>:
 8004924:	2b00      	cmp	r3, #0
 8004926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492a:	461f      	mov	r7, r3
 800492c:	bfbb      	ittet	lt
 800492e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004932:	461f      	movlt	r7, r3
 8004934:	2300      	movge	r3, #0
 8004936:	232d      	movlt	r3, #45	; 0x2d
 8004938:	b088      	sub	sp, #32
 800493a:	4614      	mov	r4, r2
 800493c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800493e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004940:	7013      	strb	r3, [r2, #0]
 8004942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004944:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004948:	f023 0820 	bic.w	r8, r3, #32
 800494c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004950:	d005      	beq.n	800495e <__cvt+0x3a>
 8004952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004956:	d100      	bne.n	800495a <__cvt+0x36>
 8004958:	3501      	adds	r5, #1
 800495a:	2302      	movs	r3, #2
 800495c:	e000      	b.n	8004960 <__cvt+0x3c>
 800495e:	2303      	movs	r3, #3
 8004960:	aa07      	add	r2, sp, #28
 8004962:	9204      	str	r2, [sp, #16]
 8004964:	aa06      	add	r2, sp, #24
 8004966:	e9cd a202 	strd	sl, r2, [sp, #8]
 800496a:	e9cd 3500 	strd	r3, r5, [sp]
 800496e:	4622      	mov	r2, r4
 8004970:	463b      	mov	r3, r7
 8004972:	f000 ff55 	bl	8005820 <_dtoa_r>
 8004976:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800497a:	4606      	mov	r6, r0
 800497c:	d102      	bne.n	8004984 <__cvt+0x60>
 800497e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004980:	07db      	lsls	r3, r3, #31
 8004982:	d522      	bpl.n	80049ca <__cvt+0xa6>
 8004984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004988:	eb06 0905 	add.w	r9, r6, r5
 800498c:	d110      	bne.n	80049b0 <__cvt+0x8c>
 800498e:	7833      	ldrb	r3, [r6, #0]
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d10a      	bne.n	80049aa <__cvt+0x86>
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4620      	mov	r0, r4
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f804 	bl	80009a8 <__aeabi_dcmpeq>
 80049a0:	b918      	cbnz	r0, 80049aa <__cvt+0x86>
 80049a2:	f1c5 0501 	rsb	r5, r5, #1
 80049a6:	f8ca 5000 	str.w	r5, [sl]
 80049aa:	f8da 3000 	ldr.w	r3, [sl]
 80049ae:	4499      	add	r9, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4639      	mov	r1, r7
 80049b8:	f7fb fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80049bc:	b108      	cbz	r0, 80049c2 <__cvt+0x9e>
 80049be:	f8cd 901c 	str.w	r9, [sp, #28]
 80049c2:	2230      	movs	r2, #48	; 0x30
 80049c4:	9b07      	ldr	r3, [sp, #28]
 80049c6:	454b      	cmp	r3, r9
 80049c8:	d307      	bcc.n	80049da <__cvt+0xb6>
 80049ca:	4630      	mov	r0, r6
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049d0:	1b9b      	subs	r3, r3, r6
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	b008      	add	sp, #32
 80049d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	9107      	str	r1, [sp, #28]
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e7f0      	b.n	80049c4 <__cvt+0xa0>

080049e2 <__exponent>:
 80049e2:	4603      	mov	r3, r0
 80049e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e6:	2900      	cmp	r1, #0
 80049e8:	f803 2b02 	strb.w	r2, [r3], #2
 80049ec:	bfb6      	itet	lt
 80049ee:	222d      	movlt	r2, #45	; 0x2d
 80049f0:	222b      	movge	r2, #43	; 0x2b
 80049f2:	4249      	neglt	r1, r1
 80049f4:	2909      	cmp	r1, #9
 80049f6:	7042      	strb	r2, [r0, #1]
 80049f8:	dd2a      	ble.n	8004a50 <__exponent+0x6e>
 80049fa:	f10d 0207 	add.w	r2, sp, #7
 80049fe:	4617      	mov	r7, r2
 8004a00:	260a      	movs	r6, #10
 8004a02:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a06:	4694      	mov	ip, r2
 8004a08:	fb06 1415 	mls	r4, r6, r5, r1
 8004a0c:	3430      	adds	r4, #48	; 0x30
 8004a0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a12:	460c      	mov	r4, r1
 8004a14:	2c63      	cmp	r4, #99	; 0x63
 8004a16:	4629      	mov	r1, r5
 8004a18:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a1c:	dcf1      	bgt.n	8004a02 <__exponent+0x20>
 8004a1e:	3130      	adds	r1, #48	; 0x30
 8004a20:	f1ac 0402 	sub.w	r4, ip, #2
 8004a24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a28:	4622      	mov	r2, r4
 8004a2a:	1c41      	adds	r1, r0, #1
 8004a2c:	42ba      	cmp	r2, r7
 8004a2e:	d30a      	bcc.n	8004a46 <__exponent+0x64>
 8004a30:	f10d 0209 	add.w	r2, sp, #9
 8004a34:	eba2 020c 	sub.w	r2, r2, ip
 8004a38:	42bc      	cmp	r4, r7
 8004a3a:	bf88      	it	hi
 8004a3c:	2200      	movhi	r2, #0
 8004a3e:	4413      	add	r3, r2
 8004a40:	1a18      	subs	r0, r3, r0
 8004a42:	b003      	add	sp, #12
 8004a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a4e:	e7ed      	b.n	8004a2c <__exponent+0x4a>
 8004a50:	2330      	movs	r3, #48	; 0x30
 8004a52:	3130      	adds	r1, #48	; 0x30
 8004a54:	7083      	strb	r3, [r0, #2]
 8004a56:	70c1      	strb	r1, [r0, #3]
 8004a58:	1d03      	adds	r3, r0, #4
 8004a5a:	e7f1      	b.n	8004a40 <__exponent+0x5e>

08004a5c <_printf_float>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	b091      	sub	sp, #68	; 0x44
 8004a62:	460c      	mov	r4, r1
 8004a64:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a68:	4616      	mov	r6, r2
 8004a6a:	461f      	mov	r7, r3
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	f000 fdc7 	bl	8005600 <_localeconv_r>
 8004a72:	6803      	ldr	r3, [r0, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	f7fb fb6a 	bl	8000150 <strlen>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	930e      	str	r3, [sp, #56]	; 0x38
 8004a80:	f8d8 3000 	ldr.w	r3, [r8]
 8004a84:	900a      	str	r0, [sp, #40]	; 0x28
 8004a86:	3307      	adds	r3, #7
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	f103 0208 	add.w	r2, r3, #8
 8004a90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a94:	f8d4 b000 	ldr.w	fp, [r4]
 8004a98:	f8c8 2000 	str.w	r2, [r8]
 8004a9c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	4643      	mov	r3, r8
 8004aa4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004aa8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aae:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	4b9c      	ldr	r3, [pc, #624]	; (8004d28 <_printf_float+0x2cc>)
 8004ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ab8:	f7fb ffa8 	bl	8000a0c <__aeabi_dcmpun>
 8004abc:	bb70      	cbnz	r0, 8004b1c <_printf_float+0xc0>
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4b98      	ldr	r3, [pc, #608]	; (8004d28 <_printf_float+0x2cc>)
 8004ac6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ac8:	f7fb ff82 	bl	80009d0 <__aeabi_dcmple>
 8004acc:	bb30      	cbnz	r0, 8004b1c <_printf_float+0xc0>
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4650      	mov	r0, sl
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	f7fb ff71 	bl	80009bc <__aeabi_dcmplt>
 8004ada:	b110      	cbz	r0, 8004ae2 <_printf_float+0x86>
 8004adc:	232d      	movs	r3, #45	; 0x2d
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	4a92      	ldr	r2, [pc, #584]	; (8004d2c <_printf_float+0x2d0>)
 8004ae4:	4b92      	ldr	r3, [pc, #584]	; (8004d30 <_printf_float+0x2d4>)
 8004ae6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004aea:	bf94      	ite	ls
 8004aec:	4690      	movls	r8, r2
 8004aee:	4698      	movhi	r8, r3
 8004af0:	2303      	movs	r3, #3
 8004af2:	f04f 0a00 	mov.w	sl, #0
 8004af6:	6123      	str	r3, [r4, #16]
 8004af8:	f02b 0304 	bic.w	r3, fp, #4
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	4633      	mov	r3, r6
 8004b00:	4621      	mov	r1, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	9700      	str	r7, [sp, #0]
 8004b06:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b08:	f000 f9d6 	bl	8004eb8 <_printf_common>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f040 8090 	bne.w	8004c32 <_printf_float+0x1d6>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b011      	add	sp, #68	; 0x44
 8004b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4643      	mov	r3, r8
 8004b20:	4650      	mov	r0, sl
 8004b22:	4641      	mov	r1, r8
 8004b24:	f7fb ff72 	bl	8000a0c <__aeabi_dcmpun>
 8004b28:	b148      	cbz	r0, 8004b3e <_printf_float+0xe2>
 8004b2a:	f1b8 0f00 	cmp.w	r8, #0
 8004b2e:	bfb8      	it	lt
 8004b30:	232d      	movlt	r3, #45	; 0x2d
 8004b32:	4a80      	ldr	r2, [pc, #512]	; (8004d34 <_printf_float+0x2d8>)
 8004b34:	bfb8      	it	lt
 8004b36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b3a:	4b7f      	ldr	r3, [pc, #508]	; (8004d38 <_printf_float+0x2dc>)
 8004b3c:	e7d3      	b.n	8004ae6 <_printf_float+0x8a>
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	d142      	bne.n	8004bce <_printf_float+0x172>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9206      	str	r2, [sp, #24]
 8004b50:	aa0e      	add	r2, sp, #56	; 0x38
 8004b52:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b56:	aa0d      	add	r2, sp, #52	; 0x34
 8004b58:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b5c:	9203      	str	r2, [sp, #12]
 8004b5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	4652      	mov	r2, sl
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4643      	mov	r3, r8
 8004b72:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b74:	f7ff fed6 	bl	8004924 <__cvt>
 8004b78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	2947      	cmp	r1, #71	; 0x47
 8004b7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b80:	d108      	bne.n	8004b94 <_printf_float+0x138>
 8004b82:	1cc8      	adds	r0, r1, #3
 8004b84:	db02      	blt.n	8004b8c <_printf_float+0x130>
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	dd40      	ble.n	8004c0e <_printf_float+0x1b2>
 8004b8c:	f1a9 0902 	sub.w	r9, r9, #2
 8004b90:	fa5f f989 	uxtb.w	r9, r9
 8004b94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b98:	d81f      	bhi.n	8004bda <_printf_float+0x17e>
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	3901      	subs	r1, #1
 8004b9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8004ba4:	f7ff ff1d 	bl	80049e2 <__exponent>
 8004ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004baa:	4682      	mov	sl, r0
 8004bac:	1813      	adds	r3, r2, r0
 8004bae:	2a01      	cmp	r2, #1
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	dc02      	bgt.n	8004bba <_printf_float+0x15e>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	07d2      	lsls	r2, r2, #31
 8004bb8:	d501      	bpl.n	8004bbe <_printf_float+0x162>
 8004bba:	3301      	adds	r3, #1
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d09b      	beq.n	8004afe <_printf_float+0xa2>
 8004bc6:	232d      	movs	r3, #45	; 0x2d
 8004bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bcc:	e797      	b.n	8004afe <_printf_float+0xa2>
 8004bce:	2947      	cmp	r1, #71	; 0x47
 8004bd0:	d1bc      	bne.n	8004b4c <_printf_float+0xf0>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ba      	bne.n	8004b4c <_printf_float+0xf0>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7b7      	b.n	8004b4a <_printf_float+0xee>
 8004bda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004bde:	d118      	bne.n	8004c12 <_printf_float+0x1b6>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	dd0b      	ble.n	8004bfe <_printf_float+0x1a2>
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	b913      	cbnz	r3, 8004bf0 <_printf_float+0x194>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d502      	bpl.n	8004bf6 <_printf_float+0x19a>
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	f04f 0a00 	mov.w	sl, #0
 8004bfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bfc:	e7df      	b.n	8004bbe <_printf_float+0x162>
 8004bfe:	b913      	cbnz	r3, 8004c06 <_printf_float+0x1aa>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	07d2      	lsls	r2, r2, #31
 8004c04:	d501      	bpl.n	8004c0a <_printf_float+0x1ae>
 8004c06:	3302      	adds	r3, #2
 8004c08:	e7f4      	b.n	8004bf4 <_printf_float+0x198>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e7f2      	b.n	8004bf4 <_printf_float+0x198>
 8004c0e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c14:	4299      	cmp	r1, r3
 8004c16:	db05      	blt.n	8004c24 <_printf_float+0x1c8>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	6121      	str	r1, [r4, #16]
 8004c1c:	07d8      	lsls	r0, r3, #31
 8004c1e:	d5ea      	bpl.n	8004bf6 <_printf_float+0x19a>
 8004c20:	1c4b      	adds	r3, r1, #1
 8004c22:	e7e7      	b.n	8004bf4 <_printf_float+0x198>
 8004c24:	2900      	cmp	r1, #0
 8004c26:	bfcc      	ite	gt
 8004c28:	2201      	movgt	r2, #1
 8004c2a:	f1c1 0202 	rsble	r2, r1, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	e7e0      	b.n	8004bf4 <_printf_float+0x198>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	055a      	lsls	r2, r3, #21
 8004c36:	d407      	bmi.n	8004c48 <_printf_float+0x1ec>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d12b      	bne.n	8004c9e <_printf_float+0x242>
 8004c46:	e764      	b.n	8004b12 <_printf_float+0xb6>
 8004c48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c4c:	f240 80dd 	bls.w	8004e0a <_printf_float+0x3ae>
 8004c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c54:	2200      	movs	r2, #0
 8004c56:	2300      	movs	r3, #0
 8004c58:	f7fb fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d033      	beq.n	8004cc8 <_printf_float+0x26c>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <_printf_float+0x2e0>)
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af51 	beq.w	8004b12 <_printf_float+0xb6>
 8004c70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c74:	429a      	cmp	r2, r3
 8004c76:	db02      	blt.n	8004c7e <_printf_float+0x222>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	07d8      	lsls	r0, r3, #31
 8004c7c:	d50f      	bpl.n	8004c9e <_printf_float+0x242>
 8004c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c82:	4631      	mov	r1, r6
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f43f af42 	beq.w	8004b12 <_printf_float+0xb6>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	f104 091a 	add.w	r9, r4, #26
 8004c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4543      	cmp	r3, r8
 8004c9c:	dc09      	bgt.n	8004cb2 <_printf_float+0x256>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	079b      	lsls	r3, r3, #30
 8004ca2:	f100 8104 	bmi.w	8004eae <_printf_float+0x452>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004caa:	4298      	cmp	r0, r3
 8004cac:	bfb8      	it	lt
 8004cae:	4618      	movlt	r0, r3
 8004cb0:	e731      	b.n	8004b16 <_printf_float+0xba>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	464a      	mov	r2, r9
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47b8      	blx	r7
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	f43f af28 	beq.w	8004b12 <_printf_float+0xb6>
 8004cc2:	f108 0801 	add.w	r8, r8, #1
 8004cc6:	e7e6      	b.n	8004c96 <_printf_float+0x23a>
 8004cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dc38      	bgt.n	8004d40 <_printf_float+0x2e4>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	4a19      	ldr	r2, [pc, #100]	; (8004d3c <_printf_float+0x2e0>)
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f af1a 	beq.w	8004b12 <_printf_float+0xb6>
 8004cde:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	d102      	bne.n	8004cec <_printf_float+0x290>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07d9      	lsls	r1, r3, #31
 8004cea:	d5d8      	bpl.n	8004c9e <_printf_float+0x242>
 8004cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f af0b 	beq.w	8004b12 <_printf_float+0xb6>
 8004cfc:	f04f 0900 	mov.w	r9, #0
 8004d00:	f104 0a1a 	add.w	sl, r4, #26
 8004d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d06:	425b      	negs	r3, r3
 8004d08:	454b      	cmp	r3, r9
 8004d0a:	dc01      	bgt.n	8004d10 <_printf_float+0x2b4>
 8004d0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0e:	e794      	b.n	8004c3a <_printf_float+0x1de>
 8004d10:	2301      	movs	r3, #1
 8004d12:	4652      	mov	r2, sl
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f aef9 	beq.w	8004b12 <_printf_float+0xb6>
 8004d20:	f109 0901 	add.w	r9, r9, #1
 8004d24:	e7ee      	b.n	8004d04 <_printf_float+0x2a8>
 8004d26:	bf00      	nop
 8004d28:	7fefffff 	.word	0x7fefffff
 8004d2c:	08007420 	.word	0x08007420
 8004d30:	08007424 	.word	0x08007424
 8004d34:	08007428 	.word	0x08007428
 8004d38:	0800742c 	.word	0x0800742c
 8004d3c:	08007430 	.word	0x08007430
 8004d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bfa8      	it	ge
 8004d48:	461a      	movge	r2, r3
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	4691      	mov	r9, r2
 8004d4e:	dc37      	bgt.n	8004dc0 <_printf_float+0x364>
 8004d50:	f04f 0b00 	mov.w	fp, #0
 8004d54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d58:	f104 021a 	add.w	r2, r4, #26
 8004d5c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d60:	ebaa 0309 	sub.w	r3, sl, r9
 8004d64:	455b      	cmp	r3, fp
 8004d66:	dc33      	bgt.n	8004dd0 <_printf_float+0x374>
 8004d68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	db3b      	blt.n	8004de8 <_printf_float+0x38c>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d438      	bmi.n	8004de8 <_printf_float+0x38c>
 8004d76:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d7a:	eba2 0903 	sub.w	r9, r2, r3
 8004d7e:	eba2 020a 	sub.w	r2, r2, sl
 8004d82:	4591      	cmp	r9, r2
 8004d84:	bfa8      	it	ge
 8004d86:	4691      	movge	r9, r2
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	dc34      	bgt.n	8004df8 <_printf_float+0x39c>
 8004d8e:	f04f 0800 	mov.w	r8, #0
 8004d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d96:	f104 0a1a 	add.w	sl, r4, #26
 8004d9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	4543      	cmp	r3, r8
 8004da6:	f77f af7a 	ble.w	8004c9e <_printf_float+0x242>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4652      	mov	r2, sl
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f aeac 	beq.w	8004b12 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e7ec      	b.n	8004d9a <_printf_float+0x33e>
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b8      	blx	r7
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d1c0      	bne.n	8004d50 <_printf_float+0x2f4>
 8004dce:	e6a0      	b.n	8004b12 <_printf_float+0xb6>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f ae99 	beq.w	8004b12 <_printf_float+0xb6>
 8004de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004de2:	f10b 0b01 	add.w	fp, fp, #1
 8004de6:	e7b9      	b.n	8004d5c <_printf_float+0x300>
 8004de8:	4631      	mov	r1, r6
 8004dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1bf      	bne.n	8004d76 <_printf_float+0x31a>
 8004df6:	e68c      	b.n	8004b12 <_printf_float+0xb6>
 8004df8:	464b      	mov	r3, r9
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	eb08 020a 	add.w	r2, r8, sl
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d1c2      	bne.n	8004d8e <_printf_float+0x332>
 8004e08:	e683      	b.n	8004b12 <_printf_float+0xb6>
 8004e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e0c:	2a01      	cmp	r2, #1
 8004e0e:	dc01      	bgt.n	8004e14 <_printf_float+0x3b8>
 8004e10:	07db      	lsls	r3, r3, #31
 8004e12:	d539      	bpl.n	8004e88 <_printf_float+0x42c>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4642      	mov	r2, r8
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f ae77 	beq.w	8004b12 <_printf_float+0xb6>
 8004e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f ae6f 	beq.w	8004b12 <_printf_float+0xb6>
 8004e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004e40:	f7fb fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e44:	b9d8      	cbnz	r0, 8004e7e <_printf_float+0x422>
 8004e46:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e4a:	f108 0201 	add.w	r2, r8, #1
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d10e      	bne.n	8004e76 <_printf_float+0x41a>
 8004e58:	e65b      	b.n	8004b12 <_printf_float+0xb6>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f ae54 	beq.w	8004b12 <_printf_float+0xb6>
 8004e6a:	f108 0801 	add.w	r8, r8, #1
 8004e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4543      	cmp	r3, r8
 8004e74:	dcf1      	bgt.n	8004e5a <_printf_float+0x3fe>
 8004e76:	4653      	mov	r3, sl
 8004e78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e7c:	e6de      	b.n	8004c3c <_printf_float+0x1e0>
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	f104 091a 	add.w	r9, r4, #26
 8004e86:	e7f2      	b.n	8004e6e <_printf_float+0x412>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	e7df      	b.n	8004e4e <_printf_float+0x3f2>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	464a      	mov	r2, r9
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f ae3a 	beq.w	8004b12 <_printf_float+0xb6>
 8004e9e:	f108 0801 	add.w	r8, r8, #1
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ea6:	1a5b      	subs	r3, r3, r1
 8004ea8:	4543      	cmp	r3, r8
 8004eaa:	dcf0      	bgt.n	8004e8e <_printf_float+0x432>
 8004eac:	e6fb      	b.n	8004ca6 <_printf_float+0x24a>
 8004eae:	f04f 0800 	mov.w	r8, #0
 8004eb2:	f104 0919 	add.w	r9, r4, #25
 8004eb6:	e7f4      	b.n	8004ea2 <_printf_float+0x446>

08004eb8 <_printf_common>:
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	4699      	mov	r9, r3
 8004ec0:	688a      	ldr	r2, [r1, #8]
 8004ec2:	690b      	ldr	r3, [r1, #16]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfb8      	it	lt
 8004eca:	4613      	movlt	r3, r2
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ed8:	b10a      	cbz	r2, 8004ede <_printf_common+0x26>
 8004eda:	3301      	adds	r3, #1
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	0699      	lsls	r1, r3, #26
 8004ee2:	bf42      	ittt	mi
 8004ee4:	6833      	ldrmi	r3, [r6, #0]
 8004ee6:	3302      	addmi	r3, #2
 8004ee8:	6033      	strmi	r3, [r6, #0]
 8004eea:	6825      	ldr	r5, [r4, #0]
 8004eec:	f015 0506 	ands.w	r5, r5, #6
 8004ef0:	d106      	bne.n	8004f00 <_printf_common+0x48>
 8004ef2:	f104 0a19 	add.w	sl, r4, #25
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	6832      	ldr	r2, [r6, #0]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dc2b      	bgt.n	8004f58 <_printf_common+0xa0>
 8004f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f04:	1e13      	subs	r3, r2, #0
 8004f06:	6822      	ldr	r2, [r4, #0]
 8004f08:	bf18      	it	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	0692      	lsls	r2, r2, #26
 8004f0e:	d430      	bmi.n	8004f72 <_printf_common+0xba>
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d023      	beq.n	8004f66 <_printf_common+0xae>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	f003 0306 	and.w	r3, r3, #6
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	bf14      	ite	ne
 8004f2a:	2500      	movne	r5, #0
 8004f2c:	6833      	ldreq	r3, [r6, #0]
 8004f2e:	f04f 0600 	mov.w	r6, #0
 8004f32:	bf08      	it	eq
 8004f34:	68e5      	ldreq	r5, [r4, #12]
 8004f36:	f104 041a 	add.w	r4, r4, #26
 8004f3a:	bf08      	it	eq
 8004f3c:	1aed      	subeq	r5, r5, r3
 8004f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f42:	bf08      	it	eq
 8004f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	bfc4      	itt	gt
 8004f4c:	1a9b      	subgt	r3, r3, r2
 8004f4e:	18ed      	addgt	r5, r5, r3
 8004f50:	42b5      	cmp	r5, r6
 8004f52:	d11a      	bne.n	8004f8a <_printf_common+0xd2>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e008      	b.n	8004f6a <_printf_common+0xb2>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4652      	mov	r2, sl
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d103      	bne.n	8004f6e <_printf_common+0xb6>
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	3501      	adds	r5, #1
 8004f70:	e7c1      	b.n	8004ef6 <_printf_common+0x3e>
 8004f72:	2030      	movs	r0, #48	; 0x30
 8004f74:	18e1      	adds	r1, r4, r3
 8004f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f80:	4422      	add	r2, r4
 8004f82:	3302      	adds	r3, #2
 8004f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f88:	e7c2      	b.n	8004f10 <_printf_common+0x58>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c0      	blx	r8
 8004f94:	3001      	adds	r0, #1
 8004f96:	d0e6      	beq.n	8004f66 <_printf_common+0xae>
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7d9      	b.n	8004f50 <_printf_common+0x98>

08004f9c <_printf_i>:
 8004f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	7e0f      	ldrb	r7, [r1, #24]
 8004fa2:	4691      	mov	r9, r2
 8004fa4:	2f78      	cmp	r7, #120	; 0x78
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	469a      	mov	sl, r3
 8004fac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fb2:	d807      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fb4:	2f62      	cmp	r7, #98	; 0x62
 8004fb6:	d80a      	bhi.n	8004fce <_printf_i+0x32>
 8004fb8:	2f00      	cmp	r7, #0
 8004fba:	f000 80d5 	beq.w	8005168 <_printf_i+0x1cc>
 8004fbe:	2f58      	cmp	r7, #88	; 0x58
 8004fc0:	f000 80c1 	beq.w	8005146 <_printf_i+0x1aa>
 8004fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fcc:	e03a      	b.n	8005044 <_printf_i+0xa8>
 8004fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fd2:	2b15      	cmp	r3, #21
 8004fd4:	d8f6      	bhi.n	8004fc4 <_printf_i+0x28>
 8004fd6:	a101      	add	r1, pc, #4	; (adr r1, 8004fdc <_printf_i+0x40>)
 8004fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fdc:	08005035 	.word	0x08005035
 8004fe0:	08005049 	.word	0x08005049
 8004fe4:	08004fc5 	.word	0x08004fc5
 8004fe8:	08004fc5 	.word	0x08004fc5
 8004fec:	08004fc5 	.word	0x08004fc5
 8004ff0:	08004fc5 	.word	0x08004fc5
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08004fc5 	.word	0x08004fc5
 8004ffc:	08004fc5 	.word	0x08004fc5
 8005000:	08004fc5 	.word	0x08004fc5
 8005004:	08004fc5 	.word	0x08004fc5
 8005008:	0800514f 	.word	0x0800514f
 800500c:	08005075 	.word	0x08005075
 8005010:	08005109 	.word	0x08005109
 8005014:	08004fc5 	.word	0x08004fc5
 8005018:	08004fc5 	.word	0x08004fc5
 800501c:	08005171 	.word	0x08005171
 8005020:	08004fc5 	.word	0x08004fc5
 8005024:	08005075 	.word	0x08005075
 8005028:	08004fc5 	.word	0x08004fc5
 800502c:	08004fc5 	.word	0x08004fc5
 8005030:	08005111 	.word	0x08005111
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	602a      	str	r2, [r5, #0]
 800503c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005044:	2301      	movs	r3, #1
 8005046:	e0a0      	b.n	800518a <_printf_i+0x1ee>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	0607      	lsls	r7, r0, #24
 800504e:	f103 0104 	add.w	r1, r3, #4
 8005052:	6029      	str	r1, [r5, #0]
 8005054:	d501      	bpl.n	800505a <_printf_i+0xbe>
 8005056:	681e      	ldr	r6, [r3, #0]
 8005058:	e003      	b.n	8005062 <_printf_i+0xc6>
 800505a:	0646      	lsls	r6, r0, #25
 800505c:	d5fb      	bpl.n	8005056 <_printf_i+0xba>
 800505e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005062:	2e00      	cmp	r6, #0
 8005064:	da03      	bge.n	800506e <_printf_i+0xd2>
 8005066:	232d      	movs	r3, #45	; 0x2d
 8005068:	4276      	negs	r6, r6
 800506a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506e:	230a      	movs	r3, #10
 8005070:	4859      	ldr	r0, [pc, #356]	; (80051d8 <_printf_i+0x23c>)
 8005072:	e012      	b.n	800509a <_printf_i+0xfe>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	6029      	str	r1, [r5, #0]
 800507c:	0605      	lsls	r5, r0, #24
 800507e:	d501      	bpl.n	8005084 <_printf_i+0xe8>
 8005080:	681e      	ldr	r6, [r3, #0]
 8005082:	e002      	b.n	800508a <_printf_i+0xee>
 8005084:	0641      	lsls	r1, r0, #25
 8005086:	d5fb      	bpl.n	8005080 <_printf_i+0xe4>
 8005088:	881e      	ldrh	r6, [r3, #0]
 800508a:	2f6f      	cmp	r7, #111	; 0x6f
 800508c:	bf0c      	ite	eq
 800508e:	2308      	moveq	r3, #8
 8005090:	230a      	movne	r3, #10
 8005092:	4851      	ldr	r0, [pc, #324]	; (80051d8 <_printf_i+0x23c>)
 8005094:	2100      	movs	r1, #0
 8005096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509a:	6865      	ldr	r5, [r4, #4]
 800509c:	2d00      	cmp	r5, #0
 800509e:	bfa8      	it	ge
 80050a0:	6821      	ldrge	r1, [r4, #0]
 80050a2:	60a5      	str	r5, [r4, #8]
 80050a4:	bfa4      	itt	ge
 80050a6:	f021 0104 	bicge.w	r1, r1, #4
 80050aa:	6021      	strge	r1, [r4, #0]
 80050ac:	b90e      	cbnz	r6, 80050b2 <_printf_i+0x116>
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	d04b      	beq.n	800514a <_printf_i+0x1ae>
 80050b2:	4615      	mov	r5, r2
 80050b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80050b8:	fb03 6711 	mls	r7, r3, r1, r6
 80050bc:	5dc7      	ldrb	r7, [r0, r7]
 80050be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c2:	4637      	mov	r7, r6
 80050c4:	42bb      	cmp	r3, r7
 80050c6:	460e      	mov	r6, r1
 80050c8:	d9f4      	bls.n	80050b4 <_printf_i+0x118>
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d10b      	bne.n	80050e6 <_printf_i+0x14a>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	07de      	lsls	r6, r3, #31
 80050d2:	d508      	bpl.n	80050e6 <_printf_i+0x14a>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	6861      	ldr	r1, [r4, #4]
 80050d8:	4299      	cmp	r1, r3
 80050da:	bfde      	ittt	le
 80050dc:	2330      	movle	r3, #48	; 0x30
 80050de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050e6:	1b52      	subs	r2, r2, r5
 80050e8:	6122      	str	r2, [r4, #16]
 80050ea:	464b      	mov	r3, r9
 80050ec:	4621      	mov	r1, r4
 80050ee:	4640      	mov	r0, r8
 80050f0:	f8cd a000 	str.w	sl, [sp]
 80050f4:	aa03      	add	r2, sp, #12
 80050f6:	f7ff fedf 	bl	8004eb8 <_printf_common>
 80050fa:	3001      	adds	r0, #1
 80050fc:	d14a      	bne.n	8005194 <_printf_i+0x1f8>
 80050fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005102:	b004      	add	sp, #16
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f043 0320 	orr.w	r3, r3, #32
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	2778      	movs	r7, #120	; 0x78
 8005112:	4832      	ldr	r0, [pc, #200]	; (80051dc <_printf_i+0x240>)
 8005114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	6829      	ldr	r1, [r5, #0]
 800511c:	061f      	lsls	r7, r3, #24
 800511e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005122:	d402      	bmi.n	800512a <_printf_i+0x18e>
 8005124:	065f      	lsls	r7, r3, #25
 8005126:	bf48      	it	mi
 8005128:	b2b6      	uxthmi	r6, r6
 800512a:	07df      	lsls	r7, r3, #31
 800512c:	bf48      	it	mi
 800512e:	f043 0320 	orrmi.w	r3, r3, #32
 8005132:	6029      	str	r1, [r5, #0]
 8005134:	bf48      	it	mi
 8005136:	6023      	strmi	r3, [r4, #0]
 8005138:	b91e      	cbnz	r6, 8005142 <_printf_i+0x1a6>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	f023 0320 	bic.w	r3, r3, #32
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	2310      	movs	r3, #16
 8005144:	e7a6      	b.n	8005094 <_printf_i+0xf8>
 8005146:	4824      	ldr	r0, [pc, #144]	; (80051d8 <_printf_i+0x23c>)
 8005148:	e7e4      	b.n	8005114 <_printf_i+0x178>
 800514a:	4615      	mov	r5, r2
 800514c:	e7bd      	b.n	80050ca <_printf_i+0x12e>
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	6826      	ldr	r6, [r4, #0]
 8005152:	1d18      	adds	r0, r3, #4
 8005154:	6961      	ldr	r1, [r4, #20]
 8005156:	6028      	str	r0, [r5, #0]
 8005158:	0635      	lsls	r5, r6, #24
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	d501      	bpl.n	8005162 <_printf_i+0x1c6>
 800515e:	6019      	str	r1, [r3, #0]
 8005160:	e002      	b.n	8005168 <_printf_i+0x1cc>
 8005162:	0670      	lsls	r0, r6, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0x1c2>
 8005166:	8019      	strh	r1, [r3, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	4615      	mov	r5, r2
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	e7bc      	b.n	80050ea <_printf_i+0x14e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	681d      	ldr	r5, [r3, #0]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	4628      	mov	r0, r5
 800517e:	f000 fab6 	bl	80056ee <memchr>
 8005182:	b108      	cbz	r0, 8005188 <_printf_i+0x1ec>
 8005184:	1b40      	subs	r0, r0, r5
 8005186:	6060      	str	r0, [r4, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005192:	e7aa      	b.n	80050ea <_printf_i+0x14e>
 8005194:	462a      	mov	r2, r5
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	6923      	ldr	r3, [r4, #16]
 800519c:	47d0      	blx	sl
 800519e:	3001      	adds	r0, #1
 80051a0:	d0ad      	beq.n	80050fe <_printf_i+0x162>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	079b      	lsls	r3, r3, #30
 80051a6:	d413      	bmi.n	80051d0 <_printf_i+0x234>
 80051a8:	68e0      	ldr	r0, [r4, #12]
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	4298      	cmp	r0, r3
 80051ae:	bfb8      	it	lt
 80051b0:	4618      	movlt	r0, r3
 80051b2:	e7a6      	b.n	8005102 <_printf_i+0x166>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4632      	mov	r2, r6
 80051b8:	4649      	mov	r1, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	47d0      	blx	sl
 80051be:	3001      	adds	r0, #1
 80051c0:	d09d      	beq.n	80050fe <_printf_i+0x162>
 80051c2:	3501      	adds	r5, #1
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	9903      	ldr	r1, [sp, #12]
 80051c8:	1a5b      	subs	r3, r3, r1
 80051ca:	42ab      	cmp	r3, r5
 80051cc:	dcf2      	bgt.n	80051b4 <_printf_i+0x218>
 80051ce:	e7eb      	b.n	80051a8 <_printf_i+0x20c>
 80051d0:	2500      	movs	r5, #0
 80051d2:	f104 0619 	add.w	r6, r4, #25
 80051d6:	e7f5      	b.n	80051c4 <_printf_i+0x228>
 80051d8:	08007432 	.word	0x08007432
 80051dc:	08007443 	.word	0x08007443

080051e0 <std>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	8181      	strh	r1, [r0, #12]
 80051f2:	6643      	str	r3, [r0, #100]	; 0x64
 80051f4:	81c2      	strh	r2, [r0, #14]
 80051f6:	6183      	str	r3, [r0, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2208      	movs	r2, #8
 80051fc:	305c      	adds	r0, #92	; 0x5c
 80051fe:	f000 f9f7 	bl	80055f0 <memset>
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <std+0x58>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	6263      	str	r3, [r4, #36]	; 0x24
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <std+0x5c>)
 800520a:	62a3      	str	r3, [r4, #40]	; 0x28
 800520c:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <std+0x60>)
 800520e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <std+0x64>)
 8005212:	6323      	str	r3, [r4, #48]	; 0x30
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <std+0x68>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d006      	beq.n	8005228 <std+0x48>
 800521a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800521e:	4294      	cmp	r4, r2
 8005220:	d002      	beq.n	8005228 <std+0x48>
 8005222:	33d0      	adds	r3, #208	; 0xd0
 8005224:	429c      	cmp	r4, r3
 8005226:	d105      	bne.n	8005234 <std+0x54>
 8005228:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005230:	f000 ba5a 	b.w	80056e8 <__retarget_lock_init_recursive>
 8005234:	bd10      	pop	{r4, pc}
 8005236:	bf00      	nop
 8005238:	08005441 	.word	0x08005441
 800523c:	08005463 	.word	0x08005463
 8005240:	0800549b 	.word	0x0800549b
 8005244:	080054bf 	.word	0x080054bf
 8005248:	20000408 	.word	0x20000408

0800524c <stdio_exit_handler>:
 800524c:	4a02      	ldr	r2, [pc, #8]	; (8005258 <stdio_exit_handler+0xc>)
 800524e:	4903      	ldr	r1, [pc, #12]	; (800525c <stdio_exit_handler+0x10>)
 8005250:	4803      	ldr	r0, [pc, #12]	; (8005260 <stdio_exit_handler+0x14>)
 8005252:	f000 b869 	b.w	8005328 <_fwalk_sglue>
 8005256:	bf00      	nop
 8005258:	2000000c 	.word	0x2000000c
 800525c:	08007059 	.word	0x08007059
 8005260:	20000018 	.word	0x20000018

08005264 <cleanup_stdio>:
 8005264:	6841      	ldr	r1, [r0, #4]
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <cleanup_stdio+0x34>)
 8005268:	b510      	push	{r4, lr}
 800526a:	4299      	cmp	r1, r3
 800526c:	4604      	mov	r4, r0
 800526e:	d001      	beq.n	8005274 <cleanup_stdio+0x10>
 8005270:	f001 fef2 	bl	8007058 <_fflush_r>
 8005274:	68a1      	ldr	r1, [r4, #8]
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <cleanup_stdio+0x38>)
 8005278:	4299      	cmp	r1, r3
 800527a:	d002      	beq.n	8005282 <cleanup_stdio+0x1e>
 800527c:	4620      	mov	r0, r4
 800527e:	f001 feeb 	bl	8007058 <_fflush_r>
 8005282:	68e1      	ldr	r1, [r4, #12]
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <cleanup_stdio+0x3c>)
 8005286:	4299      	cmp	r1, r3
 8005288:	d004      	beq.n	8005294 <cleanup_stdio+0x30>
 800528a:	4620      	mov	r0, r4
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005290:	f001 bee2 	b.w	8007058 <_fflush_r>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	bf00      	nop
 8005298:	20000408 	.word	0x20000408
 800529c:	20000470 	.word	0x20000470
 80052a0:	200004d8 	.word	0x200004d8

080052a4 <global_stdio_init.part.0>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <global_stdio_init.part.0+0x30>)
 80052a8:	4c0b      	ldr	r4, [pc, #44]	; (80052d8 <global_stdio_init.part.0+0x34>)
 80052aa:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <global_stdio_init.part.0+0x38>)
 80052ac:	4620      	mov	r0, r4
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	2104      	movs	r1, #4
 80052b2:	2200      	movs	r2, #0
 80052b4:	f7ff ff94 	bl	80051e0 <std>
 80052b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052bc:	2201      	movs	r2, #1
 80052be:	2109      	movs	r1, #9
 80052c0:	f7ff ff8e 	bl	80051e0 <std>
 80052c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052c8:	2202      	movs	r2, #2
 80052ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ce:	2112      	movs	r1, #18
 80052d0:	f7ff bf86 	b.w	80051e0 <std>
 80052d4:	20000540 	.word	0x20000540
 80052d8:	20000408 	.word	0x20000408
 80052dc:	0800524d 	.word	0x0800524d

080052e0 <__sfp_lock_acquire>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__sfp_lock_acquire+0x8>)
 80052e2:	f000 ba02 	b.w	80056ea <__retarget_lock_acquire_recursive>
 80052e6:	bf00      	nop
 80052e8:	20000549 	.word	0x20000549

080052ec <__sfp_lock_release>:
 80052ec:	4801      	ldr	r0, [pc, #4]	; (80052f4 <__sfp_lock_release+0x8>)
 80052ee:	f000 b9fd 	b.w	80056ec <__retarget_lock_release_recursive>
 80052f2:	bf00      	nop
 80052f4:	20000549 	.word	0x20000549

080052f8 <__sinit>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4604      	mov	r4, r0
 80052fc:	f7ff fff0 	bl	80052e0 <__sfp_lock_acquire>
 8005300:	6a23      	ldr	r3, [r4, #32]
 8005302:	b11b      	cbz	r3, 800530c <__sinit+0x14>
 8005304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005308:	f7ff bff0 	b.w	80052ec <__sfp_lock_release>
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <__sinit+0x28>)
 800530e:	6223      	str	r3, [r4, #32]
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <__sinit+0x2c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f5      	bne.n	8005304 <__sinit+0xc>
 8005318:	f7ff ffc4 	bl	80052a4 <global_stdio_init.part.0>
 800531c:	e7f2      	b.n	8005304 <__sinit+0xc>
 800531e:	bf00      	nop
 8005320:	08005265 	.word	0x08005265
 8005324:	20000540 	.word	0x20000540

08005328 <_fwalk_sglue>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	4607      	mov	r7, r0
 800532e:	4688      	mov	r8, r1
 8005330:	4614      	mov	r4, r2
 8005332:	2600      	movs	r6, #0
 8005334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005338:	f1b9 0901 	subs.w	r9, r9, #1
 800533c:	d505      	bpl.n	800534a <_fwalk_sglue+0x22>
 800533e:	6824      	ldr	r4, [r4, #0]
 8005340:	2c00      	cmp	r4, #0
 8005342:	d1f7      	bne.n	8005334 <_fwalk_sglue+0xc>
 8005344:	4630      	mov	r0, r6
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d907      	bls.n	8005360 <_fwalk_sglue+0x38>
 8005350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005354:	3301      	adds	r3, #1
 8005356:	d003      	beq.n	8005360 <_fwalk_sglue+0x38>
 8005358:	4629      	mov	r1, r5
 800535a:	4638      	mov	r0, r7
 800535c:	47c0      	blx	r8
 800535e:	4306      	orrs	r6, r0
 8005360:	3568      	adds	r5, #104	; 0x68
 8005362:	e7e9      	b.n	8005338 <_fwalk_sglue+0x10>

08005364 <iprintf>:
 8005364:	b40f      	push	{r0, r1, r2, r3}
 8005366:	b507      	push	{r0, r1, r2, lr}
 8005368:	4906      	ldr	r1, [pc, #24]	; (8005384 <iprintf+0x20>)
 800536a:	ab04      	add	r3, sp, #16
 800536c:	6808      	ldr	r0, [r1, #0]
 800536e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005372:	6881      	ldr	r1, [r0, #8]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	f001 fcd3 	bl	8006d20 <_vfiprintf_r>
 800537a:	b003      	add	sp, #12
 800537c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005380:	b004      	add	sp, #16
 8005382:	4770      	bx	lr
 8005384:	20000064 	.word	0x20000064

08005388 <_puts_r>:
 8005388:	6a03      	ldr	r3, [r0, #32]
 800538a:	b570      	push	{r4, r5, r6, lr}
 800538c:	4605      	mov	r5, r0
 800538e:	460e      	mov	r6, r1
 8005390:	6884      	ldr	r4, [r0, #8]
 8005392:	b90b      	cbnz	r3, 8005398 <_puts_r+0x10>
 8005394:	f7ff ffb0 	bl	80052f8 <__sinit>
 8005398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800539a:	07db      	lsls	r3, r3, #31
 800539c:	d405      	bmi.n	80053aa <_puts_r+0x22>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	0598      	lsls	r0, r3, #22
 80053a2:	d402      	bmi.n	80053aa <_puts_r+0x22>
 80053a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a6:	f000 f9a0 	bl	80056ea <__retarget_lock_acquire_recursive>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	0719      	lsls	r1, r3, #28
 80053ae:	d513      	bpl.n	80053d8 <_puts_r+0x50>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	b18b      	cbz	r3, 80053d8 <_puts_r+0x50>
 80053b4:	3e01      	subs	r6, #1
 80053b6:	68a3      	ldr	r3, [r4, #8]
 80053b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053bc:	3b01      	subs	r3, #1
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	b9e9      	cbnz	r1, 80053fe <_puts_r+0x76>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da2e      	bge.n	8005424 <_puts_r+0x9c>
 80053c6:	4622      	mov	r2, r4
 80053c8:	210a      	movs	r1, #10
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f87b 	bl	80054c6 <__swbuf_r>
 80053d0:	3001      	adds	r0, #1
 80053d2:	d007      	beq.n	80053e4 <_puts_r+0x5c>
 80053d4:	250a      	movs	r5, #10
 80053d6:	e007      	b.n	80053e8 <_puts_r+0x60>
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f8b0 	bl	8005540 <__swsetup_r>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0e7      	beq.n	80053b4 <_puts_r+0x2c>
 80053e4:	f04f 35ff 	mov.w	r5, #4294967295
 80053e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ea:	07da      	lsls	r2, r3, #31
 80053ec:	d405      	bmi.n	80053fa <_puts_r+0x72>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	059b      	lsls	r3, r3, #22
 80053f2:	d402      	bmi.n	80053fa <_puts_r+0x72>
 80053f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f6:	f000 f979 	bl	80056ec <__retarget_lock_release_recursive>
 80053fa:	4628      	mov	r0, r5
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da04      	bge.n	800540c <_puts_r+0x84>
 8005402:	69a2      	ldr	r2, [r4, #24]
 8005404:	429a      	cmp	r2, r3
 8005406:	dc06      	bgt.n	8005416 <_puts_r+0x8e>
 8005408:	290a      	cmp	r1, #10
 800540a:	d004      	beq.n	8005416 <_puts_r+0x8e>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	7019      	strb	r1, [r3, #0]
 8005414:	e7cf      	b.n	80053b6 <_puts_r+0x2e>
 8005416:	4622      	mov	r2, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 f854 	bl	80054c6 <__swbuf_r>
 800541e:	3001      	adds	r0, #1
 8005420:	d1c9      	bne.n	80053b6 <_puts_r+0x2e>
 8005422:	e7df      	b.n	80053e4 <_puts_r+0x5c>
 8005424:	250a      	movs	r5, #10
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	6022      	str	r2, [r4, #0]
 800542c:	701d      	strb	r5, [r3, #0]
 800542e:	e7db      	b.n	80053e8 <_puts_r+0x60>

08005430 <puts>:
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <puts+0xc>)
 8005432:	4601      	mov	r1, r0
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	f7ff bfa7 	b.w	8005388 <_puts_r>
 800543a:	bf00      	nop
 800543c:	20000064 	.word	0x20000064

08005440 <__sread>:
 8005440:	b510      	push	{r4, lr}
 8005442:	460c      	mov	r4, r1
 8005444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005448:	f000 f900 	bl	800564c <_read_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	bfab      	itete	ge
 8005450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005452:	89a3      	ldrhlt	r3, [r4, #12]
 8005454:	181b      	addge	r3, r3, r0
 8005456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800545a:	bfac      	ite	ge
 800545c:	6563      	strge	r3, [r4, #84]	; 0x54
 800545e:	81a3      	strhlt	r3, [r4, #12]
 8005460:	bd10      	pop	{r4, pc}

08005462 <__swrite>:
 8005462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005466:	461f      	mov	r7, r3
 8005468:	898b      	ldrh	r3, [r1, #12]
 800546a:	4605      	mov	r5, r0
 800546c:	05db      	lsls	r3, r3, #23
 800546e:	460c      	mov	r4, r1
 8005470:	4616      	mov	r6, r2
 8005472:	d505      	bpl.n	8005480 <__swrite+0x1e>
 8005474:	2302      	movs	r3, #2
 8005476:	2200      	movs	r2, #0
 8005478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547c:	f000 f8d4 	bl	8005628 <_lseek_r>
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	4632      	mov	r2, r6
 8005484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	4628      	mov	r0, r5
 800548c:	463b      	mov	r3, r7
 800548e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	f000 b8eb 	b.w	8005670 <_write_r>

0800549a <__sseek>:
 800549a:	b510      	push	{r4, lr}
 800549c:	460c      	mov	r4, r1
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 f8c1 	bl	8005628 <_lseek_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	bf15      	itete	ne
 80054ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054b6:	81a3      	strheq	r3, [r4, #12]
 80054b8:	bf18      	it	ne
 80054ba:	81a3      	strhne	r3, [r4, #12]
 80054bc:	bd10      	pop	{r4, pc}

080054be <__sclose>:
 80054be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c2:	f000 b8a1 	b.w	8005608 <_close_r>

080054c6 <__swbuf_r>:
 80054c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c8:	460e      	mov	r6, r1
 80054ca:	4614      	mov	r4, r2
 80054cc:	4605      	mov	r5, r0
 80054ce:	b118      	cbz	r0, 80054d8 <__swbuf_r+0x12>
 80054d0:	6a03      	ldr	r3, [r0, #32]
 80054d2:	b90b      	cbnz	r3, 80054d8 <__swbuf_r+0x12>
 80054d4:	f7ff ff10 	bl	80052f8 <__sinit>
 80054d8:	69a3      	ldr	r3, [r4, #24]
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	071a      	lsls	r2, r3, #28
 80054e0:	d525      	bpl.n	800552e <__swbuf_r+0x68>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	b31b      	cbz	r3, 800552e <__swbuf_r+0x68>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	6922      	ldr	r2, [r4, #16]
 80054ea:	b2f6      	uxtb	r6, r6
 80054ec:	1a98      	subs	r0, r3, r2
 80054ee:	6963      	ldr	r3, [r4, #20]
 80054f0:	4637      	mov	r7, r6
 80054f2:	4283      	cmp	r3, r0
 80054f4:	dc04      	bgt.n	8005500 <__swbuf_r+0x3a>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f001 fdad 	bl	8007058 <_fflush_r>
 80054fe:	b9e0      	cbnz	r0, 800553a <__swbuf_r+0x74>
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	3b01      	subs	r3, #1
 8005504:	60a3      	str	r3, [r4, #8]
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	6022      	str	r2, [r4, #0]
 800550c:	701e      	strb	r6, [r3, #0]
 800550e:	6962      	ldr	r2, [r4, #20]
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	429a      	cmp	r2, r3
 8005514:	d004      	beq.n	8005520 <__swbuf_r+0x5a>
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d506      	bpl.n	800552a <__swbuf_r+0x64>
 800551c:	2e0a      	cmp	r6, #10
 800551e:	d104      	bne.n	800552a <__swbuf_r+0x64>
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f001 fd98 	bl	8007058 <_fflush_r>
 8005528:	b938      	cbnz	r0, 800553a <__swbuf_r+0x74>
 800552a:	4638      	mov	r0, r7
 800552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552e:	4621      	mov	r1, r4
 8005530:	4628      	mov	r0, r5
 8005532:	f000 f805 	bl	8005540 <__swsetup_r>
 8005536:	2800      	cmp	r0, #0
 8005538:	d0d5      	beq.n	80054e6 <__swbuf_r+0x20>
 800553a:	f04f 37ff 	mov.w	r7, #4294967295
 800553e:	e7f4      	b.n	800552a <__swbuf_r+0x64>

08005540 <__swsetup_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <__swsetup_r+0xac>)
 8005544:	4605      	mov	r5, r0
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	460c      	mov	r4, r1
 800554a:	b118      	cbz	r0, 8005554 <__swsetup_r+0x14>
 800554c:	6a03      	ldr	r3, [r0, #32]
 800554e:	b90b      	cbnz	r3, 8005554 <__swsetup_r+0x14>
 8005550:	f7ff fed2 	bl	80052f8 <__sinit>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800555a:	0718      	lsls	r0, r3, #28
 800555c:	d422      	bmi.n	80055a4 <__swsetup_r+0x64>
 800555e:	06d9      	lsls	r1, r3, #27
 8005560:	d407      	bmi.n	8005572 <__swsetup_r+0x32>
 8005562:	2309      	movs	r3, #9
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800556a:	f04f 30ff 	mov.w	r0, #4294967295
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	e034      	b.n	80055dc <__swsetup_r+0x9c>
 8005572:	0758      	lsls	r0, r3, #29
 8005574:	d512      	bpl.n	800559c <__swsetup_r+0x5c>
 8005576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005578:	b141      	cbz	r1, 800558c <__swsetup_r+0x4c>
 800557a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800557e:	4299      	cmp	r1, r3
 8005580:	d002      	beq.n	8005588 <__swsetup_r+0x48>
 8005582:	4628      	mov	r0, r5
 8005584:	f000 ff30 	bl	80063e8 <_free_r>
 8005588:	2300      	movs	r3, #0
 800558a:	6363      	str	r3, [r4, #52]	; 0x34
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	2300      	movs	r3, #0
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f043 0308 	orr.w	r3, r3, #8
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	b94b      	cbnz	r3, 80055bc <__swsetup_r+0x7c>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b2:	d003      	beq.n	80055bc <__swsetup_r+0x7c>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f001 fd9b 	bl	80070f2 <__smakebuf_r>
 80055bc:	89a0      	ldrh	r0, [r4, #12]
 80055be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c2:	f010 0301 	ands.w	r3, r0, #1
 80055c6:	d00a      	beq.n	80055de <__swsetup_r+0x9e>
 80055c8:	2300      	movs	r3, #0
 80055ca:	60a3      	str	r3, [r4, #8]
 80055cc:	6963      	ldr	r3, [r4, #20]
 80055ce:	425b      	negs	r3, r3
 80055d0:	61a3      	str	r3, [r4, #24]
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	b943      	cbnz	r3, 80055e8 <__swsetup_r+0xa8>
 80055d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055da:	d1c4      	bne.n	8005566 <__swsetup_r+0x26>
 80055dc:	bd38      	pop	{r3, r4, r5, pc}
 80055de:	0781      	lsls	r1, r0, #30
 80055e0:	bf58      	it	pl
 80055e2:	6963      	ldrpl	r3, [r4, #20]
 80055e4:	60a3      	str	r3, [r4, #8]
 80055e6:	e7f4      	b.n	80055d2 <__swsetup_r+0x92>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e7f7      	b.n	80055dc <__swsetup_r+0x9c>
 80055ec:	20000064 	.word	0x20000064

080055f0 <memset>:
 80055f0:	4603      	mov	r3, r0
 80055f2:	4402      	add	r2, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d100      	bne.n	80055fa <memset+0xa>
 80055f8:	4770      	bx	lr
 80055fa:	f803 1b01 	strb.w	r1, [r3], #1
 80055fe:	e7f9      	b.n	80055f4 <memset+0x4>

08005600 <_localeconv_r>:
 8005600:	4800      	ldr	r0, [pc, #0]	; (8005604 <_localeconv_r+0x4>)
 8005602:	4770      	bx	lr
 8005604:	20000158 	.word	0x20000158

08005608 <_close_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	2300      	movs	r3, #0
 800560c:	4d05      	ldr	r5, [pc, #20]	; (8005624 <_close_r+0x1c>)
 800560e:	4604      	mov	r4, r0
 8005610:	4608      	mov	r0, r1
 8005612:	602b      	str	r3, [r5, #0]
 8005614:	f7fc f998 	bl	8001948 <_close>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d102      	bne.n	8005622 <_close_r+0x1a>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	b103      	cbz	r3, 8005622 <_close_r+0x1a>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	20000544 	.word	0x20000544

08005628 <_lseek_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	2200      	movs	r2, #0
 8005632:	4d05      	ldr	r5, [pc, #20]	; (8005648 <_lseek_r+0x20>)
 8005634:	602a      	str	r2, [r5, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	f7fc f9aa 	bl	8001990 <_lseek>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_lseek_r+0x1e>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_lseek_r+0x1e>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	20000544 	.word	0x20000544

0800564c <_read_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	2200      	movs	r2, #0
 8005656:	4d05      	ldr	r5, [pc, #20]	; (800566c <_read_r+0x20>)
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fc f93b 	bl	80018d6 <_read>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_read_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_read_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	20000544 	.word	0x20000544

08005670 <_write_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	2200      	movs	r2, #0
 800567a:	4d05      	ldr	r5, [pc, #20]	; (8005690 <_write_r+0x20>)
 800567c:	602a      	str	r2, [r5, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f7fc f946 	bl	8001910 <_write>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_write_r+0x1e>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_write_r+0x1e>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	20000544 	.word	0x20000544

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	20000064 	.word	0x20000064

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2600      	movs	r6, #0
 80056a4:	4d0c      	ldr	r5, [pc, #48]	; (80056d8 <__libc_init_array+0x38>)
 80056a6:	4c0d      	ldr	r4, [pc, #52]	; (80056dc <__libc_init_array+0x3c>)
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	f001 fe4c 	bl	800734c <_init>
 80056b4:	2600      	movs	r6, #0
 80056b6:	4d0a      	ldr	r5, [pc, #40]	; (80056e0 <__libc_init_array+0x40>)
 80056b8:	4c0a      	ldr	r4, [pc, #40]	; (80056e4 <__libc_init_array+0x44>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	0800779c 	.word	0x0800779c
 80056dc:	0800779c 	.word	0x0800779c
 80056e0:	0800779c 	.word	0x0800779c
 80056e4:	080077a0 	.word	0x080077a0

080056e8 <__retarget_lock_init_recursive>:
 80056e8:	4770      	bx	lr

080056ea <__retarget_lock_acquire_recursive>:
 80056ea:	4770      	bx	lr

080056ec <__retarget_lock_release_recursive>:
 80056ec:	4770      	bx	lr

080056ee <memchr>:
 80056ee:	4603      	mov	r3, r0
 80056f0:	b510      	push	{r4, lr}
 80056f2:	b2c9      	uxtb	r1, r1
 80056f4:	4402      	add	r2, r0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	d101      	bne.n	8005700 <memchr+0x12>
 80056fc:	2000      	movs	r0, #0
 80056fe:	e003      	b.n	8005708 <memchr+0x1a>
 8005700:	7804      	ldrb	r4, [r0, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	428c      	cmp	r4, r1
 8005706:	d1f6      	bne.n	80056f6 <memchr+0x8>
 8005708:	bd10      	pop	{r4, pc}

0800570a <quorem>:
 800570a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570e:	6903      	ldr	r3, [r0, #16]
 8005710:	690c      	ldr	r4, [r1, #16]
 8005712:	4607      	mov	r7, r0
 8005714:	42a3      	cmp	r3, r4
 8005716:	db7f      	blt.n	8005818 <quorem+0x10e>
 8005718:	3c01      	subs	r4, #1
 800571a:	f100 0514 	add.w	r5, r0, #20
 800571e:	f101 0814 	add.w	r8, r1, #20
 8005722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800572c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005730:	3301      	adds	r3, #1
 8005732:	429a      	cmp	r2, r3
 8005734:	fbb2 f6f3 	udiv	r6, r2, r3
 8005738:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800573c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005740:	d331      	bcc.n	80057a6 <quorem+0x9c>
 8005742:	f04f 0e00 	mov.w	lr, #0
 8005746:	4640      	mov	r0, r8
 8005748:	46ac      	mov	ip, r5
 800574a:	46f2      	mov	sl, lr
 800574c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005750:	b293      	uxth	r3, r2
 8005752:	fb06 e303 	mla	r3, r6, r3, lr
 8005756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800575a:	0c1a      	lsrs	r2, r3, #16
 800575c:	b29b      	uxth	r3, r3
 800575e:	fb06 220e 	mla	r2, r6, lr, r2
 8005762:	ebaa 0303 	sub.w	r3, sl, r3
 8005766:	f8dc a000 	ldr.w	sl, [ip]
 800576a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800576e:	fa1f fa8a 	uxth.w	sl, sl
 8005772:	4453      	add	r3, sl
 8005774:	f8dc a000 	ldr.w	sl, [ip]
 8005778:	b292      	uxth	r2, r2
 800577a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800577e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005788:	4581      	cmp	r9, r0
 800578a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800578e:	f84c 3b04 	str.w	r3, [ip], #4
 8005792:	d2db      	bcs.n	800574c <quorem+0x42>
 8005794:	f855 300b 	ldr.w	r3, [r5, fp]
 8005798:	b92b      	cbnz	r3, 80057a6 <quorem+0x9c>
 800579a:	9b01      	ldr	r3, [sp, #4]
 800579c:	3b04      	subs	r3, #4
 800579e:	429d      	cmp	r5, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	d32d      	bcc.n	8005800 <quorem+0xf6>
 80057a4:	613c      	str	r4, [r7, #16]
 80057a6:	4638      	mov	r0, r7
 80057a8:	f001 f994 	bl	8006ad4 <__mcmp>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	db23      	blt.n	80057f8 <quorem+0xee>
 80057b0:	4629      	mov	r1, r5
 80057b2:	2000      	movs	r0, #0
 80057b4:	3601      	adds	r6, #1
 80057b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80057ba:	f8d1 c000 	ldr.w	ip, [r1]
 80057be:	b293      	uxth	r3, r2
 80057c0:	1ac3      	subs	r3, r0, r3
 80057c2:	0c12      	lsrs	r2, r2, #16
 80057c4:	fa1f f08c 	uxth.w	r0, ip
 80057c8:	4403      	add	r3, r0
 80057ca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057d8:	45c1      	cmp	r9, r8
 80057da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057de:	f841 3b04 	str.w	r3, [r1], #4
 80057e2:	d2e8      	bcs.n	80057b6 <quorem+0xac>
 80057e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ec:	b922      	cbnz	r2, 80057f8 <quorem+0xee>
 80057ee:	3b04      	subs	r3, #4
 80057f0:	429d      	cmp	r5, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	d30a      	bcc.n	800580c <quorem+0x102>
 80057f6:	613c      	str	r4, [r7, #16]
 80057f8:	4630      	mov	r0, r6
 80057fa:	b003      	add	sp, #12
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	3b04      	subs	r3, #4
 8005804:	2a00      	cmp	r2, #0
 8005806:	d1cd      	bne.n	80057a4 <quorem+0x9a>
 8005808:	3c01      	subs	r4, #1
 800580a:	e7c8      	b.n	800579e <quorem+0x94>
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	3b04      	subs	r3, #4
 8005810:	2a00      	cmp	r2, #0
 8005812:	d1f0      	bne.n	80057f6 <quorem+0xec>
 8005814:	3c01      	subs	r4, #1
 8005816:	e7eb      	b.n	80057f0 <quorem+0xe6>
 8005818:	2000      	movs	r0, #0
 800581a:	e7ee      	b.n	80057fa <quorem+0xf0>
 800581c:	0000      	movs	r0, r0
	...

08005820 <_dtoa_r>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4616      	mov	r6, r2
 8005826:	461f      	mov	r7, r3
 8005828:	69c4      	ldr	r4, [r0, #28]
 800582a:	b099      	sub	sp, #100	; 0x64
 800582c:	4605      	mov	r5, r0
 800582e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005832:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005836:	b974      	cbnz	r4, 8005856 <_dtoa_r+0x36>
 8005838:	2010      	movs	r0, #16
 800583a:	f000 fe1d 	bl	8006478 <malloc>
 800583e:	4602      	mov	r2, r0
 8005840:	61e8      	str	r0, [r5, #28]
 8005842:	b920      	cbnz	r0, 800584e <_dtoa_r+0x2e>
 8005844:	21ef      	movs	r1, #239	; 0xef
 8005846:	4bac      	ldr	r3, [pc, #688]	; (8005af8 <_dtoa_r+0x2d8>)
 8005848:	48ac      	ldr	r0, [pc, #688]	; (8005afc <_dtoa_r+0x2dc>)
 800584a:	f001 fccf 	bl	80071ec <__assert_func>
 800584e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005852:	6004      	str	r4, [r0, #0]
 8005854:	60c4      	str	r4, [r0, #12]
 8005856:	69eb      	ldr	r3, [r5, #28]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	b151      	cbz	r1, 8005872 <_dtoa_r+0x52>
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	2301      	movs	r3, #1
 8005860:	4093      	lsls	r3, r2
 8005862:	604a      	str	r2, [r1, #4]
 8005864:	608b      	str	r3, [r1, #8]
 8005866:	4628      	mov	r0, r5
 8005868:	f000 fefa 	bl	8006660 <_Bfree>
 800586c:	2200      	movs	r2, #0
 800586e:	69eb      	ldr	r3, [r5, #28]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	1e3b      	subs	r3, r7, #0
 8005874:	bfaf      	iteee	ge
 8005876:	2300      	movge	r3, #0
 8005878:	2201      	movlt	r2, #1
 800587a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800587e:	9305      	strlt	r3, [sp, #20]
 8005880:	bfa8      	it	ge
 8005882:	f8c8 3000 	strge.w	r3, [r8]
 8005886:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800588a:	4b9d      	ldr	r3, [pc, #628]	; (8005b00 <_dtoa_r+0x2e0>)
 800588c:	bfb8      	it	lt
 800588e:	f8c8 2000 	strlt.w	r2, [r8]
 8005892:	ea33 0309 	bics.w	r3, r3, r9
 8005896:	d119      	bne.n	80058cc <_dtoa_r+0xac>
 8005898:	f242 730f 	movw	r3, #9999	; 0x270f
 800589c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058a4:	4333      	orrs	r3, r6
 80058a6:	f000 8589 	beq.w	80063bc <_dtoa_r+0xb9c>
 80058aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ac:	b953      	cbnz	r3, 80058c4 <_dtoa_r+0xa4>
 80058ae:	4b95      	ldr	r3, [pc, #596]	; (8005b04 <_dtoa_r+0x2e4>)
 80058b0:	e023      	b.n	80058fa <_dtoa_r+0xda>
 80058b2:	4b95      	ldr	r3, [pc, #596]	; (8005b08 <_dtoa_r+0x2e8>)
 80058b4:	9303      	str	r3, [sp, #12]
 80058b6:	3308      	adds	r3, #8
 80058b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	9803      	ldr	r0, [sp, #12]
 80058be:	b019      	add	sp, #100	; 0x64
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	4b8f      	ldr	r3, [pc, #572]	; (8005b04 <_dtoa_r+0x2e4>)
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	3303      	adds	r3, #3
 80058ca:	e7f5      	b.n	80058b8 <_dtoa_r+0x98>
 80058cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058d8:	2200      	movs	r2, #0
 80058da:	2300      	movs	r3, #0
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	4680      	mov	r8, r0
 80058e2:	b160      	cbz	r0, 80058fe <_dtoa_r+0xde>
 80058e4:	2301      	movs	r3, #1
 80058e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8562 	beq.w	80063b6 <_dtoa_r+0xb96>
 80058f2:	4b86      	ldr	r3, [pc, #536]	; (8005b0c <_dtoa_r+0x2ec>)
 80058f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	9303      	str	r3, [sp, #12]
 80058fc:	e7de      	b.n	80058bc <_dtoa_r+0x9c>
 80058fe:	ab16      	add	r3, sp, #88	; 0x58
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	ab17      	add	r3, sp, #92	; 0x5c
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4628      	mov	r0, r5
 8005908:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800590c:	f001 f98a 	bl	8006c24 <__d2b>
 8005910:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005914:	4682      	mov	sl, r0
 8005916:	2c00      	cmp	r4, #0
 8005918:	d07e      	beq.n	8005a18 <_dtoa_r+0x1f8>
 800591a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800591e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005920:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005928:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800592c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005930:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005934:	4619      	mov	r1, r3
 8005936:	2200      	movs	r2, #0
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <_dtoa_r+0x2f0>)
 800593a:	f7fa fc15 	bl	8000168 <__aeabi_dsub>
 800593e:	a368      	add	r3, pc, #416	; (adr r3, 8005ae0 <_dtoa_r+0x2c0>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f7fa fdc8 	bl	80004d8 <__aeabi_dmul>
 8005948:	a367      	add	r3, pc, #412	; (adr r3, 8005ae8 <_dtoa_r+0x2c8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fc0d 	bl	800016c <__adddf3>
 8005952:	4606      	mov	r6, r0
 8005954:	4620      	mov	r0, r4
 8005956:	460f      	mov	r7, r1
 8005958:	f7fa fd54 	bl	8000404 <__aeabi_i2d>
 800595c:	a364      	add	r3, pc, #400	; (adr r3, 8005af0 <_dtoa_r+0x2d0>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fdb9 	bl	80004d8 <__aeabi_dmul>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa fbfd 	bl	800016c <__adddf3>
 8005972:	4606      	mov	r6, r0
 8005974:	460f      	mov	r7, r1
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	2200      	movs	r2, #0
 800597c:	4683      	mov	fp, r0
 800597e:	2300      	movs	r3, #0
 8005980:	4630      	mov	r0, r6
 8005982:	4639      	mov	r1, r7
 8005984:	f7fb f81a 	bl	80009bc <__aeabi_dcmplt>
 8005988:	b148      	cbz	r0, 800599e <_dtoa_r+0x17e>
 800598a:	4658      	mov	r0, fp
 800598c:	f7fa fd3a 	bl	8000404 <__aeabi_i2d>
 8005990:	4632      	mov	r2, r6
 8005992:	463b      	mov	r3, r7
 8005994:	f7fb f808 	bl	80009a8 <__aeabi_dcmpeq>
 8005998:	b908      	cbnz	r0, 800599e <_dtoa_r+0x17e>
 800599a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800599e:	f1bb 0f16 	cmp.w	fp, #22
 80059a2:	d857      	bhi.n	8005a54 <_dtoa_r+0x234>
 80059a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059a8:	4b5a      	ldr	r3, [pc, #360]	; (8005b14 <_dtoa_r+0x2f4>)
 80059aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	f7fb f803 	bl	80009bc <__aeabi_dcmplt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d04e      	beq.n	8005a58 <_dtoa_r+0x238>
 80059ba:	2300      	movs	r3, #0
 80059bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80059c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059c4:	1b1b      	subs	r3, r3, r4
 80059c6:	1e5a      	subs	r2, r3, #1
 80059c8:	bf46      	itte	mi
 80059ca:	f1c3 0901 	rsbmi	r9, r3, #1
 80059ce:	2300      	movmi	r3, #0
 80059d0:	f04f 0900 	movpl.w	r9, #0
 80059d4:	9209      	str	r2, [sp, #36]	; 0x24
 80059d6:	bf48      	it	mi
 80059d8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059da:	f1bb 0f00 	cmp.w	fp, #0
 80059de:	db3d      	blt.n	8005a5c <_dtoa_r+0x23c>
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80059e6:	445b      	add	r3, fp
 80059e8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ea:	2300      	movs	r3, #0
 80059ec:	930a      	str	r3, [sp, #40]	; 0x28
 80059ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f0:	2b09      	cmp	r3, #9
 80059f2:	d867      	bhi.n	8005ac4 <_dtoa_r+0x2a4>
 80059f4:	2b05      	cmp	r3, #5
 80059f6:	bfc4      	itt	gt
 80059f8:	3b04      	subgt	r3, #4
 80059fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80059fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fe:	bfc8      	it	gt
 8005a00:	2400      	movgt	r4, #0
 8005a02:	f1a3 0302 	sub.w	r3, r3, #2
 8005a06:	bfd8      	it	le
 8005a08:	2401      	movle	r4, #1
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	f200 8086 	bhi.w	8005b1c <_dtoa_r+0x2fc>
 8005a10:	e8df f003 	tbb	[pc, r3]
 8005a14:	5637392c 	.word	0x5637392c
 8005a18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005a1c:	441c      	add	r4, r3
 8005a1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	bfc1      	itttt	gt
 8005a26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8005a2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005a32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a36:	bfd6      	itet	le
 8005a38:	f1c3 0320 	rsble	r3, r3, #32
 8005a3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005a40:	fa06 f003 	lslle.w	r0, r6, r3
 8005a44:	f7fa fcce 	bl	80003e4 <__aeabi_ui2d>
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005a4e:	3c01      	subs	r4, #1
 8005a50:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a52:	e76f      	b.n	8005934 <_dtoa_r+0x114>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7b3      	b.n	80059c0 <_dtoa_r+0x1a0>
 8005a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a5a:	e7b2      	b.n	80059c2 <_dtoa_r+0x1a2>
 8005a5c:	f1cb 0300 	rsb	r3, fp, #0
 8005a60:	930a      	str	r3, [sp, #40]	; 0x28
 8005a62:	2300      	movs	r3, #0
 8005a64:	eba9 090b 	sub.w	r9, r9, fp
 8005a68:	930e      	str	r3, [sp, #56]	; 0x38
 8005a6a:	e7c0      	b.n	80059ee <_dtoa_r+0x1ce>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dc55      	bgt.n	8005b22 <_dtoa_r+0x302>
 8005a76:	2301      	movs	r3, #1
 8005a78:	461a      	mov	r2, r3
 8005a7a:	9306      	str	r3, [sp, #24]
 8005a7c:	9308      	str	r3, [sp, #32]
 8005a7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a80:	e00b      	b.n	8005a9a <_dtoa_r+0x27a>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7f3      	b.n	8005a6e <_dtoa_r+0x24e>
 8005a86:	2300      	movs	r3, #0
 8005a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a8c:	445b      	add	r3, fp
 8005a8e:	9306      	str	r3, [sp, #24]
 8005a90:	3301      	adds	r3, #1
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	9308      	str	r3, [sp, #32]
 8005a96:	bfb8      	it	lt
 8005a98:	2301      	movlt	r3, #1
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	69e8      	ldr	r0, [r5, #28]
 8005aa0:	f102 0614 	add.w	r6, r2, #20
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	d940      	bls.n	8005b2a <_dtoa_r+0x30a>
 8005aa8:	6041      	str	r1, [r0, #4]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fd98 	bl	80065e0 <_Balloc>
 8005ab0:	9003      	str	r0, [sp, #12]
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d13c      	bne.n	8005b30 <_dtoa_r+0x310>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	f240 11af 	movw	r1, #431	; 0x1af
 8005abc:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <_dtoa_r+0x2f8>)
 8005abe:	e6c3      	b.n	8005848 <_dtoa_r+0x28>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e7e1      	b.n	8005a88 <_dtoa_r+0x268>
 8005ac4:	2401      	movs	r4, #1
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005aca:	9322      	str	r3, [sp, #136]	; 0x88
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	9308      	str	r3, [sp, #32]
 8005ad6:	2312      	movs	r3, #18
 8005ad8:	e7d1      	b.n	8005a7e <_dtoa_r+0x25e>
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w
 8005ae0:	636f4361 	.word	0x636f4361
 8005ae4:	3fd287a7 	.word	0x3fd287a7
 8005ae8:	8b60c8b3 	.word	0x8b60c8b3
 8005aec:	3fc68a28 	.word	0x3fc68a28
 8005af0:	509f79fb 	.word	0x509f79fb
 8005af4:	3fd34413 	.word	0x3fd34413
 8005af8:	08007461 	.word	0x08007461
 8005afc:	08007478 	.word	0x08007478
 8005b00:	7ff00000 	.word	0x7ff00000
 8005b04:	0800745d 	.word	0x0800745d
 8005b08:	08007454 	.word	0x08007454
 8005b0c:	08007431 	.word	0x08007431
 8005b10:	3ff80000 	.word	0x3ff80000
 8005b14:	08007568 	.word	0x08007568
 8005b18:	080074d0 	.word	0x080074d0
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b20:	e7d4      	b.n	8005acc <_dtoa_r+0x2ac>
 8005b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b24:	9306      	str	r3, [sp, #24]
 8005b26:	9308      	str	r3, [sp, #32]
 8005b28:	e7b7      	b.n	8005a9a <_dtoa_r+0x27a>
 8005b2a:	3101      	adds	r1, #1
 8005b2c:	0052      	lsls	r2, r2, #1
 8005b2e:	e7b7      	b.n	8005aa0 <_dtoa_r+0x280>
 8005b30:	69eb      	ldr	r3, [r5, #28]
 8005b32:	9a03      	ldr	r2, [sp, #12]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	2b0e      	cmp	r3, #14
 8005b3a:	f200 80a8 	bhi.w	8005c8e <_dtoa_r+0x46e>
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	f000 80a5 	beq.w	8005c8e <_dtoa_r+0x46e>
 8005b44:	f1bb 0f00 	cmp.w	fp, #0
 8005b48:	dd34      	ble.n	8005bb4 <_dtoa_r+0x394>
 8005b4a:	4b9a      	ldr	r3, [pc, #616]	; (8005db4 <_dtoa_r+0x594>)
 8005b4c:	f00b 020f 	and.w	r2, fp, #15
 8005b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005b64:	d016      	beq.n	8005b94 <_dtoa_r+0x374>
 8005b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b6a:	4b93      	ldr	r3, [pc, #588]	; (8005db8 <_dtoa_r+0x598>)
 8005b6c:	2703      	movs	r7, #3
 8005b6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b72:	f7fa fddb 	bl	800072c <__aeabi_ddiv>
 8005b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b7a:	f004 040f 	and.w	r4, r4, #15
 8005b7e:	4e8e      	ldr	r6, [pc, #568]	; (8005db8 <_dtoa_r+0x598>)
 8005b80:	b954      	cbnz	r4, 8005b98 <_dtoa_r+0x378>
 8005b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b8a:	f7fa fdcf 	bl	800072c <__aeabi_ddiv>
 8005b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b92:	e029      	b.n	8005be8 <_dtoa_r+0x3c8>
 8005b94:	2702      	movs	r7, #2
 8005b96:	e7f2      	b.n	8005b7e <_dtoa_r+0x35e>
 8005b98:	07e1      	lsls	r1, r4, #31
 8005b9a:	d508      	bpl.n	8005bae <_dtoa_r+0x38e>
 8005b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ba0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bac:	3701      	adds	r7, #1
 8005bae:	1064      	asrs	r4, r4, #1
 8005bb0:	3608      	adds	r6, #8
 8005bb2:	e7e5      	b.n	8005b80 <_dtoa_r+0x360>
 8005bb4:	f000 80a5 	beq.w	8005d02 <_dtoa_r+0x4e2>
 8005bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bbc:	f1cb 0400 	rsb	r4, fp, #0
 8005bc0:	4b7c      	ldr	r3, [pc, #496]	; (8005db4 <_dtoa_r+0x594>)
 8005bc2:	f004 020f 	and.w	r2, r4, #15
 8005bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fc83 	bl	80004d8 <__aeabi_dmul>
 8005bd2:	2702      	movs	r7, #2
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bda:	4e77      	ldr	r6, [pc, #476]	; (8005db8 <_dtoa_r+0x598>)
 8005bdc:	1124      	asrs	r4, r4, #4
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	f040 8084 	bne.w	8005cec <_dtoa_r+0x4cc>
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1d2      	bne.n	8005b8e <_dtoa_r+0x36e>
 8005be8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005bec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8087 	beq.w	8005d06 <_dtoa_r+0x4e6>
 8005bf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4b6f      	ldr	r3, [pc, #444]	; (8005dbc <_dtoa_r+0x59c>)
 8005c00:	f7fa fedc 	bl	80009bc <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d07e      	beq.n	8005d06 <_dtoa_r+0x4e6>
 8005c08:	9b08      	ldr	r3, [sp, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d07b      	beq.n	8005d06 <_dtoa_r+0x4e6>
 8005c0e:	9b06      	ldr	r3, [sp, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	dd38      	ble.n	8005c86 <_dtoa_r+0x466>
 8005c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4b69      	ldr	r3, [pc, #420]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005c1c:	f7fa fc5c 	bl	80004d8 <__aeabi_dmul>
 8005c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c24:	9c06      	ldr	r4, [sp, #24]
 8005c26:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005c2a:	3701      	adds	r7, #1
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7fa fbe9 	bl	8000404 <__aeabi_i2d>
 8005c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c36:	f7fa fc4f 	bl	80004d8 <__aeabi_dmul>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <_dtoa_r+0x5a4>)
 8005c3e:	f7fa fa95 	bl	800016c <__adddf3>
 8005c42:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c4a:	9611      	str	r6, [sp, #68]	; 0x44
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	d15d      	bne.n	8005d0c <_dtoa_r+0x4ec>
 8005c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c54:	2200      	movs	r2, #0
 8005c56:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <_dtoa_r+0x5a8>)
 8005c58:	f7fa fa86 	bl	8000168 <__aeabi_dsub>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c64:	4633      	mov	r3, r6
 8005c66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c68:	f7fa fec6 	bl	80009f8 <__aeabi_dcmpgt>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f040 8295 	bne.w	800619c <_dtoa_r+0x97c>
 8005c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c7c:	f7fa fe9e 	bl	80009bc <__aeabi_dcmplt>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f040 8289 	bne.w	8006198 <_dtoa_r+0x978>
 8005c86:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f2c0 8151 	blt.w	8005f38 <_dtoa_r+0x718>
 8005c96:	f1bb 0f0e 	cmp.w	fp, #14
 8005c9a:	f300 814d 	bgt.w	8005f38 <_dtoa_r+0x718>
 8005c9e:	4b45      	ldr	r3, [pc, #276]	; (8005db4 <_dtoa_r+0x594>)
 8005ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005cac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f280 80da 	bge.w	8005e68 <_dtoa_r+0x648>
 8005cb4:	9b08      	ldr	r3, [sp, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f300 80d6 	bgt.w	8005e68 <_dtoa_r+0x648>
 8005cbc:	f040 826b 	bne.w	8006196 <_dtoa_r+0x976>
 8005cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4b40      	ldr	r3, [pc, #256]	; (8005dc8 <_dtoa_r+0x5a8>)
 8005cc8:	f7fa fc06 	bl	80004d8 <__aeabi_dmul>
 8005ccc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd0:	f7fa fe88 	bl	80009e4 <__aeabi_dcmpge>
 8005cd4:	9c08      	ldr	r4, [sp, #32]
 8005cd6:	4626      	mov	r6, r4
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f040 8241 	bne.w	8006160 <_dtoa_r+0x940>
 8005cde:	2331      	movs	r3, #49	; 0x31
 8005ce0:	9f03      	ldr	r7, [sp, #12]
 8005ce2:	f10b 0b01 	add.w	fp, fp, #1
 8005ce6:	f807 3b01 	strb.w	r3, [r7], #1
 8005cea:	e23d      	b.n	8006168 <_dtoa_r+0x948>
 8005cec:	07e2      	lsls	r2, r4, #31
 8005cee:	d505      	bpl.n	8005cfc <_dtoa_r+0x4dc>
 8005cf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	3701      	adds	r7, #1
 8005cfc:	1064      	asrs	r4, r4, #1
 8005cfe:	3608      	adds	r6, #8
 8005d00:	e76d      	b.n	8005bde <_dtoa_r+0x3be>
 8005d02:	2702      	movs	r7, #2
 8005d04:	e770      	b.n	8005be8 <_dtoa_r+0x3c8>
 8005d06:	46d8      	mov	r8, fp
 8005d08:	9c08      	ldr	r4, [sp, #32]
 8005d0a:	e78f      	b.n	8005c2c <_dtoa_r+0x40c>
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <_dtoa_r+0x594>)
 8005d10:	4421      	add	r1, r4
 8005d12:	9112      	str	r1, [sp, #72]	; 0x48
 8005d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d1a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005d1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d22:	2900      	cmp	r1, #0
 8005d24:	d054      	beq.n	8005dd0 <_dtoa_r+0x5b0>
 8005d26:	2000      	movs	r0, #0
 8005d28:	4928      	ldr	r1, [pc, #160]	; (8005dcc <_dtoa_r+0x5ac>)
 8005d2a:	f7fa fcff 	bl	800072c <__aeabi_ddiv>
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4632      	mov	r2, r6
 8005d32:	f7fa fa19 	bl	8000168 <__aeabi_dsub>
 8005d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d3a:	9f03      	ldr	r7, [sp, #12]
 8005d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d40:	f7fa fe7a 	bl	8000a38 <__aeabi_d2iz>
 8005d44:	4604      	mov	r4, r0
 8005d46:	f7fa fb5d 	bl	8000404 <__aeabi_i2d>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d52:	f7fa fa09 	bl	8000168 <__aeabi_dsub>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	3430      	adds	r4, #48	; 0x30
 8005d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d64:	f807 4b01 	strb.w	r4, [r7], #1
 8005d68:	f7fa fe28 	bl	80009bc <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d173      	bne.n	8005e58 <_dtoa_r+0x638>
 8005d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d74:	2000      	movs	r0, #0
 8005d76:	4911      	ldr	r1, [pc, #68]	; (8005dbc <_dtoa_r+0x59c>)
 8005d78:	f7fa f9f6 	bl	8000168 <__aeabi_dsub>
 8005d7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d80:	f7fa fe1c 	bl	80009bc <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f040 80b6 	bne.w	8005ef6 <_dtoa_r+0x6d6>
 8005d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d8c:	429f      	cmp	r7, r3
 8005d8e:	f43f af7a 	beq.w	8005c86 <_dtoa_r+0x466>
 8005d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d96:	2200      	movs	r2, #0
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005d9a:	f7fa fb9d 	bl	80004d8 <__aeabi_dmul>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <_dtoa_r+0x5a0>)
 8005daa:	f7fa fb95 	bl	80004d8 <__aeabi_dmul>
 8005dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db2:	e7c3      	b.n	8005d3c <_dtoa_r+0x51c>
 8005db4:	08007568 	.word	0x08007568
 8005db8:	08007540 	.word	0x08007540
 8005dbc:	3ff00000 	.word	0x3ff00000
 8005dc0:	40240000 	.word	0x40240000
 8005dc4:	401c0000 	.word	0x401c0000
 8005dc8:	40140000 	.word	0x40140000
 8005dcc:	3fe00000 	.word	0x3fe00000
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fb80 	bl	80004d8 <__aeabi_dmul>
 8005dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dde:	9c03      	ldr	r4, [sp, #12]
 8005de0:	9314      	str	r3, [sp, #80]	; 0x50
 8005de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005de6:	f7fa fe27 	bl	8000a38 <__aeabi_d2iz>
 8005dea:	9015      	str	r0, [sp, #84]	; 0x54
 8005dec:	f7fa fb0a 	bl	8000404 <__aeabi_i2d>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005df8:	f7fa f9b6 	bl	8000168 <__aeabi_dsub>
 8005dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dfe:	4606      	mov	r6, r0
 8005e00:	3330      	adds	r3, #48	; 0x30
 8005e02:	f804 3b01 	strb.w	r3, [r4], #1
 8005e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e08:	460f      	mov	r7, r1
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	d124      	bne.n	8005e5c <_dtoa_r+0x63c>
 8005e12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e16:	4baf      	ldr	r3, [pc, #700]	; (80060d4 <_dtoa_r+0x8b4>)
 8005e18:	f7fa f9a8 	bl	800016c <__adddf3>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4630      	mov	r0, r6
 8005e22:	4639      	mov	r1, r7
 8005e24:	f7fa fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d163      	bne.n	8005ef4 <_dtoa_r+0x6d4>
 8005e2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e30:	2000      	movs	r0, #0
 8005e32:	49a8      	ldr	r1, [pc, #672]	; (80060d4 <_dtoa_r+0x8b4>)
 8005e34:	f7fa f998 	bl	8000168 <__aeabi_dsub>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	f7fa fdbc 	bl	80009bc <__aeabi_dcmplt>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f43f af1e 	beq.w	8005c86 <_dtoa_r+0x466>
 8005e4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e4c:	1e7b      	subs	r3, r7, #1
 8005e4e:	9314      	str	r3, [sp, #80]	; 0x50
 8005e50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	d0f8      	beq.n	8005e4a <_dtoa_r+0x62a>
 8005e58:	46c3      	mov	fp, r8
 8005e5a:	e03b      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8005e5c:	4b9e      	ldr	r3, [pc, #632]	; (80060d8 <_dtoa_r+0x8b8>)
 8005e5e:	f7fa fb3b 	bl	80004d8 <__aeabi_dmul>
 8005e62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e66:	e7bc      	b.n	8005de2 <_dtoa_r+0x5c2>
 8005e68:	9f03      	ldr	r7, [sp, #12]
 8005e6a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fc59 	bl	800072c <__aeabi_ddiv>
 8005e7a:	f7fa fddd 	bl	8000a38 <__aeabi_d2iz>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	f7fa fac0 	bl	8000404 <__aeabi_i2d>
 8005e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e88:	f7fa fb26 	bl	80004d8 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa f968 	bl	8000168 <__aeabi_dsub>
 8005e98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e9c:	f807 6b01 	strb.w	r6, [r7], #1
 8005ea0:	9e03      	ldr	r6, [sp, #12]
 8005ea2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ea6:	1bbe      	subs	r6, r7, r6
 8005ea8:	45b4      	cmp	ip, r6
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	d136      	bne.n	8005f1e <_dtoa_r+0x6fe>
 8005eb0:	f7fa f95c 	bl	800016c <__adddf3>
 8005eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4689      	mov	r9, r1
 8005ebc:	f7fa fd9c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ec0:	bb58      	cbnz	r0, 8005f1a <_dtoa_r+0x6fa>
 8005ec2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8005ece:	b108      	cbz	r0, 8005ed4 <_dtoa_r+0x6b4>
 8005ed0:	07e3      	lsls	r3, r4, #31
 8005ed2:	d422      	bmi.n	8005f1a <_dtoa_r+0x6fa>
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fbc2 	bl	8006660 <_Bfree>
 8005edc:	2300      	movs	r3, #0
 8005ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ee0:	703b      	strb	r3, [r7, #0]
 8005ee2:	f10b 0301 	add.w	r3, fp, #1
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f43f ace6 	beq.w	80058bc <_dtoa_r+0x9c>
 8005ef0:	601f      	str	r7, [r3, #0]
 8005ef2:	e4e3      	b.n	80058bc <_dtoa_r+0x9c>
 8005ef4:	4627      	mov	r7, r4
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	461f      	mov	r7, r3
 8005efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005efe:	2a39      	cmp	r2, #57	; 0x39
 8005f00:	d107      	bne.n	8005f12 <_dtoa_r+0x6f2>
 8005f02:	9a03      	ldr	r2, [sp, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1f7      	bne.n	8005ef8 <_dtoa_r+0x6d8>
 8005f08:	2230      	movs	r2, #48	; 0x30
 8005f0a:	9903      	ldr	r1, [sp, #12]
 8005f0c:	f108 0801 	add.w	r8, r8, #1
 8005f10:	700a      	strb	r2, [r1, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	3201      	adds	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e79e      	b.n	8005e58 <_dtoa_r+0x638>
 8005f1a:	46d8      	mov	r8, fp
 8005f1c:	e7eb      	b.n	8005ef6 <_dtoa_r+0x6d6>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	4b6d      	ldr	r3, [pc, #436]	; (80060d8 <_dtoa_r+0x8b8>)
 8005f22:	f7fa fad9 	bl	80004d8 <__aeabi_dmul>
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	4689      	mov	r9, r1
 8005f2e:	f7fa fd3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d09b      	beq.n	8005e6e <_dtoa_r+0x64e>
 8005f36:	e7cd      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8005f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f3a:	2a00      	cmp	r2, #0
 8005f3c:	f000 80c4 	beq.w	80060c8 <_dtoa_r+0x8a8>
 8005f40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	f300 80a8 	bgt.w	8006098 <_dtoa_r+0x878>
 8005f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	f000 80a0 	beq.w	8006090 <_dtoa_r+0x870>
 8005f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f54:	464f      	mov	r7, r9
 8005f56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	441a      	add	r2, r3
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4499      	add	r9, r3
 8005f62:	9209      	str	r2, [sp, #36]	; 0x24
 8005f64:	f000 fc32 	bl	80067cc <__i2b>
 8005f68:	4606      	mov	r6, r0
 8005f6a:	b15f      	cbz	r7, 8005f84 <_dtoa_r+0x764>
 8005f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dd08      	ble.n	8005f84 <_dtoa_r+0x764>
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	bfa8      	it	ge
 8005f76:	463b      	movge	r3, r7
 8005f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f7a:	eba9 0903 	sub.w	r9, r9, r3
 8005f7e:	1aff      	subs	r7, r7, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f86:	b1f3      	cbz	r3, 8005fc6 <_dtoa_r+0x7a6>
 8005f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a0 	beq.w	80060d0 <_dtoa_r+0x8b0>
 8005f90:	2c00      	cmp	r4, #0
 8005f92:	dd10      	ble.n	8005fb6 <_dtoa_r+0x796>
 8005f94:	4631      	mov	r1, r6
 8005f96:	4622      	mov	r2, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 fcd5 	bl	8006948 <__pow5mult>
 8005f9e:	4652      	mov	r2, sl
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 fc27 	bl	80067f8 <__multiply>
 8005faa:	4680      	mov	r8, r0
 8005fac:	4651      	mov	r1, sl
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 fb56 	bl	8006660 <_Bfree>
 8005fb4:	46c2      	mov	sl, r8
 8005fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb8:	1b1a      	subs	r2, r3, r4
 8005fba:	d004      	beq.n	8005fc6 <_dtoa_r+0x7a6>
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 fcc2 	bl	8006948 <__pow5mult>
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 fbff 	bl	80067cc <__i2b>
 8005fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f340 8082 	ble.w	80060dc <_dtoa_r+0x8bc>
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4601      	mov	r1, r0
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fcb3 	bl	8006948 <__pow5mult>
 8005fe2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	dd7b      	ble.n	80060e2 <_dtoa_r+0x8c2>
 8005fea:	f04f 0800 	mov.w	r8, #0
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ff4:	6918      	ldr	r0, [r3, #16]
 8005ff6:	f000 fb9b 	bl	8006730 <__hi0bits>
 8005ffa:	f1c0 0020 	rsb	r0, r0, #32
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	4418      	add	r0, r3
 8006002:	f010 001f 	ands.w	r0, r0, #31
 8006006:	f000 8092 	beq.w	800612e <_dtoa_r+0x90e>
 800600a:	f1c0 0320 	rsb	r3, r0, #32
 800600e:	2b04      	cmp	r3, #4
 8006010:	f340 8085 	ble.w	800611e <_dtoa_r+0x8fe>
 8006014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006016:	f1c0 001c 	rsb	r0, r0, #28
 800601a:	4403      	add	r3, r0
 800601c:	4481      	add	r9, r0
 800601e:	4407      	add	r7, r0
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	f1b9 0f00 	cmp.w	r9, #0
 8006026:	dd05      	ble.n	8006034 <_dtoa_r+0x814>
 8006028:	4651      	mov	r1, sl
 800602a:	464a      	mov	r2, r9
 800602c:	4628      	mov	r0, r5
 800602e:	f000 fce5 	bl	80069fc <__lshift>
 8006032:	4682      	mov	sl, r0
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd05      	ble.n	8006046 <_dtoa_r+0x826>
 800603a:	4621      	mov	r1, r4
 800603c:	461a      	mov	r2, r3
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fcdc 	bl	80069fc <__lshift>
 8006044:	4604      	mov	r4, r0
 8006046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d072      	beq.n	8006132 <_dtoa_r+0x912>
 800604c:	4621      	mov	r1, r4
 800604e:	4650      	mov	r0, sl
 8006050:	f000 fd40 	bl	8006ad4 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	da6c      	bge.n	8006132 <_dtoa_r+0x912>
 8006058:	2300      	movs	r3, #0
 800605a:	4651      	mov	r1, sl
 800605c:	220a      	movs	r2, #10
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fb20 	bl	80066a4 <__multadd>
 8006064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006066:	4682      	mov	sl, r0
 8006068:	f10b 3bff 	add.w	fp, fp, #4294967295
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 81ac 	beq.w	80063ca <_dtoa_r+0xbaa>
 8006072:	2300      	movs	r3, #0
 8006074:	4631      	mov	r1, r6
 8006076:	220a      	movs	r2, #10
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fb13 	bl	80066a4 <__multadd>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	4606      	mov	r6, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f300 8093 	bgt.w	80061ae <_dtoa_r+0x98e>
 8006088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800608a:	2b02      	cmp	r3, #2
 800608c:	dc59      	bgt.n	8006142 <_dtoa_r+0x922>
 800608e:	e08e      	b.n	80061ae <_dtoa_r+0x98e>
 8006090:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006092:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006096:	e75d      	b.n	8005f54 <_dtoa_r+0x734>
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	1e5c      	subs	r4, r3, #1
 800609c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800609e:	42a3      	cmp	r3, r4
 80060a0:	bfbf      	itttt	lt
 80060a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80060a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80060a6:	1ae3      	sublt	r3, r4, r3
 80060a8:	18d2      	addlt	r2, r2, r3
 80060aa:	bfa8      	it	ge
 80060ac:	1b1c      	subge	r4, r3, r4
 80060ae:	9b08      	ldr	r3, [sp, #32]
 80060b0:	bfbe      	ittt	lt
 80060b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80060b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80060b6:	2400      	movlt	r4, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfb5      	itete	lt
 80060bc:	eba9 0703 	sublt.w	r7, r9, r3
 80060c0:	464f      	movge	r7, r9
 80060c2:	2300      	movlt	r3, #0
 80060c4:	9b08      	ldrge	r3, [sp, #32]
 80060c6:	e747      	b.n	8005f58 <_dtoa_r+0x738>
 80060c8:	464f      	mov	r7, r9
 80060ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060ce:	e74c      	b.n	8005f6a <_dtoa_r+0x74a>
 80060d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060d2:	e773      	b.n	8005fbc <_dtoa_r+0x79c>
 80060d4:	3fe00000 	.word	0x3fe00000
 80060d8:	40240000 	.word	0x40240000
 80060dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060de:	2b01      	cmp	r3, #1
 80060e0:	dc18      	bgt.n	8006114 <_dtoa_r+0x8f4>
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	b9b3      	cbnz	r3, 8006114 <_dtoa_r+0x8f4>
 80060e6:	9b05      	ldr	r3, [sp, #20]
 80060e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ec:	b993      	cbnz	r3, 8006114 <_dtoa_r+0x8f4>
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f4:	0d1b      	lsrs	r3, r3, #20
 80060f6:	051b      	lsls	r3, r3, #20
 80060f8:	b17b      	cbz	r3, 800611a <_dtoa_r+0x8fa>
 80060fa:	f04f 0801 	mov.w	r8, #1
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	f109 0901 	add.w	r9, r9, #1
 8006104:	3301      	adds	r3, #1
 8006106:	9309      	str	r3, [sp, #36]	; 0x24
 8006108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	f47f af6f 	bne.w	8005fee <_dtoa_r+0x7ce>
 8006110:	2001      	movs	r0, #1
 8006112:	e774      	b.n	8005ffe <_dtoa_r+0x7de>
 8006114:	f04f 0800 	mov.w	r8, #0
 8006118:	e7f6      	b.n	8006108 <_dtoa_r+0x8e8>
 800611a:	4698      	mov	r8, r3
 800611c:	e7f4      	b.n	8006108 <_dtoa_r+0x8e8>
 800611e:	d080      	beq.n	8006022 <_dtoa_r+0x802>
 8006120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006122:	331c      	adds	r3, #28
 8006124:	441a      	add	r2, r3
 8006126:	4499      	add	r9, r3
 8006128:	441f      	add	r7, r3
 800612a:	9209      	str	r2, [sp, #36]	; 0x24
 800612c:	e779      	b.n	8006022 <_dtoa_r+0x802>
 800612e:	4603      	mov	r3, r0
 8006130:	e7f6      	b.n	8006120 <_dtoa_r+0x900>
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dc34      	bgt.n	80061a2 <_dtoa_r+0x982>
 8006138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800613a:	2b02      	cmp	r3, #2
 800613c:	dd31      	ble.n	80061a2 <_dtoa_r+0x982>
 800613e:	9b08      	ldr	r3, [sp, #32]
 8006140:	9306      	str	r3, [sp, #24]
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	b963      	cbnz	r3, 8006160 <_dtoa_r+0x940>
 8006146:	4621      	mov	r1, r4
 8006148:	2205      	movs	r2, #5
 800614a:	4628      	mov	r0, r5
 800614c:	f000 faaa 	bl	80066a4 <__multadd>
 8006150:	4601      	mov	r1, r0
 8006152:	4604      	mov	r4, r0
 8006154:	4650      	mov	r0, sl
 8006156:	f000 fcbd 	bl	8006ad4 <__mcmp>
 800615a:	2800      	cmp	r0, #0
 800615c:	f73f adbf 	bgt.w	8005cde <_dtoa_r+0x4be>
 8006160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006162:	9f03      	ldr	r7, [sp, #12]
 8006164:	ea6f 0b03 	mvn.w	fp, r3
 8006168:	f04f 0800 	mov.w	r8, #0
 800616c:	4621      	mov	r1, r4
 800616e:	4628      	mov	r0, r5
 8006170:	f000 fa76 	bl	8006660 <_Bfree>
 8006174:	2e00      	cmp	r6, #0
 8006176:	f43f aead 	beq.w	8005ed4 <_dtoa_r+0x6b4>
 800617a:	f1b8 0f00 	cmp.w	r8, #0
 800617e:	d005      	beq.n	800618c <_dtoa_r+0x96c>
 8006180:	45b0      	cmp	r8, r6
 8006182:	d003      	beq.n	800618c <_dtoa_r+0x96c>
 8006184:	4641      	mov	r1, r8
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fa6a 	bl	8006660 <_Bfree>
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	f000 fa66 	bl	8006660 <_Bfree>
 8006194:	e69e      	b.n	8005ed4 <_dtoa_r+0x6b4>
 8006196:	2400      	movs	r4, #0
 8006198:	4626      	mov	r6, r4
 800619a:	e7e1      	b.n	8006160 <_dtoa_r+0x940>
 800619c:	46c3      	mov	fp, r8
 800619e:	4626      	mov	r6, r4
 80061a0:	e59d      	b.n	8005cde <_dtoa_r+0x4be>
 80061a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80c8 	beq.w	800633a <_dtoa_r+0xb1a>
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	9306      	str	r3, [sp, #24]
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	dd05      	ble.n	80061be <_dtoa_r+0x99e>
 80061b2:	4631      	mov	r1, r6
 80061b4:	463a      	mov	r2, r7
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fc20 	bl	80069fc <__lshift>
 80061bc:	4606      	mov	r6, r0
 80061be:	f1b8 0f00 	cmp.w	r8, #0
 80061c2:	d05b      	beq.n	800627c <_dtoa_r+0xa5c>
 80061c4:	4628      	mov	r0, r5
 80061c6:	6871      	ldr	r1, [r6, #4]
 80061c8:	f000 fa0a 	bl	80065e0 <_Balloc>
 80061cc:	4607      	mov	r7, r0
 80061ce:	b928      	cbnz	r0, 80061dc <_dtoa_r+0x9bc>
 80061d0:	4602      	mov	r2, r0
 80061d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80061d6:	4b81      	ldr	r3, [pc, #516]	; (80063dc <_dtoa_r+0xbbc>)
 80061d8:	f7ff bb36 	b.w	8005848 <_dtoa_r+0x28>
 80061dc:	6932      	ldr	r2, [r6, #16]
 80061de:	f106 010c 	add.w	r1, r6, #12
 80061e2:	3202      	adds	r2, #2
 80061e4:	0092      	lsls	r2, r2, #2
 80061e6:	300c      	adds	r0, #12
 80061e8:	f000 fff2 	bl	80071d0 <memcpy>
 80061ec:	2201      	movs	r2, #1
 80061ee:	4639      	mov	r1, r7
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fc03 	bl	80069fc <__lshift>
 80061f6:	46b0      	mov	r8, r6
 80061f8:	4606      	mov	r6, r0
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	9a03      	ldr	r2, [sp, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	9308      	str	r3, [sp, #32]
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	4413      	add	r3, r2
 8006206:	930b      	str	r3, [sp, #44]	; 0x2c
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	930a      	str	r3, [sp, #40]	; 0x28
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	4621      	mov	r1, r4
 8006214:	3b01      	subs	r3, #1
 8006216:	4650      	mov	r0, sl
 8006218:	9304      	str	r3, [sp, #16]
 800621a:	f7ff fa76 	bl	800570a <quorem>
 800621e:	4641      	mov	r1, r8
 8006220:	9006      	str	r0, [sp, #24]
 8006222:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006226:	4650      	mov	r0, sl
 8006228:	f000 fc54 	bl	8006ad4 <__mcmp>
 800622c:	4632      	mov	r2, r6
 800622e:	9009      	str	r0, [sp, #36]	; 0x24
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 fc6a 	bl	8006b0c <__mdiff>
 8006238:	68c2      	ldr	r2, [r0, #12]
 800623a:	4607      	mov	r7, r0
 800623c:	bb02      	cbnz	r2, 8006280 <_dtoa_r+0xa60>
 800623e:	4601      	mov	r1, r0
 8006240:	4650      	mov	r0, sl
 8006242:	f000 fc47 	bl	8006ad4 <__mcmp>
 8006246:	4602      	mov	r2, r0
 8006248:	4639      	mov	r1, r7
 800624a:	4628      	mov	r0, r5
 800624c:	920c      	str	r2, [sp, #48]	; 0x30
 800624e:	f000 fa07 	bl	8006660 <_Bfree>
 8006252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006254:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006256:	9f08      	ldr	r7, [sp, #32]
 8006258:	ea43 0102 	orr.w	r1, r3, r2
 800625c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625e:	4319      	orrs	r1, r3
 8006260:	d110      	bne.n	8006284 <_dtoa_r+0xa64>
 8006262:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006266:	d029      	beq.n	80062bc <_dtoa_r+0xa9c>
 8006268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	dd02      	ble.n	8006274 <_dtoa_r+0xa54>
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	f883 9000 	strb.w	r9, [r3]
 800627a:	e777      	b.n	800616c <_dtoa_r+0x94c>
 800627c:	4630      	mov	r0, r6
 800627e:	e7ba      	b.n	80061f6 <_dtoa_r+0x9d6>
 8006280:	2201      	movs	r2, #1
 8006282:	e7e1      	b.n	8006248 <_dtoa_r+0xa28>
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	db04      	blt.n	8006294 <_dtoa_r+0xa74>
 800628a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800628c:	430b      	orrs	r3, r1
 800628e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006290:	430b      	orrs	r3, r1
 8006292:	d120      	bne.n	80062d6 <_dtoa_r+0xab6>
 8006294:	2a00      	cmp	r2, #0
 8006296:	dded      	ble.n	8006274 <_dtoa_r+0xa54>
 8006298:	4651      	mov	r1, sl
 800629a:	2201      	movs	r2, #1
 800629c:	4628      	mov	r0, r5
 800629e:	f000 fbad 	bl	80069fc <__lshift>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4682      	mov	sl, r0
 80062a6:	f000 fc15 	bl	8006ad4 <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	dc03      	bgt.n	80062b6 <_dtoa_r+0xa96>
 80062ae:	d1e1      	bne.n	8006274 <_dtoa_r+0xa54>
 80062b0:	f019 0f01 	tst.w	r9, #1
 80062b4:	d0de      	beq.n	8006274 <_dtoa_r+0xa54>
 80062b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062ba:	d1d8      	bne.n	800626e <_dtoa_r+0xa4e>
 80062bc:	2339      	movs	r3, #57	; 0x39
 80062be:	9a04      	ldr	r2, [sp, #16]
 80062c0:	7013      	strb	r3, [r2, #0]
 80062c2:	463b      	mov	r3, r7
 80062c4:	461f      	mov	r7, r3
 80062c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2a39      	cmp	r2, #57	; 0x39
 80062ce:	d06b      	beq.n	80063a8 <_dtoa_r+0xb88>
 80062d0:	3201      	adds	r2, #1
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e74a      	b.n	800616c <_dtoa_r+0x94c>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	dd07      	ble.n	80062ea <_dtoa_r+0xaca>
 80062da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062de:	d0ed      	beq.n	80062bc <_dtoa_r+0xa9c>
 80062e0:	9a04      	ldr	r2, [sp, #16]
 80062e2:	f109 0301 	add.w	r3, r9, #1
 80062e6:	7013      	strb	r3, [r2, #0]
 80062e8:	e740      	b.n	800616c <_dtoa_r+0x94c>
 80062ea:	9b08      	ldr	r3, [sp, #32]
 80062ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d042      	beq.n	800637c <_dtoa_r+0xb5c>
 80062f6:	4651      	mov	r1, sl
 80062f8:	2300      	movs	r3, #0
 80062fa:	220a      	movs	r2, #10
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f9d1 	bl	80066a4 <__multadd>
 8006302:	45b0      	cmp	r8, r6
 8006304:	4682      	mov	sl, r0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	f04f 020a 	mov.w	r2, #10
 800630e:	4641      	mov	r1, r8
 8006310:	4628      	mov	r0, r5
 8006312:	d107      	bne.n	8006324 <_dtoa_r+0xb04>
 8006314:	f000 f9c6 	bl	80066a4 <__multadd>
 8006318:	4680      	mov	r8, r0
 800631a:	4606      	mov	r6, r0
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	3301      	adds	r3, #1
 8006320:	9308      	str	r3, [sp, #32]
 8006322:	e775      	b.n	8006210 <_dtoa_r+0x9f0>
 8006324:	f000 f9be 	bl	80066a4 <__multadd>
 8006328:	4631      	mov	r1, r6
 800632a:	4680      	mov	r8, r0
 800632c:	2300      	movs	r3, #0
 800632e:	220a      	movs	r2, #10
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f9b7 	bl	80066a4 <__multadd>
 8006336:	4606      	mov	r6, r0
 8006338:	e7f0      	b.n	800631c <_dtoa_r+0xafc>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	9306      	str	r3, [sp, #24]
 800633e:	9f03      	ldr	r7, [sp, #12]
 8006340:	4621      	mov	r1, r4
 8006342:	4650      	mov	r0, sl
 8006344:	f7ff f9e1 	bl	800570a <quorem>
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800634e:	f807 9b01 	strb.w	r9, [r7], #1
 8006352:	1afa      	subs	r2, r7, r3
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	4293      	cmp	r3, r2
 8006358:	dd07      	ble.n	800636a <_dtoa_r+0xb4a>
 800635a:	4651      	mov	r1, sl
 800635c:	2300      	movs	r3, #0
 800635e:	220a      	movs	r2, #10
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f99f 	bl	80066a4 <__multadd>
 8006366:	4682      	mov	sl, r0
 8006368:	e7ea      	b.n	8006340 <_dtoa_r+0xb20>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	f04f 0800 	mov.w	r8, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfcc      	ite	gt
 8006374:	461f      	movgt	r7, r3
 8006376:	2701      	movle	r7, #1
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	441f      	add	r7, r3
 800637c:	4651      	mov	r1, sl
 800637e:	2201      	movs	r2, #1
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fb3b 	bl	80069fc <__lshift>
 8006386:	4621      	mov	r1, r4
 8006388:	4682      	mov	sl, r0
 800638a:	f000 fba3 	bl	8006ad4 <__mcmp>
 800638e:	2800      	cmp	r0, #0
 8006390:	dc97      	bgt.n	80062c2 <_dtoa_r+0xaa2>
 8006392:	d102      	bne.n	800639a <_dtoa_r+0xb7a>
 8006394:	f019 0f01 	tst.w	r9, #1
 8006398:	d193      	bne.n	80062c2 <_dtoa_r+0xaa2>
 800639a:	463b      	mov	r3, r7
 800639c:	461f      	mov	r7, r3
 800639e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063a2:	2a30      	cmp	r2, #48	; 0x30
 80063a4:	d0fa      	beq.n	800639c <_dtoa_r+0xb7c>
 80063a6:	e6e1      	b.n	800616c <_dtoa_r+0x94c>
 80063a8:	9a03      	ldr	r2, [sp, #12]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d18a      	bne.n	80062c4 <_dtoa_r+0xaa4>
 80063ae:	2331      	movs	r3, #49	; 0x31
 80063b0:	f10b 0b01 	add.w	fp, fp, #1
 80063b4:	e797      	b.n	80062e6 <_dtoa_r+0xac6>
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <_dtoa_r+0xbc0>)
 80063b8:	f7ff ba9f 	b.w	80058fa <_dtoa_r+0xda>
 80063bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f47f aa77 	bne.w	80058b2 <_dtoa_r+0x92>
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <_dtoa_r+0xbc4>)
 80063c6:	f7ff ba98 	b.w	80058fa <_dtoa_r+0xda>
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dcb6      	bgt.n	800633e <_dtoa_r+0xb1e>
 80063d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f73f aeb5 	bgt.w	8006142 <_dtoa_r+0x922>
 80063d8:	e7b1      	b.n	800633e <_dtoa_r+0xb1e>
 80063da:	bf00      	nop
 80063dc:	080074d0 	.word	0x080074d0
 80063e0:	08007430 	.word	0x08007430
 80063e4:	08007454 	.word	0x08007454

080063e8 <_free_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	2900      	cmp	r1, #0
 80063ee:	d040      	beq.n	8006472 <_free_r+0x8a>
 80063f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f4:	1f0c      	subs	r4, r1, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfb8      	it	lt
 80063fa:	18e4      	addlt	r4, r4, r3
 80063fc:	f000 f8e4 	bl	80065c8 <__malloc_lock>
 8006400:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <_free_r+0x8c>)
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	b933      	cbnz	r3, 8006414 <_free_r+0x2c>
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006410:	f000 b8e0 	b.w	80065d4 <__malloc_unlock>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d908      	bls.n	800642a <_free_r+0x42>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	1821      	adds	r1, r4, r0
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1809      	addeq	r1, r1, r0
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	e7ed      	b.n	8006406 <_free_r+0x1e>
 800642a:	461a      	mov	r2, r3
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b10b      	cbz	r3, 8006434 <_free_r+0x4c>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x42>
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	1850      	adds	r0, r2, r1
 8006438:	42a0      	cmp	r0, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x6c>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4401      	add	r1, r0
 8006440:	1850      	adds	r0, r2, r1
 8006442:	4283      	cmp	r3, r0
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	d1e0      	bne.n	800640a <_free_r+0x22>
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4408      	add	r0, r1
 800644e:	6010      	str	r0, [r2, #0]
 8006450:	6053      	str	r3, [r2, #4]
 8006452:	e7da      	b.n	800640a <_free_r+0x22>
 8006454:	d902      	bls.n	800645c <_free_r+0x74>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d6      	b.n	800640a <_free_r+0x22>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6054      	str	r4, [r2, #4]
 8006470:	e7cb      	b.n	800640a <_free_r+0x22>
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2000054c 	.word	0x2000054c

08006478 <malloc>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <malloc+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f000 b823 	b.w	80064c8 <_malloc_r>
 8006482:	bf00      	nop
 8006484:	20000064 	.word	0x20000064

08006488 <sbrk_aligned>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0e      	ldr	r6, [pc, #56]	; (80064c4 <sbrk_aligned+0x3c>)
 800648c:	460c      	mov	r4, r1
 800648e:	6831      	ldr	r1, [r6, #0]
 8006490:	4605      	mov	r5, r0
 8006492:	b911      	cbnz	r1, 800649a <sbrk_aligned+0x12>
 8006494:	f000 fe8c 	bl	80071b0 <_sbrk_r>
 8006498:	6030      	str	r0, [r6, #0]
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f000 fe87 	bl	80071b0 <_sbrk_r>
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	d00a      	beq.n	80064bc <sbrk_aligned+0x34>
 80064a6:	1cc4      	adds	r4, r0, #3
 80064a8:	f024 0403 	bic.w	r4, r4, #3
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d007      	beq.n	80064c0 <sbrk_aligned+0x38>
 80064b0:	1a21      	subs	r1, r4, r0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 fe7c 	bl	80071b0 <_sbrk_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d101      	bne.n	80064c0 <sbrk_aligned+0x38>
 80064bc:	f04f 34ff 	mov.w	r4, #4294967295
 80064c0:	4620      	mov	r0, r4
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	20000550 	.word	0x20000550

080064c8 <_malloc_r>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	1ccd      	adds	r5, r1, #3
 80064ce:	f025 0503 	bic.w	r5, r5, #3
 80064d2:	3508      	adds	r5, #8
 80064d4:	2d0c      	cmp	r5, #12
 80064d6:	bf38      	it	cc
 80064d8:	250c      	movcc	r5, #12
 80064da:	2d00      	cmp	r5, #0
 80064dc:	4607      	mov	r7, r0
 80064de:	db01      	blt.n	80064e4 <_malloc_r+0x1c>
 80064e0:	42a9      	cmp	r1, r5
 80064e2:	d905      	bls.n	80064f0 <_malloc_r+0x28>
 80064e4:	230c      	movs	r3, #12
 80064e6:	2600      	movs	r6, #0
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	4630      	mov	r0, r6
 80064ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065c4 <_malloc_r+0xfc>
 80064f4:	f000 f868 	bl	80065c8 <__malloc_lock>
 80064f8:	f8d8 3000 	ldr.w	r3, [r8]
 80064fc:	461c      	mov	r4, r3
 80064fe:	bb5c      	cbnz	r4, 8006558 <_malloc_r+0x90>
 8006500:	4629      	mov	r1, r5
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ffc0 	bl	8006488 <sbrk_aligned>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	4604      	mov	r4, r0
 800650c:	d155      	bne.n	80065ba <_malloc_r+0xf2>
 800650e:	f8d8 4000 	ldr.w	r4, [r8]
 8006512:	4626      	mov	r6, r4
 8006514:	2e00      	cmp	r6, #0
 8006516:	d145      	bne.n	80065a4 <_malloc_r+0xdc>
 8006518:	2c00      	cmp	r4, #0
 800651a:	d048      	beq.n	80065ae <_malloc_r+0xe6>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	4631      	mov	r1, r6
 8006520:	4638      	mov	r0, r7
 8006522:	eb04 0903 	add.w	r9, r4, r3
 8006526:	f000 fe43 	bl	80071b0 <_sbrk_r>
 800652a:	4581      	cmp	r9, r0
 800652c:	d13f      	bne.n	80065ae <_malloc_r+0xe6>
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	4638      	mov	r0, r7
 8006532:	1a6d      	subs	r5, r5, r1
 8006534:	4629      	mov	r1, r5
 8006536:	f7ff ffa7 	bl	8006488 <sbrk_aligned>
 800653a:	3001      	adds	r0, #1
 800653c:	d037      	beq.n	80065ae <_malloc_r+0xe6>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	442b      	add	r3, r5
 8006542:	6023      	str	r3, [r4, #0]
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d038      	beq.n	80065be <_malloc_r+0xf6>
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	42a2      	cmp	r2, r4
 8006550:	d12b      	bne.n	80065aa <_malloc_r+0xe2>
 8006552:	2200      	movs	r2, #0
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	e00f      	b.n	8006578 <_malloc_r+0xb0>
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	1b52      	subs	r2, r2, r5
 800655c:	d41f      	bmi.n	800659e <_malloc_r+0xd6>
 800655e:	2a0b      	cmp	r2, #11
 8006560:	d917      	bls.n	8006592 <_malloc_r+0xca>
 8006562:	1961      	adds	r1, r4, r5
 8006564:	42a3      	cmp	r3, r4
 8006566:	6025      	str	r5, [r4, #0]
 8006568:	bf18      	it	ne
 800656a:	6059      	strne	r1, [r3, #4]
 800656c:	6863      	ldr	r3, [r4, #4]
 800656e:	bf08      	it	eq
 8006570:	f8c8 1000 	streq.w	r1, [r8]
 8006574:	5162      	str	r2, [r4, r5]
 8006576:	604b      	str	r3, [r1, #4]
 8006578:	4638      	mov	r0, r7
 800657a:	f104 060b 	add.w	r6, r4, #11
 800657e:	f000 f829 	bl	80065d4 <__malloc_unlock>
 8006582:	f026 0607 	bic.w	r6, r6, #7
 8006586:	1d23      	adds	r3, r4, #4
 8006588:	1af2      	subs	r2, r6, r3
 800658a:	d0ae      	beq.n	80064ea <_malloc_r+0x22>
 800658c:	1b9b      	subs	r3, r3, r6
 800658e:	50a3      	str	r3, [r4, r2]
 8006590:	e7ab      	b.n	80064ea <_malloc_r+0x22>
 8006592:	42a3      	cmp	r3, r4
 8006594:	6862      	ldr	r2, [r4, #4]
 8006596:	d1dd      	bne.n	8006554 <_malloc_r+0x8c>
 8006598:	f8c8 2000 	str.w	r2, [r8]
 800659c:	e7ec      	b.n	8006578 <_malloc_r+0xb0>
 800659e:	4623      	mov	r3, r4
 80065a0:	6864      	ldr	r4, [r4, #4]
 80065a2:	e7ac      	b.n	80064fe <_malloc_r+0x36>
 80065a4:	4634      	mov	r4, r6
 80065a6:	6876      	ldr	r6, [r6, #4]
 80065a8:	e7b4      	b.n	8006514 <_malloc_r+0x4c>
 80065aa:	4613      	mov	r3, r2
 80065ac:	e7cc      	b.n	8006548 <_malloc_r+0x80>
 80065ae:	230c      	movs	r3, #12
 80065b0:	4638      	mov	r0, r7
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	f000 f80e 	bl	80065d4 <__malloc_unlock>
 80065b8:	e797      	b.n	80064ea <_malloc_r+0x22>
 80065ba:	6025      	str	r5, [r4, #0]
 80065bc:	e7dc      	b.n	8006578 <_malloc_r+0xb0>
 80065be:	605b      	str	r3, [r3, #4]
 80065c0:	deff      	udf	#255	; 0xff
 80065c2:	bf00      	nop
 80065c4:	2000054c 	.word	0x2000054c

080065c8 <__malloc_lock>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__malloc_lock+0x8>)
 80065ca:	f7ff b88e 	b.w	80056ea <__retarget_lock_acquire_recursive>
 80065ce:	bf00      	nop
 80065d0:	20000548 	.word	0x20000548

080065d4 <__malloc_unlock>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__malloc_unlock+0x8>)
 80065d6:	f7ff b889 	b.w	80056ec <__retarget_lock_release_recursive>
 80065da:	bf00      	nop
 80065dc:	20000548 	.word	0x20000548

080065e0 <_Balloc>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	69c6      	ldr	r6, [r0, #28]
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	b976      	cbnz	r6, 8006608 <_Balloc+0x28>
 80065ea:	2010      	movs	r0, #16
 80065ec:	f7ff ff44 	bl	8006478 <malloc>
 80065f0:	4602      	mov	r2, r0
 80065f2:	61e0      	str	r0, [r4, #28]
 80065f4:	b920      	cbnz	r0, 8006600 <_Balloc+0x20>
 80065f6:	216b      	movs	r1, #107	; 0x6b
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <_Balloc+0x78>)
 80065fa:	4818      	ldr	r0, [pc, #96]	; (800665c <_Balloc+0x7c>)
 80065fc:	f000 fdf6 	bl	80071ec <__assert_func>
 8006600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006604:	6006      	str	r6, [r0, #0]
 8006606:	60c6      	str	r6, [r0, #12]
 8006608:	69e6      	ldr	r6, [r4, #28]
 800660a:	68f3      	ldr	r3, [r6, #12]
 800660c:	b183      	cbz	r3, 8006630 <_Balloc+0x50>
 800660e:	69e3      	ldr	r3, [r4, #28]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006616:	b9b8      	cbnz	r0, 8006648 <_Balloc+0x68>
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f605 	lsl.w	r6, r1, r5
 800661e:	1d72      	adds	r2, r6, #5
 8006620:	4620      	mov	r0, r4
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	f000 fe00 	bl	8007228 <_calloc_r>
 8006628:	b160      	cbz	r0, 8006644 <_Balloc+0x64>
 800662a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800662e:	e00e      	b.n	800664e <_Balloc+0x6e>
 8006630:	2221      	movs	r2, #33	; 0x21
 8006632:	2104      	movs	r1, #4
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fdf7 	bl	8007228 <_calloc_r>
 800663a:	69e3      	ldr	r3, [r4, #28]
 800663c:	60f0      	str	r0, [r6, #12]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e4      	bne.n	800660e <_Balloc+0x2e>
 8006644:	2000      	movs	r0, #0
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	6802      	ldr	r2, [r0, #0]
 800664a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800664e:	2300      	movs	r3, #0
 8006650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006654:	e7f7      	b.n	8006646 <_Balloc+0x66>
 8006656:	bf00      	nop
 8006658:	08007461 	.word	0x08007461
 800665c:	080074e1 	.word	0x080074e1

08006660 <_Bfree>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	69c6      	ldr	r6, [r0, #28]
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	b976      	cbnz	r6, 8006688 <_Bfree+0x28>
 800666a:	2010      	movs	r0, #16
 800666c:	f7ff ff04 	bl	8006478 <malloc>
 8006670:	4602      	mov	r2, r0
 8006672:	61e8      	str	r0, [r5, #28]
 8006674:	b920      	cbnz	r0, 8006680 <_Bfree+0x20>
 8006676:	218f      	movs	r1, #143	; 0x8f
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <_Bfree+0x3c>)
 800667a:	4809      	ldr	r0, [pc, #36]	; (80066a0 <_Bfree+0x40>)
 800667c:	f000 fdb6 	bl	80071ec <__assert_func>
 8006680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006684:	6006      	str	r6, [r0, #0]
 8006686:	60c6      	str	r6, [r0, #12]
 8006688:	b13c      	cbz	r4, 800669a <_Bfree+0x3a>
 800668a:	69eb      	ldr	r3, [r5, #28]
 800668c:	6862      	ldr	r2, [r4, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006694:	6021      	str	r1, [r4, #0]
 8006696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	08007461 	.word	0x08007461
 80066a0:	080074e1 	.word	0x080074e1

080066a4 <__multadd>:
 80066a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	461e      	mov	r6, r3
 80066ae:	2000      	movs	r0, #0
 80066b0:	690d      	ldr	r5, [r1, #16]
 80066b2:	f101 0c14 	add.w	ip, r1, #20
 80066b6:	f8dc 3000 	ldr.w	r3, [ip]
 80066ba:	3001      	adds	r0, #1
 80066bc:	b299      	uxth	r1, r3
 80066be:	fb02 6101 	mla	r1, r2, r1, r6
 80066c2:	0c1e      	lsrs	r6, r3, #16
 80066c4:	0c0b      	lsrs	r3, r1, #16
 80066c6:	fb02 3306 	mla	r3, r2, r6, r3
 80066ca:	b289      	uxth	r1, r1
 80066cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066d0:	4285      	cmp	r5, r0
 80066d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066d6:	f84c 1b04 	str.w	r1, [ip], #4
 80066da:	dcec      	bgt.n	80066b6 <__multadd+0x12>
 80066dc:	b30e      	cbz	r6, 8006722 <__multadd+0x7e>
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc19      	bgt.n	8006718 <__multadd+0x74>
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4638      	mov	r0, r7
 80066e8:	3101      	adds	r1, #1
 80066ea:	f7ff ff79 	bl	80065e0 <_Balloc>
 80066ee:	4680      	mov	r8, r0
 80066f0:	b928      	cbnz	r0, 80066fe <__multadd+0x5a>
 80066f2:	4602      	mov	r2, r0
 80066f4:	21ba      	movs	r1, #186	; 0xba
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <__multadd+0x84>)
 80066f8:	480c      	ldr	r0, [pc, #48]	; (800672c <__multadd+0x88>)
 80066fa:	f000 fd77 	bl	80071ec <__assert_func>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	f104 010c 	add.w	r1, r4, #12
 8006704:	3202      	adds	r2, #2
 8006706:	0092      	lsls	r2, r2, #2
 8006708:	300c      	adds	r0, #12
 800670a:	f000 fd61 	bl	80071d0 <memcpy>
 800670e:	4621      	mov	r1, r4
 8006710:	4638      	mov	r0, r7
 8006712:	f7ff ffa5 	bl	8006660 <_Bfree>
 8006716:	4644      	mov	r4, r8
 8006718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800671c:	3501      	adds	r5, #1
 800671e:	615e      	str	r6, [r3, #20]
 8006720:	6125      	str	r5, [r4, #16]
 8006722:	4620      	mov	r0, r4
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	080074d0 	.word	0x080074d0
 800672c:	080074e1 	.word	0x080074e1

08006730 <__hi0bits>:
 8006730:	0c02      	lsrs	r2, r0, #16
 8006732:	0412      	lsls	r2, r2, #16
 8006734:	4603      	mov	r3, r0
 8006736:	b9ca      	cbnz	r2, 800676c <__hi0bits+0x3c>
 8006738:	0403      	lsls	r3, r0, #16
 800673a:	2010      	movs	r0, #16
 800673c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006740:	bf04      	itt	eq
 8006742:	021b      	lsleq	r3, r3, #8
 8006744:	3008      	addeq	r0, #8
 8006746:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800674a:	bf04      	itt	eq
 800674c:	011b      	lsleq	r3, r3, #4
 800674e:	3004      	addeq	r0, #4
 8006750:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006754:	bf04      	itt	eq
 8006756:	009b      	lsleq	r3, r3, #2
 8006758:	3002      	addeq	r0, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	db05      	blt.n	800676a <__hi0bits+0x3a>
 800675e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006762:	f100 0001 	add.w	r0, r0, #1
 8006766:	bf08      	it	eq
 8006768:	2020      	moveq	r0, #32
 800676a:	4770      	bx	lr
 800676c:	2000      	movs	r0, #0
 800676e:	e7e5      	b.n	800673c <__hi0bits+0xc>

08006770 <__lo0bits>:
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	4602      	mov	r2, r0
 8006774:	f013 0007 	ands.w	r0, r3, #7
 8006778:	d00b      	beq.n	8006792 <__lo0bits+0x22>
 800677a:	07d9      	lsls	r1, r3, #31
 800677c:	d421      	bmi.n	80067c2 <__lo0bits+0x52>
 800677e:	0798      	lsls	r0, r3, #30
 8006780:	bf49      	itett	mi
 8006782:	085b      	lsrmi	r3, r3, #1
 8006784:	089b      	lsrpl	r3, r3, #2
 8006786:	2001      	movmi	r0, #1
 8006788:	6013      	strmi	r3, [r2, #0]
 800678a:	bf5c      	itt	pl
 800678c:	2002      	movpl	r0, #2
 800678e:	6013      	strpl	r3, [r2, #0]
 8006790:	4770      	bx	lr
 8006792:	b299      	uxth	r1, r3
 8006794:	b909      	cbnz	r1, 800679a <__lo0bits+0x2a>
 8006796:	2010      	movs	r0, #16
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	b2d9      	uxtb	r1, r3
 800679c:	b909      	cbnz	r1, 80067a2 <__lo0bits+0x32>
 800679e:	3008      	adds	r0, #8
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	0719      	lsls	r1, r3, #28
 80067a4:	bf04      	itt	eq
 80067a6:	091b      	lsreq	r3, r3, #4
 80067a8:	3004      	addeq	r0, #4
 80067aa:	0799      	lsls	r1, r3, #30
 80067ac:	bf04      	itt	eq
 80067ae:	089b      	lsreq	r3, r3, #2
 80067b0:	3002      	addeq	r0, #2
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d403      	bmi.n	80067be <__lo0bits+0x4e>
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f100 0001 	add.w	r0, r0, #1
 80067bc:	d003      	beq.n	80067c6 <__lo0bits+0x56>
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4770      	bx	lr
 80067c2:	2000      	movs	r0, #0
 80067c4:	4770      	bx	lr
 80067c6:	2020      	movs	r0, #32
 80067c8:	4770      	bx	lr
	...

080067cc <__i2b>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	2101      	movs	r1, #1
 80067d2:	f7ff ff05 	bl	80065e0 <_Balloc>
 80067d6:	4602      	mov	r2, r0
 80067d8:	b928      	cbnz	r0, 80067e6 <__i2b+0x1a>
 80067da:	f240 1145 	movw	r1, #325	; 0x145
 80067de:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <__i2b+0x24>)
 80067e0:	4804      	ldr	r0, [pc, #16]	; (80067f4 <__i2b+0x28>)
 80067e2:	f000 fd03 	bl	80071ec <__assert_func>
 80067e6:	2301      	movs	r3, #1
 80067e8:	6144      	str	r4, [r0, #20]
 80067ea:	6103      	str	r3, [r0, #16]
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	bf00      	nop
 80067f0:	080074d0 	.word	0x080074d0
 80067f4:	080074e1 	.word	0x080074e1

080067f8 <__multiply>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4691      	mov	r9, r2
 80067fe:	690a      	ldr	r2, [r1, #16]
 8006800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006804:	460c      	mov	r4, r1
 8006806:	429a      	cmp	r2, r3
 8006808:	bfbe      	ittt	lt
 800680a:	460b      	movlt	r3, r1
 800680c:	464c      	movlt	r4, r9
 800680e:	4699      	movlt	r9, r3
 8006810:	6927      	ldr	r7, [r4, #16]
 8006812:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	eb07 060a 	add.w	r6, r7, sl
 800681e:	42b3      	cmp	r3, r6
 8006820:	b085      	sub	sp, #20
 8006822:	bfb8      	it	lt
 8006824:	3101      	addlt	r1, #1
 8006826:	f7ff fedb 	bl	80065e0 <_Balloc>
 800682a:	b930      	cbnz	r0, 800683a <__multiply+0x42>
 800682c:	4602      	mov	r2, r0
 800682e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <__multiply+0x148>)
 8006834:	4843      	ldr	r0, [pc, #268]	; (8006944 <__multiply+0x14c>)
 8006836:	f000 fcd9 	bl	80071ec <__assert_func>
 800683a:	f100 0514 	add.w	r5, r0, #20
 800683e:	462b      	mov	r3, r5
 8006840:	2200      	movs	r2, #0
 8006842:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006846:	4543      	cmp	r3, r8
 8006848:	d321      	bcc.n	800688e <__multiply+0x96>
 800684a:	f104 0314 	add.w	r3, r4, #20
 800684e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006852:	f109 0314 	add.w	r3, r9, #20
 8006856:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800685a:	9202      	str	r2, [sp, #8]
 800685c:	1b3a      	subs	r2, r7, r4
 800685e:	3a15      	subs	r2, #21
 8006860:	f022 0203 	bic.w	r2, r2, #3
 8006864:	3204      	adds	r2, #4
 8006866:	f104 0115 	add.w	r1, r4, #21
 800686a:	428f      	cmp	r7, r1
 800686c:	bf38      	it	cc
 800686e:	2204      	movcc	r2, #4
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9a02      	ldr	r2, [sp, #8]
 8006874:	9303      	str	r3, [sp, #12]
 8006876:	429a      	cmp	r2, r3
 8006878:	d80c      	bhi.n	8006894 <__multiply+0x9c>
 800687a:	2e00      	cmp	r6, #0
 800687c:	dd03      	ble.n	8006886 <__multiply+0x8e>
 800687e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05a      	beq.n	800693c <__multiply+0x144>
 8006886:	6106      	str	r6, [r0, #16]
 8006888:	b005      	add	sp, #20
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	f843 2b04 	str.w	r2, [r3], #4
 8006892:	e7d8      	b.n	8006846 <__multiply+0x4e>
 8006894:	f8b3 a000 	ldrh.w	sl, [r3]
 8006898:	f1ba 0f00 	cmp.w	sl, #0
 800689c:	d023      	beq.n	80068e6 <__multiply+0xee>
 800689e:	46a9      	mov	r9, r5
 80068a0:	f04f 0c00 	mov.w	ip, #0
 80068a4:	f104 0e14 	add.w	lr, r4, #20
 80068a8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068ac:	f8d9 1000 	ldr.w	r1, [r9]
 80068b0:	fa1f fb82 	uxth.w	fp, r2
 80068b4:	b289      	uxth	r1, r1
 80068b6:	fb0a 110b 	mla	r1, sl, fp, r1
 80068ba:	4461      	add	r1, ip
 80068bc:	f8d9 c000 	ldr.w	ip, [r9]
 80068c0:	0c12      	lsrs	r2, r2, #16
 80068c2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80068c6:	fb0a c202 	mla	r2, sl, r2, ip
 80068ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068ce:	b289      	uxth	r1, r1
 80068d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80068d4:	4577      	cmp	r7, lr
 80068d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80068da:	f849 1b04 	str.w	r1, [r9], #4
 80068de:	d8e3      	bhi.n	80068a8 <__multiply+0xb0>
 80068e0:	9a01      	ldr	r2, [sp, #4]
 80068e2:	f845 c002 	str.w	ip, [r5, r2]
 80068e6:	9a03      	ldr	r2, [sp, #12]
 80068e8:	3304      	adds	r3, #4
 80068ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068ee:	f1b9 0f00 	cmp.w	r9, #0
 80068f2:	d021      	beq.n	8006938 <__multiply+0x140>
 80068f4:	46ae      	mov	lr, r5
 80068f6:	f04f 0a00 	mov.w	sl, #0
 80068fa:	6829      	ldr	r1, [r5, #0]
 80068fc:	f104 0c14 	add.w	ip, r4, #20
 8006900:	f8bc b000 	ldrh.w	fp, [ip]
 8006904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006908:	b289      	uxth	r1, r1
 800690a:	fb09 220b 	mla	r2, r9, fp, r2
 800690e:	4452      	add	r2, sl
 8006910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006914:	f84e 1b04 	str.w	r1, [lr], #4
 8006918:	f85c 1b04 	ldr.w	r1, [ip], #4
 800691c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006920:	f8be 1000 	ldrh.w	r1, [lr]
 8006924:	4567      	cmp	r7, ip
 8006926:	fb09 110a 	mla	r1, r9, sl, r1
 800692a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800692e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006932:	d8e5      	bhi.n	8006900 <__multiply+0x108>
 8006934:	9a01      	ldr	r2, [sp, #4]
 8006936:	50a9      	str	r1, [r5, r2]
 8006938:	3504      	adds	r5, #4
 800693a:	e79a      	b.n	8006872 <__multiply+0x7a>
 800693c:	3e01      	subs	r6, #1
 800693e:	e79c      	b.n	800687a <__multiply+0x82>
 8006940:	080074d0 	.word	0x080074d0
 8006944:	080074e1 	.word	0x080074e1

08006948 <__pow5mult>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4615      	mov	r5, r2
 800694e:	f012 0203 	ands.w	r2, r2, #3
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	d007      	beq.n	8006968 <__pow5mult+0x20>
 8006958:	4c25      	ldr	r4, [pc, #148]	; (80069f0 <__pow5mult+0xa8>)
 800695a:	3a01      	subs	r2, #1
 800695c:	2300      	movs	r3, #0
 800695e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006962:	f7ff fe9f 	bl	80066a4 <__multadd>
 8006966:	4607      	mov	r7, r0
 8006968:	10ad      	asrs	r5, r5, #2
 800696a:	d03d      	beq.n	80069e8 <__pow5mult+0xa0>
 800696c:	69f4      	ldr	r4, [r6, #28]
 800696e:	b97c      	cbnz	r4, 8006990 <__pow5mult+0x48>
 8006970:	2010      	movs	r0, #16
 8006972:	f7ff fd81 	bl	8006478 <malloc>
 8006976:	4602      	mov	r2, r0
 8006978:	61f0      	str	r0, [r6, #28]
 800697a:	b928      	cbnz	r0, 8006988 <__pow5mult+0x40>
 800697c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <__pow5mult+0xac>)
 8006982:	481d      	ldr	r0, [pc, #116]	; (80069f8 <__pow5mult+0xb0>)
 8006984:	f000 fc32 	bl	80071ec <__assert_func>
 8006988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800698c:	6004      	str	r4, [r0, #0]
 800698e:	60c4      	str	r4, [r0, #12]
 8006990:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006998:	b94c      	cbnz	r4, 80069ae <__pow5mult+0x66>
 800699a:	f240 2171 	movw	r1, #625	; 0x271
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ff14 	bl	80067cc <__i2b>
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	f04f 0900 	mov.w	r9, #0
 80069b2:	07eb      	lsls	r3, r5, #31
 80069b4:	d50a      	bpl.n	80069cc <__pow5mult+0x84>
 80069b6:	4639      	mov	r1, r7
 80069b8:	4622      	mov	r2, r4
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff1c 	bl	80067f8 <__multiply>
 80069c0:	4680      	mov	r8, r0
 80069c2:	4639      	mov	r1, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff fe4b 	bl	8006660 <_Bfree>
 80069ca:	4647      	mov	r7, r8
 80069cc:	106d      	asrs	r5, r5, #1
 80069ce:	d00b      	beq.n	80069e8 <__pow5mult+0xa0>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	b938      	cbnz	r0, 80069e4 <__pow5mult+0x9c>
 80069d4:	4622      	mov	r2, r4
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff ff0d 	bl	80067f8 <__multiply>
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	f8c0 9000 	str.w	r9, [r0]
 80069e4:	4604      	mov	r4, r0
 80069e6:	e7e4      	b.n	80069b2 <__pow5mult+0x6a>
 80069e8:	4638      	mov	r0, r7
 80069ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ee:	bf00      	nop
 80069f0:	08007630 	.word	0x08007630
 80069f4:	08007461 	.word	0x08007461
 80069f8:	080074e1 	.word	0x080074e1

080069fc <__lshift>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	4607      	mov	r7, r0
 8006a04:	4691      	mov	r9, r2
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	6849      	ldr	r1, [r1, #4]
 8006a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a14:	f108 0601 	add.w	r6, r8, #1
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	db0b      	blt.n	8006a34 <__lshift+0x38>
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff fddf 	bl	80065e0 <_Balloc>
 8006a22:	4605      	mov	r5, r0
 8006a24:	b948      	cbnz	r0, 8006a3a <__lshift+0x3e>
 8006a26:	4602      	mov	r2, r0
 8006a28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a2c:	4b27      	ldr	r3, [pc, #156]	; (8006acc <__lshift+0xd0>)
 8006a2e:	4828      	ldr	r0, [pc, #160]	; (8006ad0 <__lshift+0xd4>)
 8006a30:	f000 fbdc 	bl	80071ec <__assert_func>
 8006a34:	3101      	adds	r1, #1
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	e7ee      	b.n	8006a18 <__lshift+0x1c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f100 0114 	add.w	r1, r0, #20
 8006a40:	f100 0210 	add.w	r2, r0, #16
 8006a44:	4618      	mov	r0, r3
 8006a46:	4553      	cmp	r3, sl
 8006a48:	db33      	blt.n	8006ab2 <__lshift+0xb6>
 8006a4a:	6920      	ldr	r0, [r4, #16]
 8006a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a50:	f104 0314 	add.w	r3, r4, #20
 8006a54:	f019 091f 	ands.w	r9, r9, #31
 8006a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a60:	d02b      	beq.n	8006aba <__lshift+0xbe>
 8006a62:	468a      	mov	sl, r1
 8006a64:	2200      	movs	r2, #0
 8006a66:	f1c9 0e20 	rsb	lr, r9, #32
 8006a6a:	6818      	ldr	r0, [r3, #0]
 8006a6c:	fa00 f009 	lsl.w	r0, r0, r9
 8006a70:	4310      	orrs	r0, r2
 8006a72:	f84a 0b04 	str.w	r0, [sl], #4
 8006a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a7a:	459c      	cmp	ip, r3
 8006a7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a80:	d8f3      	bhi.n	8006a6a <__lshift+0x6e>
 8006a82:	ebac 0304 	sub.w	r3, ip, r4
 8006a86:	3b15      	subs	r3, #21
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	f104 0015 	add.w	r0, r4, #21
 8006a92:	4584      	cmp	ip, r0
 8006a94:	bf38      	it	cc
 8006a96:	2304      	movcc	r3, #4
 8006a98:	50ca      	str	r2, [r1, r3]
 8006a9a:	b10a      	cbz	r2, 8006aa0 <__lshift+0xa4>
 8006a9c:	f108 0602 	add.w	r6, r8, #2
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	612e      	str	r6, [r5, #16]
 8006aa8:	f7ff fdda 	bl	8006660 <_Bfree>
 8006aac:	4628      	mov	r0, r5
 8006aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	e7c5      	b.n	8006a46 <__lshift+0x4a>
 8006aba:	3904      	subs	r1, #4
 8006abc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac0:	459c      	cmp	ip, r3
 8006ac2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ac6:	d8f9      	bhi.n	8006abc <__lshift+0xc0>
 8006ac8:	e7ea      	b.n	8006aa0 <__lshift+0xa4>
 8006aca:	bf00      	nop
 8006acc:	080074d0 	.word	0x080074d0
 8006ad0:	080074e1 	.word	0x080074e1

08006ad4 <__mcmp>:
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	690a      	ldr	r2, [r1, #16]
 8006ad8:	6900      	ldr	r0, [r0, #16]
 8006ada:	b530      	push	{r4, r5, lr}
 8006adc:	1a80      	subs	r0, r0, r2
 8006ade:	d10d      	bne.n	8006afc <__mcmp+0x28>
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	3114      	adds	r1, #20
 8006ae4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006aec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006af0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006af4:	4295      	cmp	r5, r2
 8006af6:	d002      	beq.n	8006afe <__mcmp+0x2a>
 8006af8:	d304      	bcc.n	8006b04 <__mcmp+0x30>
 8006afa:	2001      	movs	r0, #1
 8006afc:	bd30      	pop	{r4, r5, pc}
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	d3f4      	bcc.n	8006aec <__mcmp+0x18>
 8006b02:	e7fb      	b.n	8006afc <__mcmp+0x28>
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e7f8      	b.n	8006afc <__mcmp+0x28>
	...

08006b0c <__mdiff>:
 8006b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	460d      	mov	r5, r1
 8006b12:	4607      	mov	r7, r0
 8006b14:	4611      	mov	r1, r2
 8006b16:	4628      	mov	r0, r5
 8006b18:	4614      	mov	r4, r2
 8006b1a:	f7ff ffdb 	bl	8006ad4 <__mcmp>
 8006b1e:	1e06      	subs	r6, r0, #0
 8006b20:	d111      	bne.n	8006b46 <__mdiff+0x3a>
 8006b22:	4631      	mov	r1, r6
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff fd5b 	bl	80065e0 <_Balloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__mdiff+0x2e>
 8006b2e:	f240 2137 	movw	r1, #567	; 0x237
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <__mdiff+0x110>)
 8006b34:	483a      	ldr	r0, [pc, #232]	; (8006c20 <__mdiff+0x114>)
 8006b36:	f000 fb59 	bl	80071ec <__assert_func>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b40:	4610      	mov	r0, r2
 8006b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	bfa4      	itt	ge
 8006b48:	4623      	movge	r3, r4
 8006b4a:	462c      	movge	r4, r5
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	6861      	ldr	r1, [r4, #4]
 8006b50:	bfa6      	itte	ge
 8006b52:	461d      	movge	r5, r3
 8006b54:	2600      	movge	r6, #0
 8006b56:	2601      	movlt	r6, #1
 8006b58:	f7ff fd42 	bl	80065e0 <_Balloc>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	b918      	cbnz	r0, 8006b68 <__mdiff+0x5c>
 8006b60:	f240 2145 	movw	r1, #581	; 0x245
 8006b64:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <__mdiff+0x110>)
 8006b66:	e7e5      	b.n	8006b34 <__mdiff+0x28>
 8006b68:	f102 0814 	add.w	r8, r2, #20
 8006b6c:	46c2      	mov	sl, r8
 8006b6e:	f04f 0c00 	mov.w	ip, #0
 8006b72:	6927      	ldr	r7, [r4, #16]
 8006b74:	60c6      	str	r6, [r0, #12]
 8006b76:	692e      	ldr	r6, [r5, #16]
 8006b78:	f104 0014 	add.w	r0, r4, #20
 8006b7c:	f105 0914 	add.w	r9, r5, #20
 8006b80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006b84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b88:	3410      	adds	r4, #16
 8006b8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006b8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b92:	fa1f f18b 	uxth.w	r1, fp
 8006b96:	4461      	add	r1, ip
 8006b98:	fa1f fc83 	uxth.w	ip, r3
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	eba1 010c 	sub.w	r1, r1, ip
 8006ba2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ba6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006baa:	b289      	uxth	r1, r1
 8006bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006bb0:	454e      	cmp	r6, r9
 8006bb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bb6:	f84a 1b04 	str.w	r1, [sl], #4
 8006bba:	d8e6      	bhi.n	8006b8a <__mdiff+0x7e>
 8006bbc:	1b73      	subs	r3, r6, r5
 8006bbe:	3b15      	subs	r3, #21
 8006bc0:	f023 0303 	bic.w	r3, r3, #3
 8006bc4:	3515      	adds	r5, #21
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	42ae      	cmp	r6, r5
 8006bca:	bf38      	it	cc
 8006bcc:	2304      	movcc	r3, #4
 8006bce:	4418      	add	r0, r3
 8006bd0:	4443      	add	r3, r8
 8006bd2:	461e      	mov	r6, r3
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	4575      	cmp	r5, lr
 8006bd8:	d30e      	bcc.n	8006bf8 <__mdiff+0xec>
 8006bda:	f10e 0103 	add.w	r1, lr, #3
 8006bde:	1a09      	subs	r1, r1, r0
 8006be0:	f021 0103 	bic.w	r1, r1, #3
 8006be4:	3803      	subs	r0, #3
 8006be6:	4586      	cmp	lr, r0
 8006be8:	bf38      	it	cc
 8006bea:	2100      	movcc	r1, #0
 8006bec:	440b      	add	r3, r1
 8006bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bf2:	b189      	cbz	r1, 8006c18 <__mdiff+0x10c>
 8006bf4:	6117      	str	r7, [r2, #16]
 8006bf6:	e7a3      	b.n	8006b40 <__mdiff+0x34>
 8006bf8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006bfc:	fa1f f188 	uxth.w	r1, r8
 8006c00:	4461      	add	r1, ip
 8006c02:	140c      	asrs	r4, r1, #16
 8006c04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c08:	b289      	uxth	r1, r1
 8006c0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c0e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c12:	f846 1b04 	str.w	r1, [r6], #4
 8006c16:	e7de      	b.n	8006bd6 <__mdiff+0xca>
 8006c18:	3f01      	subs	r7, #1
 8006c1a:	e7e8      	b.n	8006bee <__mdiff+0xe2>
 8006c1c:	080074d0 	.word	0x080074d0
 8006c20:	080074e1 	.word	0x080074e1

08006c24 <__d2b>:
 8006c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c26:	2101      	movs	r1, #1
 8006c28:	4617      	mov	r7, r2
 8006c2a:	461c      	mov	r4, r3
 8006c2c:	9e08      	ldr	r6, [sp, #32]
 8006c2e:	f7ff fcd7 	bl	80065e0 <_Balloc>
 8006c32:	4605      	mov	r5, r0
 8006c34:	b930      	cbnz	r0, 8006c44 <__d2b+0x20>
 8006c36:	4602      	mov	r2, r0
 8006c38:	f240 310f 	movw	r1, #783	; 0x30f
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <__d2b+0xa4>)
 8006c3e:	4823      	ldr	r0, [pc, #140]	; (8006ccc <__d2b+0xa8>)
 8006c40:	f000 fad4 	bl	80071ec <__assert_func>
 8006c44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006c48:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006c4c:	bb24      	cbnz	r4, 8006c98 <__d2b+0x74>
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	d026      	beq.n	8006ca2 <__d2b+0x7e>
 8006c54:	4668      	mov	r0, sp
 8006c56:	9700      	str	r7, [sp, #0]
 8006c58:	f7ff fd8a 	bl	8006770 <__lo0bits>
 8006c5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c60:	b1e8      	cbz	r0, 8006c9e <__d2b+0x7a>
 8006c62:	f1c0 0320 	rsb	r3, r0, #32
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	40c2      	lsrs	r2, r0
 8006c6e:	616b      	str	r3, [r5, #20]
 8006c70:	9201      	str	r2, [sp, #4]
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2102      	movne	r1, #2
 8006c7a:	2101      	moveq	r1, #1
 8006c7c:	61ab      	str	r3, [r5, #24]
 8006c7e:	6129      	str	r1, [r5, #16]
 8006c80:	b1bc      	cbz	r4, 8006cb2 <__d2b+0x8e>
 8006c82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c86:	4404      	add	r4, r0
 8006c88:	6034      	str	r4, [r6, #0]
 8006c8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	6018      	str	r0, [r3, #0]
 8006c92:	4628      	mov	r0, r5
 8006c94:	b003      	add	sp, #12
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9c:	e7d7      	b.n	8006c4e <__d2b+0x2a>
 8006c9e:	6169      	str	r1, [r5, #20]
 8006ca0:	e7e7      	b.n	8006c72 <__d2b+0x4e>
 8006ca2:	a801      	add	r0, sp, #4
 8006ca4:	f7ff fd64 	bl	8006770 <__lo0bits>
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	2101      	movs	r1, #1
 8006cac:	616b      	str	r3, [r5, #20]
 8006cae:	3020      	adds	r0, #32
 8006cb0:	e7e5      	b.n	8006c7e <__d2b+0x5a>
 8006cb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006cb6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006cba:	6030      	str	r0, [r6, #0]
 8006cbc:	6918      	ldr	r0, [r3, #16]
 8006cbe:	f7ff fd37 	bl	8006730 <__hi0bits>
 8006cc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006cc6:	e7e2      	b.n	8006c8e <__d2b+0x6a>
 8006cc8:	080074d0 	.word	0x080074d0
 8006ccc:	080074e1 	.word	0x080074e1

08006cd0 <__sfputc_r>:
 8006cd0:	6893      	ldr	r3, [r2, #8]
 8006cd2:	b410      	push	{r4}
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	6093      	str	r3, [r2, #8]
 8006cda:	da07      	bge.n	8006cec <__sfputc_r+0x1c>
 8006cdc:	6994      	ldr	r4, [r2, #24]
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	db01      	blt.n	8006ce6 <__sfputc_r+0x16>
 8006ce2:	290a      	cmp	r1, #10
 8006ce4:	d102      	bne.n	8006cec <__sfputc_r+0x1c>
 8006ce6:	bc10      	pop	{r4}
 8006ce8:	f7fe bbed 	b.w	80054c6 <__swbuf_r>
 8006cec:	6813      	ldr	r3, [r2, #0]
 8006cee:	1c58      	adds	r0, r3, #1
 8006cf0:	6010      	str	r0, [r2, #0]
 8006cf2:	7019      	strb	r1, [r3, #0]
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	bc10      	pop	{r4}
 8006cf8:	4770      	bx	lr

08006cfa <__sfputs_r>:
 8006cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	4614      	mov	r4, r2
 8006d02:	18d5      	adds	r5, r2, r3
 8006d04:	42ac      	cmp	r4, r5
 8006d06:	d101      	bne.n	8006d0c <__sfputs_r+0x12>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e007      	b.n	8006d1c <__sfputs_r+0x22>
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d14:	f7ff ffdc 	bl	8006cd0 <__sfputc_r>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d1f3      	bne.n	8006d04 <__sfputs_r+0xa>
 8006d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d20 <_vfiprintf_r>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	460d      	mov	r5, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	4698      	mov	r8, r3
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	b09d      	sub	sp, #116	; 0x74
 8006d2e:	b118      	cbz	r0, 8006d38 <_vfiprintf_r+0x18>
 8006d30:	6a03      	ldr	r3, [r0, #32]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_vfiprintf_r+0x18>
 8006d34:	f7fe fae0 	bl	80052f8 <__sinit>
 8006d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d3a:	07d9      	lsls	r1, r3, #31
 8006d3c:	d405      	bmi.n	8006d4a <_vfiprintf_r+0x2a>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	059a      	lsls	r2, r3, #22
 8006d42:	d402      	bmi.n	8006d4a <_vfiprintf_r+0x2a>
 8006d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d46:	f7fe fcd0 	bl	80056ea <__retarget_lock_acquire_recursive>
 8006d4a:	89ab      	ldrh	r3, [r5, #12]
 8006d4c:	071b      	lsls	r3, r3, #28
 8006d4e:	d501      	bpl.n	8006d54 <_vfiprintf_r+0x34>
 8006d50:	692b      	ldr	r3, [r5, #16]
 8006d52:	b99b      	cbnz	r3, 8006d7c <_vfiprintf_r+0x5c>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7fe fbf2 	bl	8005540 <__swsetup_r>
 8006d5c:	b170      	cbz	r0, 8006d7c <_vfiprintf_r+0x5c>
 8006d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d60:	07dc      	lsls	r4, r3, #31
 8006d62:	d504      	bpl.n	8006d6e <_vfiprintf_r+0x4e>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	b01d      	add	sp, #116	; 0x74
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	0598      	lsls	r0, r3, #22
 8006d72:	d4f7      	bmi.n	8006d64 <_vfiprintf_r+0x44>
 8006d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d76:	f7fe fcb9 	bl	80056ec <__retarget_lock_release_recursive>
 8006d7a:	e7f3      	b.n	8006d64 <_vfiprintf_r+0x44>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d80:	2320      	movs	r3, #32
 8006d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d86:	2330      	movs	r3, #48	; 0x30
 8006d88:	f04f 0901 	mov.w	r9, #1
 8006d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f40 <_vfiprintf_r+0x220>
 8006d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d98:	4623      	mov	r3, r4
 8006d9a:	469a      	mov	sl, r3
 8006d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006da0:	b10a      	cbz	r2, 8006da6 <_vfiprintf_r+0x86>
 8006da2:	2a25      	cmp	r2, #37	; 0x25
 8006da4:	d1f9      	bne.n	8006d9a <_vfiprintf_r+0x7a>
 8006da6:	ebba 0b04 	subs.w	fp, sl, r4
 8006daa:	d00b      	beq.n	8006dc4 <_vfiprintf_r+0xa4>
 8006dac:	465b      	mov	r3, fp
 8006dae:	4622      	mov	r2, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ffa1 	bl	8006cfa <__sfputs_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	f000 80a9 	beq.w	8006f10 <_vfiprintf_r+0x1f0>
 8006dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dc0:	445a      	add	r2, fp
 8006dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80a1 	beq.w	8006f10 <_vfiprintf_r+0x1f0>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd8:	f10a 0a01 	add.w	sl, sl, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006de4:	931a      	str	r3, [sp, #104]	; 0x68
 8006de6:	4654      	mov	r4, sl
 8006de8:	2205      	movs	r2, #5
 8006dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dee:	4854      	ldr	r0, [pc, #336]	; (8006f40 <_vfiprintf_r+0x220>)
 8006df0:	f7fe fc7d 	bl	80056ee <memchr>
 8006df4:	9a04      	ldr	r2, [sp, #16]
 8006df6:	b9d8      	cbnz	r0, 8006e30 <_vfiprintf_r+0x110>
 8006df8:	06d1      	lsls	r1, r2, #27
 8006dfa:	bf44      	itt	mi
 8006dfc:	2320      	movmi	r3, #32
 8006dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e02:	0713      	lsls	r3, r2, #28
 8006e04:	bf44      	itt	mi
 8006e06:	232b      	movmi	r3, #43	; 0x2b
 8006e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006e10:	2b2a      	cmp	r3, #42	; 0x2a
 8006e12:	d015      	beq.n	8006e40 <_vfiprintf_r+0x120>
 8006e14:	4654      	mov	r4, sl
 8006e16:	2000      	movs	r0, #0
 8006e18:	f04f 0c0a 	mov.w	ip, #10
 8006e1c:	9a07      	ldr	r2, [sp, #28]
 8006e1e:	4621      	mov	r1, r4
 8006e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e24:	3b30      	subs	r3, #48	; 0x30
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d94d      	bls.n	8006ec6 <_vfiprintf_r+0x1a6>
 8006e2a:	b1b0      	cbz	r0, 8006e5a <_vfiprintf_r+0x13a>
 8006e2c:	9207      	str	r2, [sp, #28]
 8006e2e:	e014      	b.n	8006e5a <_vfiprintf_r+0x13a>
 8006e30:	eba0 0308 	sub.w	r3, r0, r8
 8006e34:	fa09 f303 	lsl.w	r3, r9, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	46a2      	mov	sl, r4
 8006e3c:	9304      	str	r3, [sp, #16]
 8006e3e:	e7d2      	b.n	8006de6 <_vfiprintf_r+0xc6>
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	1d19      	adds	r1, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bfbb      	ittet	lt
 8006e4c:	425b      	neglt	r3, r3
 8006e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e52:	9307      	strge	r3, [sp, #28]
 8006e54:	9307      	strlt	r3, [sp, #28]
 8006e56:	bfb8      	it	lt
 8006e58:	9204      	strlt	r2, [sp, #16]
 8006e5a:	7823      	ldrb	r3, [r4, #0]
 8006e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e5e:	d10c      	bne.n	8006e7a <_vfiprintf_r+0x15a>
 8006e60:	7863      	ldrb	r3, [r4, #1]
 8006e62:	2b2a      	cmp	r3, #42	; 0x2a
 8006e64:	d134      	bne.n	8006ed0 <_vfiprintf_r+0x1b0>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	3402      	adds	r4, #2
 8006e6a:	1d1a      	adds	r2, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	9203      	str	r2, [sp, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfb8      	it	lt
 8006e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f44 <_vfiprintf_r+0x224>
 8006e7e:	2203      	movs	r2, #3
 8006e80:	4650      	mov	r0, sl
 8006e82:	7821      	ldrb	r1, [r4, #0]
 8006e84:	f7fe fc33 	bl	80056ee <memchr>
 8006e88:	b138      	cbz	r0, 8006e9a <_vfiprintf_r+0x17a>
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	eba0 000a 	sub.w	r0, r0, sl
 8006e92:	4082      	lsls	r2, r0
 8006e94:	4313      	orrs	r3, r2
 8006e96:	3401      	adds	r4, #1
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9e:	2206      	movs	r2, #6
 8006ea0:	4829      	ldr	r0, [pc, #164]	; (8006f48 <_vfiprintf_r+0x228>)
 8006ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ea6:	f7fe fc22 	bl	80056ee <memchr>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d03f      	beq.n	8006f2e <_vfiprintf_r+0x20e>
 8006eae:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <_vfiprintf_r+0x22c>)
 8006eb0:	bb1b      	cbnz	r3, 8006efa <_vfiprintf_r+0x1da>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	3307      	adds	r3, #7
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	3308      	adds	r3, #8
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec0:	443b      	add	r3, r7
 8006ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec4:	e768      	b.n	8006d98 <_vfiprintf_r+0x78>
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	2001      	movs	r0, #1
 8006eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ece:	e7a6      	b.n	8006e1e <_vfiprintf_r+0xfe>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f04f 0c0a 	mov.w	ip, #10
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	3401      	adds	r4, #1
 8006eda:	9305      	str	r3, [sp, #20]
 8006edc:	4620      	mov	r0, r4
 8006ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ee2:	3a30      	subs	r2, #48	; 0x30
 8006ee4:	2a09      	cmp	r2, #9
 8006ee6:	d903      	bls.n	8006ef0 <_vfiprintf_r+0x1d0>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0c6      	beq.n	8006e7a <_vfiprintf_r+0x15a>
 8006eec:	9105      	str	r1, [sp, #20]
 8006eee:	e7c4      	b.n	8006e7a <_vfiprintf_r+0x15a>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ef8:	e7f0      	b.n	8006edc <_vfiprintf_r+0x1bc>
 8006efa:	ab03      	add	r3, sp, #12
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	462a      	mov	r2, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <_vfiprintf_r+0x230>)
 8006f04:	a904      	add	r1, sp, #16
 8006f06:	f7fd fda9 	bl	8004a5c <_printf_float>
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	1c78      	adds	r0, r7, #1
 8006f0e:	d1d6      	bne.n	8006ebe <_vfiprintf_r+0x19e>
 8006f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f12:	07d9      	lsls	r1, r3, #31
 8006f14:	d405      	bmi.n	8006f22 <_vfiprintf_r+0x202>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	059a      	lsls	r2, r3, #22
 8006f1a:	d402      	bmi.n	8006f22 <_vfiprintf_r+0x202>
 8006f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1e:	f7fe fbe5 	bl	80056ec <__retarget_lock_release_recursive>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	065b      	lsls	r3, r3, #25
 8006f26:	f53f af1d 	bmi.w	8006d64 <_vfiprintf_r+0x44>
 8006f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f2c:	e71c      	b.n	8006d68 <_vfiprintf_r+0x48>
 8006f2e:	ab03      	add	r3, sp, #12
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	462a      	mov	r2, r5
 8006f34:	4630      	mov	r0, r6
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <_vfiprintf_r+0x230>)
 8006f38:	a904      	add	r1, sp, #16
 8006f3a:	f7fe f82f 	bl	8004f9c <_printf_i>
 8006f3e:	e7e4      	b.n	8006f0a <_vfiprintf_r+0x1ea>
 8006f40:	0800763c 	.word	0x0800763c
 8006f44:	08007642 	.word	0x08007642
 8006f48:	08007646 	.word	0x08007646
 8006f4c:	08004a5d 	.word	0x08004a5d
 8006f50:	08006cfb 	.word	0x08006cfb

08006f54 <__sflush_r>:
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f58:	4605      	mov	r5, r0
 8006f5a:	0710      	lsls	r0, r2, #28
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	d457      	bmi.n	8007010 <__sflush_r+0xbc>
 8006f60:	684b      	ldr	r3, [r1, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	dc04      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc01      	bgt.n	8006f70 <__sflush_r+0x1c>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d0fa      	beq.n	8006f6c <__sflush_r+0x18>
 8006f76:	2300      	movs	r3, #0
 8006f78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f7c:	682f      	ldr	r7, [r5, #0]
 8006f7e:	6a21      	ldr	r1, [r4, #32]
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	d032      	beq.n	8006fea <__sflush_r+0x96>
 8006f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	075a      	lsls	r2, r3, #29
 8006f8a:	d505      	bpl.n	8006f98 <__sflush_r+0x44>
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	1ac0      	subs	r0, r0, r3
 8006f90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f92:	b10b      	cbz	r3, 8006f98 <__sflush_r+0x44>
 8006f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f96:	1ac0      	subs	r0, r0, r3
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	6a21      	ldr	r1, [r4, #32]
 8006fa2:	47b0      	blx	r6
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	d106      	bne.n	8006fb8 <__sflush_r+0x64>
 8006faa:	6829      	ldr	r1, [r5, #0]
 8006fac:	291d      	cmp	r1, #29
 8006fae:	d82b      	bhi.n	8007008 <__sflush_r+0xb4>
 8006fb0:	4a28      	ldr	r2, [pc, #160]	; (8007054 <__sflush_r+0x100>)
 8006fb2:	410a      	asrs	r2, r1
 8006fb4:	07d6      	lsls	r6, r2, #31
 8006fb6:	d427      	bmi.n	8007008 <__sflush_r+0xb4>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	6062      	str	r2, [r4, #4]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	04d9      	lsls	r1, r3, #19
 8006fc0:	6022      	str	r2, [r4, #0]
 8006fc2:	d504      	bpl.n	8006fce <__sflush_r+0x7a>
 8006fc4:	1c42      	adds	r2, r0, #1
 8006fc6:	d101      	bne.n	8006fcc <__sflush_r+0x78>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b903      	cbnz	r3, 8006fce <__sflush_r+0x7a>
 8006fcc:	6560      	str	r0, [r4, #84]	; 0x54
 8006fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd0:	602f      	str	r7, [r5, #0]
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d0ca      	beq.n	8006f6c <__sflush_r+0x18>
 8006fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fda:	4299      	cmp	r1, r3
 8006fdc:	d002      	beq.n	8006fe4 <__sflush_r+0x90>
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f7ff fa02 	bl	80063e8 <_free_r>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	6360      	str	r0, [r4, #52]	; 0x34
 8006fe8:	e7c1      	b.n	8006f6e <__sflush_r+0x1a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	1c41      	adds	r1, r0, #1
 8006ff2:	d1c8      	bne.n	8006f86 <__sflush_r+0x32>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c5      	beq.n	8006f86 <__sflush_r+0x32>
 8006ffa:	2b1d      	cmp	r3, #29
 8006ffc:	d001      	beq.n	8007002 <__sflush_r+0xae>
 8006ffe:	2b16      	cmp	r3, #22
 8007000:	d101      	bne.n	8007006 <__sflush_r+0xb2>
 8007002:	602f      	str	r7, [r5, #0]
 8007004:	e7b2      	b.n	8006f6c <__sflush_r+0x18>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7ae      	b.n	8006f6e <__sflush_r+0x1a>
 8007010:	690f      	ldr	r7, [r1, #16]
 8007012:	2f00      	cmp	r7, #0
 8007014:	d0aa      	beq.n	8006f6c <__sflush_r+0x18>
 8007016:	0793      	lsls	r3, r2, #30
 8007018:	bf18      	it	ne
 800701a:	2300      	movne	r3, #0
 800701c:	680e      	ldr	r6, [r1, #0]
 800701e:	bf08      	it	eq
 8007020:	694b      	ldreq	r3, [r1, #20]
 8007022:	1bf6      	subs	r6, r6, r7
 8007024:	600f      	str	r7, [r1, #0]
 8007026:	608b      	str	r3, [r1, #8]
 8007028:	2e00      	cmp	r6, #0
 800702a:	dd9f      	ble.n	8006f6c <__sflush_r+0x18>
 800702c:	4633      	mov	r3, r6
 800702e:	463a      	mov	r2, r7
 8007030:	4628      	mov	r0, r5
 8007032:	6a21      	ldr	r1, [r4, #32]
 8007034:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007038:	47e0      	blx	ip
 800703a:	2800      	cmp	r0, #0
 800703c:	dc06      	bgt.n	800704c <__sflush_r+0xf8>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007048:	81a3      	strh	r3, [r4, #12]
 800704a:	e790      	b.n	8006f6e <__sflush_r+0x1a>
 800704c:	4407      	add	r7, r0
 800704e:	1a36      	subs	r6, r6, r0
 8007050:	e7ea      	b.n	8007028 <__sflush_r+0xd4>
 8007052:	bf00      	nop
 8007054:	dfbffffe 	.word	0xdfbffffe

08007058 <_fflush_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b913      	cbnz	r3, 8007068 <_fflush_r+0x10>
 8007062:	2500      	movs	r5, #0
 8007064:	4628      	mov	r0, r5
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	b118      	cbz	r0, 8007072 <_fflush_r+0x1a>
 800706a:	6a03      	ldr	r3, [r0, #32]
 800706c:	b90b      	cbnz	r3, 8007072 <_fflush_r+0x1a>
 800706e:	f7fe f943 	bl	80052f8 <__sinit>
 8007072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f3      	beq.n	8007062 <_fflush_r+0xa>
 800707a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800707c:	07d0      	lsls	r0, r2, #31
 800707e:	d404      	bmi.n	800708a <_fflush_r+0x32>
 8007080:	0599      	lsls	r1, r3, #22
 8007082:	d402      	bmi.n	800708a <_fflush_r+0x32>
 8007084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007086:	f7fe fb30 	bl	80056ea <__retarget_lock_acquire_recursive>
 800708a:	4628      	mov	r0, r5
 800708c:	4621      	mov	r1, r4
 800708e:	f7ff ff61 	bl	8006f54 <__sflush_r>
 8007092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007094:	4605      	mov	r5, r0
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d4e4      	bmi.n	8007064 <_fflush_r+0xc>
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	059b      	lsls	r3, r3, #22
 800709e:	d4e1      	bmi.n	8007064 <_fflush_r+0xc>
 80070a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070a2:	f7fe fb23 	bl	80056ec <__retarget_lock_release_recursive>
 80070a6:	e7dd      	b.n	8007064 <_fflush_r+0xc>

080070a8 <__swhatbuf_r>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	460c      	mov	r4, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	4615      	mov	r5, r2
 80070b2:	2900      	cmp	r1, #0
 80070b4:	461e      	mov	r6, r3
 80070b6:	b096      	sub	sp, #88	; 0x58
 80070b8:	da0c      	bge.n	80070d4 <__swhatbuf_r+0x2c>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	2100      	movs	r1, #0
 80070be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070c2:	bf0c      	ite	eq
 80070c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80070c8:	2340      	movne	r3, #64	; 0x40
 80070ca:	2000      	movs	r0, #0
 80070cc:	6031      	str	r1, [r6, #0]
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	b016      	add	sp, #88	; 0x58
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	466a      	mov	r2, sp
 80070d6:	f000 f849 	bl	800716c <_fstat_r>
 80070da:	2800      	cmp	r0, #0
 80070dc:	dbed      	blt.n	80070ba <__swhatbuf_r+0x12>
 80070de:	9901      	ldr	r1, [sp, #4]
 80070e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80070e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80070e8:	4259      	negs	r1, r3
 80070ea:	4159      	adcs	r1, r3
 80070ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f0:	e7eb      	b.n	80070ca <__swhatbuf_r+0x22>

080070f2 <__smakebuf_r>:
 80070f2:	898b      	ldrh	r3, [r1, #12]
 80070f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f6:	079d      	lsls	r5, r3, #30
 80070f8:	4606      	mov	r6, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	d507      	bpl.n	800710e <__smakebuf_r+0x1c>
 80070fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	2301      	movs	r3, #1
 8007108:	6163      	str	r3, [r4, #20]
 800710a:	b002      	add	sp, #8
 800710c:	bd70      	pop	{r4, r5, r6, pc}
 800710e:	466a      	mov	r2, sp
 8007110:	ab01      	add	r3, sp, #4
 8007112:	f7ff ffc9 	bl	80070a8 <__swhatbuf_r>
 8007116:	9900      	ldr	r1, [sp, #0]
 8007118:	4605      	mov	r5, r0
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff f9d4 	bl	80064c8 <_malloc_r>
 8007120:	b948      	cbnz	r0, 8007136 <__smakebuf_r+0x44>
 8007122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007126:	059a      	lsls	r2, r3, #22
 8007128:	d4ef      	bmi.n	800710a <__smakebuf_r+0x18>
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	f043 0302 	orr.w	r3, r3, #2
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	e7e3      	b.n	80070fe <__smakebuf_r+0xc>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	6020      	str	r0, [r4, #0]
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	9b00      	ldr	r3, [sp, #0]
 8007142:	6120      	str	r0, [r4, #16]
 8007144:	6163      	str	r3, [r4, #20]
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	b15b      	cbz	r3, 8007162 <__smakebuf_r+0x70>
 800714a:	4630      	mov	r0, r6
 800714c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007150:	f000 f81e 	bl	8007190 <_isatty_r>
 8007154:	b128      	cbz	r0, 8007162 <__smakebuf_r+0x70>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	f043 0301 	orr.w	r3, r3, #1
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	431d      	orrs	r5, r3
 8007166:	81a5      	strh	r5, [r4, #12]
 8007168:	e7cf      	b.n	800710a <__smakebuf_r+0x18>
	...

0800716c <_fstat_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	2300      	movs	r3, #0
 8007170:	4d06      	ldr	r5, [pc, #24]	; (800718c <_fstat_r+0x20>)
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7fa fbf0 	bl	800195e <_fstat>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_fstat_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_fstat_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	20000544 	.word	0x20000544

08007190 <_isatty_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	2300      	movs	r3, #0
 8007194:	4d05      	ldr	r5, [pc, #20]	; (80071ac <_isatty_r+0x1c>)
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7fa fbee 	bl	800197c <_isatty>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_isatty_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_isatty_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	20000544 	.word	0x20000544

080071b0 <_sbrk_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	2300      	movs	r3, #0
 80071b4:	4d05      	ldr	r5, [pc, #20]	; (80071cc <_sbrk_r+0x1c>)
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fa fbf4 	bl	80019a8 <_sbrk>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_sbrk_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_sbrk_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000544 	.word	0x20000544

080071d0 <memcpy>:
 80071d0:	440a      	add	r2, r1
 80071d2:	4291      	cmp	r1, r2
 80071d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d8:	d100      	bne.n	80071dc <memcpy+0xc>
 80071da:	4770      	bx	lr
 80071dc:	b510      	push	{r4, lr}
 80071de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e2:	4291      	cmp	r1, r2
 80071e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e8:	d1f9      	bne.n	80071de <memcpy+0xe>
 80071ea:	bd10      	pop	{r4, pc}

080071ec <__assert_func>:
 80071ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ee:	4614      	mov	r4, r2
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <__assert_func+0x2c>)
 80071f4:	4605      	mov	r5, r0
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68d8      	ldr	r0, [r3, #12]
 80071fa:	b14c      	cbz	r4, 8007210 <__assert_func+0x24>
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <__assert_func+0x30>)
 80071fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007202:	9100      	str	r1, [sp, #0]
 8007204:	462b      	mov	r3, r5
 8007206:	4906      	ldr	r1, [pc, #24]	; (8007220 <__assert_func+0x34>)
 8007208:	f000 f842 	bl	8007290 <fiprintf>
 800720c:	f000 f852 	bl	80072b4 <abort>
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <__assert_func+0x38>)
 8007212:	461c      	mov	r4, r3
 8007214:	e7f3      	b.n	80071fe <__assert_func+0x12>
 8007216:	bf00      	nop
 8007218:	20000064 	.word	0x20000064
 800721c:	08007657 	.word	0x08007657
 8007220:	08007664 	.word	0x08007664
 8007224:	08007692 	.word	0x08007692

08007228 <_calloc_r>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	fba1 5402 	umull	r5, r4, r1, r2
 800722e:	b934      	cbnz	r4, 800723e <_calloc_r+0x16>
 8007230:	4629      	mov	r1, r5
 8007232:	f7ff f949 	bl	80064c8 <_malloc_r>
 8007236:	4606      	mov	r6, r0
 8007238:	b928      	cbnz	r0, 8007246 <_calloc_r+0x1e>
 800723a:	4630      	mov	r0, r6
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	220c      	movs	r2, #12
 8007240:	2600      	movs	r6, #0
 8007242:	6002      	str	r2, [r0, #0]
 8007244:	e7f9      	b.n	800723a <_calloc_r+0x12>
 8007246:	462a      	mov	r2, r5
 8007248:	4621      	mov	r1, r4
 800724a:	f7fe f9d1 	bl	80055f0 <memset>
 800724e:	e7f4      	b.n	800723a <_calloc_r+0x12>

08007250 <__ascii_mbtowc>:
 8007250:	b082      	sub	sp, #8
 8007252:	b901      	cbnz	r1, 8007256 <__ascii_mbtowc+0x6>
 8007254:	a901      	add	r1, sp, #4
 8007256:	b142      	cbz	r2, 800726a <__ascii_mbtowc+0x1a>
 8007258:	b14b      	cbz	r3, 800726e <__ascii_mbtowc+0x1e>
 800725a:	7813      	ldrb	r3, [r2, #0]
 800725c:	600b      	str	r3, [r1, #0]
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	1e10      	subs	r0, r2, #0
 8007262:	bf18      	it	ne
 8007264:	2001      	movne	r0, #1
 8007266:	b002      	add	sp, #8
 8007268:	4770      	bx	lr
 800726a:	4610      	mov	r0, r2
 800726c:	e7fb      	b.n	8007266 <__ascii_mbtowc+0x16>
 800726e:	f06f 0001 	mvn.w	r0, #1
 8007272:	e7f8      	b.n	8007266 <__ascii_mbtowc+0x16>

08007274 <__ascii_wctomb>:
 8007274:	4603      	mov	r3, r0
 8007276:	4608      	mov	r0, r1
 8007278:	b141      	cbz	r1, 800728c <__ascii_wctomb+0x18>
 800727a:	2aff      	cmp	r2, #255	; 0xff
 800727c:	d904      	bls.n	8007288 <__ascii_wctomb+0x14>
 800727e:	228a      	movs	r2, #138	; 0x8a
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	4770      	bx	lr
 8007288:	2001      	movs	r0, #1
 800728a:	700a      	strb	r2, [r1, #0]
 800728c:	4770      	bx	lr
	...

08007290 <fiprintf>:
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b503      	push	{r0, r1, lr}
 8007294:	4601      	mov	r1, r0
 8007296:	ab03      	add	r3, sp, #12
 8007298:	4805      	ldr	r0, [pc, #20]	; (80072b0 <fiprintf+0x20>)
 800729a:	f853 2b04 	ldr.w	r2, [r3], #4
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f7ff fd3d 	bl	8006d20 <_vfiprintf_r>
 80072a6:	b002      	add	sp, #8
 80072a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ac:	b003      	add	sp, #12
 80072ae:	4770      	bx	lr
 80072b0:	20000064 	.word	0x20000064

080072b4 <abort>:
 80072b4:	2006      	movs	r0, #6
 80072b6:	b508      	push	{r3, lr}
 80072b8:	f000 f82c 	bl	8007314 <raise>
 80072bc:	2001      	movs	r0, #1
 80072be:	f7fa fb00 	bl	80018c2 <_exit>

080072c2 <_raise_r>:
 80072c2:	291f      	cmp	r1, #31
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	d904      	bls.n	80072d6 <_raise_r+0x14>
 80072cc:	2316      	movs	r3, #22
 80072ce:	6003      	str	r3, [r0, #0]
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80072d8:	b112      	cbz	r2, 80072e0 <_raise_r+0x1e>
 80072da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072de:	b94b      	cbnz	r3, 80072f4 <_raise_r+0x32>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f831 	bl	8007348 <_getpid_r>
 80072e6:	462a      	mov	r2, r5
 80072e8:	4601      	mov	r1, r0
 80072ea:	4620      	mov	r0, r4
 80072ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f0:	f000 b818 	b.w	8007324 <_kill_r>
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d00a      	beq.n	800730e <_raise_r+0x4c>
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	d103      	bne.n	8007304 <_raise_r+0x42>
 80072fc:	2316      	movs	r3, #22
 80072fe:	6003      	str	r3, [r0, #0]
 8007300:	2001      	movs	r0, #1
 8007302:	e7e7      	b.n	80072d4 <_raise_r+0x12>
 8007304:	2400      	movs	r4, #0
 8007306:	4628      	mov	r0, r5
 8007308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800730c:	4798      	blx	r3
 800730e:	2000      	movs	r0, #0
 8007310:	e7e0      	b.n	80072d4 <_raise_r+0x12>
	...

08007314 <raise>:
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <raise+0xc>)
 8007316:	4601      	mov	r1, r0
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	f7ff bfd2 	b.w	80072c2 <_raise_r>
 800731e:	bf00      	nop
 8007320:	20000064 	.word	0x20000064

08007324 <_kill_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	2300      	movs	r3, #0
 8007328:	4d06      	ldr	r5, [pc, #24]	; (8007344 <_kill_r+0x20>)
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	f7fa fab6 	bl	80018a2 <_kill>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d102      	bne.n	8007340 <_kill_r+0x1c>
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	b103      	cbz	r3, 8007340 <_kill_r+0x1c>
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	bd38      	pop	{r3, r4, r5, pc}
 8007342:	bf00      	nop
 8007344:	20000544 	.word	0x20000544

08007348 <_getpid_r>:
 8007348:	f7fa baa4 	b.w	8001894 <_getpid>

0800734c <_init>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr

08007358 <_fini>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	bf00      	nop
 800735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735e:	bc08      	pop	{r3}
 8007360:	469e      	mov	lr, r3
 8007362:	4770      	bx	lr
