
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009674  08009674  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009674  08009674  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800967c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  200001dc  08009858  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08009858  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001167a  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240f  00000000  00000000  000318c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00033cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd7  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198c2  00000000  00000000  00035c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146cb  00000000  00000000  0004f4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091666  00000000  00000000  00063bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec8  00000000  00000000  000f5224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fb0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f78 	.word	0x08008f78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008f78 	.word	0x08008f78

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f000 ff48 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f8b4 	bl	8001274 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Init();
 800110c:	f000 ff44 	bl	8001f98 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 fb16 	bl	8001740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001114:	f000 f8f0 	bl	80012f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001118:	f000 fae8 	bl	80016ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800111c:	f000 f952 	bl	80013c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001120:	f000 fa7c 	bl	800161c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001124:	f000 f9fa 	bl	800151c <MX_TIM2_Init>
  MX_SPI1_Init();
 8001128:	f000 f916 	bl	8001358 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

 fc_powerup();
 800112c:	f000 fb64 	bl	80017f8 <fc_powerup>
 config_gyro();
 8001130:	f000 fba6 	bl	8001880 <config_gyro>
// config_motors();
// config_wireless();
// wait_for_pair();
 pid_init(&roll_pidController);
 8001134:	4840      	ldr	r0, [pc, #256]	; (8001238 <main+0x13c>)
 8001136:	f004 fd53 	bl	8005be0 <pid_init>
 pid_init(&yaw_pidController);
 800113a:	4840      	ldr	r0, [pc, #256]	; (800123c <main+0x140>)
 800113c:	f004 fd50 	bl	8005be0 <pid_init>
 pid_init(&pitch_pidController);
 8001140:	483f      	ldr	r0, [pc, #252]	; (8001240 <main+0x144>)
 8001142:	f004 fd4d 	bl	8005be0 <pid_init>

 yaw_pidController.p_gain 				= 6  ;
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <main+0x140>)
 8001148:	4a3e      	ldr	r2, [pc, #248]	; (8001244 <main+0x148>)
 800114a:	601a      	str	r2, [r3, #0]
 yaw_pidController.i_gain               = 10 ;
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <main+0x140>)
 800114e:	4a3e      	ldr	r2, [pc, #248]	; (8001248 <main+0x14c>)
 8001150:	605a      	str	r2, [r3, #4]
 yaw_pidController.d_gain               = 15 ;
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <main+0x140>)
 8001154:	4a3d      	ldr	r2, [pc, #244]	; (800124c <main+0x150>)
 8001156:	609a      	str	r2, [r3, #8]
 yaw_pidController.filter_sampling_time = 0.01  ;
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <main+0x140>)
 800115a:	4a3d      	ldr	r2, [pc, #244]	; (8001250 <main+0x154>)
 800115c:	611a      	str	r2, [r3, #16]
 yaw_pidController.sampling_time        = 0.001 ;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <main+0x140>)
 8001160:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <main+0x158>)
 8001162:	60da      	str	r2, [r3, #12]
 yaw_pidController.limitMax             =  75 ;
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <main+0x140>)
 8001166:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <main+0x15c>)
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
 yaw_pidController.limitMin             =  0  ;
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <main+0x140>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
 yaw_pidController.limitMaxInt          =  80;
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <main+0x140>)
 8001174:	4a39      	ldr	r2, [pc, #228]	; (800125c <main+0x160>)
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
 yaw_pidController.limitMinInt          = -80;
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <main+0x140>)
 800117a:	4a39      	ldr	r2, [pc, #228]	; (8001260 <main+0x164>)
 800117c:	631a      	str	r2, [r3, #48]	; 0x30

 roll_pidController.p_gain 				 = 6  ;
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <main+0x13c>)
 8001180:	4a30      	ldr	r2, [pc, #192]	; (8001244 <main+0x148>)
 8001182:	601a      	str	r2, [r3, #0]
 roll_pidController.i_gain               = 10 ;
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <main+0x13c>)
 8001186:	4a30      	ldr	r2, [pc, #192]	; (8001248 <main+0x14c>)
 8001188:	605a      	str	r2, [r3, #4]
 roll_pidController.d_gain               = 15 ;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <main+0x13c>)
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <main+0x150>)
 800118e:	609a      	str	r2, [r3, #8]
 roll_pidController.filter_sampling_time = 0.01  ;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <main+0x13c>)
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <main+0x154>)
 8001194:	611a      	str	r2, [r3, #16]
 roll_pidController.sampling_time        = 0.001 ;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <main+0x13c>)
 8001198:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <main+0x158>)
 800119a:	60da      	str	r2, [r3, #12]
 roll_pidController.limitMax             =  75 ;
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <main+0x13c>)
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <main+0x15c>)
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
 roll_pidController.limitMin             =  0  ;
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <main+0x13c>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
 roll_pidController.limitMaxInt          =  80;
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <main+0x13c>)
 80011ac:	4a2b      	ldr	r2, [pc, #172]	; (800125c <main+0x160>)
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
 roll_pidController.limitMinInt          = -80;
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <main+0x13c>)
 80011b2:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <main+0x164>)
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30

 pitch_pidController.p_gain 			  = 6  ;
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <main+0x144>)
 80011b8:	4a22      	ldr	r2, [pc, #136]	; (8001244 <main+0x148>)
 80011ba:	601a      	str	r2, [r3, #0]
 pitch_pidController.i_gain               = 10 ;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <main+0x144>)
 80011be:	4a22      	ldr	r2, [pc, #136]	; (8001248 <main+0x14c>)
 80011c0:	605a      	str	r2, [r3, #4]
 pitch_pidController.d_gain               = 15 ;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <main+0x144>)
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <main+0x150>)
 80011c6:	609a      	str	r2, [r3, #8]
 pitch_pidController.filter_sampling_time = 0.01  ;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <main+0x144>)
 80011ca:	4a21      	ldr	r2, [pc, #132]	; (8001250 <main+0x154>)
 80011cc:	611a      	str	r2, [r3, #16]
 pitch_pidController.sampling_time        = 0.001 ;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <main+0x144>)
 80011d0:	4a20      	ldr	r2, [pc, #128]	; (8001254 <main+0x158>)
 80011d2:	60da      	str	r2, [r3, #12]
 pitch_pidController.limitMax             =  75 ;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <main+0x144>)
 80011d6:	4a20      	ldr	r2, [pc, #128]	; (8001258 <main+0x15c>)
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
 pitch_pidController.limitMin             =  0  ;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <main+0x144>)
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
 pitch_pidController.limitMaxInt          =  80;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <main+0x144>)
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <main+0x160>)
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
 pitch_pidController.limitMinInt          = -80;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <main+0x144>)
 80011ea:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <main+0x164>)
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN WHILE */
  while (1)
  {

//	  rcv_channel();
	  get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 80011ee:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <main+0x168>)
 80011f0:	491d      	ldr	r1, [pc, #116]	; (8001268 <main+0x16c>)
 80011f2:	481e      	ldr	r0, [pc, #120]	; (800126c <main+0x170>)
 80011f4:	f004 fb14 	bl	8005820 <get_gyro>

	  printf("Roll : %d  ,Pitch: %d  ,Yaw : %d \r" , Gyro_Data.pitch , Gyro_Data.yaw , Gyro_Data.roll ) ;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <main+0x16c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f913 	bl	8000428 <__aeabi_f2d>
 8001202:	4680      	mov	r8, r0
 8001204:	4689      	mov	r9, r1
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <main+0x16c>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f90c 	bl	8000428 <__aeabi_f2d>
 8001210:	4604      	mov	r4, r0
 8001212:	460d      	mov	r5, r1
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <main+0x16c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f905 	bl	8000428 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001226:	e9cd 4500 	strd	r4, r5, [sp]
 800122a:	4642      	mov	r2, r8
 800122c:	464b      	mov	r3, r9
 800122e:	4810      	ldr	r0, [pc, #64]	; (8001270 <main+0x174>)
 8001230:	f005 fa14 	bl	800665c <iprintf>
	  get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 8001234:	e7db      	b.n	80011ee <main+0xf2>
 8001236:	bf00      	nop
 8001238:	20000458 	.word	0x20000458
 800123c:	200003e8 	.word	0x200003e8
 8001240:	20000420 	.word	0x20000420
 8001244:	40c00000 	.word	0x40c00000
 8001248:	41200000 	.word	0x41200000
 800124c:	41700000 	.word	0x41700000
 8001250:	3c23d70a 	.word	0x3c23d70a
 8001254:	3a83126f 	.word	0x3a83126f
 8001258:	42960000 	.word	0x42960000
 800125c:	42a00000 	.word	0x42a00000
 8001260:	c2a00000 	.word	0xc2a00000
 8001264:	200003dc 	.word	0x200003dc
 8001268:	200003d0 	.word	0x200003d0
 800126c:	200001f8 	.word	0x200001f8
 8001270:	08008f90 	.word	0x08008f90

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b090      	sub	sp, #64	; 0x40
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f005 fb30 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129e:	2310      	movs	r3, #16
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80012aa:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 f9f9 	bl	80036ac <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012c0:	f000 fb66 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fc66 	bl	8003bb0 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012ea:	f000 fb51 	bl	8001990 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3740      	adds	r7, #64	; 0x40
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_I2C1_Init+0x54>)
 80012fe:	4a14      	ldr	r2, [pc, #80]	; (8001350 <MX_I2C1_Init+0x58>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_I2C1_Init+0x54>)
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C1_Init+0x5c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_I2C1_Init+0x54>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_I2C1_Init+0x54>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_I2C1_Init+0x54>)
 8001318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_I2C1_Init+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_I2C1_Init+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_I2C1_Init+0x54>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_I2C1_Init+0x54>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_I2C1_Init+0x54>)
 8001338:	f001 f95e 	bl	80025f8 <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001342:	f000 fb25 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001f8 	.word	0x200001f8
 8001350:	40005400 	.word	0x40005400
 8001354:	00061a80 	.word	0x00061a80

08001358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_SPI1_Init+0x64>)
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <MX_SPI1_Init+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_SPI1_Init+0x64>)
 8001364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_SPI1_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_SPI1_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_SPI1_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_SPI1_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001388:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_SPI1_Init+0x64>)
 800138c:	2210      	movs	r2, #16
 800138e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_SPI1_Init+0x64>)
 80013a4:	220a      	movs	r2, #10
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_SPI1_Init+0x64>)
 80013aa:	f002 fd8f 	bl	8003ecc <HAL_SPI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013b4:	f000 faec 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000024c 	.word	0x2000024c
 80013c0:	40013000 	.word	0x40013000

080013c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b092      	sub	sp, #72	; 0x48
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2220      	movs	r2, #32
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fa7a 	bl	80068e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <MX_TIM1_Init+0x150>)
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <MX_TIM1_Init+0x154>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <MX_TIM1_Init+0x150>)
 80013fc:	2220      	movs	r2, #32
 80013fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b44      	ldr	r3, [pc, #272]	; (8001514 <MX_TIM1_Init+0x150>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001406:	4b43      	ldr	r3, [pc, #268]	; (8001514 <MX_TIM1_Init+0x150>)
 8001408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <MX_TIM1_Init+0x150>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001414:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <MX_TIM1_Init+0x150>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <MX_TIM1_Init+0x150>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001420:	483c      	ldr	r0, [pc, #240]	; (8001514 <MX_TIM1_Init+0x150>)
 8001422:	f002 fdd7 	bl	8003fd4 <HAL_TIM_PWM_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800142c:	f000 fab0 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800143c:	4619      	mov	r1, r3
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <MX_TIM1_Init+0x150>)
 8001440:	f003 fb1a 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800144a:	f000 faa1 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144e:	2360      	movs	r3, #96	; 0x60
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	4828      	ldr	r0, [pc, #160]	; (8001514 <MX_TIM1_Init+0x150>)
 8001474:	f003 f80c 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800147e:	f000 fa87 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 8001482:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2204      	movs	r2, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4820      	ldr	r0, [pc, #128]	; (8001514 <MX_TIM1_Init+0x150>)
 8001492:	f002 fffd 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800149c:	f000 fa78 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_TIM1_Init+0x150>)
 80014ae:	f002 ffef 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014b8:	f000 fa6a 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	220c      	movs	r2, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <MX_TIM1_Init+0x150>)
 80014c6:	f002 ffe3 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014d0:	f000 fa5e 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM1_Init+0x150>)
 80014f8:	f003 fb1c 	bl	8004b34 <HAL_TIMEx_ConfigBreakDeadTime>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001502:	f000 fa45 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM1_Init+0x150>)
 8001508:	f000 fb3e 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 800150c:	bf00      	nop
 800150e:	3748      	adds	r7, #72	; 0x48
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002a4 	.word	0x200002a4
 8001518:	40012c00 	.word	0x40012c00

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500;
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001548:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800154c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 8001554:	4b30      	ldr	r3, [pc, #192]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <MX_TIM2_Init+0xfc>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001566:	482c      	ldr	r0, [pc, #176]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001568:	f002 fd34 	bl	8003fd4 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001572:	f000 fa0d 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4619      	mov	r1, r3
 8001584:	4824      	ldr	r0, [pc, #144]	; (8001618 <MX_TIM2_Init+0xfc>)
 8001586:	f003 fa77 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001590:	f000 f9fe 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
 8001596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 160;
 8001598:	23a0      	movs	r3, #160	; 0xa0
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_TIM2_Init+0xfc>)
 80015ac:	f002 ff70 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015b6:	f000 f9eb 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 80;
 80015ba:	2350      	movs	r3, #80	; 0x50
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2204      	movs	r2, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_TIM2_Init+0xfc>)
 80015c6:	f002 ff63 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80015d0:	f000 f9de 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 40;
 80015d4:	2328      	movs	r3, #40	; 0x28
 80015d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2208      	movs	r2, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_TIM2_Init+0xfc>)
 80015e0:	f002 ff56 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015ea:	f000 f9d1 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 20;
 80015ee:	2314      	movs	r3, #20
 80015f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	220c      	movs	r2, #12
 80015f6:	4619      	mov	r1, r3
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM2_Init+0xfc>)
 80015fa:	f002 ff49 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001604:	f000 f9c4 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM2_Init+0xfc>)
 800160a:	f000 fabd 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002ec 	.word	0x200002ec

0800161c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001640:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <MX_TIM3_Init+0xcc>)
 8001642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <MX_TIM3_Init+0xc8>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001654:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001658:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_TIM3_Init+0xc8>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001666:	481f      	ldr	r0, [pc, #124]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001668:	f002 fcb4 	bl	8003fd4 <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001672:	f000 f98d 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4619      	mov	r1, r3
 8001684:	4817      	ldr	r0, [pc, #92]	; (80016e4 <MX_TIM3_Init+0xc8>)
 8001686:	f003 f9f7 	bl	8004a78 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001690:	f000 f97e 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	; 0x60
 8001696:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001698:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800169c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2208      	movs	r2, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM3_Init+0xc8>)
 80016ae:	f002 feef 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80016b8:	f000 f96a 	bl	8001990 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	220c      	movs	r2, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM3_Init+0xc8>)
 80016c8:	f002 fee2 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80016d2:	f000 f95d 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM3_Init+0xc8>)
 80016d8:	f000 fa56 	bl	8001b88 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000334 	.word	0x20000334
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_USART2_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001724:	f003 fa69 	bl	8004bfa <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f000 f92f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000037c 	.word	0x2000037c
 800173c:	40004400 	.word	0x40004400

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <MX_GPIO_Init+0xac>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <MX_GPIO_Init+0xac>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <MX_GPIO_Init+0xac>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_GPIO_Init+0xac>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <MX_GPIO_Init+0xac>)
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_GPIO_Init+0xac>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <MX_GPIO_Init+0xb0>)
 800178a:	f000 ff1d 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <MX_GPIO_Init+0xb4>)
 8001796:	f000 ff17 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800179a:	2310      	movs	r3, #16
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2302      	movs	r3, #2
 80017a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <MX_GPIO_Init+0xb0>)
 80017b2:	f000 fd85 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	4809      	ldr	r0, [pc, #36]	; (80017f4 <MX_GPIO_Init+0xb4>)
 80017d0:	f000 fd76 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_GPIO_Init+0xb4>)
 80017e0:	f000 fd6e 	bl	80022c0 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800
 80017f4:	40010c00 	.word	0x40010c00

080017f8 <fc_powerup>:

/* USER CODE BEGIN 4 */
void  fc_powerup(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
// turn the white and red led ON for a bit
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,0);
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <fc_powerup+0x84>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <fc_powerup+0x84>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 800180c:	2108      	movs	r1, #8
 800180e:	481b      	ldr	r0, [pc, #108]	; (800187c <fc_powerup+0x84>)
 8001810:	f002 fc30 	bl	8004074 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001814:	210c      	movs	r1, #12
 8001816:	4819      	ldr	r0, [pc, #100]	; (800187c <fc_powerup+0x84>)
 8001818:	f002 fc2c 	bl	8004074 <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 800181c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001820:	f000 fc1c 	bl	800205c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001824:	2108      	movs	r1, #8
 8001826:	4815      	ldr	r0, [pc, #84]	; (800187c <fc_powerup+0x84>)
 8001828:	f002 fcc6 	bl	80041b8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 800182c:	210c      	movs	r1, #12
 800182e:	4813      	ldr	r0, [pc, #76]	; (800187c <fc_powerup+0x84>)
 8001830:	f002 fcc2 	bl	80041b8 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <fc_powerup+0x84>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800183c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,32000);
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <fc_powerup+0x84>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001848:	2108      	movs	r1, #8
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <fc_powerup+0x84>)
 800184c:	f002 fc12 	bl	8004074 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001850:	210c      	movs	r1, #12
 8001852:	480a      	ldr	r0, [pc, #40]	; (800187c <fc_powerup+0x84>)
 8001854:	f002 fc0e 	bl	8004074 <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 8001858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185c:	f000 fbfe 	bl	800205c <HAL_Delay>
	HAL_Delay(1000) ;
 8001860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001864:	f000 fbfa 	bl	800205c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001868:	2108      	movs	r1, #8
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <fc_powerup+0x84>)
 800186c:	f002 fca4 	bl	80041b8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 8001870:	210c      	movs	r1, #12
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <fc_powerup+0x84>)
 8001874:	f002 fca0 	bl	80041b8 <HAL_TIM_PWM_Stop>

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000334 	.word	0x20000334

08001880 <config_gyro>:

   HAL_Delay(1000) ;
   HAL_Delay(1000) ;

}
void config_gyro() {
 8001880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001884:	b090      	sub	sp, #64	; 0x40
 8001886:	af0a      	add	r7, sp, #40	; 0x28
   Self_test_mpu6050(&hi2c1) ;
 8001888:	482e      	ldr	r0, [pc, #184]	; (8001944 <config_gyro+0xc4>)
 800188a:	f003 fb85 	bl	8004f98 <Self_test_mpu6050>
   Mpu6050_Init(&hi2c1) ;			//initalise gyroscope
 800188e:	482d      	ldr	r0, [pc, #180]	; (8001944 <config_gyro+0xc4>)
 8001890:	f003 fe02 	bl	8005498 <Mpu6050_Init>
   gyro_calibrate(&hi2c1,  &Gyro_Calib);
 8001894:	492c      	ldr	r1, [pc, #176]	; (8001948 <config_gyro+0xc8>)
 8001896:	482b      	ldr	r0, [pc, #172]	; (8001944 <config_gyro+0xc4>)
 8001898:	f004 f862 	bl	8005960 <gyro_calibrate>

   get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <config_gyro+0xc8>)
 800189e:	492b      	ldr	r1, [pc, #172]	; (800194c <config_gyro+0xcc>)
 80018a0:	4828      	ldr	r0, [pc, #160]	; (8001944 <config_gyro+0xc4>)
 80018a2:	f003 ffbd 	bl	8005820 <get_gyro>
   get_Accl(&hi2c1, &Accl_Data) ;
 80018a6:	492a      	ldr	r1, [pc, #168]	; (8001950 <config_gyro+0xd0>)
 80018a8:	4826      	ldr	r0, [pc, #152]	; (8001944 <config_gyro+0xc4>)
 80018aa:	f003 ff49 	bl	8005740 <get_Accl>
   // take 200 readings from the imu
   for (uint8_t i = 0 ; i < 200 ; i++){
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
 80018b2:	e03d      	b.n	8001930 <config_gyro+0xb0>
	     printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <config_gyro+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdb5 	bl	8000428 <__aeabi_f2d>
 80018be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <config_gyro+0xcc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fdae 	bl	8000428 <__aeabi_f2d>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <config_gyro+0xcc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fda7 	bl	8000428 <__aeabi_f2d>
 80018da:	4680      	mov	r8, r0
 80018dc:	4689      	mov	r9, r1
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <config_gyro+0xd0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fda0 	bl	8000428 <__aeabi_f2d>
 80018e8:	4682      	mov	sl, r0
 80018ea:	468b      	mov	fp, r1
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <config_gyro+0xd0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd99 	bl	8000428 <__aeabi_f2d>
 80018f6:	e9c7 0100 	strd	r0, r1, [r7]
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <config_gyro+0xd0>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd92 	bl	8000428 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800190c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001910:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001914:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001918:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800191c:	e9cd 4500 	strd	r4, r5, [sp]
 8001920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <config_gyro+0xd4>)
 8001926:	f004 fe99 	bl	800665c <iprintf>
   for (uint8_t i = 0 ; i < 200 ; i++){
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	3301      	adds	r3, #1
 800192e:	75fb      	strb	r3, [r7, #23]
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2bc7      	cmp	r3, #199	; 0xc7
 8001934:	d9be      	bls.n	80018b4 <config_gyro+0x34>
	     }

}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001942:	bf00      	nop
 8001944:	200001f8 	.word	0x200001f8
 8001948:	200003dc 	.word	0x200003dc
 800194c:	200003d0 	.word	0x200003d0
 8001950:	200003c4 	.word	0x200003c4
 8001954:	08008fb4 	.word	0x08008fb4

08001958 <HAL_TIM_PeriodElapsedCallback>:


}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
	...

0800196c <__io_putchar>:

void __io_putchar(int ch) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001974:	1d39      	adds	r1, r7, #4
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	2201      	movs	r2, #1
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <__io_putchar+0x20>)
 800197e:	f003 f98c 	bl	8004c9a <HAL_UART_Transmit>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000037c 	.word	0x2000037c

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_MspInit+0x40>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_MspInit+0x40>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_MspInit+0x40>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_MspInit+0x40>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_MspInit+0x40>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_MspInit+0x40>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_I2C_MspInit+0x70>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d123      	bne.n	8001a48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	; 0xc0
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_I2C_MspInit+0x78>)
 8001a2c:	f000 fc48 	bl	80022c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	61d3      	str	r3, [r2, #28]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010c00 	.word	0x40010c00

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_SPI_MspInit+0x88>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d12f      	bne.n	8001adc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_SPI_MspInit+0x8c>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aac:	23a0      	movs	r3, #160	; 0xa0
 8001aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	480b      	ldr	r0, [pc, #44]	; (8001aec <HAL_SPI_MspInit+0x90>)
 8001ac0:	f000 fbfe 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ac4:	2340      	movs	r3, #64	; 0x40
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_SPI_MspInit+0x90>)
 8001ad8:	f000 fbf2 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013000 	.word	0x40013000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800

08001af0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_TIM_PWM_MspInit+0x8c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10c      	bne.n	8001b1c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b1a:	e02a      	b.n	8001b72 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b24:	d114      	bne.n	8001b50 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	201c      	movs	r0, #28
 8001b44:	f000 fb85 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b48:	201c      	movs	r0, #28
 8001b4a:	f000 fb9e 	bl	800228a <HAL_NVIC_EnableIRQ>
}
 8001b4e:	e010      	b.n	8001b72 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <HAL_TIM_PWM_MspInit+0x94>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d10b      	bne.n	8001b72 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_TIM_PWM_MspInit+0x90>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40000400 	.word	0x40000400

08001b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_TIM_MspPostInit+0x128>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d119      	bne.n	8001bdc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bc0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4838      	ldr	r0, [pc, #224]	; (8001cb8 <HAL_TIM_MspPostInit+0x130>)
 8001bd6:	f000 fb73 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bda:	e065      	b.n	8001ca8 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d143      	bne.n	8001c6e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <HAL_TIM_MspPostInit+0x130>)
 8001c2a:	f000 fb49 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	481e      	ldr	r0, [pc, #120]	; (8001cbc <HAL_TIM_MspPostInit+0x134>)
 8001c44:	f000 fb3c 	bl	80022c0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_TIM_MspPostInit+0x138>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_TIM_MspPostInit+0x138>)
 8001c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6a:	6053      	str	r3, [r2, #4]
}
 8001c6c:	e01c      	b.n	8001ca8 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_TIM_MspPostInit+0x13c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d117      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_TIM_MspPostInit+0x12c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c90:	2303      	movs	r3, #3
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <HAL_TIM_MspPostInit+0x134>)
 8001ca4:	f000 fb0c 	bl	80022c0 <HAL_GPIO_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	; 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d12f      	bne.n	8001d48 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <HAL_UART_MspInit+0x90>)
 8001d2c:	f000 fac8 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d30:	2308      	movs	r3, #8
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_UART_MspInit+0x90>)
 8001d44:	f000 fabc 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010800 	.word	0x40010800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f000 f93f 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM2_IRQHandler+0x10>)
 8001db2:	f002 fa65 	bl	8004280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200002ec 	.word	0x200002ec

08001dc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <_kill>:

int _kill(int pid, int sig)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dd8:	f004 fdd8 	bl	800698c <__errno>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2216      	movs	r2, #22
 8001de0:	601a      	str	r2, [r3, #0]
  return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_exit>:

void _exit (int status)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffe7 	bl	8001dce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e00:	e7fe      	b.n	8001e00 <_exit+0x12>

08001e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e00a      	b.n	8001e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e14:	f3af 8000 	nop.w
 8001e18:	4601      	mov	r1, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	b2ca      	uxtb	r2, r1
 8001e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbf0      	blt.n	8001e14 <_read+0x12>
  }

  return len;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	e009      	b.n	8001e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	60ba      	str	r2, [r7, #8]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fd88 	bl	800196c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbf1      	blt.n	8001e4e <_write+0x12>
  }
  return len;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_close>:

int _close(int file)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <_isatty>:

int _isatty(int file)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f004 fd42 	bl	800698c <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20005000 	.word	0x20005000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20000490 	.word	0x20000490
 8001f3c:	200005e8 	.word	0x200005e8

08001f40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f4c:	f7ff fff8 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f50:	480b      	ldr	r0, [pc, #44]	; (8001f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f52:	490c      	ldr	r1, [pc, #48]	; (8001f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f68:	4c09      	ldr	r4, [pc, #36]	; (8001f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f76:	f004 fd0f 	bl	8006998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7a:	f7ff f8bf 	bl	80010fc <main>
  bx lr
 8001f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f88:	0800967c 	.word	0x0800967c
  ldr r2, =_sbss
 8001f8c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f90:	200005e4 	.word	0x200005e4

08001f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_2_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_Init+0x28>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_Init+0x28>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 f947 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	200f      	movs	r0, #15
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fcf2 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f95f 	bl	80022a6 <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 f927 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	; (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	20000008 	.word	0x20000008
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_IncTick+0x1c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x20>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x20>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000008 	.word	0x20000008
 8002044:	20000494 	.word	0x20000494

08002048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_GetTick+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000494 	.word	0x20000494

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff0 	bl	8002048 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffe0 	bl	8002048 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4906      	ldr	r1, [pc, #24]	; (800213c <__NVIC_EnableIRQ+0x34>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff90 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff2d 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff42 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff90 	bl	8002194 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5f 	bl	8002140 <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff35 	bl	8002108 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b08b      	sub	sp, #44	; 0x2c
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e169      	b.n	80025a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d4:	2201      	movs	r2, #1
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8158 	bne.w	80025a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a9a      	ldr	r2, [pc, #616]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d05e      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 80022fc:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d875      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002302:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d058      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002308:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d86f      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800230e:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d052      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002314:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d869      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800231a:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2ac>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04c      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 8002320:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2ac>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d863      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002326:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d046      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
 800232c:	4a90      	ldr	r2, [pc, #576]	; (8002570 <HAL_GPIO_Init+0x2b0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d85d      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d82a      	bhi.n	800238c <HAL_GPIO_Init+0xcc>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d859      	bhi.n	80023ee <HAL_GPIO_Init+0x12e>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_GPIO_Init+0x80>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	080023bb 	.word	0x080023bb
 8002344:	08002395 	.word	0x08002395
 8002348:	080023a7 	.word	0x080023a7
 800234c:	080023e9 	.word	0x080023e9
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	080023ef 	.word	0x080023ef
 800235c:	080023ef 	.word	0x080023ef
 8002360:	080023ef 	.word	0x080023ef
 8002364:	080023ef 	.word	0x080023ef
 8002368:	080023ef 	.word	0x080023ef
 800236c:	080023ef 	.word	0x080023ef
 8002370:	080023ef 	.word	0x080023ef
 8002374:	080023ef 	.word	0x080023ef
 8002378:	080023ef 	.word	0x080023ef
 800237c:	080023ef 	.word	0x080023ef
 8002380:	080023ef 	.word	0x080023ef
 8002384:	0800239d 	.word	0x0800239d
 8002388:	080023b1 	.word	0x080023b1
 800238c:	4a79      	ldr	r2, [pc, #484]	; (8002574 <HAL_GPIO_Init+0x2b4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e029      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e024      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01f      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e01a      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e013      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e009      	b.n	80023f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e000      	b.n	80023f0 <HAL_GPIO_Init+0x130>
          break;
 80023ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d801      	bhi.n	80023fa <HAL_GPIO_Init+0x13a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	e001      	b.n	80023fe <HAL_GPIO_Init+0x13e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d802      	bhi.n	800240c <HAL_GPIO_Init+0x14c>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x152>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3b08      	subs	r3, #8
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	210f      	movs	r1, #15
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	6a39      	ldr	r1, [r7, #32]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80b1 	beq.w	80025a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a4c      	ldr	r2, [pc, #304]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x2b8>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002458:	4a48      	ldr	r2, [pc, #288]	; (800257c <HAL_GPIO_Init+0x2bc>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_GPIO_Init+0x2c0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_GPIO_Init+0x1ec>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3f      	ldr	r2, [pc, #252]	; (8002584 <HAL_GPIO_Init+0x2c4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00d      	beq.n	80024a8 <HAL_GPIO_Init+0x1e8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3e      	ldr	r2, [pc, #248]	; (8002588 <HAL_GPIO_Init+0x2c8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d007      	beq.n	80024a4 <HAL_GPIO_Init+0x1e4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3d      	ldr	r2, [pc, #244]	; (800258c <HAL_GPIO_Init+0x2cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_GPIO_Init+0x1e0>
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e004      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_GPIO_Init+0x1ee>
 80024ac:	2300      	movs	r3, #0
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024be:	492f      	ldr	r1, [pc, #188]	; (800257c <HAL_GPIO_Init+0x2bc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4928      	ldr	r1, [pc, #160]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4918      	ldr	r1, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4914      	ldr	r1, [pc, #80]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d021      	beq.n	8002594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	490e      	ldr	r1, [pc, #56]	; (8002590 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
 800255c:	e021      	b.n	80025a2 <HAL_GPIO_Init+0x2e2>
 800255e:	bf00      	nop
 8002560:	10320000 	.word	0x10320000
 8002564:	10310000 	.word	0x10310000
 8002568:	10220000 	.word	0x10220000
 800256c:	10210000 	.word	0x10210000
 8002570:	10120000 	.word	0x10120000
 8002574:	10110000 	.word	0x10110000
 8002578:	40021000 	.word	0x40021000
 800257c:	40010000 	.word	0x40010000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40011000 	.word	0x40011000
 800258c:	40011400 	.word	0x40011400
 8002590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_GPIO_Init+0x304>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	43db      	mvns	r3, r3
 800259c:	4909      	ldr	r1, [pc, #36]	; (80025c4 <HAL_GPIO_Init+0x304>)
 800259e:	4013      	ands	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f47f ae8e 	bne.w	80022d4 <HAL_GPIO_Init+0x14>
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	372c      	adds	r7, #44	; 0x2c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12b      	b.n	8002862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff f9de 	bl	80019e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f001 fbf0 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a81      	ldr	r2, [pc, #516]	; (800286c <HAL_I2C_Init+0x274>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a80      	ldr	r2, [pc, #512]	; (8002870 <HAL_I2C_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a7d      	ldr	r2, [pc, #500]	; (8002874 <HAL_I2C_Init+0x27c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a78      	ldr	r2, [pc, #480]	; (8002878 <HAL_I2C_Init+0x280>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	; (800286c <HAL_I2C_Init+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_I2C_Init+0x284>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <HAL_I2C_Init+0x274>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d819      	bhi.n	8002734 <HAL_I2C_Init+0x13c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_Init+0x138>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb1 f3f3 	udiv	r3, r1, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	e051      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002730:	2304      	movs	r3, #4
 8002732:	e04f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_I2C_Init+0x168>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_I2C_Init+0x18e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x196>
 800278a:	2301      	movs	r3, #1
 800278c:	e022      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_I2C_Init+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e58      	subs	r0, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6911      	ldr	r1, [r2, #16]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	000186a0 	.word	0x000186a0
 8002870:	001e847f 	.word	0x001e847f
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	431bde83 	.word	0x431bde83
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289a:	f7ff fbd5 	bl	8002048 <HAL_GetTick>
 800289e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	f040 80d9 	bne.w	8002a60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	496d      	ldr	r1, [pc, #436]	; (8002a6c <HAL_I2C_Mem_Write+0x1ec>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fcc1 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0cc      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_I2C_Mem_Write+0x56>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0c5      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2221      	movs	r2, #33	; 0x21
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800292c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_I2C_Mem_Write+0x1f0>)
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293e:	88f8      	ldrh	r0, [r7, #6]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	4603      	mov	r3, r0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 faf8 	bl	8002f44 <I2C_RequestMemoryWrite>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d052      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e081      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fd86 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b04      	cmp	r3, #4
 8002974:	d107      	bne.n	8002986 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06b      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_I2C_Mem_Write+0x180>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1aa      	bne.n	800295e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fd79 	bl	8003504 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e016      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000

08002a74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a92:	f7ff fad9 	bl	8002048 <HAL_GetTick>
 8002a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	f040 8244 	bne.w	8002f2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2319      	movs	r3, #25
 8002aac:	2201      	movs	r2, #1
 8002aae:	4982      	ldr	r1, [pc, #520]	; (8002cb8 <HAL_I2C_Mem_Read+0x244>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fbc5 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e237      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Mem_Read+0x5a>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e230      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d007      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2222      	movs	r2, #34	; 0x22
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2240      	movs	r2, #64	; 0x40
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a62      	ldr	r2, [pc, #392]	; (8002cbc <HAL_I2C_Mem_Read+0x248>)
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b36:	88f8      	ldrh	r0, [r7, #6]
 8002b38:	893a      	ldrh	r2, [r7, #8]
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4603      	mov	r3, r0
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa92 	bl	8003070 <I2C_RequestMemoryRead>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1ec      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d113      	bne.n	8002b86 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e1c0      	b.n	8002f08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11e      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9e:	b672      	cpsid	i
}
 8002ba0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bc8:	b662      	cpsie	i
}
 8002bca:	e035      	b.n	8002c38 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d11e      	bne.n	8002c12 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c0e:	b662      	cpsie	i
}
 8002c10:	e012      	b.n	8002c38 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c20:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c38:	e166      	b.n	8002f08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	f200 811f 	bhi.w	8002e82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d123      	bne.n	8002c94 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fc9f 	bl	8003594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e167      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c92:	e139      	b.n	8002f08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d152      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <HAL_I2C_Mem_Read+0x24c>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 faca 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e13c      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
 8002cb6:	bf00      	nop
 8002cb8:	00100002 	.word	0x00100002
 8002cbc:	ffff0000 	.word	0xffff0000
 8002cc0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0a:	b662      	cpsie	i
}
 8002d0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d40:	e0e2      	b.n	8002f08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2200      	movs	r2, #0
 8002d4a:	497b      	ldr	r1, [pc, #492]	; (8002f38 <HAL_I2C_Mem_Read+0x4c4>)
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa77 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0e9      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_I2C_Mem_Read+0x4c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	08db      	lsrs	r3, r3, #3
 8002da8:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_I2C_Mem_Read+0x4cc>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a1a      	lsrs	r2, r3, #8
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00da      	lsls	r2, r3, #3
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d118      	bne.n	8002dfa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dea:	b662      	cpsie	i
}
 8002dec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e09a      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d1d9      	bne.n	8002dbc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4a:	b662      	cpsie	i
}
 8002e4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e80:	e042      	b.n	8002f08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fb84 	bl	8003594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e04c      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d118      	bne.n	8002f08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f ae94 	bne.w	8002c3a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	00010004 	.word	0x00010004
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	14f8b589 	.word	0x14f8b589

08002f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f960 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d103      	bne.n	8002f9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e05f      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	492d      	ldr	r1, [pc, #180]	; (800306c <I2C_RequestMemoryWrite+0x128>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f9bb 	bl	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e04c      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa46 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d107      	bne.n	8003006 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e02b      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003010:	893b      	ldrh	r3, [r7, #8]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	e021      	b.n	8003060 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b29b      	uxth	r3, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa20 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b04      	cmp	r3, #4
 8003040:	d107      	bne.n	8003052 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e005      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003056:	893b      	ldrh	r3, [r7, #8]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	00010002 	.word	0x00010002

08003070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	817b      	strh	r3, [r7, #10]
 8003082:	460b      	mov	r3, r1
 8003084:	813b      	strh	r3, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003098:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8c2 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d103      	bne.n	80030da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0aa      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030de:	897b      	ldrh	r3, [r7, #10]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	4952      	ldr	r1, [pc, #328]	; (800323c <I2C_RequestMemoryRead+0x1cc>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f91d 	bl	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e097      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f9a8 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e076      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314c:	893b      	ldrh	r3, [r7, #8]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	e021      	b.n	800319c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003158:	893b      	ldrh	r3, [r7, #8]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	6a39      	ldr	r1, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f982 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b04      	cmp	r3, #4
 800317c:	d107      	bne.n	800318e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e050      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f967 	bl	8003474 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d107      	bne.n	80031c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e035      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f82b 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e013      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800320c:	897b      	ldrh	r3, [r7, #10]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	6a3a      	ldr	r2, [r7, #32]
 8003220:	4906      	ldr	r1, [pc, #24]	; (800323c <I2C_RequestMemoryRead+0x1cc>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f886 	bl	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00010002 	.word	0x00010002

08003240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003250:	e048      	b.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d044      	beq.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe fef5 	bl	8002048 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d139      	bne.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	0c1b      	lsrs	r3, r3, #16
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10d      	bne.n	8003296 <I2C_WaitOnFlagUntilTimeout+0x56>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	e00c      	b.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	43da      	mvns	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d116      	bne.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e023      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d10d      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	43da      	mvns	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4013      	ands	r3, r2
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	e00c      	b.n	8003324 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	43da      	mvns	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	429a      	cmp	r2, r3
 8003328:	d093      	beq.n	8003252 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003342:	e071      	b.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d123      	bne.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800336c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e067      	b.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d041      	beq.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a4:	f7fe fe50 	bl	8002048 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d302      	bcc.n	80033ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d136      	bne.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d10c      	bne.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e00b      	b.n	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e021      	b.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10c      	bne.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	e00b      	b.n	8003464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af6d 	bne.w	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003480:	e034      	b.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8e3 	bl	800364e <I2C_IsAcknowledgeFailed>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e034      	b.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d028      	beq.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fdd5 	bl	8002048 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b80      	cmp	r3, #128	; 0x80
 80034bc:	d016      	beq.n	80034ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d1c3      	bne.n	8003482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003510:	e034      	b.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f89b 	bl	800364e <I2C_IsAcknowledgeFailed>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e034      	b.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d028      	beq.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fd8d 	bl	8002048 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11d      	bne.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d016      	beq.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e007      	b.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b04      	cmp	r3, #4
 8003588:	d1c3      	bne.n	8003512 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035a0:	e049      	b.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d119      	bne.n	80035e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0210 	mvn.w	r2, #16
 80035b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e030      	b.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7fe fd30 	bl	8002048 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11d      	bne.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d016      	beq.n	8003636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e007      	b.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d1ae      	bne.n	80035a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d11b      	bne.n	800369e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e272      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036cc:	4b92      	ldr	r3, [pc, #584]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d00c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d8:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d112      	bne.n	800370a <HAL_RCC_OscConfig+0x5e>
 80036e4:	4b8c      	ldr	r3, [pc, #560]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d10b      	bne.n	800370a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f2:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d06c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x12c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d168      	bne.n	80037d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e24c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x76>
 8003714:	4b80      	ldr	r3, [pc, #512]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7f      	ldr	r2, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e02e      	b.n	8003780 <HAL_RCC_OscConfig+0xd4>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10c      	bne.n	8003744 <HAL_RCC_OscConfig+0x98>
 800372a:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7a      	ldr	r2, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	4b78      	ldr	r3, [pc, #480]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a77      	ldr	r2, [pc, #476]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0xd4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0xbc>
 800374e:	4b72      	ldr	r3, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a71      	ldr	r2, [pc, #452]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6e      	ldr	r2, [pc, #440]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0xd4>
 8003768:	4b6b      	ldr	r3, [pc, #428]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6a      	ldr	r2, [pc, #424]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a67      	ldr	r2, [pc, #412]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fc5e 	bl	8002048 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fc5a 	bl	8002048 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	; 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e200      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0xe4>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fc4a 	bl	8002048 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fc46 	bl	8002048 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1ec      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x10c>
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x18c>
 80037fe:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	4b43      	ldr	r3, [pc, #268]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_RCC_OscConfig+0x176>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1c0      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4939      	ldr	r1, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	e03a      	b.n	80038ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCC_OscConfig+0x270>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe fbff 	bl	8002048 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384e:	f7fe fbfb 	bl	8002048 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1a1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4927      	ldr	r1, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003882:	4b26      	ldr	r3, [pc, #152]	; (800391c <HAL_RCC_OscConfig+0x270>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fbde 	bl	8002048 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003890:	f7fe fbda 	bl	8002048 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e180      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03a      	beq.n	8003930 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d019      	beq.n	80038f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fe fbbe 	bl	8002048 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe fbba 	bl	8002048 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e160      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ee:	2001      	movs	r0, #1
 80038f0:	f000 face 	bl	8003e90 <RCC_Delay>
 80038f4:	e01c      	b.n	8003930 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_RCC_OscConfig+0x274>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fe fba4 	bl	8002048 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003902:	e00f      	b.n	8003924 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe fba0 	bl	8002048 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d908      	bls.n	8003924 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e146      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	42420000 	.word	0x42420000
 8003920:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003924:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e9      	bne.n	8003904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a6 	beq.w	8003a8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003942:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4a87      	ldr	r2, [pc, #540]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	61d3      	str	r3, [r2, #28]
 800395a:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b82      	ldr	r3, [pc, #520]	; (8003b74 <HAL_RCC_OscConfig+0x4c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d118      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b7f      	ldr	r3, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_RCC_OscConfig+0x4c8>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fe fb61 	bl	8002048 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fe fb5d 	bl	8002048 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b64      	cmp	r3, #100	; 0x64
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e103      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b75      	ldr	r3, [pc, #468]	; (8003b74 <HAL_RCC_OscConfig+0x4c8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x312>
 80039b0:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a6e      	ldr	r2, [pc, #440]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6213      	str	r3, [r2, #32]
 80039bc:	e02d      	b.n	8003a1a <HAL_RCC_OscConfig+0x36e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x334>
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4a69      	ldr	r2, [pc, #420]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a66      	ldr	r2, [pc, #408]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 0304 	bic.w	r3, r3, #4
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	e01c      	b.n	8003a1a <HAL_RCC_OscConfig+0x36e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCC_OscConfig+0x356>
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a60      	ldr	r2, [pc, #384]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a5d      	ldr	r2, [pc, #372]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	e00b      	b.n	8003a1a <HAL_RCC_OscConfig+0x36e>
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a5a      	ldr	r2, [pc, #360]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	4b58      	ldr	r3, [pc, #352]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a57      	ldr	r2, [pc, #348]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d015      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a22:	f7fe fb11 	bl	8002048 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fe fb0d 	bl	8002048 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0b1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a40:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ee      	beq.n	8003a2a <HAL_RCC_OscConfig+0x37e>
 8003a4c:	e014      	b.n	8003a78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fafb 	bl	8002048 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe faf7 	bl	8002048 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e09b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6c:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1ee      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d105      	bne.n	8003a8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8087 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d061      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d146      	bne.n	8003b36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aae:	f7fe facb 	bl	8002048 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe fac7 	bl	8002048 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e06d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac8:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d108      	bne.n	8003af0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4921      	ldr	r1, [pc, #132]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a19      	ldr	r1, [r3, #32]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	430b      	orrs	r3, r1
 8003b02:	491b      	ldr	r1, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x4cc>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fa9b 	bl	8002048 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fe fa97 	bl	8002048 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x46a>
 8003b34:	e035      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fa84 	bl	8002048 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe fa80 	bl	8002048 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e026      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x498>
 8003b62:	e01e      	b.n	8003ba2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e019      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x500>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0d0      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d910      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b67      	ldr	r3, [pc, #412]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 0207 	bic.w	r2, r3, #7
 8003bda:	4965      	ldr	r1, [pc, #404]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b63      	ldr	r3, [pc, #396]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0b8      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d020      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a58      	ldr	r2, [pc, #352]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a52      	ldr	r2, [pc, #328]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c30:	4b50      	ldr	r3, [pc, #320]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	494d      	ldr	r1, [pc, #308]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d040      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d115      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07f      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e073      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06b      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4936      	ldr	r1, [pc, #216]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fe f9d2 	bl	8002048 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fe f9ce 	bl	8002048 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e053      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d210      	bcs.n	8003d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	4922      	ldr	r1, [pc, #136]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e032      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4916      	ldr	r1, [pc, #88]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	490e      	ldr	r1, [pc, #56]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d3e:	f000 f821 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	490a      	ldr	r1, [pc, #40]	; (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1cc>)
 8003d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_ClockConfig+0x1d0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe f930 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40022000 	.word	0x40022000
 8003d74:	40021000 	.word	0x40021000
 8003d78:	080092c4 	.word	0x080092c4
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	20000004 	.word	0x20000004

08003d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	2300      	movs	r3, #0
 8003d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x36>
 8003db2:	e027      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003db6:	613b      	str	r3, [r7, #16]
      break;
 8003db8:	e027      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	0c9b      	lsrs	r3, r3, #18
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	4a17      	ldr	r2, [pc, #92]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dc4:	5cd3      	ldrb	r3, [r2, r3]
 8003dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d010      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0c5b      	lsrs	r3, r3, #17
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dde:	5cd3      	ldrb	r3, [r2, r3]
 8003de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e004      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	613b      	str	r3, [r7, #16]
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e06:	613b      	str	r3, [r7, #16]
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	693b      	ldr	r3, [r7, #16]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	080092dc 	.word	0x080092dc
 8003e24:	080092ec 	.word	0x080092ec
 8003e28:	003d0900 	.word	0x003d0900

08003e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e30:	4b02      	ldr	r3, [pc, #8]	; (8003e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	20000000 	.word	0x20000000

08003e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e44:	f7ff fff2 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	4903      	ldr	r1, [pc, #12]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e56:	5ccb      	ldrb	r3, [r1, r3]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	080092d4 	.word	0x080092d4

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	0adb      	lsrs	r3, r3, #11
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	080092d4 	.word	0x080092d4

08003e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <RCC_Delay+0x34>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <RCC_Delay+0x38>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0a5b      	lsrs	r3, r3, #9
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eac:	bf00      	nop
  }
  while (Delay --);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1e5a      	subs	r2, r3, #1
 8003eb2:	60fa      	str	r2, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f9      	bne.n	8003eac <RCC_Delay+0x1c>
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	10624dd3 	.word	0x10624dd3

08003ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e076      	b.n	8003fcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d009      	beq.n	8003f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fd9c 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	0c1a      	lsrs	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f002 0204 	and.w	r2, r2, #4
 8003faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e041      	b.n	800406a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd fd78 	bl	8001af0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 fb22 	bl	800465c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d109      	bne.n	8004098 <HAL_TIM_PWM_Start+0x24>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e022      	b.n	80040de <HAL_TIM_PWM_Start+0x6a>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d109      	bne.n	80040b2 <HAL_TIM_PWM_Start+0x3e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	e015      	b.n	80040de <HAL_TIM_PWM_Start+0x6a>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start+0x58>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e008      	b.n	80040de <HAL_TIM_PWM_Start+0x6a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e05e      	b.n	80041a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x82>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f4:	e013      	b.n	800411e <HAL_TIM_PWM_Start+0xaa>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0x92>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	e00b      	b.n	800411e <HAL_TIM_PWM_Start+0xaa>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Start+0xa2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004114:	e003      	b.n	800411e <HAL_TIM_PWM_Start+0xaa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2201      	movs	r2, #1
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fc82 	bl	8004a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_TIM_PWM_Start+0x138>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d107      	bne.n	8004146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_TIM_PWM_Start+0x138>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIM_PWM_Start+0xfa>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d009      	beq.n	800416e <HAL_TIM_PWM_Start+0xfa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <HAL_TIM_PWM_Start+0x13c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIM_PWM_Start+0xfa>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_TIM_PWM_Start+0x140>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d111      	bne.n	8004192 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b06      	cmp	r3, #6
 800417e:	d010      	beq.n	80041a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	e007      	b.n	80041a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800

080041b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fc30 	bl	8004a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a29      	ldr	r2, [pc, #164]	; (800427c <HAL_TIM_PWM_Stop+0xc4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d117      	bne.n	800420a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_TIM_PWM_Stop+0x52>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	f240 4344 	movw	r3, #1092	; 0x444
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <HAL_TIM_PWM_Stop+0x52>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	f241 1311 	movw	r3, #4369	; 0x1111
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <HAL_TIM_PWM_Stop+0x82>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	f240 4344 	movw	r3, #1092	; 0x444
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <HAL_TIM_PWM_Stop+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Stop+0x92>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004248:	e013      	b.n	8004272 <HAL_TIM_PWM_Stop+0xba>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Stop+0xa2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	e00b      	b.n	8004272 <HAL_TIM_PWM_Stop+0xba>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Stop+0xb2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004268:	e003      	b.n	8004272 <HAL_TIM_PWM_Stop+0xba>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40012c00 	.word	0x40012c00

08004280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0202 	mvn.w	r2, #2
 80042ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9af 	bl	8004626 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9a2 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9b1 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0204 	mvn.w	r2, #4
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f985 	bl	8004626 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f978 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f987 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0208 	mvn.w	r2, #8
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2204      	movs	r2, #4
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f95b 	bl	8004626 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f94e 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f95d 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b10      	cmp	r3, #16
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b10      	cmp	r3, #16
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0210 	mvn.w	r2, #16
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2208      	movs	r2, #8
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f931 	bl	8004626 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f924 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f933 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0201 	mvn.w	r2, #1
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd faaa 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b80      	cmp	r3, #128	; 0x80
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fbdc 	bl	8004be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8f7 	bl	800464a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b20      	cmp	r3, #32
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0220 	mvn.w	r2, #32
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fba7 	bl	8004bd6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0ae      	b.n	800460c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	f200 809f 	bhi.w	80045fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	080045fd 	.word	0x080045fd
 80044cc:	080045fd 	.word	0x080045fd
 80044d0:	080045fd 	.word	0x080045fd
 80044d4:	08004539 	.word	0x08004539
 80044d8:	080045fd 	.word	0x080045fd
 80044dc:	080045fd 	.word	0x080045fd
 80044e0:	080045fd 	.word	0x080045fd
 80044e4:	0800457b 	.word	0x0800457b
 80044e8:	080045fd 	.word	0x080045fd
 80044ec:	080045fd 	.word	0x080045fd
 80044f0:	080045fd 	.word	0x080045fd
 80044f4:	080045bb 	.word	0x080045bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f90e 	bl	8004720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	619a      	str	r2, [r3, #24]
      break;
 8004536:	e064      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f954 	bl	80047ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6999      	ldr	r1, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
      break;
 8004578:	e043      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f99d 	bl	80048c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0208 	orr.w	r2, r2, #8
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0204 	bic.w	r2, r2, #4
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	61da      	str	r2, [r3, #28]
      break;
 80045b8:	e023      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f9e7 	bl	8004994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69d9      	ldr	r1, [r3, #28]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	021a      	lsls	r2, r3, #8
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	61da      	str	r2, [r3, #28]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a29      	ldr	r2, [pc, #164]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d007      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_Base_SetConfig+0x30>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a25      	ldr	r2, [pc, #148]	; (800471c <TIM_Base_SetConfig+0xc0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d108      	bne.n	800469e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00b      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a19      	ldr	r2, [pc, #100]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <TIM_Base_SetConfig+0xc0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <TIM_Base_SetConfig+0xb8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800

08004720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0201 	bic.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0302 	bic.w	r3, r3, #2
 8004768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <TIM_OC1_SetConfig+0xc8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0308 	bic.w	r3, r3, #8
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <TIM_OC1_SetConfig+0xc8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	621a      	str	r2, [r3, #32]
}
 80047dc:	bf00      	nop
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40012c00 	.word	0x40012c00

080047ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1d      	ldr	r2, [pc, #116]	; (80048bc <TIM_OC2_SetConfig+0xd0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10d      	bne.n	8004868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a14      	ldr	r2, [pc, #80]	; (80048bc <TIM_OC2_SetConfig+0xd0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d113      	bne.n	8004898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	40012c00 	.word	0x40012c00

080048c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00

08004994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	; (8004a2c <TIM_OC4_SetConfig+0x98>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d109      	bne.n	8004a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00

08004a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e046      	b.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004adc:	d009      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10c      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800

08004b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e03d      	b.n	8004bcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e042      	b.n	8004c92 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd f851 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2224      	movs	r2, #36	; 0x24
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f91c 	bl	8004e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b08a      	sub	sp, #40	; 0x28
 8004c9e:	af02      	add	r7, sp, #8
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d16d      	bne.n	8004d96 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_UART_Transmit+0x2c>
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e066      	b.n	8004d98 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	; 0x21
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd8:	f7fd f9b6 	bl	8002048 <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	d108      	bne.n	8004d06 <HAL_UART_Transmit+0x6c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e003      	b.n	8004d0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d0e:	e02a      	b.n	8004d66 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f840 	bl	8004da0 <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e036      	b.n	8004d98 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	3302      	adds	r3, #2
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e007      	b.n	8004d58 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1cf      	bne.n	8004d10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	2140      	movs	r1, #64	; 0x40
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f810 	bl	8004da0 <UART_WaitOnFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e006      	b.n	8004d98 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b090      	sub	sp, #64	; 0x40
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	603b      	str	r3, [r7, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db0:	e050      	b.n	8004e54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d04c      	beq.n	8004e54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc0:	f7fd f942 	bl	8002048 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d241      	bcs.n	8004e54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004df0:	637a      	str	r2, [r7, #52]	; 0x34
 8004df2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3314      	adds	r3, #20
 8004e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	613b      	str	r3, [r7, #16]
   return(result);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e24:	623a      	str	r2, [r7, #32]
 8004e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	69f9      	ldr	r1, [r7, #28]
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e00f      	b.n	8004e74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d09f      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3740      	adds	r7, #64	; 0x40
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eb6:	f023 030c 	bic.w	r3, r3, #12
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <UART_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fe ffc0 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	e002      	b.n	8004ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe ffa8 	bl	8003e40 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009a      	lsls	r2, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <UART_SetConfig+0x118>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	0119      	lsls	r1, r3, #4
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009a      	lsls	r2, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <UART_SetConfig+0x118>)
 8004f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2064      	movs	r0, #100	; 0x64
 8004f32:	fb00 f303 	mul.w	r3, r0, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	3332      	adds	r3, #50	; 0x32
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <UART_SetConfig+0x118>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f48:	4419      	add	r1, r3
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009a      	lsls	r2, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <UART_SetConfig+0x118>)
 8004f62:	fba3 0302 	umull	r0, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2064      	movs	r0, #100	; 0x64
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	; 0x32
 8004f74:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <UART_SetConfig+0x118>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	440a      	add	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40013800 	.word	0x40013800
 8004f94:	51eb851f 	.word	0x51eb851f

08004f98 <Self_test_mpu6050>:
#include "mpu6050_driver.h"
#define DEBUG_mpu 0
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

void Self_test_mpu6050(I2C_HandleTypeDef *hi2c) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b092      	sub	sp, #72	; 0x48
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	6078      	str	r0, [r7, #4]

	 uint8_t data[4] = {0} ;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t  Gyro_ST[3] = {0};
 8004fa4:	4bc8      	ldr	r3, [pc, #800]	; (80052c8 <Self_test_mpu6050+0x330>)
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	853b      	strh	r3, [r7, #40]	; 0x28
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 uint8_t  ACCL_ST[3] = {0} ;
 8004fb0:	4bc5      	ldr	r3, [pc, #788]	; (80052c8 <Self_test_mpu6050+0x330>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 float Gyro_FT[3] = {0} ;
 8004fbc:	f107 0318 	add.w	r3, r7, #24
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
	 float Accl_FT[3] = {0} ;
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	609a      	str	r2, [r3, #8]

	 // begin test
	 data[0] = 0xE0;
 8004fd4:	23e0      	movs	r3, #224	; 0xe0
 8004fd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable gyro self test
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	9302      	str	r3, [sp, #8]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2301      	movs	r3, #1
 8004fec:	221b      	movs	r2, #27
 8004fee:	21d0      	movs	r1, #208	; 0xd0
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd fc45 	bl	8002880 <HAL_I2C_Mem_Write>
	 data[0] = 0xF0 ;
 8004ff6:	23f0      	movs	r3, #240	; 0xf0
 8004ff8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable accel self test
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	2301      	movs	r3, #1
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	221c      	movs	r2, #28
 8005010:	21d0      	movs	r1, #208	; 0xd0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd fc34 	bl	8002880 <HAL_I2C_Mem_Write>
	 HAL_Delay(150) ;
 8005018:	2096      	movs	r0, #150	; 0x96
 800501a:	f7fd f81f 	bl	800205c <HAL_Delay>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_X, 1, &data[0], 1, HAL_MAX_DELAY) ;
 800501e:	f04f 33ff 	mov.w	r3, #4294967295
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	2301      	movs	r3, #1
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2301      	movs	r3, #1
 8005030:	220d      	movs	r2, #13
 8005032:	21d0      	movs	r1, #208	; 0xd0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fd fd1d 	bl	8002a74 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Y, 1, &data[1], 1, HAL_MAX_DELAY) ;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	2301      	movs	r3, #1
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005048:	3301      	adds	r3, #1
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2301      	movs	r3, #1
 800504e:	220e      	movs	r2, #14
 8005050:	21d0      	movs	r1, #208	; 0xd0
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fd fd0e 	bl	8002a74 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Z, 1, &data[2], 1, HAL_MAX_DELAY) ;
 8005058:	f04f 33ff 	mov.w	r3, #4294967295
 800505c:	9302      	str	r3, [sp, #8]
 800505e:	2301      	movs	r3, #1
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005066:	3302      	adds	r3, #2
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2301      	movs	r3, #1
 800506c:	220f      	movs	r2, #15
 800506e:	21d0      	movs	r1, #208	; 0xd0
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fd fcff 	bl	8002a74 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_A, 1, &data[3], 1, HAL_MAX_DELAY) ;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	2301      	movs	r3, #1
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005084:	3303      	adds	r3, #3
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2301      	movs	r3, #1
 800508a:	2210      	movs	r2, #16
 800508c:	21d0      	movs	r1, #208	; 0xd0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd fcf0 	bl	8002a74 <HAL_I2C_Mem_Read>

	 Gyro_ST[0] = (data[0] & 0x1F) ;	// X
 8005094:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 Gyro_ST[1] = (data[1] & 0x1F) ;	// Y
 80050a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 Gyro_ST[2] = (data[2] & 0x1F) ;	// Z
 80050b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	 ACCL_ST[0] = (((data[0] &  0xE0 ) >> 3) | ((data[3] & 0x30 ) >> 4));	//X
 80050be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050c2:	10db      	asrs	r3, r3, #3
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f003 031c 	and.w	r3, r3, #28
 80050ca:	b25a      	sxtb	r2, r3
 80050cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050d0:	111b      	asrs	r3, r3, #4
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	4313      	orrs	r3, r2
 80050dc:	b25b      	sxtb	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 ACCL_ST[1] = (((data[1] &  0xE0 ) >> 3) | ((data[3] & 0x0C ) >> 2));	//Y
 80050e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050e8:	10db      	asrs	r3, r3, #3
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f003 031c 	and.w	r3, r3, #28
 80050f0:	b25a      	sxtb	r2, r3
 80050f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050f6:	109b      	asrs	r3, r3, #2
 80050f8:	b25b      	sxtb	r3, r3
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	4313      	orrs	r3, r2
 8005102:	b25b      	sxtb	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 ACCL_ST[2] = (((data[2] &  0xE0 ) >> 3) | ((data[3] & 0x03 ) >> 0)); //Z
 800510a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800510e:	10db      	asrs	r3, r3, #3
 8005110:	b25b      	sxtb	r3, r3
 8005112:	f003 031c 	and.w	r3, r3, #28
 8005116:	b25a      	sxtb	r2, r3
 8005118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800511c:	b25b      	sxtb	r3, r3
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	b25b      	sxtb	r3, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	b25b      	sxtb	r3, r3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("ACC_ST[0] %u \n" , ACCL_ST[0]) ;
	printf("ACC_ST[1] %u \n" , ACCL_ST[1]) ;
	printf("ACC_ST[2] %u \n" , ACCL_ST[3]) ;
#endif

	Gyro_FT[0] = 25.0*131.0*(powf(1.406,Gyro_ST[0]) - 1.0) ;
 800512e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb fdae 	bl	8000c94 <__aeabi_ui2f>
 8005138:	4603      	mov	r3, r0
 800513a:	4619      	mov	r1, r3
 800513c:	4863      	ldr	r0, [pc, #396]	; (80052cc <Self_test_mpu6050+0x334>)
 800513e:	f003 fa81 	bl	8008644 <powf>
 8005142:	4603      	mov	r3, r0
 8005144:	4618      	mov	r0, r3
 8005146:	f7fb f96f 	bl	8000428 <__aeabi_f2d>
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	4b60      	ldr	r3, [pc, #384]	; (80052d0 <Self_test_mpu6050+0x338>)
 8005150:	f7fb f80a 	bl	8000168 <__aeabi_dsub>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	a354      	add	r3, pc, #336	; (adr r3, 80052b0 <Self_test_mpu6050+0x318>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb f9b9 	bl	80004d8 <__aeabi_dmul>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	f7fb fc8b 	bl	8000a88 <__aeabi_d2f>
 8005172:	4603      	mov	r3, r0
 8005174:	61bb      	str	r3, [r7, #24]
	Gyro_FT[1] = -25.0*131.0*(powf(1.406,Gyro_ST[1]) - 1.0) ;
 8005176:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb fd8a 	bl	8000c94 <__aeabi_ui2f>
 8005180:	4603      	mov	r3, r0
 8005182:	4619      	mov	r1, r3
 8005184:	4851      	ldr	r0, [pc, #324]	; (80052cc <Self_test_mpu6050+0x334>)
 8005186:	f003 fa5d 	bl	8008644 <powf>
 800518a:	4603      	mov	r3, r0
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb f94b 	bl	8000428 <__aeabi_f2d>
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	4b4e      	ldr	r3, [pc, #312]	; (80052d0 <Self_test_mpu6050+0x338>)
 8005198:	f7fa ffe6 	bl	8000168 <__aeabi_dsub>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	a344      	add	r3, pc, #272	; (adr r3, 80052b8 <Self_test_mpu6050+0x320>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb f995 	bl	80004d8 <__aeabi_dmul>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7fb fc67 	bl	8000a88 <__aeabi_d2f>
 80051ba:	4603      	mov	r3, r0
 80051bc:	61fb      	str	r3, [r7, #28]
	Gyro_FT[2] = 25.0*131.0*(powf(1.406,Gyro_ST[2]) - 1.0) ;
 80051be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb fd66 	bl	8000c94 <__aeabi_ui2f>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4619      	mov	r1, r3
 80051cc:	483f      	ldr	r0, [pc, #252]	; (80052cc <Self_test_mpu6050+0x334>)
 80051ce:	f003 fa39 	bl	8008644 <powf>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fb f927 	bl	8000428 <__aeabi_f2d>
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	4b3c      	ldr	r3, [pc, #240]	; (80052d0 <Self_test_mpu6050+0x338>)
 80051e0:	f7fa ffc2 	bl	8000168 <__aeabi_dsub>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	a330      	add	r3, pc, #192	; (adr r3, 80052b0 <Self_test_mpu6050+0x318>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f7fb fc43 	bl	8000a88 <__aeabi_d2f>
 8005202:	4603      	mov	r3, r0
 8005204:	623b      	str	r3, [r7, #32]

	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[0] - 1.0)/(30)))); ;
 8005206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb f8fa 	bl	8000404 <__aeabi_i2d>
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <Self_test_mpu6050+0x338>)
 8005216:	f7fa ffa7 	bl	8000168 <__aeabi_dsub>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	4b2b      	ldr	r3, [pc, #172]	; (80052d4 <Self_test_mpu6050+0x33c>)
 8005228:	f7fb fa80 	bl	800072c <__aeabi_ddiv>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f7fb fc28 	bl	8000a88 <__aeabi_d2f>
 8005238:	4603      	mov	r3, r0
 800523a:	4619      	mov	r1, r3
 800523c:	4826      	ldr	r0, [pc, #152]	; (80052d8 <Self_test_mpu6050+0x340>)
 800523e:	f003 fa01 	bl	8008644 <powf>
 8005242:	4603      	mov	r3, r0
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f8ef 	bl	8000428 <__aeabi_f2d>
 800524a:	a31d      	add	r3, pc, #116	; (adr r3, 80052c0 <Self_test_mpu6050+0x328>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb f942 	bl	80004d8 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb fc14 	bl	8000a88 <__aeabi_d2f>
 8005260:	4603      	mov	r3, r0
 8005262:	60fb      	str	r3, [r7, #12]
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
							  ((ACCL_ST[1] - 1.0)/(30))));
 8005264:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005268:	4618      	mov	r0, r3
 800526a:	f7fb f8cb 	bl	8000404 <__aeabi_i2d>
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <Self_test_mpu6050+0x338>)
 8005274:	f7fa ff78 	bl	8000168 <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <Self_test_mpu6050+0x33c>)
 8005286:	f7fb fa51 	bl	800072c <__aeabi_ddiv>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f7fb fbf9 	bl	8000a88 <__aeabi_d2f>
 8005296:	4603      	mov	r3, r0
 8005298:	4619      	mov	r1, r3
 800529a:	480f      	ldr	r0, [pc, #60]	; (80052d8 <Self_test_mpu6050+0x340>)
 800529c:	f003 f9d2 	bl	8008644 <powf>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fb f8c0 	bl	8000428 <__aeabi_f2d>
 80052a8:	e018      	b.n	80052dc <Self_test_mpu6050+0x344>
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w
 80052b0:	00000000 	.word	0x00000000
 80052b4:	40a99600 	.word	0x40a99600
 80052b8:	00000000 	.word	0x00000000
 80052bc:	c0a99600 	.word	0xc0a99600
 80052c0:	5c28f5c3 	.word	0x5c28f5c3
 80052c4:	4095c28f 	.word	0x4095c28f
 80052c8:	0800908c 	.word	0x0800908c
 80052cc:	3fb3f7cf 	.word	0x3fb3f7cf
 80052d0:	3ff00000 	.word	0x3ff00000
 80052d4:	403e0000 	.word	0x403e0000
 80052d8:	402d2d2d 	.word	0x402d2d2d
 80052dc:	a366      	add	r3, pc, #408	; (adr r3, 8005478 <Self_test_mpu6050+0x4e0>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb f8f9 	bl	80004d8 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7fb fbcb 	bl	8000a88 <__aeabi_d2f>
 80052f2:	4603      	mov	r3, r0
 80052f4:	613b      	str	r3, [r7, #16]
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[2] - 1.0)/(30)))) ;
 80052f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb f882 	bl	8000404 <__aeabi_i2d>
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	4b5e      	ldr	r3, [pc, #376]	; (8005480 <Self_test_mpu6050+0x4e8>)
 8005306:	f7fa ff2f 	bl	8000168 <__aeabi_dsub>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	4b5b      	ldr	r3, [pc, #364]	; (8005484 <Self_test_mpu6050+0x4ec>)
 8005318:	f7fb fa08 	bl	800072c <__aeabi_ddiv>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	f7fb fbb0 	bl	8000a88 <__aeabi_d2f>
 8005328:	4603      	mov	r3, r0
 800532a:	4619      	mov	r1, r3
 800532c:	4856      	ldr	r0, [pc, #344]	; (8005488 <Self_test_mpu6050+0x4f0>)
 800532e:	f003 f989 	bl	8008644 <powf>
 8005332:	4603      	mov	r3, r0
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb f877 	bl	8000428 <__aeabi_f2d>
 800533a:	a34f      	add	r3, pc, #316	; (adr r3, 8005478 <Self_test_mpu6050+0x4e0>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f8ca 	bl	80004d8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f7fb fb9c 	bl	8000a88 <__aeabi_d2f>
 8005350:	4603      	mov	r3, r0
 8005352:	617b      	str	r3, [r7, #20]
	printf("ACC_FT[0] %f \n" , Accl_FT[0]) ;
	printf("ACC_FT[1] %f \n" , Accl_FT[1]) ;
	printf("ACC_FT[2] %f \n" , Accl_FT[3]) ;
#endif

	float temp = 0 ;
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005360:	e03a      	b.n	80053d8 <Self_test_mpu6050+0x440>
	temp = (100 + ((( Gyro_ST[i]- Gyro_FT[i] )/ Gyro_FT[i] )*100 ));
 8005362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005366:	3338      	adds	r3, #56	; 0x38
 8005368:	443b      	add	r3, r7
 800536a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fb fc94 	bl	8000c9c <__aeabi_i2f>
 8005374:	4602      	mov	r2, r0
 8005376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	3338      	adds	r3, #56	; 0x38
 800537e:	443b      	add	r3, r7
 8005380:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f7fb fbd2 	bl	8000b30 <__aeabi_fsub>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	3338      	adds	r3, #56	; 0x38
 8005398:	443b      	add	r3, r7
 800539a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fb fd83 	bl	8000eac <__aeabi_fdiv>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4938      	ldr	r1, [pc, #224]	; (800548c <Self_test_mpu6050+0x4f4>)
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fb fcca 	bl	8000d44 <__aeabi_fmul>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4936      	ldr	r1, [pc, #216]	; (800548c <Self_test_mpu6050+0x4f4>)
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fb fbbd 	bl	8000b34 <__addsf3>
 80053ba:	4603      	mov	r3, r0
 80053bc:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Gyro %f \n", temp) ;
 80053be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c0:	f7fb f832 	bl	8000428 <__aeabi_f2d>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4831      	ldr	r0, [pc, #196]	; (8005490 <Self_test_mpu6050+0x4f8>)
 80053ca:	f001 f947 	bl	800665c <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 80053ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053d2:	3301      	adds	r3, #1
 80053d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80053d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d9c0      	bls.n	8005362 <Self_test_mpu6050+0x3ca>
	}
temp = 0 ;
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80053ec:	e03a      	b.n	8005464 <Self_test_mpu6050+0x4cc>

	temp = (100 + ((( ACCL_ST[i]- Accl_FT[i] )/ Accl_FT[i] )*100 ));
 80053ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80053f2:	3338      	adds	r3, #56	; 0x38
 80053f4:	443b      	add	r3, r7
 80053f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb fc4e 	bl	8000c9c <__aeabi_i2f>
 8005400:	4602      	mov	r2, r0
 8005402:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	3338      	adds	r3, #56	; 0x38
 800540a:	443b      	add	r3, r7
 800540c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fb fb8c 	bl	8000b30 <__aeabi_fsub>
 8005418:	4603      	mov	r3, r0
 800541a:	461a      	mov	r2, r3
 800541c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	3338      	adds	r3, #56	; 0x38
 8005424:	443b      	add	r3, r7
 8005426:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7fb fd3d 	bl	8000eac <__aeabi_fdiv>
 8005432:	4603      	mov	r3, r0
 8005434:	4915      	ldr	r1, [pc, #84]	; (800548c <Self_test_mpu6050+0x4f4>)
 8005436:	4618      	mov	r0, r3
 8005438:	f7fb fc84 	bl	8000d44 <__aeabi_fmul>
 800543c:	4603      	mov	r3, r0
 800543e:	4913      	ldr	r1, [pc, #76]	; (800548c <Self_test_mpu6050+0x4f4>)
 8005440:	4618      	mov	r0, r3
 8005442:	f7fb fb77 	bl	8000b34 <__addsf3>
 8005446:	4603      	mov	r3, r0
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Accl %f \n", temp) ;
 800544a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544c:	f7fa ffec 	bl	8000428 <__aeabi_f2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	480f      	ldr	r0, [pc, #60]	; (8005494 <Self_test_mpu6050+0x4fc>)
 8005456:	f001 f901 	bl	800665c <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 800545a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800545e:	3301      	adds	r3, #1
 8005460:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005464:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005468:	2b02      	cmp	r3, #2
 800546a:	d9c0      	bls.n	80053ee <Self_test_mpu6050+0x456>
	}
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3738      	adds	r7, #56	; 0x38
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	5c28f5c3 	.word	0x5c28f5c3
 800547c:	4095c28f 	.word	0x4095c28f
 8005480:	3ff00000 	.word	0x3ff00000
 8005484:	403e0000 	.word	0x403e0000
 8005488:	402d2d2d 	.word	0x402d2d2d
 800548c:	42c80000 	.word	0x42c80000
 8005490:	08009054 	.word	0x08009054
 8005494:	08009070 	.word	0x08009070

08005498 <Mpu6050_Init>:

void Mpu6050_Init(I2C_HandleTypeDef *hi2c ){
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af04      	add	r7, sp, #16
 800549e:	6078      	str	r0, [r7, #4]
uint8_t data = 0x00;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]

//who am I
data = MPU_DATASHEET_ADDR ;
 80054a4:	2368      	movs	r3, #104	; 0x68
 80054a6:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, WHO_AM_I, 1, &data, 1, HAL_MAX_DELAY) ;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	2301      	movs	r3, #1
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	f107 030f 	add.w	r3, r7, #15
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2301      	movs	r3, #1
 80054ba:	2275      	movs	r2, #117	; 0x75
 80054bc:	21d0      	movs	r1, #208	; 0xd0
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fd fad8 	bl	8002a74 <HAL_I2C_Mem_Read>
if (data != MPU_DATASHEET_ADDR) {
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b68      	cmp	r3, #104	; 0x68
 80054c8:	d003      	beq.n	80054d2 <Mpu6050_Init+0x3a>
	printf("who am i error \n");
 80054ca:	488f      	ldr	r0, [pc, #572]	; (8005708 <Mpu6050_Init+0x270>)
 80054cc:	f001 f92c 	bl	8006728 <puts>
 80054d0:	e007      	b.n	80054e2 <Mpu6050_Init+0x4a>
}else if (data == MPU_DATASHEET_ADDR ) {
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b68      	cmp	r3, #104	; 0x68
 80054d6:	d104      	bne.n	80054e2 <Mpu6050_Init+0x4a>
	printf("who am I value : %x \n", data) ;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	4619      	mov	r1, r3
 80054dc:	488b      	ldr	r0, [pc, #556]	; (800570c <Mpu6050_Init+0x274>)
 80054de:	f001 f8bd 	bl	800665c <iprintf>
}

// power mannagment 1
data = 0x01 ;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	9302      	str	r3, [sp, #8]
 80054ec:	2301      	movs	r3, #1
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f107 030f 	add.w	r3, r7, #15
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2301      	movs	r3, #1
 80054f8:	226b      	movs	r2, #107	; 0x6b
 80054fa:	21d0      	movs	r1, #208	; 0xd0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fd f9bf 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295
 8005506:	9302      	str	r3, [sp, #8]
 8005508:	2301      	movs	r3, #1
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	f107 030f 	add.w	r3, r7, #15
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2301      	movs	r3, #1
 8005514:	226b      	movs	r2, #107	; 0x6b
 8005516:	21d0      	movs	r1, #208	; 0xd0
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fd faab 	bl	8002a74 <HAL_I2C_Mem_Read>
if (data != 0x01) {
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d003      	beq.n	800552c <Mpu6050_Init+0x94>
	printf("pwr_mgmt1 error \n");
 8005524:	487a      	ldr	r0, [pc, #488]	; (8005710 <Mpu6050_Init+0x278>)
 8005526:	f001 f8ff 	bl	8006728 <puts>
 800552a:	e007      	b.n	800553c <Mpu6050_Init+0xa4>
}else if (data == 0x01 ) {
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d104      	bne.n	800553c <Mpu6050_Init+0xa4>
	printf("pwr_mgmt1 value : %d \n", data) ;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	4619      	mov	r1, r3
 8005536:	4877      	ldr	r0, [pc, #476]	; (8005714 <Mpu6050_Init+0x27c>)
 8005538:	f001 f890 	bl	800665c <iprintf>
}


// Configuration CONFIG 0x1A 26
data = 0x01;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	2301      	movs	r3, #1
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	f107 030f 	add.w	r3, r7, #15
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2301      	movs	r3, #1
 8005552:	221a      	movs	r2, #26
 8005554:	21d0      	movs	r1, #208	; 0xd0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fd f992 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	2301      	movs	r3, #1
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	f107 030f 	add.w	r3, r7, #15
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2301      	movs	r3, #1
 800556e:	221a      	movs	r2, #26
 8005570:	21d0      	movs	r1, #208	; 0xd0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd fa7e 	bl	8002a74 <HAL_I2C_Mem_Read>

if (data != 0x01) {
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d003      	beq.n	8005586 <Mpu6050_Init+0xee>
	printf("config error \n");
 800557e:	4866      	ldr	r0, [pc, #408]	; (8005718 <Mpu6050_Init+0x280>)
 8005580:	f001 f8d2 	bl	8006728 <puts>
 8005584:	e007      	b.n	8005596 <Mpu6050_Init+0xfe>
}else if (data == 0x01 ) {
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d104      	bne.n	8005596 <Mpu6050_Init+0xfe>
	printf("config value : %d \n", data) ;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	4619      	mov	r1, r3
 8005590:	4862      	ldr	r0, [pc, #392]	; (800571c <Mpu6050_Init+0x284>)
 8005592:	f001 f863 	bl	800665c <iprintf>
}

// Sample rate divider
data = 0x04;
 8005596:	2304      	movs	r3, #4
 8005598:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	2301      	movs	r3, #1
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	f107 030f 	add.w	r3, r7, #15
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	2301      	movs	r3, #1
 80055ac:	2219      	movs	r2, #25
 80055ae:	21d0      	movs	r1, #208	; 0xd0
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fd f965 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	2301      	movs	r3, #1
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	f107 030f 	add.w	r3, r7, #15
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2301      	movs	r3, #1
 80055c8:	2219      	movs	r2, #25
 80055ca:	21d0      	movs	r1, #208	; 0xd0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fd fa51 	bl	8002a74 <HAL_I2C_Mem_Read>

if (data != 0x04) {
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d003      	beq.n	80055e0 <Mpu6050_Init+0x148>
	printf("sample rate divider error \n");
 80055d8:	4851      	ldr	r0, [pc, #324]	; (8005720 <Mpu6050_Init+0x288>)
 80055da:	f001 f8a5 	bl	8006728 <puts>
 80055de:	e007      	b.n	80055f0 <Mpu6050_Init+0x158>
}else if (data == 0x04 ) {
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d104      	bne.n	80055f0 <Mpu6050_Init+0x158>
	printf("sample rate divider value : %d \n", data) ;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4619      	mov	r1, r3
 80055ea:	484e      	ldr	r0, [pc, #312]	; (8005724 <Mpu6050_Init+0x28c>)
 80055ec:	f001 f836 	bl	800665c <iprintf>
}


// Gyro Config
data = 0x08;
 80055f0:	2308      	movs	r3, #8
 80055f2:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	2301      	movs	r3, #1
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	f107 030f 	add.w	r3, r7, #15
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2301      	movs	r3, #1
 8005606:	221b      	movs	r2, #27
 8005608:	21d0      	movs	r1, #208	; 0xd0
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fd f938 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8005610:	f04f 33ff 	mov.w	r3, #4294967295
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	2301      	movs	r3, #1
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	f107 030f 	add.w	r3, r7, #15
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2301      	movs	r3, #1
 8005622:	221b      	movs	r2, #27
 8005624:	21d0      	movs	r1, #208	; 0xd0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fd fa24 	bl	8002a74 <HAL_I2C_Mem_Read>

if (data != 0x08) {
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d003      	beq.n	800563a <Mpu6050_Init+0x1a2>
	printf("Gyro config error \n ");
 8005632:	483d      	ldr	r0, [pc, #244]	; (8005728 <Mpu6050_Init+0x290>)
 8005634:	f001 f812 	bl	800665c <iprintf>
 8005638:	e007      	b.n	800564a <Mpu6050_Init+0x1b2>
}else if (data == 0x08 ) {
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d104      	bne.n	800564a <Mpu6050_Init+0x1b2>
	printf("gyro config value : %d \n", data) ;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	4619      	mov	r1, r3
 8005644:	4839      	ldr	r0, [pc, #228]	; (800572c <Mpu6050_Init+0x294>)
 8005646:	f001 f809 	bl	800665c <iprintf>
}

// Accl Config
data = 0x00;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800564e:	f04f 33ff 	mov.w	r3, #4294967295
 8005652:	9302      	str	r3, [sp, #8]
 8005654:	2301      	movs	r3, #1
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	f107 030f 	add.w	r3, r7, #15
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2301      	movs	r3, #1
 8005660:	221c      	movs	r2, #28
 8005662:	21d0      	movs	r1, #208	; 0xd0
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fd f90b 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	2301      	movs	r3, #1
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	f107 030f 	add.w	r3, r7, #15
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	2301      	movs	r3, #1
 800567c:	221c      	movs	r2, #28
 800567e:	21d0      	movs	r1, #208	; 0xd0
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fd f9f7 	bl	8002a74 <HAL_I2C_Mem_Read>

if (data != 0x00) {
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <Mpu6050_Init+0x1fc>
	printf("Accl config error \n");
 800568c:	4828      	ldr	r0, [pc, #160]	; (8005730 <Mpu6050_Init+0x298>)
 800568e:	f001 f84b 	bl	8006728 <puts>
 8005692:	e007      	b.n	80056a4 <Mpu6050_Init+0x20c>
}else if (data == 0x00 ) {
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <Mpu6050_Init+0x20c>
	printf("Accl config value : %d \n", data) ;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	4619      	mov	r1, r3
 800569e:	4825      	ldr	r0, [pc, #148]	; (8005734 <Mpu6050_Init+0x29c>)
 80056a0:	f000 ffdc 	bl	800665c <iprintf>
}

// signal path reset
data = 0x07 ;
 80056a4:	2307      	movs	r3, #7
 80056a6:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 80056a8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	2301      	movs	r3, #1
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f107 030f 	add.w	r3, r7, #15
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2301      	movs	r3, #1
 80056ba:	2268      	movs	r2, #104	; 0x68
 80056bc:	21d0      	movs	r1, #208	; 0xd0
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd f8de 	bl	8002880 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	2301      	movs	r3, #1
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f107 030f 	add.w	r3, r7, #15
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2301      	movs	r3, #1
 80056d6:	2268      	movs	r2, #104	; 0x68
 80056d8:	21d0      	movs	r1, #208	; 0xd0
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fd f9ca 	bl	8002a74 <HAL_I2C_Mem_Read>
if (data != 0x07) {
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b07      	cmp	r3, #7
 80056e4:	d003      	beq.n	80056ee <Mpu6050_Init+0x256>
	printf("(ignore) signal path reset error cannot read write only \n");
 80056e6:	4814      	ldr	r0, [pc, #80]	; (8005738 <Mpu6050_Init+0x2a0>)
 80056e8:	f001 f81e 	bl	8006728 <puts>
}else if (data == 0x07 ) {
	printf("signal path reset value : %d \n", data) ;
}

}
 80056ec:	e007      	b.n	80056fe <Mpu6050_Init+0x266>
}else if (data == 0x07 ) {
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b07      	cmp	r3, #7
 80056f2:	d104      	bne.n	80056fe <Mpu6050_Init+0x266>
	printf("signal path reset value : %d \n", data) ;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4810      	ldr	r0, [pc, #64]	; (800573c <Mpu6050_Init+0x2a4>)
 80056fa:	f000 ffaf 	bl	800665c <iprintf>
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	08009090 	.word	0x08009090
 800570c:	080090a0 	.word	0x080090a0
 8005710:	080090b8 	.word	0x080090b8
 8005714:	080090cc 	.word	0x080090cc
 8005718:	080090e4 	.word	0x080090e4
 800571c:	080090f4 	.word	0x080090f4
 8005720:	08009108 	.word	0x08009108
 8005724:	08009124 	.word	0x08009124
 8005728:	08009148 	.word	0x08009148
 800572c:	08009160 	.word	0x08009160
 8005730:	0800917c 	.word	0x0800917c
 8005734:	08009190 	.word	0x08009190
 8005738:	080091ac 	.word	0x080091ac
 800573c:	080091e8 	.word	0x080091e8

08005740 <get_Accl>:

void get_Accl(I2C_HandleTypeDef *hi2c , MPU_Accl_Val_t * Accl_Data ){
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af04      	add	r7, sp, #16
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]

	uint8_t data [6];
	int16_t accel_x = 0 ;
 800574a:	2300      	movs	r3, #0
 800574c:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y = 0 ;
 800574e:	2300      	movs	r3, #0
 8005750:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z = 0 ;
 8005752:	2300      	movs	r3, #0
 8005754:	827b      	strh	r3, [r7, #18]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,ACCEL_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	9302      	str	r3, [sp, #8]
 800575c:	2306      	movs	r3, #6
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	f107 030c 	add.w	r3, r7, #12
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2301      	movs	r3, #1
 8005768:	223b      	movs	r2, #59	; 0x3b
 800576a:	21d0      	movs	r1, #208	; 0xd0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fd f981 	bl	8002a74 <HAL_I2C_Mem_Read>

	accel_x = data[0] << 8 | data[1] ;
 8005772:	7b3b      	ldrb	r3, [r7, #12]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	b21a      	sxth	r2, r3
 8005778:	7b7b      	ldrb	r3, [r7, #13]
 800577a:	b21b      	sxth	r3, r3
 800577c:	4313      	orrs	r3, r2
 800577e:	82fb      	strh	r3, [r7, #22]
	accel_y = data[2] << 8 | data[3] ;
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	b21a      	sxth	r2, r3
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	b21b      	sxth	r3, r3
 800578a:	4313      	orrs	r3, r2
 800578c:	82bb      	strh	r3, [r7, #20]
    accel_z = data[4] << 8 | data[5] ;
 800578e:	7c3b      	ldrb	r3, [r7, #16]
 8005790:	021b      	lsls	r3, r3, #8
 8005792:	b21a      	sxth	r2, r3
 8005794:	7c7b      	ldrb	r3, [r7, #17]
 8005796:	b21b      	sxth	r3, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	827b      	strh	r3, [r7, #18]

    Accl_Data->pitch = (float)( (float)accel_x  / (float)16384 )*(float)9.8 ;
 800579c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fb fa7b 	bl	8000c9c <__aeabi_i2f>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fb fb7d 	bl	8000eac <__aeabi_fdiv>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4919      	ldr	r1, [pc, #100]	; (800581c <get_Accl+0xdc>)
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fb fac4 	bl	8000d44 <__aeabi_fmul>
 80057bc:	4603      	mov	r3, r0
 80057be:	461a      	mov	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	601a      	str	r2, [r3, #0]
    Accl_Data->roll  = (float)( (float)accel_y  / (float)16384 )*(float)9.8 ;
 80057c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fb fa67 	bl	8000c9c <__aeabi_i2f>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb fb69 	bl	8000eac <__aeabi_fdiv>
 80057da:	4603      	mov	r3, r0
 80057dc:	490f      	ldr	r1, [pc, #60]	; (800581c <get_Accl+0xdc>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fb fab0 	bl	8000d44 <__aeabi_fmul>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	605a      	str	r2, [r3, #4]
    Accl_Data->yaw   = (float)( (float)accel_z  / (float)16384 )*(float)9.8 ;
 80057ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fb fa53 	bl	8000c9c <__aeabi_i2f>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fb fb55 	bl	8000eac <__aeabi_fdiv>
 8005802:	4603      	mov	r3, r0
 8005804:	4905      	ldr	r1, [pc, #20]	; (800581c <get_Accl+0xdc>)
 8005806:	4618      	mov	r0, r3
 8005808:	f7fb fa9c 	bl	8000d44 <__aeabi_fmul>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	609a      	str	r2, [r3, #8]

	printf("[DEBUG] pitch_a: %0.1lf ,roll_a=  %0.1lf ,yaw_a=  %0.1lf \n" , Accl_Data->pitch , Accl_Data->roll, Accl_Data->yaw);
#endif


}
 8005814:	bf00      	nop
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	411ccccd 	.word	0x411ccccd

08005820 <get_gyro>:

void get_gyro(I2C_HandleTypeDef *hi2c , MPU_Gyro_Val_t * Gyro_Data , MPU_Gyro_calib_t * Calib_Data) {
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

	uint8_t data [6];
	int16_t gyro_x = 0 ;
 800582c:	2300      	movs	r3, #0
 800582e:	83fb      	strh	r3, [r7, #30]
	int16_t gyro_y = 0 ;
 8005830:	2300      	movs	r3, #0
 8005832:	83bb      	strh	r3, [r7, #28]
	int16_t gyro_z = 0 ;
 8005834:	2300      	movs	r3, #0
 8005836:	837b      	strh	r3, [r7, #26]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	9302      	str	r3, [sp, #8]
 800583e:	2306      	movs	r3, #6
 8005840:	9301      	str	r3, [sp, #4]
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	2301      	movs	r3, #1
 800584a:	2243      	movs	r2, #67	; 0x43
 800584c:	21d0      	movs	r1, #208	; 0xd0
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7fd f910 	bl	8002a74 <HAL_I2C_Mem_Read>

	gyro_x = data[0] << 8 | data[1] ;
 8005854:	7d3b      	ldrb	r3, [r7, #20]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b21a      	sxth	r2, r3
 800585a:	7d7b      	ldrb	r3, [r7, #21]
 800585c:	b21b      	sxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	83fb      	strh	r3, [r7, #30]
    gyro_y = data[2] << 8 | data[3] ;
 8005862:	7dbb      	ldrb	r3, [r7, #22]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	b21a      	sxth	r2, r3
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	b21b      	sxth	r3, r3
 800586c:	4313      	orrs	r3, r2
 800586e:	83bb      	strh	r3, [r7, #28]
	gyro_z = data[4] << 8 | data[5] ;
 8005870:	7e3b      	ldrb	r3, [r7, #24]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	b21a      	sxth	r2, r3
 8005876:	7e7b      	ldrb	r3, [r7, #25]
 8005878:	b21b      	sxth	r3, r3
 800587a:	4313      	orrs	r3, r2
 800587c:	837b      	strh	r3, [r7, #26]

	Gyro_Data->pitch = ( gyro_x  / 65.5 ) - Calib_Data->pitch ;
 800587e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fa fdbe 	bl	8000404 <__aeabi_i2d>
 8005888:	a333      	add	r3, pc, #204	; (adr r3, 8005958 <get_gyro+0x138>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa ff4d 	bl	800072c <__aeabi_ddiv>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4614      	mov	r4, r2
 8005898:	461d      	mov	r5, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fa fdc2 	bl	8000428 <__aeabi_f2d>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4620      	mov	r0, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7fa fc5c 	bl	8000168 <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	f7fb f8e6 	bl	8000a88 <__aeabi_d2f>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	601a      	str	r2, [r3, #0]
	Gyro_Data->roll  = ( gyro_y  / 65.5 ) - Calib_Data->roll;
 80058c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fa fd9c 	bl	8000404 <__aeabi_i2d>
 80058cc:	a322      	add	r3, pc, #136	; (adr r3, 8005958 <get_gyro+0x138>)
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f7fa ff2b 	bl	800072c <__aeabi_ddiv>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4614      	mov	r4, r2
 80058dc:	461d      	mov	r5, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fa fda0 	bl	8000428 <__aeabi_f2d>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4620      	mov	r0, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	f7fa fc3a 	bl	8000168 <__aeabi_dsub>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4610      	mov	r0, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	f7fb f8c4 	bl	8000a88 <__aeabi_d2f>
 8005900:	4602      	mov	r2, r0
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	605a      	str	r2, [r3, #4]
	Gyro_Data->yaw   = ( gyro_z  / 65.5 ) - Calib_Data->yaw ;
 8005906:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fa fd7a 	bl	8000404 <__aeabi_i2d>
 8005910:	a311      	add	r3, pc, #68	; (adr r3, 8005958 <get_gyro+0x138>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f7fa ff09 	bl	800072c <__aeabi_ddiv>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4614      	mov	r4, r2
 8005920:	461d      	mov	r5, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fd7e 	bl	8000428 <__aeabi_f2d>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4620      	mov	r0, r4
 8005932:	4629      	mov	r1, r5
 8005934:	f7fa fc18 	bl	8000168 <__aeabi_dsub>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f7fb f8a2 	bl	8000a88 <__aeabi_d2f>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	609a      	str	r2, [r3, #8]
#if DEBUG_mpu

	printf("[DEBUG] pitch: %0.1lf ,roll=  %0.1lf ,yaw=  %0.1lf \n" , Gyro_Data->pitch , Gyro_Data->roll, Gyro_Data->yaw);
#endif

}
 800594a:	bf00      	nop
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bdb0      	pop	{r4, r5, r7, pc}
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w
 8005958:	00000000 	.word	0x00000000
 800595c:	40506000 	.word	0x40506000

08005960 <gyro_calibrate>:

void gyro_calibrate (I2C_HandleTypeDef *hi2c , MPU_Gyro_calib_t * Calib_Data){
 8005960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005964:	b094      	sub	sp, #80	; 0x50
 8005966:	af04      	add	r7, sp, #16
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
	uint8_t data [6];
	int16_t gyro_x = 0 ;
 800596c:	2300      	movs	r3, #0
 800596e:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyro_y = 0 ;
 8005970:	2300      	movs	r3, #0
 8005972:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t gyro_z = 0 ;
 8005974:	2300      	movs	r3, #0
 8005976:	843b      	strh	r3, [r7, #32]

	float pitch , yaw , roll ;
	double pitch_cal =  0, yaw_cal =  0, roll_cal = 0;
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,16000  );
 800599c:	4b8a      	ldr	r3, [pc, #552]	; (8005bc8 <gyro_calibrate+0x268>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 80059a6:	210c      	movs	r1, #12
 80059a8:	4887      	ldr	r0, [pc, #540]	; (8005bc8 <gyro_calibrate+0x268>)
 80059aa:	f7fe fb63 	bl	8004074 <HAL_TIM_PWM_Start>
	printf("/////////// CALIBRATING GYRO \\\\\\\\\\\\\\\\\\\\ \n") ;
 80059ae:	4887      	ldr	r0, [pc, #540]	; (8005bcc <gyro_calibrate+0x26c>)
 80059b0:	f000 feba 	bl	8006728 <puts>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 80059b4:	2300      	movs	r3, #0
 80059b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80059b8:	e085      	b.n	8005ac6 <gyro_calibrate+0x166>

		// needed to communicate with i2c based devices like gyroscope mpu6050
	   HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	9302      	str	r3, [sp, #8]
 80059c0:	2306      	movs	r3, #6
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	f107 030c 	add.w	r3, r7, #12
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2301      	movs	r3, #1
 80059cc:	2243      	movs	r2, #67	; 0x43
 80059ce:	21d0      	movs	r1, #208	; 0xd0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fd f84f 	bl	8002a74 <HAL_I2C_Mem_Read>

	   gyro_x = data[0] << 8 | data[1] ;
 80059d6:	7b3b      	ldrb	r3, [r7, #12]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	b21a      	sxth	r2, r3
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	b21b      	sxth	r3, r3
 80059e0:	4313      	orrs	r3, r2
 80059e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	   gyro_y = data[2] << 8 | data[3] ;
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	847b      	strh	r3, [r7, #34]	; 0x22
	   gyro_z = data[4] << 8 | data[5] ;
 80059f2:	7c3b      	ldrb	r3, [r7, #16]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	b21a      	sxth	r2, r3
 80059f8:	7c7b      	ldrb	r3, [r7, #17]
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	843b      	strh	r3, [r7, #32]

	   pitch = gyro_x  / 65.5 ; // change in x
 8005a00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fa fcfd 	bl	8000404 <__aeabi_i2d>
 8005a0a:	a36d      	add	r3, pc, #436	; (adr r3, 8005bc0 <gyro_calibrate+0x260>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fe8c 	bl	800072c <__aeabi_ddiv>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fb f834 	bl	8000a88 <__aeabi_d2f>
 8005a20:	4603      	mov	r3, r0
 8005a22:	61fb      	str	r3, [r7, #28]
	   roll  = gyro_y  / 65.5 ;	// change in y
 8005a24:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fa fceb 	bl	8000404 <__aeabi_i2d>
 8005a2e:	a364      	add	r3, pc, #400	; (adr r3, 8005bc0 <gyro_calibrate+0x260>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fe7a 	bl	800072c <__aeabi_ddiv>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f7fb f822 	bl	8000a88 <__aeabi_d2f>
 8005a44:	4603      	mov	r3, r0
 8005a46:	61bb      	str	r3, [r7, #24]
	   yaw   = gyro_z  / 65.5 ;	// change in z
 8005a48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fa fcd9 	bl	8000404 <__aeabi_i2d>
 8005a52:	a35b      	add	r3, pc, #364	; (adr r3, 8005bc0 <gyro_calibrate+0x260>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fe68 	bl	800072c <__aeabi_ddiv>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	f7fb f810 	bl	8000a88 <__aeabi_d2f>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	617b      	str	r3, [r7, #20]

	   pitch_cal += pitch ;  // this means pitch_cal = pitch + pitch_cal
 8005a6c:	69f8      	ldr	r0, [r7, #28]
 8005a6e:	f7fa fcdb 	bl	8000428 <__aeabi_f2d>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a7a:	f7fa fb77 	bl	800016c <__adddf3>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	   roll_cal += roll ;
 8005a86:	69b8      	ldr	r0, [r7, #24]
 8005a88:	f7fa fcce 	bl	8000428 <__aeabi_f2d>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a94:	f7fa fb6a 	bl	800016c <__adddf3>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	   yaw_cal += yaw ;
 8005aa0:	6978      	ldr	r0, [r7, #20]
 8005aa2:	f7fa fcc1 	bl	8000428 <__aeabi_f2d>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005aae:	f7fa fb5d 	bl	800016c <__adddf3>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	   HAL_Delay(1) ;
 8005aba:	2001      	movs	r0, #1
 8005abc:	f7fc face 	bl	800205c <HAL_Delay>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8005ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ac8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005acc:	f4ff af75 	bcc.w	80059ba <gyro_calibrate+0x5a>
	}

	// taking average
	pitch_cal = pitch_cal/ 4000  ;
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <gyro_calibrate+0x270>)
 8005ad6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005ada:	f7fa fe27 	bl	800072c <__aeabi_ddiv>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	roll_cal  = roll_cal / 4000  ;
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <gyro_calibrate+0x270>)
 8005aec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005af0:	f7fa fe1c 	bl	800072c <__aeabi_ddiv>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	yaw_cal   = yaw_cal  / 4000  ;
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <gyro_calibrate+0x270>)
 8005b02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b06:	f7fa fe11 	bl	800072c <__aeabi_ddiv>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	printf("cal values are  %lf , %lf , %lf \n" , pitch_cal , roll_cal , yaw_cal);
 8005b12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1e:	e9cd 2300 	strd	r2, r3, [sp]
 8005b22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b26:	482b      	ldr	r0, [pc, #172]	; (8005bd4 <gyro_calibrate+0x274>)
 8005b28:	f000 fd98 	bl	800665c <iprintf>

	Calib_Data->pitch = pitch_cal ;
 8005b2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005b30:	f7fa ffaa 	bl	8000a88 <__aeabi_d2f>
 8005b34:	4602      	mov	r2, r0
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	601a      	str	r2, [r3, #0]
	Calib_Data->roll  = roll_cal;
 8005b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b3e:	f7fa ffa3 	bl	8000a88 <__aeabi_d2f>
 8005b42:	4602      	mov	r2, r0
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
	Calib_Data->yaw   = yaw_cal;
 8005b48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005b4c:	f7fa ff9c 	bl	8000a88 <__aeabi_d2f>
 8005b50:	4602      	mov	r2, r0
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	609a      	str	r2, [r3, #8]

	printf("cal values are =  pitch : %lf ,roll: %lf ,yaw: %lf \n" , Calib_Data->pitch ,Calib_Data->roll , Calib_Data->yaw);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fa fc64 	bl	8000428 <__aeabi_f2d>
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fa fc5d 	bl	8000428 <__aeabi_f2d>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fa fc56 	bl	8000428 <__aeabi_f2d>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b84:	e9cd 4500 	strd	r4, r5, [sp]
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	4812      	ldr	r0, [pc, #72]	; (8005bd8 <gyro_calibrate+0x278>)
 8005b8e:	f000 fd65 	bl	800665c <iprintf>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <gyro_calibrate+0x268>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <gyro_calibrate+0x268>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8005ba2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8005ba4:	2108      	movs	r1, #8
 8005ba6:	4808      	ldr	r0, [pc, #32]	; (8005bc8 <gyro_calibrate+0x268>)
 8005ba8:	f7fe fa64 	bl	8004074 <HAL_TIM_PWM_Start>
printf("/////////////// DONE GYRO CALIBRATION \\\\\\\\\\\\\\\\\\\\ \n") ;
 8005bac:	480b      	ldr	r0, [pc, #44]	; (8005bdc <gyro_calibrate+0x27c>)
 8005bae:	f000 fdbb 	bl	8006728 <puts>

	}
	printf("[DEBUG] ///////// SAMPLE DATA END \\\\\\\\\\\ \n") ;
#endif

}
 8005bb2:	bf00      	nop
 8005bb4:	3740      	adds	r7, #64	; 0x40
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	40506000 	.word	0x40506000
 8005bc8:	20000334 	.word	0x20000334
 8005bcc:	08009208 	.word	0x08009208
 8005bd0:	40af4000 	.word	0x40af4000
 8005bd4:	08009234 	.word	0x08009234
 8005bd8:	08009258 	.word	0x08009258
 8005bdc:	08009290 	.word	0x08009290

08005be0 <pid_init>:
 */

#include "pid.h"


void pid_init(pidController_t* pidController) {
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
pidController->prevErrro      = 0 ;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	615a      	str	r2, [r3, #20]
pidController->prevMeasurment = 0 ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	619a      	str	r2, [r3, #24]
pidController->intgrator 	  = 0 ;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
pidController->derevative 	  = 0 ;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	621a      	str	r2, [r3, #32]
pidController->out      	  = 0 ;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <__cvt>:
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c20:	461f      	mov	r7, r3
 8005c22:	bfbb      	ittet	lt
 8005c24:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	461f      	movlt	r7, r3
 8005c2a:	2300      	movge	r3, #0
 8005c2c:	232d      	movlt	r3, #45	; 0x2d
 8005c2e:	b088      	sub	sp, #32
 8005c30:	4614      	mov	r4, r2
 8005c32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c36:	7013      	strb	r3, [r2, #0]
 8005c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c3a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005c3e:	f023 0820 	bic.w	r8, r3, #32
 8005c42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c46:	d005      	beq.n	8005c54 <__cvt+0x3a>
 8005c48:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c4c:	d100      	bne.n	8005c50 <__cvt+0x36>
 8005c4e:	3501      	adds	r5, #1
 8005c50:	2302      	movs	r3, #2
 8005c52:	e000      	b.n	8005c56 <__cvt+0x3c>
 8005c54:	2303      	movs	r3, #3
 8005c56:	aa07      	add	r2, sp, #28
 8005c58:	9204      	str	r2, [sp, #16]
 8005c5a:	aa06      	add	r2, sp, #24
 8005c5c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c60:	e9cd 3500 	strd	r3, r5, [sp]
 8005c64:	4622      	mov	r2, r4
 8005c66:	463b      	mov	r3, r7
 8005c68:	f000 ff56 	bl	8006b18 <_dtoa_r>
 8005c6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c70:	4606      	mov	r6, r0
 8005c72:	d102      	bne.n	8005c7a <__cvt+0x60>
 8005c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c76:	07db      	lsls	r3, r3, #31
 8005c78:	d522      	bpl.n	8005cc0 <__cvt+0xa6>
 8005c7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c7e:	eb06 0905 	add.w	r9, r6, r5
 8005c82:	d110      	bne.n	8005ca6 <__cvt+0x8c>
 8005c84:	7833      	ldrb	r3, [r6, #0]
 8005c86:	2b30      	cmp	r3, #48	; 0x30
 8005c88:	d10a      	bne.n	8005ca0 <__cvt+0x86>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8005c96:	b918      	cbnz	r0, 8005ca0 <__cvt+0x86>
 8005c98:	f1c5 0501 	rsb	r5, r5, #1
 8005c9c:	f8ca 5000 	str.w	r5, [sl]
 8005ca0:	f8da 3000 	ldr.w	r3, [sl]
 8005ca4:	4499      	add	r9, r3
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4620      	mov	r0, r4
 8005cac:	4639      	mov	r1, r7
 8005cae:	f7fa fe7b 	bl	80009a8 <__aeabi_dcmpeq>
 8005cb2:	b108      	cbz	r0, 8005cb8 <__cvt+0x9e>
 8005cb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cb8:	2230      	movs	r2, #48	; 0x30
 8005cba:	9b07      	ldr	r3, [sp, #28]
 8005cbc:	454b      	cmp	r3, r9
 8005cbe:	d307      	bcc.n	8005cd0 <__cvt+0xb6>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	9b07      	ldr	r3, [sp, #28]
 8005cc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cc6:	1b9b      	subs	r3, r3, r6
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	b008      	add	sp, #32
 8005ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd0:	1c59      	adds	r1, r3, #1
 8005cd2:	9107      	str	r1, [sp, #28]
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	e7f0      	b.n	8005cba <__cvt+0xa0>

08005cd8 <__exponent>:
 8005cd8:	4603      	mov	r3, r0
 8005cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	f803 2b02 	strb.w	r2, [r3], #2
 8005ce2:	bfb6      	itet	lt
 8005ce4:	222d      	movlt	r2, #45	; 0x2d
 8005ce6:	222b      	movge	r2, #43	; 0x2b
 8005ce8:	4249      	neglt	r1, r1
 8005cea:	2909      	cmp	r1, #9
 8005cec:	7042      	strb	r2, [r0, #1]
 8005cee:	dd2a      	ble.n	8005d46 <__exponent+0x6e>
 8005cf0:	f10d 0207 	add.w	r2, sp, #7
 8005cf4:	4617      	mov	r7, r2
 8005cf6:	260a      	movs	r6, #10
 8005cf8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005cfc:	4694      	mov	ip, r2
 8005cfe:	fb06 1415 	mls	r4, r6, r5, r1
 8005d02:	3430      	adds	r4, #48	; 0x30
 8005d04:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d08:	460c      	mov	r4, r1
 8005d0a:	2c63      	cmp	r4, #99	; 0x63
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d12:	dcf1      	bgt.n	8005cf8 <__exponent+0x20>
 8005d14:	3130      	adds	r1, #48	; 0x30
 8005d16:	f1ac 0402 	sub.w	r4, ip, #2
 8005d1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005d1e:	4622      	mov	r2, r4
 8005d20:	1c41      	adds	r1, r0, #1
 8005d22:	42ba      	cmp	r2, r7
 8005d24:	d30a      	bcc.n	8005d3c <__exponent+0x64>
 8005d26:	f10d 0209 	add.w	r2, sp, #9
 8005d2a:	eba2 020c 	sub.w	r2, r2, ip
 8005d2e:	42bc      	cmp	r4, r7
 8005d30:	bf88      	it	hi
 8005d32:	2200      	movhi	r2, #0
 8005d34:	4413      	add	r3, r2
 8005d36:	1a18      	subs	r0, r3, r0
 8005d38:	b003      	add	sp, #12
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005d40:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005d44:	e7ed      	b.n	8005d22 <__exponent+0x4a>
 8005d46:	2330      	movs	r3, #48	; 0x30
 8005d48:	3130      	adds	r1, #48	; 0x30
 8005d4a:	7083      	strb	r3, [r0, #2]
 8005d4c:	70c1      	strb	r1, [r0, #3]
 8005d4e:	1d03      	adds	r3, r0, #4
 8005d50:	e7f1      	b.n	8005d36 <__exponent+0x5e>
	...

08005d54 <_printf_float>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b091      	sub	sp, #68	; 0x44
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d60:	4616      	mov	r6, r2
 8005d62:	461f      	mov	r7, r3
 8005d64:	4605      	mov	r5, r0
 8005d66:	f000 fdc7 	bl	80068f8 <_localeconv_r>
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	f7fa f9ee 	bl	8000150 <strlen>
 8005d74:	2300      	movs	r3, #0
 8005d76:	930e      	str	r3, [sp, #56]	; 0x38
 8005d78:	f8d8 3000 	ldr.w	r3, [r8]
 8005d7c:	900a      	str	r0, [sp, #40]	; 0x28
 8005d7e:	3307      	adds	r3, #7
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4643      	mov	r3, r8
 8005d9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005da0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295
 8005daa:	4650      	mov	r0, sl
 8005dac:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <_printf_float+0x2cc>)
 8005dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db0:	f7fa fe2c 	bl	8000a0c <__aeabi_dcmpun>
 8005db4:	bb70      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dba:	4650      	mov	r0, sl
 8005dbc:	4b98      	ldr	r3, [pc, #608]	; (8006020 <_printf_float+0x2cc>)
 8005dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc0:	f7fa fe06 	bl	80009d0 <__aeabi_dcmple>
 8005dc4:	bb30      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4650      	mov	r0, sl
 8005dcc:	4641      	mov	r1, r8
 8005dce:	f7fa fdf5 	bl	80009bc <__aeabi_dcmplt>
 8005dd2:	b110      	cbz	r0, 8005dda <_printf_float+0x86>
 8005dd4:	232d      	movs	r3, #45	; 0x2d
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dda:	4a92      	ldr	r2, [pc, #584]	; (8006024 <_printf_float+0x2d0>)
 8005ddc:	4b92      	ldr	r3, [pc, #584]	; (8006028 <_printf_float+0x2d4>)
 8005dde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005de2:	bf94      	ite	ls
 8005de4:	4690      	movls	r8, r2
 8005de6:	4698      	movhi	r8, r3
 8005de8:	2303      	movs	r3, #3
 8005dea:	f04f 0a00 	mov.w	sl, #0
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	f02b 0304 	bic.w	r3, fp, #4
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	4633      	mov	r3, r6
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9700      	str	r7, [sp, #0]
 8005dfe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e00:	f000 f9d6 	bl	80061b0 <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	f040 8090 	bne.w	8005f2a <_printf_float+0x1d6>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	b011      	add	sp, #68	; 0x44
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	4652      	mov	r2, sl
 8005e16:	4643      	mov	r3, r8
 8005e18:	4650      	mov	r0, sl
 8005e1a:	4641      	mov	r1, r8
 8005e1c:	f7fa fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8005e20:	b148      	cbz	r0, 8005e36 <_printf_float+0xe2>
 8005e22:	f1b8 0f00 	cmp.w	r8, #0
 8005e26:	bfb8      	it	lt
 8005e28:	232d      	movlt	r3, #45	; 0x2d
 8005e2a:	4a80      	ldr	r2, [pc, #512]	; (800602c <_printf_float+0x2d8>)
 8005e2c:	bfb8      	it	lt
 8005e2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <_printf_float+0x2dc>)
 8005e34:	e7d3      	b.n	8005dde <_printf_float+0x8a>
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	d142      	bne.n	8005ec6 <_printf_float+0x172>
 8005e40:	2306      	movs	r3, #6
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	9206      	str	r2, [sp, #24]
 8005e48:	aa0e      	add	r2, sp, #56	; 0x38
 8005e4a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e4e:	aa0d      	add	r2, sp, #52	; 0x34
 8005e50:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e54:	9203      	str	r2, [sp, #12]
 8005e56:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	4652      	mov	r2, sl
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4628      	mov	r0, r5
 8005e68:	4643      	mov	r3, r8
 8005e6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e6c:	f7ff fed5 	bl	8005c1a <__cvt>
 8005e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e72:	4680      	mov	r8, r0
 8005e74:	2947      	cmp	r1, #71	; 0x47
 8005e76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e78:	d108      	bne.n	8005e8c <_printf_float+0x138>
 8005e7a:	1cc8      	adds	r0, r1, #3
 8005e7c:	db02      	blt.n	8005e84 <_printf_float+0x130>
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	4299      	cmp	r1, r3
 8005e82:	dd40      	ble.n	8005f06 <_printf_float+0x1b2>
 8005e84:	f1a9 0902 	sub.w	r9, r9, #2
 8005e88:	fa5f f989 	uxtb.w	r9, r9
 8005e8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e90:	d81f      	bhi.n	8005ed2 <_printf_float+0x17e>
 8005e92:	464a      	mov	r2, r9
 8005e94:	3901      	subs	r1, #1
 8005e96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e9c:	f7ff ff1c 	bl	8005cd8 <__exponent>
 8005ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	1813      	adds	r3, r2, r0
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	dc02      	bgt.n	8005eb2 <_printf_float+0x15e>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	07d2      	lsls	r2, r2, #31
 8005eb0:	d501      	bpl.n	8005eb6 <_printf_float+0x162>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d09b      	beq.n	8005df6 <_printf_float+0xa2>
 8005ebe:	232d      	movs	r3, #45	; 0x2d
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	e797      	b.n	8005df6 <_printf_float+0xa2>
 8005ec6:	2947      	cmp	r1, #71	; 0x47
 8005ec8:	d1bc      	bne.n	8005e44 <_printf_float+0xf0>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ba      	bne.n	8005e44 <_printf_float+0xf0>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e7b7      	b.n	8005e42 <_printf_float+0xee>
 8005ed2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ed6:	d118      	bne.n	8005f0a <_printf_float+0x1b6>
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	dd0b      	ble.n	8005ef6 <_printf_float+0x1a2>
 8005ede:	6121      	str	r1, [r4, #16]
 8005ee0:	b913      	cbnz	r3, 8005ee8 <_printf_float+0x194>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	07d0      	lsls	r0, r2, #31
 8005ee6:	d502      	bpl.n	8005eee <_printf_float+0x19a>
 8005ee8:	3301      	adds	r3, #1
 8005eea:	440b      	add	r3, r1
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	f04f 0a00 	mov.w	sl, #0
 8005ef2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ef4:	e7df      	b.n	8005eb6 <_printf_float+0x162>
 8005ef6:	b913      	cbnz	r3, 8005efe <_printf_float+0x1aa>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	07d2      	lsls	r2, r2, #31
 8005efc:	d501      	bpl.n	8005f02 <_printf_float+0x1ae>
 8005efe:	3302      	adds	r3, #2
 8005f00:	e7f4      	b.n	8005eec <_printf_float+0x198>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7f2      	b.n	8005eec <_printf_float+0x198>
 8005f06:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f0c:	4299      	cmp	r1, r3
 8005f0e:	db05      	blt.n	8005f1c <_printf_float+0x1c8>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	6121      	str	r1, [r4, #16]
 8005f14:	07d8      	lsls	r0, r3, #31
 8005f16:	d5ea      	bpl.n	8005eee <_printf_float+0x19a>
 8005f18:	1c4b      	adds	r3, r1, #1
 8005f1a:	e7e7      	b.n	8005eec <_printf_float+0x198>
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	bfcc      	ite	gt
 8005f20:	2201      	movgt	r2, #1
 8005f22:	f1c1 0202 	rsble	r2, r1, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	e7e0      	b.n	8005eec <_printf_float+0x198>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	055a      	lsls	r2, r3, #21
 8005f2e:	d407      	bmi.n	8005f40 <_printf_float+0x1ec>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	4642      	mov	r2, r8
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d12b      	bne.n	8005f96 <_printf_float+0x242>
 8005f3e:	e764      	b.n	8005e0a <_printf_float+0xb6>
 8005f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f44:	f240 80dd 	bls.w	8006102 <_printf_float+0x3ae>
 8005f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f7fa fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d033      	beq.n	8005fc0 <_printf_float+0x26c>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	4a35      	ldr	r2, [pc, #212]	; (8006034 <_printf_float+0x2e0>)
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f af51 	beq.w	8005e0a <_printf_float+0xb6>
 8005f68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	db02      	blt.n	8005f76 <_printf_float+0x222>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07d8      	lsls	r0, r3, #31
 8005f74:	d50f      	bpl.n	8005f96 <_printf_float+0x242>
 8005f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f af42 	beq.w	8005e0a <_printf_float+0xb6>
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	f104 091a 	add.w	r9, r4, #26
 8005f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f90:	3b01      	subs	r3, #1
 8005f92:	4543      	cmp	r3, r8
 8005f94:	dc09      	bgt.n	8005faa <_printf_float+0x256>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	079b      	lsls	r3, r3, #30
 8005f9a:	f100 8104 	bmi.w	80061a6 <_printf_float+0x452>
 8005f9e:	68e0      	ldr	r0, [r4, #12]
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa2:	4298      	cmp	r0, r3
 8005fa4:	bfb8      	it	lt
 8005fa6:	4618      	movlt	r0, r3
 8005fa8:	e731      	b.n	8005e0e <_printf_float+0xba>
 8005faa:	2301      	movs	r3, #1
 8005fac:	464a      	mov	r2, r9
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f43f af28 	beq.w	8005e0a <_printf_float+0xb6>
 8005fba:	f108 0801 	add.w	r8, r8, #1
 8005fbe:	e7e6      	b.n	8005f8e <_printf_float+0x23a>
 8005fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc38      	bgt.n	8006038 <_printf_float+0x2e4>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <_printf_float+0x2e0>)
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f af1a 	beq.w	8005e0a <_printf_float+0xb6>
 8005fd6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	d102      	bne.n	8005fe4 <_printf_float+0x290>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	07d9      	lsls	r1, r3, #31
 8005fe2:	d5d8      	bpl.n	8005f96 <_printf_float+0x242>
 8005fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af0b 	beq.w	8005e0a <_printf_float+0xb6>
 8005ff4:	f04f 0900 	mov.w	r9, #0
 8005ff8:	f104 0a1a 	add.w	sl, r4, #26
 8005ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffe:	425b      	negs	r3, r3
 8006000:	454b      	cmp	r3, r9
 8006002:	dc01      	bgt.n	8006008 <_printf_float+0x2b4>
 8006004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006006:	e794      	b.n	8005f32 <_printf_float+0x1de>
 8006008:	2301      	movs	r3, #1
 800600a:	4652      	mov	r2, sl
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	f43f aef9 	beq.w	8005e0a <_printf_float+0xb6>
 8006018:	f109 0901 	add.w	r9, r9, #1
 800601c:	e7ee      	b.n	8005ffc <_printf_float+0x2a8>
 800601e:	bf00      	nop
 8006020:	7fefffff 	.word	0x7fefffff
 8006024:	080092ee 	.word	0x080092ee
 8006028:	080092f2 	.word	0x080092f2
 800602c:	080092f6 	.word	0x080092f6
 8006030:	080092fa 	.word	0x080092fa
 8006034:	080092fe 	.word	0x080092fe
 8006038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800603a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800603c:	429a      	cmp	r2, r3
 800603e:	bfa8      	it	ge
 8006040:	461a      	movge	r2, r3
 8006042:	2a00      	cmp	r2, #0
 8006044:	4691      	mov	r9, r2
 8006046:	dc37      	bgt.n	80060b8 <_printf_float+0x364>
 8006048:	f04f 0b00 	mov.w	fp, #0
 800604c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006050:	f104 021a 	add.w	r2, r4, #26
 8006054:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006058:	ebaa 0309 	sub.w	r3, sl, r9
 800605c:	455b      	cmp	r3, fp
 800605e:	dc33      	bgt.n	80060c8 <_printf_float+0x374>
 8006060:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006064:	429a      	cmp	r2, r3
 8006066:	db3b      	blt.n	80060e0 <_printf_float+0x38c>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07da      	lsls	r2, r3, #31
 800606c:	d438      	bmi.n	80060e0 <_printf_float+0x38c>
 800606e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006072:	eba2 0903 	sub.w	r9, r2, r3
 8006076:	eba2 020a 	sub.w	r2, r2, sl
 800607a:	4591      	cmp	r9, r2
 800607c:	bfa8      	it	ge
 800607e:	4691      	movge	r9, r2
 8006080:	f1b9 0f00 	cmp.w	r9, #0
 8006084:	dc34      	bgt.n	80060f0 <_printf_float+0x39c>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608e:	f104 0a1a 	add.w	sl, r4, #26
 8006092:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	eba3 0309 	sub.w	r3, r3, r9
 800609c:	4543      	cmp	r3, r8
 800609e:	f77f af7a 	ble.w	8005f96 <_printf_float+0x242>
 80060a2:	2301      	movs	r3, #1
 80060a4:	4652      	mov	r2, sl
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f aeac 	beq.w	8005e0a <_printf_float+0xb6>
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	e7ec      	b.n	8006092 <_printf_float+0x33e>
 80060b8:	4613      	mov	r3, r2
 80060ba:	4631      	mov	r1, r6
 80060bc:	4642      	mov	r2, r8
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	d1c0      	bne.n	8006048 <_printf_float+0x2f4>
 80060c6:	e6a0      	b.n	8005e0a <_printf_float+0xb6>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f ae99 	beq.w	8005e0a <_printf_float+0xb6>
 80060d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060da:	f10b 0b01 	add.w	fp, fp, #1
 80060de:	e7b9      	b.n	8006054 <_printf_float+0x300>
 80060e0:	4631      	mov	r1, r6
 80060e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	d1bf      	bne.n	800606e <_printf_float+0x31a>
 80060ee:	e68c      	b.n	8005e0a <_printf_float+0xb6>
 80060f0:	464b      	mov	r3, r9
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	eb08 020a 	add.w	r2, r8, sl
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1c2      	bne.n	8006086 <_printf_float+0x332>
 8006100:	e683      	b.n	8005e0a <_printf_float+0xb6>
 8006102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006104:	2a01      	cmp	r2, #1
 8006106:	dc01      	bgt.n	800610c <_printf_float+0x3b8>
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d539      	bpl.n	8006180 <_printf_float+0x42c>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f ae77 	beq.w	8005e0a <_printf_float+0xb6>
 800611c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f ae6f 	beq.w	8005e0a <_printf_float+0xb6>
 800612c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006130:	2200      	movs	r2, #0
 8006132:	2300      	movs	r3, #0
 8006134:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006138:	f7fa fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800613c:	b9d8      	cbnz	r0, 8006176 <_printf_float+0x422>
 800613e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006142:	f108 0201 	add.w	r2, r8, #1
 8006146:	4631      	mov	r1, r6
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	d10e      	bne.n	800616e <_printf_float+0x41a>
 8006150:	e65b      	b.n	8005e0a <_printf_float+0xb6>
 8006152:	2301      	movs	r3, #1
 8006154:	464a      	mov	r2, r9
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f ae54 	beq.w	8005e0a <_printf_float+0xb6>
 8006162:	f108 0801 	add.w	r8, r8, #1
 8006166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006168:	3b01      	subs	r3, #1
 800616a:	4543      	cmp	r3, r8
 800616c:	dcf1      	bgt.n	8006152 <_printf_float+0x3fe>
 800616e:	4653      	mov	r3, sl
 8006170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006174:	e6de      	b.n	8005f34 <_printf_float+0x1e0>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	f104 091a 	add.w	r9, r4, #26
 800617e:	e7f2      	b.n	8006166 <_printf_float+0x412>
 8006180:	2301      	movs	r3, #1
 8006182:	4642      	mov	r2, r8
 8006184:	e7df      	b.n	8006146 <_printf_float+0x3f2>
 8006186:	2301      	movs	r3, #1
 8006188:	464a      	mov	r2, r9
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae3a 	beq.w	8005e0a <_printf_float+0xb6>
 8006196:	f108 0801 	add.w	r8, r8, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	4543      	cmp	r3, r8
 80061a2:	dcf0      	bgt.n	8006186 <_printf_float+0x432>
 80061a4:	e6fb      	b.n	8005f9e <_printf_float+0x24a>
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	f104 0919 	add.w	r9, r4, #25
 80061ae:	e7f4      	b.n	800619a <_printf_float+0x446>

080061b0 <_printf_common>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	4616      	mov	r6, r2
 80061b6:	4699      	mov	r9, r3
 80061b8:	688a      	ldr	r2, [r1, #8]
 80061ba:	690b      	ldr	r3, [r1, #16]
 80061bc:	4607      	mov	r7, r0
 80061be:	4293      	cmp	r3, r2
 80061c0:	bfb8      	it	lt
 80061c2:	4613      	movlt	r3, r2
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061ca:	460c      	mov	r4, r1
 80061cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d0:	b10a      	cbz	r2, 80061d6 <_printf_common+0x26>
 80061d2:	3301      	adds	r3, #1
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	0699      	lsls	r1, r3, #26
 80061da:	bf42      	ittt	mi
 80061dc:	6833      	ldrmi	r3, [r6, #0]
 80061de:	3302      	addmi	r3, #2
 80061e0:	6033      	strmi	r3, [r6, #0]
 80061e2:	6825      	ldr	r5, [r4, #0]
 80061e4:	f015 0506 	ands.w	r5, r5, #6
 80061e8:	d106      	bne.n	80061f8 <_printf_common+0x48>
 80061ea:	f104 0a19 	add.w	sl, r4, #25
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	6832      	ldr	r2, [r6, #0]
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dc2b      	bgt.n	8006250 <_printf_common+0xa0>
 80061f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061fc:	1e13      	subs	r3, r2, #0
 80061fe:	6822      	ldr	r2, [r4, #0]
 8006200:	bf18      	it	ne
 8006202:	2301      	movne	r3, #1
 8006204:	0692      	lsls	r2, r2, #26
 8006206:	d430      	bmi.n	800626a <_printf_common+0xba>
 8006208:	4649      	mov	r1, r9
 800620a:	4638      	mov	r0, r7
 800620c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d023      	beq.n	800625e <_printf_common+0xae>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	2b04      	cmp	r3, #4
 8006220:	bf14      	ite	ne
 8006222:	2500      	movne	r5, #0
 8006224:	6833      	ldreq	r3, [r6, #0]
 8006226:	f04f 0600 	mov.w	r6, #0
 800622a:	bf08      	it	eq
 800622c:	68e5      	ldreq	r5, [r4, #12]
 800622e:	f104 041a 	add.w	r4, r4, #26
 8006232:	bf08      	it	eq
 8006234:	1aed      	subeq	r5, r5, r3
 8006236:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800623a:	bf08      	it	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	4293      	cmp	r3, r2
 8006242:	bfc4      	itt	gt
 8006244:	1a9b      	subgt	r3, r3, r2
 8006246:	18ed      	addgt	r5, r5, r3
 8006248:	42b5      	cmp	r5, r6
 800624a:	d11a      	bne.n	8006282 <_printf_common+0xd2>
 800624c:	2000      	movs	r0, #0
 800624e:	e008      	b.n	8006262 <_printf_common+0xb2>
 8006250:	2301      	movs	r3, #1
 8006252:	4652      	mov	r2, sl
 8006254:	4649      	mov	r1, r9
 8006256:	4638      	mov	r0, r7
 8006258:	47c0      	blx	r8
 800625a:	3001      	adds	r0, #1
 800625c:	d103      	bne.n	8006266 <_printf_common+0xb6>
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	3501      	adds	r5, #1
 8006268:	e7c1      	b.n	80061ee <_printf_common+0x3e>
 800626a:	2030      	movs	r0, #48	; 0x30
 800626c:	18e1      	adds	r1, r4, r3
 800626e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006278:	4422      	add	r2, r4
 800627a:	3302      	adds	r3, #2
 800627c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006280:	e7c2      	b.n	8006208 <_printf_common+0x58>
 8006282:	2301      	movs	r3, #1
 8006284:	4622      	mov	r2, r4
 8006286:	4649      	mov	r1, r9
 8006288:	4638      	mov	r0, r7
 800628a:	47c0      	blx	r8
 800628c:	3001      	adds	r0, #1
 800628e:	d0e6      	beq.n	800625e <_printf_common+0xae>
 8006290:	3601      	adds	r6, #1
 8006292:	e7d9      	b.n	8006248 <_printf_common+0x98>

08006294 <_printf_i>:
 8006294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	7e0f      	ldrb	r7, [r1, #24]
 800629a:	4691      	mov	r9, r2
 800629c:	2f78      	cmp	r7, #120	; 0x78
 800629e:	4680      	mov	r8, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	469a      	mov	sl, r3
 80062a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062aa:	d807      	bhi.n	80062bc <_printf_i+0x28>
 80062ac:	2f62      	cmp	r7, #98	; 0x62
 80062ae:	d80a      	bhi.n	80062c6 <_printf_i+0x32>
 80062b0:	2f00      	cmp	r7, #0
 80062b2:	f000 80d5 	beq.w	8006460 <_printf_i+0x1cc>
 80062b6:	2f58      	cmp	r7, #88	; 0x58
 80062b8:	f000 80c1 	beq.w	800643e <_printf_i+0x1aa>
 80062bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062c4:	e03a      	b.n	800633c <_printf_i+0xa8>
 80062c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ca:	2b15      	cmp	r3, #21
 80062cc:	d8f6      	bhi.n	80062bc <_printf_i+0x28>
 80062ce:	a101      	add	r1, pc, #4	; (adr r1, 80062d4 <_printf_i+0x40>)
 80062d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d4:	0800632d 	.word	0x0800632d
 80062d8:	08006341 	.word	0x08006341
 80062dc:	080062bd 	.word	0x080062bd
 80062e0:	080062bd 	.word	0x080062bd
 80062e4:	080062bd 	.word	0x080062bd
 80062e8:	080062bd 	.word	0x080062bd
 80062ec:	08006341 	.word	0x08006341
 80062f0:	080062bd 	.word	0x080062bd
 80062f4:	080062bd 	.word	0x080062bd
 80062f8:	080062bd 	.word	0x080062bd
 80062fc:	080062bd 	.word	0x080062bd
 8006300:	08006447 	.word	0x08006447
 8006304:	0800636d 	.word	0x0800636d
 8006308:	08006401 	.word	0x08006401
 800630c:	080062bd 	.word	0x080062bd
 8006310:	080062bd 	.word	0x080062bd
 8006314:	08006469 	.word	0x08006469
 8006318:	080062bd 	.word	0x080062bd
 800631c:	0800636d 	.word	0x0800636d
 8006320:	080062bd 	.word	0x080062bd
 8006324:	080062bd 	.word	0x080062bd
 8006328:	08006409 	.word	0x08006409
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	602a      	str	r2, [r5, #0]
 8006334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800633c:	2301      	movs	r3, #1
 800633e:	e0a0      	b.n	8006482 <_printf_i+0x1ee>
 8006340:	6820      	ldr	r0, [r4, #0]
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	0607      	lsls	r7, r0, #24
 8006346:	f103 0104 	add.w	r1, r3, #4
 800634a:	6029      	str	r1, [r5, #0]
 800634c:	d501      	bpl.n	8006352 <_printf_i+0xbe>
 800634e:	681e      	ldr	r6, [r3, #0]
 8006350:	e003      	b.n	800635a <_printf_i+0xc6>
 8006352:	0646      	lsls	r6, r0, #25
 8006354:	d5fb      	bpl.n	800634e <_printf_i+0xba>
 8006356:	f9b3 6000 	ldrsh.w	r6, [r3]
 800635a:	2e00      	cmp	r6, #0
 800635c:	da03      	bge.n	8006366 <_printf_i+0xd2>
 800635e:	232d      	movs	r3, #45	; 0x2d
 8006360:	4276      	negs	r6, r6
 8006362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006366:	230a      	movs	r3, #10
 8006368:	4859      	ldr	r0, [pc, #356]	; (80064d0 <_printf_i+0x23c>)
 800636a:	e012      	b.n	8006392 <_printf_i+0xfe>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1d19      	adds	r1, r3, #4
 8006372:	6029      	str	r1, [r5, #0]
 8006374:	0605      	lsls	r5, r0, #24
 8006376:	d501      	bpl.n	800637c <_printf_i+0xe8>
 8006378:	681e      	ldr	r6, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0xee>
 800637c:	0641      	lsls	r1, r0, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0xe4>
 8006380:	881e      	ldrh	r6, [r3, #0]
 8006382:	2f6f      	cmp	r7, #111	; 0x6f
 8006384:	bf0c      	ite	eq
 8006386:	2308      	moveq	r3, #8
 8006388:	230a      	movne	r3, #10
 800638a:	4851      	ldr	r0, [pc, #324]	; (80064d0 <_printf_i+0x23c>)
 800638c:	2100      	movs	r1, #0
 800638e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006392:	6865      	ldr	r5, [r4, #4]
 8006394:	2d00      	cmp	r5, #0
 8006396:	bfa8      	it	ge
 8006398:	6821      	ldrge	r1, [r4, #0]
 800639a:	60a5      	str	r5, [r4, #8]
 800639c:	bfa4      	itt	ge
 800639e:	f021 0104 	bicge.w	r1, r1, #4
 80063a2:	6021      	strge	r1, [r4, #0]
 80063a4:	b90e      	cbnz	r6, 80063aa <_printf_i+0x116>
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	d04b      	beq.n	8006442 <_printf_i+0x1ae>
 80063aa:	4615      	mov	r5, r2
 80063ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80063b0:	fb03 6711 	mls	r7, r3, r1, r6
 80063b4:	5dc7      	ldrb	r7, [r0, r7]
 80063b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063ba:	4637      	mov	r7, r6
 80063bc:	42bb      	cmp	r3, r7
 80063be:	460e      	mov	r6, r1
 80063c0:	d9f4      	bls.n	80063ac <_printf_i+0x118>
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d10b      	bne.n	80063de <_printf_i+0x14a>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	07de      	lsls	r6, r3, #31
 80063ca:	d508      	bpl.n	80063de <_printf_i+0x14a>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	4299      	cmp	r1, r3
 80063d2:	bfde      	ittt	le
 80063d4:	2330      	movle	r3, #48	; 0x30
 80063d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063de:	1b52      	subs	r2, r2, r5
 80063e0:	6122      	str	r2, [r4, #16]
 80063e2:	464b      	mov	r3, r9
 80063e4:	4621      	mov	r1, r4
 80063e6:	4640      	mov	r0, r8
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	aa03      	add	r2, sp, #12
 80063ee:	f7ff fedf 	bl	80061b0 <_printf_common>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d14a      	bne.n	800648c <_printf_i+0x1f8>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	b004      	add	sp, #16
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	f043 0320 	orr.w	r3, r3, #32
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	2778      	movs	r7, #120	; 0x78
 800640a:	4832      	ldr	r0, [pc, #200]	; (80064d4 <_printf_i+0x240>)
 800640c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	6829      	ldr	r1, [r5, #0]
 8006414:	061f      	lsls	r7, r3, #24
 8006416:	f851 6b04 	ldr.w	r6, [r1], #4
 800641a:	d402      	bmi.n	8006422 <_printf_i+0x18e>
 800641c:	065f      	lsls	r7, r3, #25
 800641e:	bf48      	it	mi
 8006420:	b2b6      	uxthmi	r6, r6
 8006422:	07df      	lsls	r7, r3, #31
 8006424:	bf48      	it	mi
 8006426:	f043 0320 	orrmi.w	r3, r3, #32
 800642a:	6029      	str	r1, [r5, #0]
 800642c:	bf48      	it	mi
 800642e:	6023      	strmi	r3, [r4, #0]
 8006430:	b91e      	cbnz	r6, 800643a <_printf_i+0x1a6>
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f023 0320 	bic.w	r3, r3, #32
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	2310      	movs	r3, #16
 800643c:	e7a6      	b.n	800638c <_printf_i+0xf8>
 800643e:	4824      	ldr	r0, [pc, #144]	; (80064d0 <_printf_i+0x23c>)
 8006440:	e7e4      	b.n	800640c <_printf_i+0x178>
 8006442:	4615      	mov	r5, r2
 8006444:	e7bd      	b.n	80063c2 <_printf_i+0x12e>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	6826      	ldr	r6, [r4, #0]
 800644a:	1d18      	adds	r0, r3, #4
 800644c:	6961      	ldr	r1, [r4, #20]
 800644e:	6028      	str	r0, [r5, #0]
 8006450:	0635      	lsls	r5, r6, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	d501      	bpl.n	800645a <_printf_i+0x1c6>
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x1cc>
 800645a:	0670      	lsls	r0, r6, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x1c2>
 800645e:	8019      	strh	r1, [r3, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	4615      	mov	r5, r2
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	e7bc      	b.n	80063e2 <_printf_i+0x14e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	2100      	movs	r1, #0
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	602a      	str	r2, [r5, #0]
 8006470:	681d      	ldr	r5, [r3, #0]
 8006472:	6862      	ldr	r2, [r4, #4]
 8006474:	4628      	mov	r0, r5
 8006476:	f000 fab6 	bl	80069e6 <memchr>
 800647a:	b108      	cbz	r0, 8006480 <_printf_i+0x1ec>
 800647c:	1b40      	subs	r0, r0, r5
 800647e:	6060      	str	r0, [r4, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800648a:	e7aa      	b.n	80063e2 <_printf_i+0x14e>
 800648c:	462a      	mov	r2, r5
 800648e:	4649      	mov	r1, r9
 8006490:	4640      	mov	r0, r8
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	47d0      	blx	sl
 8006496:	3001      	adds	r0, #1
 8006498:	d0ad      	beq.n	80063f6 <_printf_i+0x162>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	d413      	bmi.n	80064c8 <_printf_i+0x234>
 80064a0:	68e0      	ldr	r0, [r4, #12]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	4298      	cmp	r0, r3
 80064a6:	bfb8      	it	lt
 80064a8:	4618      	movlt	r0, r3
 80064aa:	e7a6      	b.n	80063fa <_printf_i+0x166>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4632      	mov	r2, r6
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	47d0      	blx	sl
 80064b6:	3001      	adds	r0, #1
 80064b8:	d09d      	beq.n	80063f6 <_printf_i+0x162>
 80064ba:	3501      	adds	r5, #1
 80064bc:	68e3      	ldr	r3, [r4, #12]
 80064be:	9903      	ldr	r1, [sp, #12]
 80064c0:	1a5b      	subs	r3, r3, r1
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dcf2      	bgt.n	80064ac <_printf_i+0x218>
 80064c6:	e7eb      	b.n	80064a0 <_printf_i+0x20c>
 80064c8:	2500      	movs	r5, #0
 80064ca:	f104 0619 	add.w	r6, r4, #25
 80064ce:	e7f5      	b.n	80064bc <_printf_i+0x228>
 80064d0:	08009300 	.word	0x08009300
 80064d4:	08009311 	.word	0x08009311

080064d8 <std>:
 80064d8:	2300      	movs	r3, #0
 80064da:	b510      	push	{r4, lr}
 80064dc:	4604      	mov	r4, r0
 80064de:	e9c0 3300 	strd	r3, r3, [r0]
 80064e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064e6:	6083      	str	r3, [r0, #8]
 80064e8:	8181      	strh	r1, [r0, #12]
 80064ea:	6643      	str	r3, [r0, #100]	; 0x64
 80064ec:	81c2      	strh	r2, [r0, #14]
 80064ee:	6183      	str	r3, [r0, #24]
 80064f0:	4619      	mov	r1, r3
 80064f2:	2208      	movs	r2, #8
 80064f4:	305c      	adds	r0, #92	; 0x5c
 80064f6:	f000 f9f7 	bl	80068e8 <memset>
 80064fa:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <std+0x58>)
 80064fc:	6224      	str	r4, [r4, #32]
 80064fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <std+0x5c>)
 8006502:	62a3      	str	r3, [r4, #40]	; 0x28
 8006504:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <std+0x60>)
 8006506:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <std+0x64>)
 800650a:	6323      	str	r3, [r4, #48]	; 0x30
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <std+0x68>)
 800650e:	429c      	cmp	r4, r3
 8006510:	d006      	beq.n	8006520 <std+0x48>
 8006512:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006516:	4294      	cmp	r4, r2
 8006518:	d002      	beq.n	8006520 <std+0x48>
 800651a:	33d0      	adds	r3, #208	; 0xd0
 800651c:	429c      	cmp	r4, r3
 800651e:	d105      	bne.n	800652c <std+0x54>
 8006520:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	f000 ba5a 	b.w	80069e0 <__retarget_lock_init_recursive>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	08006739 	.word	0x08006739
 8006534:	0800675b 	.word	0x0800675b
 8006538:	08006793 	.word	0x08006793
 800653c:	080067b7 	.word	0x080067b7
 8006540:	20000498 	.word	0x20000498

08006544 <stdio_exit_handler>:
 8006544:	4a02      	ldr	r2, [pc, #8]	; (8006550 <stdio_exit_handler+0xc>)
 8006546:	4903      	ldr	r1, [pc, #12]	; (8006554 <stdio_exit_handler+0x10>)
 8006548:	4803      	ldr	r0, [pc, #12]	; (8006558 <stdio_exit_handler+0x14>)
 800654a:	f000 b869 	b.w	8006620 <_fwalk_sglue>
 800654e:	bf00      	nop
 8006550:	2000000c 	.word	0x2000000c
 8006554:	08008351 	.word	0x08008351
 8006558:	20000018 	.word	0x20000018

0800655c <cleanup_stdio>:
 800655c:	6841      	ldr	r1, [r0, #4]
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <cleanup_stdio+0x34>)
 8006560:	b510      	push	{r4, lr}
 8006562:	4299      	cmp	r1, r3
 8006564:	4604      	mov	r4, r0
 8006566:	d001      	beq.n	800656c <cleanup_stdio+0x10>
 8006568:	f001 fef2 	bl	8008350 <_fflush_r>
 800656c:	68a1      	ldr	r1, [r4, #8]
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <cleanup_stdio+0x38>)
 8006570:	4299      	cmp	r1, r3
 8006572:	d002      	beq.n	800657a <cleanup_stdio+0x1e>
 8006574:	4620      	mov	r0, r4
 8006576:	f001 feeb 	bl	8008350 <_fflush_r>
 800657a:	68e1      	ldr	r1, [r4, #12]
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <cleanup_stdio+0x3c>)
 800657e:	4299      	cmp	r1, r3
 8006580:	d004      	beq.n	800658c <cleanup_stdio+0x30>
 8006582:	4620      	mov	r0, r4
 8006584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006588:	f001 bee2 	b.w	8008350 <_fflush_r>
 800658c:	bd10      	pop	{r4, pc}
 800658e:	bf00      	nop
 8006590:	20000498 	.word	0x20000498
 8006594:	20000500 	.word	0x20000500
 8006598:	20000568 	.word	0x20000568

0800659c <global_stdio_init.part.0>:
 800659c:	b510      	push	{r4, lr}
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <global_stdio_init.part.0+0x30>)
 80065a0:	4c0b      	ldr	r4, [pc, #44]	; (80065d0 <global_stdio_init.part.0+0x34>)
 80065a2:	4a0c      	ldr	r2, [pc, #48]	; (80065d4 <global_stdio_init.part.0+0x38>)
 80065a4:	4620      	mov	r0, r4
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	2104      	movs	r1, #4
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7ff ff94 	bl	80064d8 <std>
 80065b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065b4:	2201      	movs	r2, #1
 80065b6:	2109      	movs	r1, #9
 80065b8:	f7ff ff8e 	bl	80064d8 <std>
 80065bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80065c0:	2202      	movs	r2, #2
 80065c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c6:	2112      	movs	r1, #18
 80065c8:	f7ff bf86 	b.w	80064d8 <std>
 80065cc:	200005d0 	.word	0x200005d0
 80065d0:	20000498 	.word	0x20000498
 80065d4:	08006545 	.word	0x08006545

080065d8 <__sfp_lock_acquire>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__sfp_lock_acquire+0x8>)
 80065da:	f000 ba02 	b.w	80069e2 <__retarget_lock_acquire_recursive>
 80065de:	bf00      	nop
 80065e0:	200005d9 	.word	0x200005d9

080065e4 <__sfp_lock_release>:
 80065e4:	4801      	ldr	r0, [pc, #4]	; (80065ec <__sfp_lock_release+0x8>)
 80065e6:	f000 b9fd 	b.w	80069e4 <__retarget_lock_release_recursive>
 80065ea:	bf00      	nop
 80065ec:	200005d9 	.word	0x200005d9

080065f0 <__sinit>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	f7ff fff0 	bl	80065d8 <__sfp_lock_acquire>
 80065f8:	6a23      	ldr	r3, [r4, #32]
 80065fa:	b11b      	cbz	r3, 8006604 <__sinit+0x14>
 80065fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006600:	f7ff bff0 	b.w	80065e4 <__sfp_lock_release>
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <__sinit+0x28>)
 8006606:	6223      	str	r3, [r4, #32]
 8006608:	4b04      	ldr	r3, [pc, #16]	; (800661c <__sinit+0x2c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f5      	bne.n	80065fc <__sinit+0xc>
 8006610:	f7ff ffc4 	bl	800659c <global_stdio_init.part.0>
 8006614:	e7f2      	b.n	80065fc <__sinit+0xc>
 8006616:	bf00      	nop
 8006618:	0800655d 	.word	0x0800655d
 800661c:	200005d0 	.word	0x200005d0

08006620 <_fwalk_sglue>:
 8006620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006624:	4607      	mov	r7, r0
 8006626:	4688      	mov	r8, r1
 8006628:	4614      	mov	r4, r2
 800662a:	2600      	movs	r6, #0
 800662c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006630:	f1b9 0901 	subs.w	r9, r9, #1
 8006634:	d505      	bpl.n	8006642 <_fwalk_sglue+0x22>
 8006636:	6824      	ldr	r4, [r4, #0]
 8006638:	2c00      	cmp	r4, #0
 800663a:	d1f7      	bne.n	800662c <_fwalk_sglue+0xc>
 800663c:	4630      	mov	r0, r6
 800663e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006642:	89ab      	ldrh	r3, [r5, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d907      	bls.n	8006658 <_fwalk_sglue+0x38>
 8006648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800664c:	3301      	adds	r3, #1
 800664e:	d003      	beq.n	8006658 <_fwalk_sglue+0x38>
 8006650:	4629      	mov	r1, r5
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	4306      	orrs	r6, r0
 8006658:	3568      	adds	r5, #104	; 0x68
 800665a:	e7e9      	b.n	8006630 <_fwalk_sglue+0x10>

0800665c <iprintf>:
 800665c:	b40f      	push	{r0, r1, r2, r3}
 800665e:	b507      	push	{r0, r1, r2, lr}
 8006660:	4906      	ldr	r1, [pc, #24]	; (800667c <iprintf+0x20>)
 8006662:	ab04      	add	r3, sp, #16
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	f853 2b04 	ldr.w	r2, [r3], #4
 800666a:	6881      	ldr	r1, [r0, #8]
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	f001 fcd3 	bl	8008018 <_vfiprintf_r>
 8006672:	b003      	add	sp, #12
 8006674:	f85d eb04 	ldr.w	lr, [sp], #4
 8006678:	b004      	add	sp, #16
 800667a:	4770      	bx	lr
 800667c:	20000064 	.word	0x20000064

08006680 <_puts_r>:
 8006680:	6a03      	ldr	r3, [r0, #32]
 8006682:	b570      	push	{r4, r5, r6, lr}
 8006684:	4605      	mov	r5, r0
 8006686:	460e      	mov	r6, r1
 8006688:	6884      	ldr	r4, [r0, #8]
 800668a:	b90b      	cbnz	r3, 8006690 <_puts_r+0x10>
 800668c:	f7ff ffb0 	bl	80065f0 <__sinit>
 8006690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006692:	07db      	lsls	r3, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_puts_r+0x22>
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	0598      	lsls	r0, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_puts_r+0x22>
 800669c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800669e:	f000 f9a0 	bl	80069e2 <__retarget_lock_acquire_recursive>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	0719      	lsls	r1, r3, #28
 80066a6:	d513      	bpl.n	80066d0 <_puts_r+0x50>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	b18b      	cbz	r3, 80066d0 <_puts_r+0x50>
 80066ac:	3e01      	subs	r6, #1
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066b4:	3b01      	subs	r3, #1
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	b9e9      	cbnz	r1, 80066f6 <_puts_r+0x76>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da2e      	bge.n	800671c <_puts_r+0x9c>
 80066be:	4622      	mov	r2, r4
 80066c0:	210a      	movs	r1, #10
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f87b 	bl	80067be <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d007      	beq.n	80066dc <_puts_r+0x5c>
 80066cc:	250a      	movs	r5, #10
 80066ce:	e007      	b.n	80066e0 <_puts_r+0x60>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f8b0 	bl	8006838 <__swsetup_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0e7      	beq.n	80066ac <_puts_r+0x2c>
 80066dc:	f04f 35ff 	mov.w	r5, #4294967295
 80066e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066e2:	07da      	lsls	r2, r3, #31
 80066e4:	d405      	bmi.n	80066f2 <_puts_r+0x72>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	059b      	lsls	r3, r3, #22
 80066ea:	d402      	bmi.n	80066f2 <_puts_r+0x72>
 80066ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ee:	f000 f979 	bl	80069e4 <__retarget_lock_release_recursive>
 80066f2:	4628      	mov	r0, r5
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da04      	bge.n	8006704 <_puts_r+0x84>
 80066fa:	69a2      	ldr	r2, [r4, #24]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	dc06      	bgt.n	800670e <_puts_r+0x8e>
 8006700:	290a      	cmp	r1, #10
 8006702:	d004      	beq.n	800670e <_puts_r+0x8e>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	6022      	str	r2, [r4, #0]
 800670a:	7019      	strb	r1, [r3, #0]
 800670c:	e7cf      	b.n	80066ae <_puts_r+0x2e>
 800670e:	4622      	mov	r2, r4
 8006710:	4628      	mov	r0, r5
 8006712:	f000 f854 	bl	80067be <__swbuf_r>
 8006716:	3001      	adds	r0, #1
 8006718:	d1c9      	bne.n	80066ae <_puts_r+0x2e>
 800671a:	e7df      	b.n	80066dc <_puts_r+0x5c>
 800671c:	250a      	movs	r5, #10
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	701d      	strb	r5, [r3, #0]
 8006726:	e7db      	b.n	80066e0 <_puts_r+0x60>

08006728 <puts>:
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <puts+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f7ff bfa7 	b.w	8006680 <_puts_r>
 8006732:	bf00      	nop
 8006734:	20000064 	.word	0x20000064

08006738 <__sread>:
 8006738:	b510      	push	{r4, lr}
 800673a:	460c      	mov	r4, r1
 800673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006740:	f000 f900 	bl	8006944 <_read_r>
 8006744:	2800      	cmp	r0, #0
 8006746:	bfab      	itete	ge
 8006748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800674a:	89a3      	ldrhlt	r3, [r4, #12]
 800674c:	181b      	addge	r3, r3, r0
 800674e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006752:	bfac      	ite	ge
 8006754:	6563      	strge	r3, [r4, #84]	; 0x54
 8006756:	81a3      	strhlt	r3, [r4, #12]
 8006758:	bd10      	pop	{r4, pc}

0800675a <__swrite>:
 800675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675e:	461f      	mov	r7, r3
 8006760:	898b      	ldrh	r3, [r1, #12]
 8006762:	4605      	mov	r5, r0
 8006764:	05db      	lsls	r3, r3, #23
 8006766:	460c      	mov	r4, r1
 8006768:	4616      	mov	r6, r2
 800676a:	d505      	bpl.n	8006778 <__swrite+0x1e>
 800676c:	2302      	movs	r3, #2
 800676e:	2200      	movs	r2, #0
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	f000 f8d4 	bl	8006920 <_lseek_r>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	4632      	mov	r2, r6
 800677c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	4628      	mov	r0, r5
 8006784:	463b      	mov	r3, r7
 8006786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	f000 b8eb 	b.w	8006968 <_write_r>

08006792 <__sseek>:
 8006792:	b510      	push	{r4, lr}
 8006794:	460c      	mov	r4, r1
 8006796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679a:	f000 f8c1 	bl	8006920 <_lseek_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	bf15      	itete	ne
 80067a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ae:	81a3      	strheq	r3, [r4, #12]
 80067b0:	bf18      	it	ne
 80067b2:	81a3      	strhne	r3, [r4, #12]
 80067b4:	bd10      	pop	{r4, pc}

080067b6 <__sclose>:
 80067b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ba:	f000 b8a1 	b.w	8006900 <_close_r>

080067be <__swbuf_r>:
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c0:	460e      	mov	r6, r1
 80067c2:	4614      	mov	r4, r2
 80067c4:	4605      	mov	r5, r0
 80067c6:	b118      	cbz	r0, 80067d0 <__swbuf_r+0x12>
 80067c8:	6a03      	ldr	r3, [r0, #32]
 80067ca:	b90b      	cbnz	r3, 80067d0 <__swbuf_r+0x12>
 80067cc:	f7ff ff10 	bl	80065f0 <__sinit>
 80067d0:	69a3      	ldr	r3, [r4, #24]
 80067d2:	60a3      	str	r3, [r4, #8]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	071a      	lsls	r2, r3, #28
 80067d8:	d525      	bpl.n	8006826 <__swbuf_r+0x68>
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	b31b      	cbz	r3, 8006826 <__swbuf_r+0x68>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	6922      	ldr	r2, [r4, #16]
 80067e2:	b2f6      	uxtb	r6, r6
 80067e4:	1a98      	subs	r0, r3, r2
 80067e6:	6963      	ldr	r3, [r4, #20]
 80067e8:	4637      	mov	r7, r6
 80067ea:	4283      	cmp	r3, r0
 80067ec:	dc04      	bgt.n	80067f8 <__swbuf_r+0x3a>
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f001 fdad 	bl	8008350 <_fflush_r>
 80067f6:	b9e0      	cbnz	r0, 8006832 <__swbuf_r+0x74>
 80067f8:	68a3      	ldr	r3, [r4, #8]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	701e      	strb	r6, [r3, #0]
 8006806:	6962      	ldr	r2, [r4, #20]
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	429a      	cmp	r2, r3
 800680c:	d004      	beq.n	8006818 <__swbuf_r+0x5a>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	07db      	lsls	r3, r3, #31
 8006812:	d506      	bpl.n	8006822 <__swbuf_r+0x64>
 8006814:	2e0a      	cmp	r6, #10
 8006816:	d104      	bne.n	8006822 <__swbuf_r+0x64>
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f001 fd98 	bl	8008350 <_fflush_r>
 8006820:	b938      	cbnz	r0, 8006832 <__swbuf_r+0x74>
 8006822:	4638      	mov	r0, r7
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f805 	bl	8006838 <__swsetup_r>
 800682e:	2800      	cmp	r0, #0
 8006830:	d0d5      	beq.n	80067de <__swbuf_r+0x20>
 8006832:	f04f 37ff 	mov.w	r7, #4294967295
 8006836:	e7f4      	b.n	8006822 <__swbuf_r+0x64>

08006838 <__swsetup_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4b2a      	ldr	r3, [pc, #168]	; (80068e4 <__swsetup_r+0xac>)
 800683c:	4605      	mov	r5, r0
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	460c      	mov	r4, r1
 8006842:	b118      	cbz	r0, 800684c <__swsetup_r+0x14>
 8006844:	6a03      	ldr	r3, [r0, #32]
 8006846:	b90b      	cbnz	r3, 800684c <__swsetup_r+0x14>
 8006848:	f7ff fed2 	bl	80065f0 <__sinit>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006852:	0718      	lsls	r0, r3, #28
 8006854:	d422      	bmi.n	800689c <__swsetup_r+0x64>
 8006856:	06d9      	lsls	r1, r3, #27
 8006858:	d407      	bmi.n	800686a <__swsetup_r+0x32>
 800685a:	2309      	movs	r3, #9
 800685c:	602b      	str	r3, [r5, #0]
 800685e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	e034      	b.n	80068d4 <__swsetup_r+0x9c>
 800686a:	0758      	lsls	r0, r3, #29
 800686c:	d512      	bpl.n	8006894 <__swsetup_r+0x5c>
 800686e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006870:	b141      	cbz	r1, 8006884 <__swsetup_r+0x4c>
 8006872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006876:	4299      	cmp	r1, r3
 8006878:	d002      	beq.n	8006880 <__swsetup_r+0x48>
 800687a:	4628      	mov	r0, r5
 800687c:	f000 ff30 	bl	80076e0 <_free_r>
 8006880:	2300      	movs	r3, #0
 8006882:	6363      	str	r3, [r4, #52]	; 0x34
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	2300      	movs	r3, #0
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f043 0308 	orr.w	r3, r3, #8
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	b94b      	cbnz	r3, 80068b4 <__swsetup_r+0x7c>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068aa:	d003      	beq.n	80068b4 <__swsetup_r+0x7c>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	f001 fd9b 	bl	80083ea <__smakebuf_r>
 80068b4:	89a0      	ldrh	r0, [r4, #12]
 80068b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ba:	f010 0301 	ands.w	r3, r0, #1
 80068be:	d00a      	beq.n	80068d6 <__swsetup_r+0x9e>
 80068c0:	2300      	movs	r3, #0
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	6963      	ldr	r3, [r4, #20]
 80068c6:	425b      	negs	r3, r3
 80068c8:	61a3      	str	r3, [r4, #24]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	b943      	cbnz	r3, 80068e0 <__swsetup_r+0xa8>
 80068ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068d2:	d1c4      	bne.n	800685e <__swsetup_r+0x26>
 80068d4:	bd38      	pop	{r3, r4, r5, pc}
 80068d6:	0781      	lsls	r1, r0, #30
 80068d8:	bf58      	it	pl
 80068da:	6963      	ldrpl	r3, [r4, #20]
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	e7f4      	b.n	80068ca <__swsetup_r+0x92>
 80068e0:	2000      	movs	r0, #0
 80068e2:	e7f7      	b.n	80068d4 <__swsetup_r+0x9c>
 80068e4:	20000064 	.word	0x20000064

080068e8 <memset>:
 80068e8:	4603      	mov	r3, r0
 80068ea:	4402      	add	r2, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <_localeconv_r>:
 80068f8:	4800      	ldr	r0, [pc, #0]	; (80068fc <_localeconv_r+0x4>)
 80068fa:	4770      	bx	lr
 80068fc:	20000158 	.word	0x20000158

08006900 <_close_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d05      	ldr	r5, [pc, #20]	; (800691c <_close_r+0x1c>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	f7fb fab2 	bl	8001e74 <_close>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	d102      	bne.n	800691a <_close_r+0x1a>
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	b103      	cbz	r3, 800691a <_close_r+0x1a>
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	200005d4 	.word	0x200005d4

08006920 <_lseek_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	4611      	mov	r1, r2
 8006928:	2200      	movs	r2, #0
 800692a:	4d05      	ldr	r5, [pc, #20]	; (8006940 <_lseek_r+0x20>)
 800692c:	602a      	str	r2, [r5, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fb fac4 	bl	8001ebc <_lseek>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_lseek_r+0x1e>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_lseek_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	200005d4 	.word	0x200005d4

08006944 <_read_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	4611      	mov	r1, r2
 800694c:	2200      	movs	r2, #0
 800694e:	4d05      	ldr	r5, [pc, #20]	; (8006964 <_read_r+0x20>)
 8006950:	602a      	str	r2, [r5, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	f7fb fa55 	bl	8001e02 <_read>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_read_r+0x1e>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_read_r+0x1e>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	200005d4 	.word	0x200005d4

08006968 <_write_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	2200      	movs	r2, #0
 8006972:	4d05      	ldr	r5, [pc, #20]	; (8006988 <_write_r+0x20>)
 8006974:	602a      	str	r2, [r5, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f7fb fa60 	bl	8001e3c <_write>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_write_r+0x1e>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	b103      	cbz	r3, 8006986 <_write_r+0x1e>
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	200005d4 	.word	0x200005d4

0800698c <__errno>:
 800698c:	4b01      	ldr	r3, [pc, #4]	; (8006994 <__errno+0x8>)
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000064 	.word	0x20000064

08006998 <__libc_init_array>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	2600      	movs	r6, #0
 800699c:	4d0c      	ldr	r5, [pc, #48]	; (80069d0 <__libc_init_array+0x38>)
 800699e:	4c0d      	ldr	r4, [pc, #52]	; (80069d4 <__libc_init_array+0x3c>)
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	10a4      	asrs	r4, r4, #2
 80069a4:	42a6      	cmp	r6, r4
 80069a6:	d109      	bne.n	80069bc <__libc_init_array+0x24>
 80069a8:	f002 fae6 	bl	8008f78 <_init>
 80069ac:	2600      	movs	r6, #0
 80069ae:	4d0a      	ldr	r5, [pc, #40]	; (80069d8 <__libc_init_array+0x40>)
 80069b0:	4c0a      	ldr	r4, [pc, #40]	; (80069dc <__libc_init_array+0x44>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	42a6      	cmp	r6, r4
 80069b8:	d105      	bne.n	80069c6 <__libc_init_array+0x2e>
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c0:	4798      	blx	r3
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7ee      	b.n	80069a4 <__libc_init_array+0xc>
 80069c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ca:	4798      	blx	r3
 80069cc:	3601      	adds	r6, #1
 80069ce:	e7f2      	b.n	80069b6 <__libc_init_array+0x1e>
 80069d0:	08009674 	.word	0x08009674
 80069d4:	08009674 	.word	0x08009674
 80069d8:	08009674 	.word	0x08009674
 80069dc:	08009678 	.word	0x08009678

080069e0 <__retarget_lock_init_recursive>:
 80069e0:	4770      	bx	lr

080069e2 <__retarget_lock_acquire_recursive>:
 80069e2:	4770      	bx	lr

080069e4 <__retarget_lock_release_recursive>:
 80069e4:	4770      	bx	lr

080069e6 <memchr>:
 80069e6:	4603      	mov	r3, r0
 80069e8:	b510      	push	{r4, lr}
 80069ea:	b2c9      	uxtb	r1, r1
 80069ec:	4402      	add	r2, r0
 80069ee:	4293      	cmp	r3, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	d101      	bne.n	80069f8 <memchr+0x12>
 80069f4:	2000      	movs	r0, #0
 80069f6:	e003      	b.n	8006a00 <memchr+0x1a>
 80069f8:	7804      	ldrb	r4, [r0, #0]
 80069fa:	3301      	adds	r3, #1
 80069fc:	428c      	cmp	r4, r1
 80069fe:	d1f6      	bne.n	80069ee <memchr+0x8>
 8006a00:	bd10      	pop	{r4, pc}

08006a02 <quorem>:
 8006a02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	6903      	ldr	r3, [r0, #16]
 8006a08:	690c      	ldr	r4, [r1, #16]
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	db7f      	blt.n	8006b10 <quorem+0x10e>
 8006a10:	3c01      	subs	r4, #1
 8006a12:	f100 0514 	add.w	r5, r0, #20
 8006a16:	f101 0814 	add.w	r8, r1, #20
 8006a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a38:	d331      	bcc.n	8006a9e <quorem+0x9c>
 8006a3a:	f04f 0e00 	mov.w	lr, #0
 8006a3e:	4640      	mov	r0, r8
 8006a40:	46ac      	mov	ip, r5
 8006a42:	46f2      	mov	sl, lr
 8006a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a48:	b293      	uxth	r3, r2
 8006a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a52:	0c1a      	lsrs	r2, r3, #16
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	fb06 220e 	mla	r2, r6, lr, r2
 8006a5a:	ebaa 0303 	sub.w	r3, sl, r3
 8006a5e:	f8dc a000 	ldr.w	sl, [ip]
 8006a62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a66:	fa1f fa8a 	uxth.w	sl, sl
 8006a6a:	4453      	add	r3, sl
 8006a6c:	f8dc a000 	ldr.w	sl, [ip]
 8006a70:	b292      	uxth	r2, r2
 8006a72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a80:	4581      	cmp	r9, r0
 8006a82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a86:	f84c 3b04 	str.w	r3, [ip], #4
 8006a8a:	d2db      	bcs.n	8006a44 <quorem+0x42>
 8006a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a90:	b92b      	cbnz	r3, 8006a9e <quorem+0x9c>
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	3b04      	subs	r3, #4
 8006a96:	429d      	cmp	r5, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	d32d      	bcc.n	8006af8 <quorem+0xf6>
 8006a9c:	613c      	str	r4, [r7, #16]
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f001 f994 	bl	8007dcc <__mcmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	db23      	blt.n	8006af0 <quorem+0xee>
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	2000      	movs	r0, #0
 8006aac:	3601      	adds	r6, #1
 8006aae:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ab2:	f8d1 c000 	ldr.w	ip, [r1]
 8006ab6:	b293      	uxth	r3, r2
 8006ab8:	1ac3      	subs	r3, r0, r3
 8006aba:	0c12      	lsrs	r2, r2, #16
 8006abc:	fa1f f08c 	uxth.w	r0, ip
 8006ac0:	4403      	add	r3, r0
 8006ac2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad0:	45c1      	cmp	r9, r8
 8006ad2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ad6:	f841 3b04 	str.w	r3, [r1], #4
 8006ada:	d2e8      	bcs.n	8006aae <quorem+0xac>
 8006adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ae4:	b922      	cbnz	r2, 8006af0 <quorem+0xee>
 8006ae6:	3b04      	subs	r3, #4
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	d30a      	bcc.n	8006b04 <quorem+0x102>
 8006aee:	613c      	str	r4, [r7, #16]
 8006af0:	4630      	mov	r0, r6
 8006af2:	b003      	add	sp, #12
 8006af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	3b04      	subs	r3, #4
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d1cd      	bne.n	8006a9c <quorem+0x9a>
 8006b00:	3c01      	subs	r4, #1
 8006b02:	e7c8      	b.n	8006a96 <quorem+0x94>
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	3b04      	subs	r3, #4
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	d1f0      	bne.n	8006aee <quorem+0xec>
 8006b0c:	3c01      	subs	r4, #1
 8006b0e:	e7eb      	b.n	8006ae8 <quorem+0xe6>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7ee      	b.n	8006af2 <quorem+0xf0>
 8006b14:	0000      	movs	r0, r0
	...

08006b18 <_dtoa_r>:
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	461f      	mov	r7, r3
 8006b20:	69c4      	ldr	r4, [r0, #28]
 8006b22:	b099      	sub	sp, #100	; 0x64
 8006b24:	4605      	mov	r5, r0
 8006b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006b2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006b2e:	b974      	cbnz	r4, 8006b4e <_dtoa_r+0x36>
 8006b30:	2010      	movs	r0, #16
 8006b32:	f000 fe1d 	bl	8007770 <malloc>
 8006b36:	4602      	mov	r2, r0
 8006b38:	61e8      	str	r0, [r5, #28]
 8006b3a:	b920      	cbnz	r0, 8006b46 <_dtoa_r+0x2e>
 8006b3c:	21ef      	movs	r1, #239	; 0xef
 8006b3e:	4bac      	ldr	r3, [pc, #688]	; (8006df0 <_dtoa_r+0x2d8>)
 8006b40:	48ac      	ldr	r0, [pc, #688]	; (8006df4 <_dtoa_r+0x2dc>)
 8006b42:	f001 fccf 	bl	80084e4 <__assert_func>
 8006b46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b4a:	6004      	str	r4, [r0, #0]
 8006b4c:	60c4      	str	r4, [r0, #12]
 8006b4e:	69eb      	ldr	r3, [r5, #28]
 8006b50:	6819      	ldr	r1, [r3, #0]
 8006b52:	b151      	cbz	r1, 8006b6a <_dtoa_r+0x52>
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	2301      	movs	r3, #1
 8006b58:	4093      	lsls	r3, r2
 8006b5a:	604a      	str	r2, [r1, #4]
 8006b5c:	608b      	str	r3, [r1, #8]
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 fefa 	bl	8007958 <_Bfree>
 8006b64:	2200      	movs	r2, #0
 8006b66:	69eb      	ldr	r3, [r5, #28]
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	1e3b      	subs	r3, r7, #0
 8006b6c:	bfaf      	iteee	ge
 8006b6e:	2300      	movge	r3, #0
 8006b70:	2201      	movlt	r2, #1
 8006b72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	9305      	strlt	r3, [sp, #20]
 8006b78:	bfa8      	it	ge
 8006b7a:	f8c8 3000 	strge.w	r3, [r8]
 8006b7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b82:	4b9d      	ldr	r3, [pc, #628]	; (8006df8 <_dtoa_r+0x2e0>)
 8006b84:	bfb8      	it	lt
 8006b86:	f8c8 2000 	strlt.w	r2, [r8]
 8006b8a:	ea33 0309 	bics.w	r3, r3, r9
 8006b8e:	d119      	bne.n	8006bc4 <_dtoa_r+0xac>
 8006b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b9c:	4333      	orrs	r3, r6
 8006b9e:	f000 8589 	beq.w	80076b4 <_dtoa_r+0xb9c>
 8006ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ba4:	b953      	cbnz	r3, 8006bbc <_dtoa_r+0xa4>
 8006ba6:	4b95      	ldr	r3, [pc, #596]	; (8006dfc <_dtoa_r+0x2e4>)
 8006ba8:	e023      	b.n	8006bf2 <_dtoa_r+0xda>
 8006baa:	4b95      	ldr	r3, [pc, #596]	; (8006e00 <_dtoa_r+0x2e8>)
 8006bac:	9303      	str	r3, [sp, #12]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	9803      	ldr	r0, [sp, #12]
 8006bb6:	b019      	add	sp, #100	; 0x64
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	4b8f      	ldr	r3, [pc, #572]	; (8006dfc <_dtoa_r+0x2e4>)
 8006bbe:	9303      	str	r3, [sp, #12]
 8006bc0:	3303      	adds	r3, #3
 8006bc2:	e7f5      	b.n	8006bb0 <_dtoa_r+0x98>
 8006bc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006bc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f7f9 fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bd8:	4680      	mov	r8, r0
 8006bda:	b160      	cbz	r0, 8006bf6 <_dtoa_r+0xde>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8562 	beq.w	80076ae <_dtoa_r+0xb96>
 8006bea:	4b86      	ldr	r3, [pc, #536]	; (8006e04 <_dtoa_r+0x2ec>)
 8006bec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	9303      	str	r3, [sp, #12]
 8006bf4:	e7de      	b.n	8006bb4 <_dtoa_r+0x9c>
 8006bf6:	ab16      	add	r3, sp, #88	; 0x58
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	ab17      	add	r3, sp, #92	; 0x5c
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	4628      	mov	r0, r5
 8006c00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c04:	f001 f98a 	bl	8007f1c <__d2b>
 8006c08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	d07e      	beq.n	8006d10 <_dtoa_r+0x1f8>
 8006c12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c18:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c28:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4b75      	ldr	r3, [pc, #468]	; (8006e08 <_dtoa_r+0x2f0>)
 8006c32:	f7f9 fa99 	bl	8000168 <__aeabi_dsub>
 8006c36:	a368      	add	r3, pc, #416	; (adr r3, 8006dd8 <_dtoa_r+0x2c0>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	a367      	add	r3, pc, #412	; (adr r3, 8006de0 <_dtoa_r+0x2c8>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 fa91 	bl	800016c <__adddf3>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	460f      	mov	r7, r1
 8006c50:	f7f9 fbd8 	bl	8000404 <__aeabi_i2d>
 8006c54:	a364      	add	r3, pc, #400	; (adr r3, 8006de8 <_dtoa_r+0x2d0>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fc3d 	bl	80004d8 <__aeabi_dmul>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fa81 	bl	800016c <__adddf3>
 8006c6a:	4606      	mov	r6, r0
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	f7f9 fee3 	bl	8000a38 <__aeabi_d2iz>
 8006c72:	2200      	movs	r2, #0
 8006c74:	4683      	mov	fp, r0
 8006c76:	2300      	movs	r3, #0
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 fe9e 	bl	80009bc <__aeabi_dcmplt>
 8006c80:	b148      	cbz	r0, 8006c96 <_dtoa_r+0x17e>
 8006c82:	4658      	mov	r0, fp
 8006c84:	f7f9 fbbe 	bl	8000404 <__aeabi_i2d>
 8006c88:	4632      	mov	r2, r6
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	f7f9 fe8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006c90:	b908      	cbnz	r0, 8006c96 <_dtoa_r+0x17e>
 8006c92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c96:	f1bb 0f16 	cmp.w	fp, #22
 8006c9a:	d857      	bhi.n	8006d4c <_dtoa_r+0x234>
 8006c9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ca0:	4b5a      	ldr	r3, [pc, #360]	; (8006e0c <_dtoa_r+0x2f4>)
 8006ca2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 fe87 	bl	80009bc <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d04e      	beq.n	8006d50 <_dtoa_r+0x238>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cbc:	1b1b      	subs	r3, r3, r4
 8006cbe:	1e5a      	subs	r2, r3, #1
 8006cc0:	bf46      	itte	mi
 8006cc2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006cc6:	2300      	movmi	r3, #0
 8006cc8:	f04f 0900 	movpl.w	r9, #0
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	bf48      	it	mi
 8006cd0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006cd2:	f1bb 0f00 	cmp.w	fp, #0
 8006cd6:	db3d      	blt.n	8006d54 <_dtoa_r+0x23c>
 8006cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cda:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006cde:	445b      	add	r3, fp
 8006ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d867      	bhi.n	8006dbc <_dtoa_r+0x2a4>
 8006cec:	2b05      	cmp	r3, #5
 8006cee:	bfc4      	itt	gt
 8006cf0:	3b04      	subgt	r3, #4
 8006cf2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cf6:	bfc8      	it	gt
 8006cf8:	2400      	movgt	r4, #0
 8006cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8006cfe:	bfd8      	it	le
 8006d00:	2401      	movle	r4, #1
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	f200 8086 	bhi.w	8006e14 <_dtoa_r+0x2fc>
 8006d08:	e8df f003 	tbb	[pc, r3]
 8006d0c:	5637392c 	.word	0x5637392c
 8006d10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d14:	441c      	add	r4, r3
 8006d16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	bfc1      	itttt	gt
 8006d1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d22:	fa09 f903 	lslgt.w	r9, r9, r3
 8006d26:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006d2a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d2e:	bfd6      	itet	le
 8006d30:	f1c3 0320 	rsble	r3, r3, #32
 8006d34:	ea49 0003 	orrgt.w	r0, r9, r3
 8006d38:	fa06 f003 	lslle.w	r0, r6, r3
 8006d3c:	f7f9 fb52 	bl	80003e4 <__aeabi_ui2d>
 8006d40:	2201      	movs	r2, #1
 8006d42:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d46:	3c01      	subs	r4, #1
 8006d48:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d4a:	e76f      	b.n	8006c2c <_dtoa_r+0x114>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e7b3      	b.n	8006cb8 <_dtoa_r+0x1a0>
 8006d50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d52:	e7b2      	b.n	8006cba <_dtoa_r+0x1a2>
 8006d54:	f1cb 0300 	rsb	r3, fp, #0
 8006d58:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	eba9 090b 	sub.w	r9, r9, fp
 8006d60:	930e      	str	r3, [sp, #56]	; 0x38
 8006d62:	e7c0      	b.n	8006ce6 <_dtoa_r+0x1ce>
 8006d64:	2300      	movs	r3, #0
 8006d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc55      	bgt.n	8006e1a <_dtoa_r+0x302>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	461a      	mov	r2, r3
 8006d72:	9306      	str	r3, [sp, #24]
 8006d74:	9308      	str	r3, [sp, #32]
 8006d76:	9223      	str	r2, [sp, #140]	; 0x8c
 8006d78:	e00b      	b.n	8006d92 <_dtoa_r+0x27a>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e7f3      	b.n	8006d66 <_dtoa_r+0x24e>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d84:	445b      	add	r3, fp
 8006d86:	9306      	str	r3, [sp, #24]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	bfb8      	it	lt
 8006d90:	2301      	movlt	r3, #1
 8006d92:	2100      	movs	r1, #0
 8006d94:	2204      	movs	r2, #4
 8006d96:	69e8      	ldr	r0, [r5, #28]
 8006d98:	f102 0614 	add.w	r6, r2, #20
 8006d9c:	429e      	cmp	r6, r3
 8006d9e:	d940      	bls.n	8006e22 <_dtoa_r+0x30a>
 8006da0:	6041      	str	r1, [r0, #4]
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 fd98 	bl	80078d8 <_Balloc>
 8006da8:	9003      	str	r0, [sp, #12]
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d13c      	bne.n	8006e28 <_dtoa_r+0x310>
 8006dae:	4602      	mov	r2, r0
 8006db0:	f240 11af 	movw	r1, #431	; 0x1af
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <_dtoa_r+0x2f8>)
 8006db6:	e6c3      	b.n	8006b40 <_dtoa_r+0x28>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e7e1      	b.n	8006d80 <_dtoa_r+0x268>
 8006dbc:	2401      	movs	r4, #1
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006dc2:	9322      	str	r3, [sp, #136]	; 0x88
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	2200      	movs	r2, #0
 8006dca:	9306      	str	r3, [sp, #24]
 8006dcc:	9308      	str	r3, [sp, #32]
 8006dce:	2312      	movs	r3, #18
 8006dd0:	e7d1      	b.n	8006d76 <_dtoa_r+0x25e>
 8006dd2:	bf00      	nop
 8006dd4:	f3af 8000 	nop.w
 8006dd8:	636f4361 	.word	0x636f4361
 8006ddc:	3fd287a7 	.word	0x3fd287a7
 8006de0:	8b60c8b3 	.word	0x8b60c8b3
 8006de4:	3fc68a28 	.word	0x3fc68a28
 8006de8:	509f79fb 	.word	0x509f79fb
 8006dec:	3fd34413 	.word	0x3fd34413
 8006df0:	0800932f 	.word	0x0800932f
 8006df4:	08009346 	.word	0x08009346
 8006df8:	7ff00000 	.word	0x7ff00000
 8006dfc:	0800932b 	.word	0x0800932b
 8006e00:	08009322 	.word	0x08009322
 8006e04:	080092ff 	.word	0x080092ff
 8006e08:	3ff80000 	.word	0x3ff80000
 8006e0c:	08009430 	.word	0x08009430
 8006e10:	0800939e 	.word	0x0800939e
 8006e14:	2301      	movs	r3, #1
 8006e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e18:	e7d4      	b.n	8006dc4 <_dtoa_r+0x2ac>
 8006e1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	9308      	str	r3, [sp, #32]
 8006e20:	e7b7      	b.n	8006d92 <_dtoa_r+0x27a>
 8006e22:	3101      	adds	r1, #1
 8006e24:	0052      	lsls	r2, r2, #1
 8006e26:	e7b7      	b.n	8006d98 <_dtoa_r+0x280>
 8006e28:	69eb      	ldr	r3, [r5, #28]
 8006e2a:	9a03      	ldr	r2, [sp, #12]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	9b08      	ldr	r3, [sp, #32]
 8006e30:	2b0e      	cmp	r3, #14
 8006e32:	f200 80a8 	bhi.w	8006f86 <_dtoa_r+0x46e>
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	f000 80a5 	beq.w	8006f86 <_dtoa_r+0x46e>
 8006e3c:	f1bb 0f00 	cmp.w	fp, #0
 8006e40:	dd34      	ble.n	8006eac <_dtoa_r+0x394>
 8006e42:	4b9a      	ldr	r3, [pc, #616]	; (80070ac <_dtoa_r+0x594>)
 8006e44:	f00b 020f 	and.w	r2, fp, #15
 8006e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e54:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e58:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006e5c:	d016      	beq.n	8006e8c <_dtoa_r+0x374>
 8006e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e62:	4b93      	ldr	r3, [pc, #588]	; (80070b0 <_dtoa_r+0x598>)
 8006e64:	2703      	movs	r7, #3
 8006e66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e6a:	f7f9 fc5f 	bl	800072c <__aeabi_ddiv>
 8006e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e72:	f004 040f 	and.w	r4, r4, #15
 8006e76:	4e8e      	ldr	r6, [pc, #568]	; (80070b0 <_dtoa_r+0x598>)
 8006e78:	b954      	cbnz	r4, 8006e90 <_dtoa_r+0x378>
 8006e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e82:	f7f9 fc53 	bl	800072c <__aeabi_ddiv>
 8006e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e8a:	e029      	b.n	8006ee0 <_dtoa_r+0x3c8>
 8006e8c:	2702      	movs	r7, #2
 8006e8e:	e7f2      	b.n	8006e76 <_dtoa_r+0x35e>
 8006e90:	07e1      	lsls	r1, r4, #31
 8006e92:	d508      	bpl.n	8006ea6 <_dtoa_r+0x38e>
 8006e94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e9c:	f7f9 fb1c 	bl	80004d8 <__aeabi_dmul>
 8006ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ea4:	3701      	adds	r7, #1
 8006ea6:	1064      	asrs	r4, r4, #1
 8006ea8:	3608      	adds	r6, #8
 8006eaa:	e7e5      	b.n	8006e78 <_dtoa_r+0x360>
 8006eac:	f000 80a5 	beq.w	8006ffa <_dtoa_r+0x4e2>
 8006eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eb4:	f1cb 0400 	rsb	r4, fp, #0
 8006eb8:	4b7c      	ldr	r3, [pc, #496]	; (80070ac <_dtoa_r+0x594>)
 8006eba:	f004 020f 	and.w	r2, r4, #15
 8006ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fb07 	bl	80004d8 <__aeabi_dmul>
 8006eca:	2702      	movs	r7, #2
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ed2:	4e77      	ldr	r6, [pc, #476]	; (80070b0 <_dtoa_r+0x598>)
 8006ed4:	1124      	asrs	r4, r4, #4
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	f040 8084 	bne.w	8006fe4 <_dtoa_r+0x4cc>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1d2      	bne.n	8006e86 <_dtoa_r+0x36e>
 8006ee0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ee4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8087 	beq.w	8006ffe <_dtoa_r+0x4e6>
 8006ef0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <_dtoa_r+0x59c>)
 8006ef8:	f7f9 fd60 	bl	80009bc <__aeabi_dcmplt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d07e      	beq.n	8006ffe <_dtoa_r+0x4e6>
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d07b      	beq.n	8006ffe <_dtoa_r+0x4e6>
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dd38      	ble.n	8006f7e <_dtoa_r+0x466>
 8006f0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f10:	2200      	movs	r2, #0
 8006f12:	4b69      	ldr	r3, [pc, #420]	; (80070b8 <_dtoa_r+0x5a0>)
 8006f14:	f7f9 fae0 	bl	80004d8 <__aeabi_dmul>
 8006f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f1c:	9c06      	ldr	r4, [sp, #24]
 8006f1e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006f22:	3701      	adds	r7, #1
 8006f24:	4638      	mov	r0, r7
 8006f26:	f7f9 fa6d 	bl	8000404 <__aeabi_i2d>
 8006f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f2e:	f7f9 fad3 	bl	80004d8 <__aeabi_dmul>
 8006f32:	2200      	movs	r2, #0
 8006f34:	4b61      	ldr	r3, [pc, #388]	; (80070bc <_dtoa_r+0x5a4>)
 8006f36:	f7f9 f919 	bl	800016c <__adddf3>
 8006f3a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f42:	9611      	str	r6, [sp, #68]	; 0x44
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	d15d      	bne.n	8007004 <_dtoa_r+0x4ec>
 8006f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4b5c      	ldr	r3, [pc, #368]	; (80070c0 <_dtoa_r+0x5a8>)
 8006f50:	f7f9 f90a 	bl	8000168 <__aeabi_dsub>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f5c:	4633      	mov	r3, r6
 8006f5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f60:	f7f9 fd4a 	bl	80009f8 <__aeabi_dcmpgt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f040 8295 	bne.w	8007494 <_dtoa_r+0x97c>
 8006f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f74:	f7f9 fd22 	bl	80009bc <__aeabi_dcmplt>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f040 8289 	bne.w	8007490 <_dtoa_r+0x978>
 8006f7e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f2c0 8151 	blt.w	8007230 <_dtoa_r+0x718>
 8006f8e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f92:	f300 814d 	bgt.w	8007230 <_dtoa_r+0x718>
 8006f96:	4b45      	ldr	r3, [pc, #276]	; (80070ac <_dtoa_r+0x594>)
 8006f98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fa0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006fa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f280 80da 	bge.w	8007160 <_dtoa_r+0x648>
 8006fac:	9b08      	ldr	r3, [sp, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f300 80d6 	bgt.w	8007160 <_dtoa_r+0x648>
 8006fb4:	f040 826b 	bne.w	800748e <_dtoa_r+0x976>
 8006fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b40      	ldr	r3, [pc, #256]	; (80070c0 <_dtoa_r+0x5a8>)
 8006fc0:	f7f9 fa8a 	bl	80004d8 <__aeabi_dmul>
 8006fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fc8:	f7f9 fd0c 	bl	80009e4 <__aeabi_dcmpge>
 8006fcc:	9c08      	ldr	r4, [sp, #32]
 8006fce:	4626      	mov	r6, r4
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f040 8241 	bne.w	8007458 <_dtoa_r+0x940>
 8006fd6:	2331      	movs	r3, #49	; 0x31
 8006fd8:	9f03      	ldr	r7, [sp, #12]
 8006fda:	f10b 0b01 	add.w	fp, fp, #1
 8006fde:	f807 3b01 	strb.w	r3, [r7], #1
 8006fe2:	e23d      	b.n	8007460 <_dtoa_r+0x948>
 8006fe4:	07e2      	lsls	r2, r4, #31
 8006fe6:	d505      	bpl.n	8006ff4 <_dtoa_r+0x4dc>
 8006fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fec:	f7f9 fa74 	bl	80004d8 <__aeabi_dmul>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	3701      	adds	r7, #1
 8006ff4:	1064      	asrs	r4, r4, #1
 8006ff6:	3608      	adds	r6, #8
 8006ff8:	e76d      	b.n	8006ed6 <_dtoa_r+0x3be>
 8006ffa:	2702      	movs	r7, #2
 8006ffc:	e770      	b.n	8006ee0 <_dtoa_r+0x3c8>
 8006ffe:	46d8      	mov	r8, fp
 8007000:	9c08      	ldr	r4, [sp, #32]
 8007002:	e78f      	b.n	8006f24 <_dtoa_r+0x40c>
 8007004:	9903      	ldr	r1, [sp, #12]
 8007006:	4b29      	ldr	r3, [pc, #164]	; (80070ac <_dtoa_r+0x594>)
 8007008:	4421      	add	r1, r4
 800700a:	9112      	str	r1, [sp, #72]	; 0x48
 800700c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800700e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007012:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007016:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701a:	2900      	cmp	r1, #0
 800701c:	d054      	beq.n	80070c8 <_dtoa_r+0x5b0>
 800701e:	2000      	movs	r0, #0
 8007020:	4928      	ldr	r1, [pc, #160]	; (80070c4 <_dtoa_r+0x5ac>)
 8007022:	f7f9 fb83 	bl	800072c <__aeabi_ddiv>
 8007026:	463b      	mov	r3, r7
 8007028:	4632      	mov	r2, r6
 800702a:	f7f9 f89d 	bl	8000168 <__aeabi_dsub>
 800702e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007032:	9f03      	ldr	r7, [sp, #12]
 8007034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007038:	f7f9 fcfe 	bl	8000a38 <__aeabi_d2iz>
 800703c:	4604      	mov	r4, r0
 800703e:	f7f9 f9e1 	bl	8000404 <__aeabi_i2d>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800704a:	f7f9 f88d 	bl	8000168 <__aeabi_dsub>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	3430      	adds	r4, #48	; 0x30
 8007054:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007058:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800705c:	f807 4b01 	strb.w	r4, [r7], #1
 8007060:	f7f9 fcac 	bl	80009bc <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d173      	bne.n	8007150 <_dtoa_r+0x638>
 8007068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706c:	2000      	movs	r0, #0
 800706e:	4911      	ldr	r1, [pc, #68]	; (80070b4 <_dtoa_r+0x59c>)
 8007070:	f7f9 f87a 	bl	8000168 <__aeabi_dsub>
 8007074:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007078:	f7f9 fca0 	bl	80009bc <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 80b6 	bne.w	80071ee <_dtoa_r+0x6d6>
 8007082:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007084:	429f      	cmp	r7, r3
 8007086:	f43f af7a 	beq.w	8006f7e <_dtoa_r+0x466>
 800708a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800708e:	2200      	movs	r2, #0
 8007090:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <_dtoa_r+0x5a0>)
 8007092:	f7f9 fa21 	bl	80004d8 <__aeabi_dmul>
 8007096:	2200      	movs	r2, #0
 8007098:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800709c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <_dtoa_r+0x5a0>)
 80070a2:	f7f9 fa19 	bl	80004d8 <__aeabi_dmul>
 80070a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070aa:	e7c3      	b.n	8007034 <_dtoa_r+0x51c>
 80070ac:	08009430 	.word	0x08009430
 80070b0:	08009408 	.word	0x08009408
 80070b4:	3ff00000 	.word	0x3ff00000
 80070b8:	40240000 	.word	0x40240000
 80070bc:	401c0000 	.word	0x401c0000
 80070c0:	40140000 	.word	0x40140000
 80070c4:	3fe00000 	.word	0x3fe00000
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fa04 	bl	80004d8 <__aeabi_dmul>
 80070d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070d6:	9c03      	ldr	r4, [sp, #12]
 80070d8:	9314      	str	r3, [sp, #80]	; 0x50
 80070da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070de:	f7f9 fcab 	bl	8000a38 <__aeabi_d2iz>
 80070e2:	9015      	str	r0, [sp, #84]	; 0x54
 80070e4:	f7f9 f98e 	bl	8000404 <__aeabi_i2d>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f0:	f7f9 f83a 	bl	8000168 <__aeabi_dsub>
 80070f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070f6:	4606      	mov	r6, r0
 80070f8:	3330      	adds	r3, #48	; 0x30
 80070fa:	f804 3b01 	strb.w	r3, [r4], #1
 80070fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007100:	460f      	mov	r7, r1
 8007102:	429c      	cmp	r4, r3
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	d124      	bne.n	8007154 <_dtoa_r+0x63c>
 800710a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800710e:	4baf      	ldr	r3, [pc, #700]	; (80073cc <_dtoa_r+0x8b4>)
 8007110:	f7f9 f82c 	bl	800016c <__adddf3>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8007120:	2800      	cmp	r0, #0
 8007122:	d163      	bne.n	80071ec <_dtoa_r+0x6d4>
 8007124:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007128:	2000      	movs	r0, #0
 800712a:	49a8      	ldr	r1, [pc, #672]	; (80073cc <_dtoa_r+0x8b4>)
 800712c:	f7f9 f81c 	bl	8000168 <__aeabi_dsub>
 8007130:	4602      	mov	r2, r0
 8007132:	460b      	mov	r3, r1
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 fc40 	bl	80009bc <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f43f af1e 	beq.w	8006f7e <_dtoa_r+0x466>
 8007142:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007144:	1e7b      	subs	r3, r7, #1
 8007146:	9314      	str	r3, [sp, #80]	; 0x50
 8007148:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d0f8      	beq.n	8007142 <_dtoa_r+0x62a>
 8007150:	46c3      	mov	fp, r8
 8007152:	e03b      	b.n	80071cc <_dtoa_r+0x6b4>
 8007154:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <_dtoa_r+0x8b8>)
 8007156:	f7f9 f9bf 	bl	80004d8 <__aeabi_dmul>
 800715a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800715e:	e7bc      	b.n	80070da <_dtoa_r+0x5c2>
 8007160:	9f03      	ldr	r7, [sp, #12]
 8007162:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007166:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800716a:	4640      	mov	r0, r8
 800716c:	4649      	mov	r1, r9
 800716e:	f7f9 fadd 	bl	800072c <__aeabi_ddiv>
 8007172:	f7f9 fc61 	bl	8000a38 <__aeabi_d2iz>
 8007176:	4604      	mov	r4, r0
 8007178:	f7f9 f944 	bl	8000404 <__aeabi_i2d>
 800717c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007180:	f7f9 f9aa 	bl	80004d8 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f8 ffec 	bl	8000168 <__aeabi_dsub>
 8007190:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007194:	f807 6b01 	strb.w	r6, [r7], #1
 8007198:	9e03      	ldr	r6, [sp, #12]
 800719a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800719e:	1bbe      	subs	r6, r7, r6
 80071a0:	45b4      	cmp	ip, r6
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	d136      	bne.n	8007216 <_dtoa_r+0x6fe>
 80071a8:	f7f8 ffe0 	bl	800016c <__adddf3>
 80071ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071b0:	4680      	mov	r8, r0
 80071b2:	4689      	mov	r9, r1
 80071b4:	f7f9 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 80071b8:	bb58      	cbnz	r0, 8007212 <_dtoa_r+0x6fa>
 80071ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 fbf1 	bl	80009a8 <__aeabi_dcmpeq>
 80071c6:	b108      	cbz	r0, 80071cc <_dtoa_r+0x6b4>
 80071c8:	07e3      	lsls	r3, r4, #31
 80071ca:	d422      	bmi.n	8007212 <_dtoa_r+0x6fa>
 80071cc:	4651      	mov	r1, sl
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fbc2 	bl	8007958 <_Bfree>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071d8:	703b      	strb	r3, [r7, #0]
 80071da:	f10b 0301 	add.w	r3, fp, #1
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f ace6 	beq.w	8006bb4 <_dtoa_r+0x9c>
 80071e8:	601f      	str	r7, [r3, #0]
 80071ea:	e4e3      	b.n	8006bb4 <_dtoa_r+0x9c>
 80071ec:	4627      	mov	r7, r4
 80071ee:	463b      	mov	r3, r7
 80071f0:	461f      	mov	r7, r3
 80071f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f6:	2a39      	cmp	r2, #57	; 0x39
 80071f8:	d107      	bne.n	800720a <_dtoa_r+0x6f2>
 80071fa:	9a03      	ldr	r2, [sp, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d1f7      	bne.n	80071f0 <_dtoa_r+0x6d8>
 8007200:	2230      	movs	r2, #48	; 0x30
 8007202:	9903      	ldr	r1, [sp, #12]
 8007204:	f108 0801 	add.w	r8, r8, #1
 8007208:	700a      	strb	r2, [r1, #0]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	3201      	adds	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e79e      	b.n	8007150 <_dtoa_r+0x638>
 8007212:	46d8      	mov	r8, fp
 8007214:	e7eb      	b.n	80071ee <_dtoa_r+0x6d6>
 8007216:	2200      	movs	r2, #0
 8007218:	4b6d      	ldr	r3, [pc, #436]	; (80073d0 <_dtoa_r+0x8b8>)
 800721a:	f7f9 f95d 	bl	80004d8 <__aeabi_dmul>
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	4680      	mov	r8, r0
 8007224:	4689      	mov	r9, r1
 8007226:	f7f9 fbbf 	bl	80009a8 <__aeabi_dcmpeq>
 800722a:	2800      	cmp	r0, #0
 800722c:	d09b      	beq.n	8007166 <_dtoa_r+0x64e>
 800722e:	e7cd      	b.n	80071cc <_dtoa_r+0x6b4>
 8007230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007232:	2a00      	cmp	r2, #0
 8007234:	f000 80c4 	beq.w	80073c0 <_dtoa_r+0x8a8>
 8007238:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800723a:	2a01      	cmp	r2, #1
 800723c:	f300 80a8 	bgt.w	8007390 <_dtoa_r+0x878>
 8007240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007242:	2a00      	cmp	r2, #0
 8007244:	f000 80a0 	beq.w	8007388 <_dtoa_r+0x870>
 8007248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800724c:	464f      	mov	r7, r9
 800724e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007252:	2101      	movs	r1, #1
 8007254:	441a      	add	r2, r3
 8007256:	4628      	mov	r0, r5
 8007258:	4499      	add	r9, r3
 800725a:	9209      	str	r2, [sp, #36]	; 0x24
 800725c:	f000 fc32 	bl	8007ac4 <__i2b>
 8007260:	4606      	mov	r6, r0
 8007262:	b15f      	cbz	r7, 800727c <_dtoa_r+0x764>
 8007264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	dd08      	ble.n	800727c <_dtoa_r+0x764>
 800726a:	42bb      	cmp	r3, r7
 800726c:	bfa8      	it	ge
 800726e:	463b      	movge	r3, r7
 8007270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007272:	eba9 0903 	sub.w	r9, r9, r3
 8007276:	1aff      	subs	r7, r7, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	9309      	str	r3, [sp, #36]	; 0x24
 800727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727e:	b1f3      	cbz	r3, 80072be <_dtoa_r+0x7a6>
 8007280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80a0 	beq.w	80073c8 <_dtoa_r+0x8b0>
 8007288:	2c00      	cmp	r4, #0
 800728a:	dd10      	ble.n	80072ae <_dtoa_r+0x796>
 800728c:	4631      	mov	r1, r6
 800728e:	4622      	mov	r2, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fcd5 	bl	8007c40 <__pow5mult>
 8007296:	4652      	mov	r2, sl
 8007298:	4601      	mov	r1, r0
 800729a:	4606      	mov	r6, r0
 800729c:	4628      	mov	r0, r5
 800729e:	f000 fc27 	bl	8007af0 <__multiply>
 80072a2:	4680      	mov	r8, r0
 80072a4:	4651      	mov	r1, sl
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fb56 	bl	8007958 <_Bfree>
 80072ac:	46c2      	mov	sl, r8
 80072ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b0:	1b1a      	subs	r2, r3, r4
 80072b2:	d004      	beq.n	80072be <_dtoa_r+0x7a6>
 80072b4:	4651      	mov	r1, sl
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 fcc2 	bl	8007c40 <__pow5mult>
 80072bc:	4682      	mov	sl, r0
 80072be:	2101      	movs	r1, #1
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 fbff 	bl	8007ac4 <__i2b>
 80072c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c8:	4604      	mov	r4, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f340 8082 	ble.w	80073d4 <_dtoa_r+0x8bc>
 80072d0:	461a      	mov	r2, r3
 80072d2:	4601      	mov	r1, r0
 80072d4:	4628      	mov	r0, r5
 80072d6:	f000 fcb3 	bl	8007c40 <__pow5mult>
 80072da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072dc:	4604      	mov	r4, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	dd7b      	ble.n	80073da <_dtoa_r+0x8c2>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072ec:	6918      	ldr	r0, [r3, #16]
 80072ee:	f000 fb9b 	bl	8007a28 <__hi0bits>
 80072f2:	f1c0 0020 	rsb	r0, r0, #32
 80072f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f8:	4418      	add	r0, r3
 80072fa:	f010 001f 	ands.w	r0, r0, #31
 80072fe:	f000 8092 	beq.w	8007426 <_dtoa_r+0x90e>
 8007302:	f1c0 0320 	rsb	r3, r0, #32
 8007306:	2b04      	cmp	r3, #4
 8007308:	f340 8085 	ble.w	8007416 <_dtoa_r+0x8fe>
 800730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730e:	f1c0 001c 	rsb	r0, r0, #28
 8007312:	4403      	add	r3, r0
 8007314:	4481      	add	r9, r0
 8007316:	4407      	add	r7, r0
 8007318:	9309      	str	r3, [sp, #36]	; 0x24
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	dd05      	ble.n	800732c <_dtoa_r+0x814>
 8007320:	4651      	mov	r1, sl
 8007322:	464a      	mov	r2, r9
 8007324:	4628      	mov	r0, r5
 8007326:	f000 fce5 	bl	8007cf4 <__lshift>
 800732a:	4682      	mov	sl, r0
 800732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	dd05      	ble.n	800733e <_dtoa_r+0x826>
 8007332:	4621      	mov	r1, r4
 8007334:	461a      	mov	r2, r3
 8007336:	4628      	mov	r0, r5
 8007338:	f000 fcdc 	bl	8007cf4 <__lshift>
 800733c:	4604      	mov	r4, r0
 800733e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d072      	beq.n	800742a <_dtoa_r+0x912>
 8007344:	4621      	mov	r1, r4
 8007346:	4650      	mov	r0, sl
 8007348:	f000 fd40 	bl	8007dcc <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	da6c      	bge.n	800742a <_dtoa_r+0x912>
 8007350:	2300      	movs	r3, #0
 8007352:	4651      	mov	r1, sl
 8007354:	220a      	movs	r2, #10
 8007356:	4628      	mov	r0, r5
 8007358:	f000 fb20 	bl	800799c <__multadd>
 800735c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735e:	4682      	mov	sl, r0
 8007360:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 81ac 	beq.w	80076c2 <_dtoa_r+0xbaa>
 800736a:	2300      	movs	r3, #0
 800736c:	4631      	mov	r1, r6
 800736e:	220a      	movs	r2, #10
 8007370:	4628      	mov	r0, r5
 8007372:	f000 fb13 	bl	800799c <__multadd>
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	4606      	mov	r6, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	f300 8093 	bgt.w	80074a6 <_dtoa_r+0x98e>
 8007380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007382:	2b02      	cmp	r3, #2
 8007384:	dc59      	bgt.n	800743a <_dtoa_r+0x922>
 8007386:	e08e      	b.n	80074a6 <_dtoa_r+0x98e>
 8007388:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800738a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800738e:	e75d      	b.n	800724c <_dtoa_r+0x734>
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	1e5c      	subs	r4, r3, #1
 8007394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007396:	42a3      	cmp	r3, r4
 8007398:	bfbf      	itttt	lt
 800739a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800739c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800739e:	1ae3      	sublt	r3, r4, r3
 80073a0:	18d2      	addlt	r2, r2, r3
 80073a2:	bfa8      	it	ge
 80073a4:	1b1c      	subge	r4, r3, r4
 80073a6:	9b08      	ldr	r3, [sp, #32]
 80073a8:	bfbe      	ittt	lt
 80073aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80073ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80073ae:	2400      	movlt	r4, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfb5      	itete	lt
 80073b4:	eba9 0703 	sublt.w	r7, r9, r3
 80073b8:	464f      	movge	r7, r9
 80073ba:	2300      	movlt	r3, #0
 80073bc:	9b08      	ldrge	r3, [sp, #32]
 80073be:	e747      	b.n	8007250 <_dtoa_r+0x738>
 80073c0:	464f      	mov	r7, r9
 80073c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073c6:	e74c      	b.n	8007262 <_dtoa_r+0x74a>
 80073c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ca:	e773      	b.n	80072b4 <_dtoa_r+0x79c>
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	dc18      	bgt.n	800740c <_dtoa_r+0x8f4>
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	b9b3      	cbnz	r3, 800740c <_dtoa_r+0x8f4>
 80073de:	9b05      	ldr	r3, [sp, #20]
 80073e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e4:	b993      	cbnz	r3, 800740c <_dtoa_r+0x8f4>
 80073e6:	9b05      	ldr	r3, [sp, #20]
 80073e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	0d1b      	lsrs	r3, r3, #20
 80073ee:	051b      	lsls	r3, r3, #20
 80073f0:	b17b      	cbz	r3, 8007412 <_dtoa_r+0x8fa>
 80073f2:	f04f 0801 	mov.w	r8, #1
 80073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f8:	f109 0901 	add.w	r9, r9, #1
 80073fc:	3301      	adds	r3, #1
 80073fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af6f 	bne.w	80072e6 <_dtoa_r+0x7ce>
 8007408:	2001      	movs	r0, #1
 800740a:	e774      	b.n	80072f6 <_dtoa_r+0x7de>
 800740c:	f04f 0800 	mov.w	r8, #0
 8007410:	e7f6      	b.n	8007400 <_dtoa_r+0x8e8>
 8007412:	4698      	mov	r8, r3
 8007414:	e7f4      	b.n	8007400 <_dtoa_r+0x8e8>
 8007416:	d080      	beq.n	800731a <_dtoa_r+0x802>
 8007418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800741a:	331c      	adds	r3, #28
 800741c:	441a      	add	r2, r3
 800741e:	4499      	add	r9, r3
 8007420:	441f      	add	r7, r3
 8007422:	9209      	str	r2, [sp, #36]	; 0x24
 8007424:	e779      	b.n	800731a <_dtoa_r+0x802>
 8007426:	4603      	mov	r3, r0
 8007428:	e7f6      	b.n	8007418 <_dtoa_r+0x900>
 800742a:	9b08      	ldr	r3, [sp, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	dc34      	bgt.n	800749a <_dtoa_r+0x982>
 8007430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007432:	2b02      	cmp	r3, #2
 8007434:	dd31      	ble.n	800749a <_dtoa_r+0x982>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	9306      	str	r3, [sp, #24]
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	b963      	cbnz	r3, 8007458 <_dtoa_r+0x940>
 800743e:	4621      	mov	r1, r4
 8007440:	2205      	movs	r2, #5
 8007442:	4628      	mov	r0, r5
 8007444:	f000 faaa 	bl	800799c <__multadd>
 8007448:	4601      	mov	r1, r0
 800744a:	4604      	mov	r4, r0
 800744c:	4650      	mov	r0, sl
 800744e:	f000 fcbd 	bl	8007dcc <__mcmp>
 8007452:	2800      	cmp	r0, #0
 8007454:	f73f adbf 	bgt.w	8006fd6 <_dtoa_r+0x4be>
 8007458:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800745a:	9f03      	ldr	r7, [sp, #12]
 800745c:	ea6f 0b03 	mvn.w	fp, r3
 8007460:	f04f 0800 	mov.w	r8, #0
 8007464:	4621      	mov	r1, r4
 8007466:	4628      	mov	r0, r5
 8007468:	f000 fa76 	bl	8007958 <_Bfree>
 800746c:	2e00      	cmp	r6, #0
 800746e:	f43f aead 	beq.w	80071cc <_dtoa_r+0x6b4>
 8007472:	f1b8 0f00 	cmp.w	r8, #0
 8007476:	d005      	beq.n	8007484 <_dtoa_r+0x96c>
 8007478:	45b0      	cmp	r8, r6
 800747a:	d003      	beq.n	8007484 <_dtoa_r+0x96c>
 800747c:	4641      	mov	r1, r8
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fa6a 	bl	8007958 <_Bfree>
 8007484:	4631      	mov	r1, r6
 8007486:	4628      	mov	r0, r5
 8007488:	f000 fa66 	bl	8007958 <_Bfree>
 800748c:	e69e      	b.n	80071cc <_dtoa_r+0x6b4>
 800748e:	2400      	movs	r4, #0
 8007490:	4626      	mov	r6, r4
 8007492:	e7e1      	b.n	8007458 <_dtoa_r+0x940>
 8007494:	46c3      	mov	fp, r8
 8007496:	4626      	mov	r6, r4
 8007498:	e59d      	b.n	8006fd6 <_dtoa_r+0x4be>
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80c8 	beq.w	8007632 <_dtoa_r+0xb1a>
 80074a2:	9b08      	ldr	r3, [sp, #32]
 80074a4:	9306      	str	r3, [sp, #24]
 80074a6:	2f00      	cmp	r7, #0
 80074a8:	dd05      	ble.n	80074b6 <_dtoa_r+0x99e>
 80074aa:	4631      	mov	r1, r6
 80074ac:	463a      	mov	r2, r7
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fc20 	bl	8007cf4 <__lshift>
 80074b4:	4606      	mov	r6, r0
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	d05b      	beq.n	8007574 <_dtoa_r+0xa5c>
 80074bc:	4628      	mov	r0, r5
 80074be:	6871      	ldr	r1, [r6, #4]
 80074c0:	f000 fa0a 	bl	80078d8 <_Balloc>
 80074c4:	4607      	mov	r7, r0
 80074c6:	b928      	cbnz	r0, 80074d4 <_dtoa_r+0x9bc>
 80074c8:	4602      	mov	r2, r0
 80074ca:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074ce:	4b81      	ldr	r3, [pc, #516]	; (80076d4 <_dtoa_r+0xbbc>)
 80074d0:	f7ff bb36 	b.w	8006b40 <_dtoa_r+0x28>
 80074d4:	6932      	ldr	r2, [r6, #16]
 80074d6:	f106 010c 	add.w	r1, r6, #12
 80074da:	3202      	adds	r2, #2
 80074dc:	0092      	lsls	r2, r2, #2
 80074de:	300c      	adds	r0, #12
 80074e0:	f000 fff2 	bl	80084c8 <memcpy>
 80074e4:	2201      	movs	r2, #1
 80074e6:	4639      	mov	r1, r7
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 fc03 	bl	8007cf4 <__lshift>
 80074ee:	46b0      	mov	r8, r6
 80074f0:	4606      	mov	r6, r0
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	9a03      	ldr	r2, [sp, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	9308      	str	r3, [sp, #32]
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	4413      	add	r3, r2
 80074fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	930a      	str	r3, [sp, #40]	; 0x28
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	4621      	mov	r1, r4
 800750c:	3b01      	subs	r3, #1
 800750e:	4650      	mov	r0, sl
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	f7ff fa76 	bl	8006a02 <quorem>
 8007516:	4641      	mov	r1, r8
 8007518:	9006      	str	r0, [sp, #24]
 800751a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800751e:	4650      	mov	r0, sl
 8007520:	f000 fc54 	bl	8007dcc <__mcmp>
 8007524:	4632      	mov	r2, r6
 8007526:	9009      	str	r0, [sp, #36]	; 0x24
 8007528:	4621      	mov	r1, r4
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fc6a 	bl	8007e04 <__mdiff>
 8007530:	68c2      	ldr	r2, [r0, #12]
 8007532:	4607      	mov	r7, r0
 8007534:	bb02      	cbnz	r2, 8007578 <_dtoa_r+0xa60>
 8007536:	4601      	mov	r1, r0
 8007538:	4650      	mov	r0, sl
 800753a:	f000 fc47 	bl	8007dcc <__mcmp>
 800753e:	4602      	mov	r2, r0
 8007540:	4639      	mov	r1, r7
 8007542:	4628      	mov	r0, r5
 8007544:	920c      	str	r2, [sp, #48]	; 0x30
 8007546:	f000 fa07 	bl	8007958 <_Bfree>
 800754a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754e:	9f08      	ldr	r7, [sp, #32]
 8007550:	ea43 0102 	orr.w	r1, r3, r2
 8007554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007556:	4319      	orrs	r1, r3
 8007558:	d110      	bne.n	800757c <_dtoa_r+0xa64>
 800755a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800755e:	d029      	beq.n	80075b4 <_dtoa_r+0xa9c>
 8007560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	dd02      	ble.n	800756c <_dtoa_r+0xa54>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	f883 9000 	strb.w	r9, [r3]
 8007572:	e777      	b.n	8007464 <_dtoa_r+0x94c>
 8007574:	4630      	mov	r0, r6
 8007576:	e7ba      	b.n	80074ee <_dtoa_r+0x9d6>
 8007578:	2201      	movs	r2, #1
 800757a:	e7e1      	b.n	8007540 <_dtoa_r+0xa28>
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	db04      	blt.n	800758c <_dtoa_r+0xa74>
 8007582:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007584:	430b      	orrs	r3, r1
 8007586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007588:	430b      	orrs	r3, r1
 800758a:	d120      	bne.n	80075ce <_dtoa_r+0xab6>
 800758c:	2a00      	cmp	r2, #0
 800758e:	dded      	ble.n	800756c <_dtoa_r+0xa54>
 8007590:	4651      	mov	r1, sl
 8007592:	2201      	movs	r2, #1
 8007594:	4628      	mov	r0, r5
 8007596:	f000 fbad 	bl	8007cf4 <__lshift>
 800759a:	4621      	mov	r1, r4
 800759c:	4682      	mov	sl, r0
 800759e:	f000 fc15 	bl	8007dcc <__mcmp>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dc03      	bgt.n	80075ae <_dtoa_r+0xa96>
 80075a6:	d1e1      	bne.n	800756c <_dtoa_r+0xa54>
 80075a8:	f019 0f01 	tst.w	r9, #1
 80075ac:	d0de      	beq.n	800756c <_dtoa_r+0xa54>
 80075ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075b2:	d1d8      	bne.n	8007566 <_dtoa_r+0xa4e>
 80075b4:	2339      	movs	r3, #57	; 0x39
 80075b6:	9a04      	ldr	r2, [sp, #16]
 80075b8:	7013      	strb	r3, [r2, #0]
 80075ba:	463b      	mov	r3, r7
 80075bc:	461f      	mov	r7, r3
 80075be:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	2a39      	cmp	r2, #57	; 0x39
 80075c6:	d06b      	beq.n	80076a0 <_dtoa_r+0xb88>
 80075c8:	3201      	adds	r2, #1
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	e74a      	b.n	8007464 <_dtoa_r+0x94c>
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	dd07      	ble.n	80075e2 <_dtoa_r+0xaca>
 80075d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075d6:	d0ed      	beq.n	80075b4 <_dtoa_r+0xa9c>
 80075d8:	9a04      	ldr	r2, [sp, #16]
 80075da:	f109 0301 	add.w	r3, r9, #1
 80075de:	7013      	strb	r3, [r2, #0]
 80075e0:	e740      	b.n	8007464 <_dtoa_r+0x94c>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075e6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d042      	beq.n	8007674 <_dtoa_r+0xb5c>
 80075ee:	4651      	mov	r1, sl
 80075f0:	2300      	movs	r3, #0
 80075f2:	220a      	movs	r2, #10
 80075f4:	4628      	mov	r0, r5
 80075f6:	f000 f9d1 	bl	800799c <__multadd>
 80075fa:	45b0      	cmp	r8, r6
 80075fc:	4682      	mov	sl, r0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	f04f 020a 	mov.w	r2, #10
 8007606:	4641      	mov	r1, r8
 8007608:	4628      	mov	r0, r5
 800760a:	d107      	bne.n	800761c <_dtoa_r+0xb04>
 800760c:	f000 f9c6 	bl	800799c <__multadd>
 8007610:	4680      	mov	r8, r0
 8007612:	4606      	mov	r6, r0
 8007614:	9b08      	ldr	r3, [sp, #32]
 8007616:	3301      	adds	r3, #1
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	e775      	b.n	8007508 <_dtoa_r+0x9f0>
 800761c:	f000 f9be 	bl	800799c <__multadd>
 8007620:	4631      	mov	r1, r6
 8007622:	4680      	mov	r8, r0
 8007624:	2300      	movs	r3, #0
 8007626:	220a      	movs	r2, #10
 8007628:	4628      	mov	r0, r5
 800762a:	f000 f9b7 	bl	800799c <__multadd>
 800762e:	4606      	mov	r6, r0
 8007630:	e7f0      	b.n	8007614 <_dtoa_r+0xafc>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	9306      	str	r3, [sp, #24]
 8007636:	9f03      	ldr	r7, [sp, #12]
 8007638:	4621      	mov	r1, r4
 800763a:	4650      	mov	r0, sl
 800763c:	f7ff f9e1 	bl	8006a02 <quorem>
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007646:	f807 9b01 	strb.w	r9, [r7], #1
 800764a:	1afa      	subs	r2, r7, r3
 800764c:	9b06      	ldr	r3, [sp, #24]
 800764e:	4293      	cmp	r3, r2
 8007650:	dd07      	ble.n	8007662 <_dtoa_r+0xb4a>
 8007652:	4651      	mov	r1, sl
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4628      	mov	r0, r5
 800765a:	f000 f99f 	bl	800799c <__multadd>
 800765e:	4682      	mov	sl, r0
 8007660:	e7ea      	b.n	8007638 <_dtoa_r+0xb20>
 8007662:	9b06      	ldr	r3, [sp, #24]
 8007664:	f04f 0800 	mov.w	r8, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfcc      	ite	gt
 800766c:	461f      	movgt	r7, r3
 800766e:	2701      	movle	r7, #1
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	441f      	add	r7, r3
 8007674:	4651      	mov	r1, sl
 8007676:	2201      	movs	r2, #1
 8007678:	4628      	mov	r0, r5
 800767a:	f000 fb3b 	bl	8007cf4 <__lshift>
 800767e:	4621      	mov	r1, r4
 8007680:	4682      	mov	sl, r0
 8007682:	f000 fba3 	bl	8007dcc <__mcmp>
 8007686:	2800      	cmp	r0, #0
 8007688:	dc97      	bgt.n	80075ba <_dtoa_r+0xaa2>
 800768a:	d102      	bne.n	8007692 <_dtoa_r+0xb7a>
 800768c:	f019 0f01 	tst.w	r9, #1
 8007690:	d193      	bne.n	80075ba <_dtoa_r+0xaa2>
 8007692:	463b      	mov	r3, r7
 8007694:	461f      	mov	r7, r3
 8007696:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769a:	2a30      	cmp	r2, #48	; 0x30
 800769c:	d0fa      	beq.n	8007694 <_dtoa_r+0xb7c>
 800769e:	e6e1      	b.n	8007464 <_dtoa_r+0x94c>
 80076a0:	9a03      	ldr	r2, [sp, #12]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d18a      	bne.n	80075bc <_dtoa_r+0xaa4>
 80076a6:	2331      	movs	r3, #49	; 0x31
 80076a8:	f10b 0b01 	add.w	fp, fp, #1
 80076ac:	e797      	b.n	80075de <_dtoa_r+0xac6>
 80076ae:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <_dtoa_r+0xbc0>)
 80076b0:	f7ff ba9f 	b.w	8006bf2 <_dtoa_r+0xda>
 80076b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f47f aa77 	bne.w	8006baa <_dtoa_r+0x92>
 80076bc:	4b07      	ldr	r3, [pc, #28]	; (80076dc <_dtoa_r+0xbc4>)
 80076be:	f7ff ba98 	b.w	8006bf2 <_dtoa_r+0xda>
 80076c2:	9b06      	ldr	r3, [sp, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dcb6      	bgt.n	8007636 <_dtoa_r+0xb1e>
 80076c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	f73f aeb5 	bgt.w	800743a <_dtoa_r+0x922>
 80076d0:	e7b1      	b.n	8007636 <_dtoa_r+0xb1e>
 80076d2:	bf00      	nop
 80076d4:	0800939e 	.word	0x0800939e
 80076d8:	080092fe 	.word	0x080092fe
 80076dc:	08009322 	.word	0x08009322

080076e0 <_free_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4605      	mov	r5, r0
 80076e4:	2900      	cmp	r1, #0
 80076e6:	d040      	beq.n	800776a <_free_r+0x8a>
 80076e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ec:	1f0c      	subs	r4, r1, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bfb8      	it	lt
 80076f2:	18e4      	addlt	r4, r4, r3
 80076f4:	f000 f8e4 	bl	80078c0 <__malloc_lock>
 80076f8:	4a1c      	ldr	r2, [pc, #112]	; (800776c <_free_r+0x8c>)
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	b933      	cbnz	r3, 800770c <_free_r+0x2c>
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6014      	str	r4, [r2, #0]
 8007702:	4628      	mov	r0, r5
 8007704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007708:	f000 b8e0 	b.w	80078cc <__malloc_unlock>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d908      	bls.n	8007722 <_free_r+0x42>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	1821      	adds	r1, r4, r0
 8007714:	428b      	cmp	r3, r1
 8007716:	bf01      	itttt	eq
 8007718:	6819      	ldreq	r1, [r3, #0]
 800771a:	685b      	ldreq	r3, [r3, #4]
 800771c:	1809      	addeq	r1, r1, r0
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	e7ed      	b.n	80076fe <_free_r+0x1e>
 8007722:	461a      	mov	r2, r3
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b10b      	cbz	r3, 800772c <_free_r+0x4c>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d9fa      	bls.n	8007722 <_free_r+0x42>
 800772c:	6811      	ldr	r1, [r2, #0]
 800772e:	1850      	adds	r0, r2, r1
 8007730:	42a0      	cmp	r0, r4
 8007732:	d10b      	bne.n	800774c <_free_r+0x6c>
 8007734:	6820      	ldr	r0, [r4, #0]
 8007736:	4401      	add	r1, r0
 8007738:	1850      	adds	r0, r2, r1
 800773a:	4283      	cmp	r3, r0
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	d1e0      	bne.n	8007702 <_free_r+0x22>
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4408      	add	r0, r1
 8007746:	6010      	str	r0, [r2, #0]
 8007748:	6053      	str	r3, [r2, #4]
 800774a:	e7da      	b.n	8007702 <_free_r+0x22>
 800774c:	d902      	bls.n	8007754 <_free_r+0x74>
 800774e:	230c      	movs	r3, #12
 8007750:	602b      	str	r3, [r5, #0]
 8007752:	e7d6      	b.n	8007702 <_free_r+0x22>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	1821      	adds	r1, r4, r0
 8007758:	428b      	cmp	r3, r1
 800775a:	bf01      	itttt	eq
 800775c:	6819      	ldreq	r1, [r3, #0]
 800775e:	685b      	ldreq	r3, [r3, #4]
 8007760:	1809      	addeq	r1, r1, r0
 8007762:	6021      	streq	r1, [r4, #0]
 8007764:	6063      	str	r3, [r4, #4]
 8007766:	6054      	str	r4, [r2, #4]
 8007768:	e7cb      	b.n	8007702 <_free_r+0x22>
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	200005dc 	.word	0x200005dc

08007770 <malloc>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <malloc+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f000 b823 	b.w	80077c0 <_malloc_r>
 800777a:	bf00      	nop
 800777c:	20000064 	.word	0x20000064

08007780 <sbrk_aligned>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	4e0e      	ldr	r6, [pc, #56]	; (80077bc <sbrk_aligned+0x3c>)
 8007784:	460c      	mov	r4, r1
 8007786:	6831      	ldr	r1, [r6, #0]
 8007788:	4605      	mov	r5, r0
 800778a:	b911      	cbnz	r1, 8007792 <sbrk_aligned+0x12>
 800778c:	f000 fe8c 	bl	80084a8 <_sbrk_r>
 8007790:	6030      	str	r0, [r6, #0]
 8007792:	4621      	mov	r1, r4
 8007794:	4628      	mov	r0, r5
 8007796:	f000 fe87 	bl	80084a8 <_sbrk_r>
 800779a:	1c43      	adds	r3, r0, #1
 800779c:	d00a      	beq.n	80077b4 <sbrk_aligned+0x34>
 800779e:	1cc4      	adds	r4, r0, #3
 80077a0:	f024 0403 	bic.w	r4, r4, #3
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d007      	beq.n	80077b8 <sbrk_aligned+0x38>
 80077a8:	1a21      	subs	r1, r4, r0
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 fe7c 	bl	80084a8 <_sbrk_r>
 80077b0:	3001      	adds	r0, #1
 80077b2:	d101      	bne.n	80077b8 <sbrk_aligned+0x38>
 80077b4:	f04f 34ff 	mov.w	r4, #4294967295
 80077b8:	4620      	mov	r0, r4
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	200005e0 	.word	0x200005e0

080077c0 <_malloc_r>:
 80077c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c4:	1ccd      	adds	r5, r1, #3
 80077c6:	f025 0503 	bic.w	r5, r5, #3
 80077ca:	3508      	adds	r5, #8
 80077cc:	2d0c      	cmp	r5, #12
 80077ce:	bf38      	it	cc
 80077d0:	250c      	movcc	r5, #12
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	4607      	mov	r7, r0
 80077d6:	db01      	blt.n	80077dc <_malloc_r+0x1c>
 80077d8:	42a9      	cmp	r1, r5
 80077da:	d905      	bls.n	80077e8 <_malloc_r+0x28>
 80077dc:	230c      	movs	r3, #12
 80077de:	2600      	movs	r6, #0
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	4630      	mov	r0, r6
 80077e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078bc <_malloc_r+0xfc>
 80077ec:	f000 f868 	bl	80078c0 <__malloc_lock>
 80077f0:	f8d8 3000 	ldr.w	r3, [r8]
 80077f4:	461c      	mov	r4, r3
 80077f6:	bb5c      	cbnz	r4, 8007850 <_malloc_r+0x90>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4638      	mov	r0, r7
 80077fc:	f7ff ffc0 	bl	8007780 <sbrk_aligned>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	4604      	mov	r4, r0
 8007804:	d155      	bne.n	80078b2 <_malloc_r+0xf2>
 8007806:	f8d8 4000 	ldr.w	r4, [r8]
 800780a:	4626      	mov	r6, r4
 800780c:	2e00      	cmp	r6, #0
 800780e:	d145      	bne.n	800789c <_malloc_r+0xdc>
 8007810:	2c00      	cmp	r4, #0
 8007812:	d048      	beq.n	80078a6 <_malloc_r+0xe6>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	4631      	mov	r1, r6
 8007818:	4638      	mov	r0, r7
 800781a:	eb04 0903 	add.w	r9, r4, r3
 800781e:	f000 fe43 	bl	80084a8 <_sbrk_r>
 8007822:	4581      	cmp	r9, r0
 8007824:	d13f      	bne.n	80078a6 <_malloc_r+0xe6>
 8007826:	6821      	ldr	r1, [r4, #0]
 8007828:	4638      	mov	r0, r7
 800782a:	1a6d      	subs	r5, r5, r1
 800782c:	4629      	mov	r1, r5
 800782e:	f7ff ffa7 	bl	8007780 <sbrk_aligned>
 8007832:	3001      	adds	r0, #1
 8007834:	d037      	beq.n	80078a6 <_malloc_r+0xe6>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	442b      	add	r3, r5
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	f8d8 3000 	ldr.w	r3, [r8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d038      	beq.n	80078b6 <_malloc_r+0xf6>
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	42a2      	cmp	r2, r4
 8007848:	d12b      	bne.n	80078a2 <_malloc_r+0xe2>
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	e00f      	b.n	8007870 <_malloc_r+0xb0>
 8007850:	6822      	ldr	r2, [r4, #0]
 8007852:	1b52      	subs	r2, r2, r5
 8007854:	d41f      	bmi.n	8007896 <_malloc_r+0xd6>
 8007856:	2a0b      	cmp	r2, #11
 8007858:	d917      	bls.n	800788a <_malloc_r+0xca>
 800785a:	1961      	adds	r1, r4, r5
 800785c:	42a3      	cmp	r3, r4
 800785e:	6025      	str	r5, [r4, #0]
 8007860:	bf18      	it	ne
 8007862:	6059      	strne	r1, [r3, #4]
 8007864:	6863      	ldr	r3, [r4, #4]
 8007866:	bf08      	it	eq
 8007868:	f8c8 1000 	streq.w	r1, [r8]
 800786c:	5162      	str	r2, [r4, r5]
 800786e:	604b      	str	r3, [r1, #4]
 8007870:	4638      	mov	r0, r7
 8007872:	f104 060b 	add.w	r6, r4, #11
 8007876:	f000 f829 	bl	80078cc <__malloc_unlock>
 800787a:	f026 0607 	bic.w	r6, r6, #7
 800787e:	1d23      	adds	r3, r4, #4
 8007880:	1af2      	subs	r2, r6, r3
 8007882:	d0ae      	beq.n	80077e2 <_malloc_r+0x22>
 8007884:	1b9b      	subs	r3, r3, r6
 8007886:	50a3      	str	r3, [r4, r2]
 8007888:	e7ab      	b.n	80077e2 <_malloc_r+0x22>
 800788a:	42a3      	cmp	r3, r4
 800788c:	6862      	ldr	r2, [r4, #4]
 800788e:	d1dd      	bne.n	800784c <_malloc_r+0x8c>
 8007890:	f8c8 2000 	str.w	r2, [r8]
 8007894:	e7ec      	b.n	8007870 <_malloc_r+0xb0>
 8007896:	4623      	mov	r3, r4
 8007898:	6864      	ldr	r4, [r4, #4]
 800789a:	e7ac      	b.n	80077f6 <_malloc_r+0x36>
 800789c:	4634      	mov	r4, r6
 800789e:	6876      	ldr	r6, [r6, #4]
 80078a0:	e7b4      	b.n	800780c <_malloc_r+0x4c>
 80078a2:	4613      	mov	r3, r2
 80078a4:	e7cc      	b.n	8007840 <_malloc_r+0x80>
 80078a6:	230c      	movs	r3, #12
 80078a8:	4638      	mov	r0, r7
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	f000 f80e 	bl	80078cc <__malloc_unlock>
 80078b0:	e797      	b.n	80077e2 <_malloc_r+0x22>
 80078b2:	6025      	str	r5, [r4, #0]
 80078b4:	e7dc      	b.n	8007870 <_malloc_r+0xb0>
 80078b6:	605b      	str	r3, [r3, #4]
 80078b8:	deff      	udf	#255	; 0xff
 80078ba:	bf00      	nop
 80078bc:	200005dc 	.word	0x200005dc

080078c0 <__malloc_lock>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__malloc_lock+0x8>)
 80078c2:	f7ff b88e 	b.w	80069e2 <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	200005d8 	.word	0x200005d8

080078cc <__malloc_unlock>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__malloc_unlock+0x8>)
 80078ce:	f7ff b889 	b.w	80069e4 <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	200005d8 	.word	0x200005d8

080078d8 <_Balloc>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	69c6      	ldr	r6, [r0, #28]
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	b976      	cbnz	r6, 8007900 <_Balloc+0x28>
 80078e2:	2010      	movs	r0, #16
 80078e4:	f7ff ff44 	bl	8007770 <malloc>
 80078e8:	4602      	mov	r2, r0
 80078ea:	61e0      	str	r0, [r4, #28]
 80078ec:	b920      	cbnz	r0, 80078f8 <_Balloc+0x20>
 80078ee:	216b      	movs	r1, #107	; 0x6b
 80078f0:	4b17      	ldr	r3, [pc, #92]	; (8007950 <_Balloc+0x78>)
 80078f2:	4818      	ldr	r0, [pc, #96]	; (8007954 <_Balloc+0x7c>)
 80078f4:	f000 fdf6 	bl	80084e4 <__assert_func>
 80078f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078fc:	6006      	str	r6, [r0, #0]
 80078fe:	60c6      	str	r6, [r0, #12]
 8007900:	69e6      	ldr	r6, [r4, #28]
 8007902:	68f3      	ldr	r3, [r6, #12]
 8007904:	b183      	cbz	r3, 8007928 <_Balloc+0x50>
 8007906:	69e3      	ldr	r3, [r4, #28]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800790e:	b9b8      	cbnz	r0, 8007940 <_Balloc+0x68>
 8007910:	2101      	movs	r1, #1
 8007912:	fa01 f605 	lsl.w	r6, r1, r5
 8007916:	1d72      	adds	r2, r6, #5
 8007918:	4620      	mov	r0, r4
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	f000 fe00 	bl	8008520 <_calloc_r>
 8007920:	b160      	cbz	r0, 800793c <_Balloc+0x64>
 8007922:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007926:	e00e      	b.n	8007946 <_Balloc+0x6e>
 8007928:	2221      	movs	r2, #33	; 0x21
 800792a:	2104      	movs	r1, #4
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fdf7 	bl	8008520 <_calloc_r>
 8007932:	69e3      	ldr	r3, [r4, #28]
 8007934:	60f0      	str	r0, [r6, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e4      	bne.n	8007906 <_Balloc+0x2e>
 800793c:	2000      	movs	r0, #0
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	6802      	ldr	r2, [r0, #0]
 8007942:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007946:	2300      	movs	r3, #0
 8007948:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800794c:	e7f7      	b.n	800793e <_Balloc+0x66>
 800794e:	bf00      	nop
 8007950:	0800932f 	.word	0x0800932f
 8007954:	080093af 	.word	0x080093af

08007958 <_Bfree>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	69c6      	ldr	r6, [r0, #28]
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	b976      	cbnz	r6, 8007980 <_Bfree+0x28>
 8007962:	2010      	movs	r0, #16
 8007964:	f7ff ff04 	bl	8007770 <malloc>
 8007968:	4602      	mov	r2, r0
 800796a:	61e8      	str	r0, [r5, #28]
 800796c:	b920      	cbnz	r0, 8007978 <_Bfree+0x20>
 800796e:	218f      	movs	r1, #143	; 0x8f
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <_Bfree+0x3c>)
 8007972:	4809      	ldr	r0, [pc, #36]	; (8007998 <_Bfree+0x40>)
 8007974:	f000 fdb6 	bl	80084e4 <__assert_func>
 8007978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800797c:	6006      	str	r6, [r0, #0]
 800797e:	60c6      	str	r6, [r0, #12]
 8007980:	b13c      	cbz	r4, 8007992 <_Bfree+0x3a>
 8007982:	69eb      	ldr	r3, [r5, #28]
 8007984:	6862      	ldr	r2, [r4, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800798c:	6021      	str	r1, [r4, #0]
 800798e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	0800932f 	.word	0x0800932f
 8007998:	080093af 	.word	0x080093af

0800799c <__multadd>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4607      	mov	r7, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	461e      	mov	r6, r3
 80079a6:	2000      	movs	r0, #0
 80079a8:	690d      	ldr	r5, [r1, #16]
 80079aa:	f101 0c14 	add.w	ip, r1, #20
 80079ae:	f8dc 3000 	ldr.w	r3, [ip]
 80079b2:	3001      	adds	r0, #1
 80079b4:	b299      	uxth	r1, r3
 80079b6:	fb02 6101 	mla	r1, r2, r1, r6
 80079ba:	0c1e      	lsrs	r6, r3, #16
 80079bc:	0c0b      	lsrs	r3, r1, #16
 80079be:	fb02 3306 	mla	r3, r2, r6, r3
 80079c2:	b289      	uxth	r1, r1
 80079c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079c8:	4285      	cmp	r5, r0
 80079ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ce:	f84c 1b04 	str.w	r1, [ip], #4
 80079d2:	dcec      	bgt.n	80079ae <__multadd+0x12>
 80079d4:	b30e      	cbz	r6, 8007a1a <__multadd+0x7e>
 80079d6:	68a3      	ldr	r3, [r4, #8]
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc19      	bgt.n	8007a10 <__multadd+0x74>
 80079dc:	6861      	ldr	r1, [r4, #4]
 80079de:	4638      	mov	r0, r7
 80079e0:	3101      	adds	r1, #1
 80079e2:	f7ff ff79 	bl	80078d8 <_Balloc>
 80079e6:	4680      	mov	r8, r0
 80079e8:	b928      	cbnz	r0, 80079f6 <__multadd+0x5a>
 80079ea:	4602      	mov	r2, r0
 80079ec:	21ba      	movs	r1, #186	; 0xba
 80079ee:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <__multadd+0x84>)
 80079f0:	480c      	ldr	r0, [pc, #48]	; (8007a24 <__multadd+0x88>)
 80079f2:	f000 fd77 	bl	80084e4 <__assert_func>
 80079f6:	6922      	ldr	r2, [r4, #16]
 80079f8:	f104 010c 	add.w	r1, r4, #12
 80079fc:	3202      	adds	r2, #2
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	300c      	adds	r0, #12
 8007a02:	f000 fd61 	bl	80084c8 <memcpy>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4638      	mov	r0, r7
 8007a0a:	f7ff ffa5 	bl	8007958 <_Bfree>
 8007a0e:	4644      	mov	r4, r8
 8007a10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a14:	3501      	adds	r5, #1
 8007a16:	615e      	str	r6, [r3, #20]
 8007a18:	6125      	str	r5, [r4, #16]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a20:	0800939e 	.word	0x0800939e
 8007a24:	080093af 	.word	0x080093af

08007a28 <__hi0bits>:
 8007a28:	0c02      	lsrs	r2, r0, #16
 8007a2a:	0412      	lsls	r2, r2, #16
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	b9ca      	cbnz	r2, 8007a64 <__hi0bits+0x3c>
 8007a30:	0403      	lsls	r3, r0, #16
 8007a32:	2010      	movs	r0, #16
 8007a34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a38:	bf04      	itt	eq
 8007a3a:	021b      	lsleq	r3, r3, #8
 8007a3c:	3008      	addeq	r0, #8
 8007a3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a42:	bf04      	itt	eq
 8007a44:	011b      	lsleq	r3, r3, #4
 8007a46:	3004      	addeq	r0, #4
 8007a48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a4c:	bf04      	itt	eq
 8007a4e:	009b      	lsleq	r3, r3, #2
 8007a50:	3002      	addeq	r0, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db05      	blt.n	8007a62 <__hi0bits+0x3a>
 8007a56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a5a:	f100 0001 	add.w	r0, r0, #1
 8007a5e:	bf08      	it	eq
 8007a60:	2020      	moveq	r0, #32
 8007a62:	4770      	bx	lr
 8007a64:	2000      	movs	r0, #0
 8007a66:	e7e5      	b.n	8007a34 <__hi0bits+0xc>

08007a68 <__lo0bits>:
 8007a68:	6803      	ldr	r3, [r0, #0]
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	f013 0007 	ands.w	r0, r3, #7
 8007a70:	d00b      	beq.n	8007a8a <__lo0bits+0x22>
 8007a72:	07d9      	lsls	r1, r3, #31
 8007a74:	d421      	bmi.n	8007aba <__lo0bits+0x52>
 8007a76:	0798      	lsls	r0, r3, #30
 8007a78:	bf49      	itett	mi
 8007a7a:	085b      	lsrmi	r3, r3, #1
 8007a7c:	089b      	lsrpl	r3, r3, #2
 8007a7e:	2001      	movmi	r0, #1
 8007a80:	6013      	strmi	r3, [r2, #0]
 8007a82:	bf5c      	itt	pl
 8007a84:	2002      	movpl	r0, #2
 8007a86:	6013      	strpl	r3, [r2, #0]
 8007a88:	4770      	bx	lr
 8007a8a:	b299      	uxth	r1, r3
 8007a8c:	b909      	cbnz	r1, 8007a92 <__lo0bits+0x2a>
 8007a8e:	2010      	movs	r0, #16
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	b2d9      	uxtb	r1, r3
 8007a94:	b909      	cbnz	r1, 8007a9a <__lo0bits+0x32>
 8007a96:	3008      	adds	r0, #8
 8007a98:	0a1b      	lsrs	r3, r3, #8
 8007a9a:	0719      	lsls	r1, r3, #28
 8007a9c:	bf04      	itt	eq
 8007a9e:	091b      	lsreq	r3, r3, #4
 8007aa0:	3004      	addeq	r0, #4
 8007aa2:	0799      	lsls	r1, r3, #30
 8007aa4:	bf04      	itt	eq
 8007aa6:	089b      	lsreq	r3, r3, #2
 8007aa8:	3002      	addeq	r0, #2
 8007aaa:	07d9      	lsls	r1, r3, #31
 8007aac:	d403      	bmi.n	8007ab6 <__lo0bits+0x4e>
 8007aae:	085b      	lsrs	r3, r3, #1
 8007ab0:	f100 0001 	add.w	r0, r0, #1
 8007ab4:	d003      	beq.n	8007abe <__lo0bits+0x56>
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4770      	bx	lr
 8007aba:	2000      	movs	r0, #0
 8007abc:	4770      	bx	lr
 8007abe:	2020      	movs	r0, #32
 8007ac0:	4770      	bx	lr
	...

08007ac4 <__i2b>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	2101      	movs	r1, #1
 8007aca:	f7ff ff05 	bl	80078d8 <_Balloc>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	b928      	cbnz	r0, 8007ade <__i2b+0x1a>
 8007ad2:	f240 1145 	movw	r1, #325	; 0x145
 8007ad6:	4b04      	ldr	r3, [pc, #16]	; (8007ae8 <__i2b+0x24>)
 8007ad8:	4804      	ldr	r0, [pc, #16]	; (8007aec <__i2b+0x28>)
 8007ada:	f000 fd03 	bl	80084e4 <__assert_func>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	6144      	str	r4, [r0, #20]
 8007ae2:	6103      	str	r3, [r0, #16]
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0800939e 	.word	0x0800939e
 8007aec:	080093af 	.word	0x080093af

08007af0 <__multiply>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	4691      	mov	r9, r2
 8007af6:	690a      	ldr	r2, [r1, #16]
 8007af8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007afc:	460c      	mov	r4, r1
 8007afe:	429a      	cmp	r2, r3
 8007b00:	bfbe      	ittt	lt
 8007b02:	460b      	movlt	r3, r1
 8007b04:	464c      	movlt	r4, r9
 8007b06:	4699      	movlt	r9, r3
 8007b08:	6927      	ldr	r7, [r4, #16]
 8007b0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	6861      	ldr	r1, [r4, #4]
 8007b12:	eb07 060a 	add.w	r6, r7, sl
 8007b16:	42b3      	cmp	r3, r6
 8007b18:	b085      	sub	sp, #20
 8007b1a:	bfb8      	it	lt
 8007b1c:	3101      	addlt	r1, #1
 8007b1e:	f7ff fedb 	bl	80078d8 <_Balloc>
 8007b22:	b930      	cbnz	r0, 8007b32 <__multiply+0x42>
 8007b24:	4602      	mov	r2, r0
 8007b26:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007b2a:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <__multiply+0x148>)
 8007b2c:	4843      	ldr	r0, [pc, #268]	; (8007c3c <__multiply+0x14c>)
 8007b2e:	f000 fcd9 	bl	80084e4 <__assert_func>
 8007b32:	f100 0514 	add.w	r5, r0, #20
 8007b36:	462b      	mov	r3, r5
 8007b38:	2200      	movs	r2, #0
 8007b3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b3e:	4543      	cmp	r3, r8
 8007b40:	d321      	bcc.n	8007b86 <__multiply+0x96>
 8007b42:	f104 0314 	add.w	r3, r4, #20
 8007b46:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b4a:	f109 0314 	add.w	r3, r9, #20
 8007b4e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b52:	9202      	str	r2, [sp, #8]
 8007b54:	1b3a      	subs	r2, r7, r4
 8007b56:	3a15      	subs	r2, #21
 8007b58:	f022 0203 	bic.w	r2, r2, #3
 8007b5c:	3204      	adds	r2, #4
 8007b5e:	f104 0115 	add.w	r1, r4, #21
 8007b62:	428f      	cmp	r7, r1
 8007b64:	bf38      	it	cc
 8007b66:	2204      	movcc	r2, #4
 8007b68:	9201      	str	r2, [sp, #4]
 8007b6a:	9a02      	ldr	r2, [sp, #8]
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d80c      	bhi.n	8007b8c <__multiply+0x9c>
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	dd03      	ble.n	8007b7e <__multiply+0x8e>
 8007b76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d05a      	beq.n	8007c34 <__multiply+0x144>
 8007b7e:	6106      	str	r6, [r0, #16]
 8007b80:	b005      	add	sp, #20
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	f843 2b04 	str.w	r2, [r3], #4
 8007b8a:	e7d8      	b.n	8007b3e <__multiply+0x4e>
 8007b8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b90:	f1ba 0f00 	cmp.w	sl, #0
 8007b94:	d023      	beq.n	8007bde <__multiply+0xee>
 8007b96:	46a9      	mov	r9, r5
 8007b98:	f04f 0c00 	mov.w	ip, #0
 8007b9c:	f104 0e14 	add.w	lr, r4, #20
 8007ba0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ba4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ba8:	fa1f fb82 	uxth.w	fp, r2
 8007bac:	b289      	uxth	r1, r1
 8007bae:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bb2:	4461      	add	r1, ip
 8007bb4:	f8d9 c000 	ldr.w	ip, [r9]
 8007bb8:	0c12      	lsrs	r2, r2, #16
 8007bba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007bbe:	fb0a c202 	mla	r2, sl, r2, ip
 8007bc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bc6:	b289      	uxth	r1, r1
 8007bc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bcc:	4577      	cmp	r7, lr
 8007bce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bd2:	f849 1b04 	str.w	r1, [r9], #4
 8007bd6:	d8e3      	bhi.n	8007ba0 <__multiply+0xb0>
 8007bd8:	9a01      	ldr	r2, [sp, #4]
 8007bda:	f845 c002 	str.w	ip, [r5, r2]
 8007bde:	9a03      	ldr	r2, [sp, #12]
 8007be0:	3304      	adds	r3, #4
 8007be2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007be6:	f1b9 0f00 	cmp.w	r9, #0
 8007bea:	d021      	beq.n	8007c30 <__multiply+0x140>
 8007bec:	46ae      	mov	lr, r5
 8007bee:	f04f 0a00 	mov.w	sl, #0
 8007bf2:	6829      	ldr	r1, [r5, #0]
 8007bf4:	f104 0c14 	add.w	ip, r4, #20
 8007bf8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c00:	b289      	uxth	r1, r1
 8007c02:	fb09 220b 	mla	r2, r9, fp, r2
 8007c06:	4452      	add	r2, sl
 8007c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c0c:	f84e 1b04 	str.w	r1, [lr], #4
 8007c10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c18:	f8be 1000 	ldrh.w	r1, [lr]
 8007c1c:	4567      	cmp	r7, ip
 8007c1e:	fb09 110a 	mla	r1, r9, sl, r1
 8007c22:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007c26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c2a:	d8e5      	bhi.n	8007bf8 <__multiply+0x108>
 8007c2c:	9a01      	ldr	r2, [sp, #4]
 8007c2e:	50a9      	str	r1, [r5, r2]
 8007c30:	3504      	adds	r5, #4
 8007c32:	e79a      	b.n	8007b6a <__multiply+0x7a>
 8007c34:	3e01      	subs	r6, #1
 8007c36:	e79c      	b.n	8007b72 <__multiply+0x82>
 8007c38:	0800939e 	.word	0x0800939e
 8007c3c:	080093af 	.word	0x080093af

08007c40 <__pow5mult>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4615      	mov	r5, r2
 8007c46:	f012 0203 	ands.w	r2, r2, #3
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	460f      	mov	r7, r1
 8007c4e:	d007      	beq.n	8007c60 <__pow5mult+0x20>
 8007c50:	4c25      	ldr	r4, [pc, #148]	; (8007ce8 <__pow5mult+0xa8>)
 8007c52:	3a01      	subs	r2, #1
 8007c54:	2300      	movs	r3, #0
 8007c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c5a:	f7ff fe9f 	bl	800799c <__multadd>
 8007c5e:	4607      	mov	r7, r0
 8007c60:	10ad      	asrs	r5, r5, #2
 8007c62:	d03d      	beq.n	8007ce0 <__pow5mult+0xa0>
 8007c64:	69f4      	ldr	r4, [r6, #28]
 8007c66:	b97c      	cbnz	r4, 8007c88 <__pow5mult+0x48>
 8007c68:	2010      	movs	r0, #16
 8007c6a:	f7ff fd81 	bl	8007770 <malloc>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	61f0      	str	r0, [r6, #28]
 8007c72:	b928      	cbnz	r0, 8007c80 <__pow5mult+0x40>
 8007c74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c78:	4b1c      	ldr	r3, [pc, #112]	; (8007cec <__pow5mult+0xac>)
 8007c7a:	481d      	ldr	r0, [pc, #116]	; (8007cf0 <__pow5mult+0xb0>)
 8007c7c:	f000 fc32 	bl	80084e4 <__assert_func>
 8007c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c84:	6004      	str	r4, [r0, #0]
 8007c86:	60c4      	str	r4, [r0, #12]
 8007c88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c90:	b94c      	cbnz	r4, 8007ca6 <__pow5mult+0x66>
 8007c92:	f240 2171 	movw	r1, #625	; 0x271
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff ff14 	bl	8007ac4 <__i2b>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	07eb      	lsls	r3, r5, #31
 8007cac:	d50a      	bpl.n	8007cc4 <__pow5mult+0x84>
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ff1c 	bl	8007af0 <__multiply>
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fe4b 	bl	8007958 <_Bfree>
 8007cc2:	4647      	mov	r7, r8
 8007cc4:	106d      	asrs	r5, r5, #1
 8007cc6:	d00b      	beq.n	8007ce0 <__pow5mult+0xa0>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	b938      	cbnz	r0, 8007cdc <__pow5mult+0x9c>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ff0d 	bl	8007af0 <__multiply>
 8007cd6:	6020      	str	r0, [r4, #0]
 8007cd8:	f8c0 9000 	str.w	r9, [r0]
 8007cdc:	4604      	mov	r4, r0
 8007cde:	e7e4      	b.n	8007caa <__pow5mult+0x6a>
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce6:	bf00      	nop
 8007ce8:	080094f8 	.word	0x080094f8
 8007cec:	0800932f 	.word	0x0800932f
 8007cf0:	080093af 	.word	0x080093af

08007cf4 <__lshift>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	4691      	mov	r9, r2
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	6849      	ldr	r1, [r1, #4]
 8007d02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d06:	68a3      	ldr	r3, [r4, #8]
 8007d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d0c:	f108 0601 	add.w	r6, r8, #1
 8007d10:	42b3      	cmp	r3, r6
 8007d12:	db0b      	blt.n	8007d2c <__lshift+0x38>
 8007d14:	4638      	mov	r0, r7
 8007d16:	f7ff fddf 	bl	80078d8 <_Balloc>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b948      	cbnz	r0, 8007d32 <__lshift+0x3e>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007d24:	4b27      	ldr	r3, [pc, #156]	; (8007dc4 <__lshift+0xd0>)
 8007d26:	4828      	ldr	r0, [pc, #160]	; (8007dc8 <__lshift+0xd4>)
 8007d28:	f000 fbdc 	bl	80084e4 <__assert_func>
 8007d2c:	3101      	adds	r1, #1
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	e7ee      	b.n	8007d10 <__lshift+0x1c>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f100 0114 	add.w	r1, r0, #20
 8007d38:	f100 0210 	add.w	r2, r0, #16
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	4553      	cmp	r3, sl
 8007d40:	db33      	blt.n	8007daa <__lshift+0xb6>
 8007d42:	6920      	ldr	r0, [r4, #16]
 8007d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d48:	f104 0314 	add.w	r3, r4, #20
 8007d4c:	f019 091f 	ands.w	r9, r9, #31
 8007d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d58:	d02b      	beq.n	8007db2 <__lshift+0xbe>
 8007d5a:	468a      	mov	sl, r1
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d62:	6818      	ldr	r0, [r3, #0]
 8007d64:	fa00 f009 	lsl.w	r0, r0, r9
 8007d68:	4310      	orrs	r0, r2
 8007d6a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d72:	459c      	cmp	ip, r3
 8007d74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d78:	d8f3      	bhi.n	8007d62 <__lshift+0x6e>
 8007d7a:	ebac 0304 	sub.w	r3, ip, r4
 8007d7e:	3b15      	subs	r3, #21
 8007d80:	f023 0303 	bic.w	r3, r3, #3
 8007d84:	3304      	adds	r3, #4
 8007d86:	f104 0015 	add.w	r0, r4, #21
 8007d8a:	4584      	cmp	ip, r0
 8007d8c:	bf38      	it	cc
 8007d8e:	2304      	movcc	r3, #4
 8007d90:	50ca      	str	r2, [r1, r3]
 8007d92:	b10a      	cbz	r2, 8007d98 <__lshift+0xa4>
 8007d94:	f108 0602 	add.w	r6, r8, #2
 8007d98:	3e01      	subs	r6, #1
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	612e      	str	r6, [r5, #16]
 8007da0:	f7ff fdda 	bl	8007958 <_Bfree>
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dae:	3301      	adds	r3, #1
 8007db0:	e7c5      	b.n	8007d3e <__lshift+0x4a>
 8007db2:	3904      	subs	r1, #4
 8007db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db8:	459c      	cmp	ip, r3
 8007dba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dbe:	d8f9      	bhi.n	8007db4 <__lshift+0xc0>
 8007dc0:	e7ea      	b.n	8007d98 <__lshift+0xa4>
 8007dc2:	bf00      	nop
 8007dc4:	0800939e 	.word	0x0800939e
 8007dc8:	080093af 	.word	0x080093af

08007dcc <__mcmp>:
 8007dcc:	4603      	mov	r3, r0
 8007dce:	690a      	ldr	r2, [r1, #16]
 8007dd0:	6900      	ldr	r0, [r0, #16]
 8007dd2:	b530      	push	{r4, r5, lr}
 8007dd4:	1a80      	subs	r0, r0, r2
 8007dd6:	d10d      	bne.n	8007df4 <__mcmp+0x28>
 8007dd8:	3314      	adds	r3, #20
 8007dda:	3114      	adds	r1, #20
 8007ddc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007de0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007de4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007de8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dec:	4295      	cmp	r5, r2
 8007dee:	d002      	beq.n	8007df6 <__mcmp+0x2a>
 8007df0:	d304      	bcc.n	8007dfc <__mcmp+0x30>
 8007df2:	2001      	movs	r0, #1
 8007df4:	bd30      	pop	{r4, r5, pc}
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	d3f4      	bcc.n	8007de4 <__mcmp+0x18>
 8007dfa:	e7fb      	b.n	8007df4 <__mcmp+0x28>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	e7f8      	b.n	8007df4 <__mcmp+0x28>
	...

08007e04 <__mdiff>:
 8007e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	460d      	mov	r5, r1
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4628      	mov	r0, r5
 8007e10:	4614      	mov	r4, r2
 8007e12:	f7ff ffdb 	bl	8007dcc <__mcmp>
 8007e16:	1e06      	subs	r6, r0, #0
 8007e18:	d111      	bne.n	8007e3e <__mdiff+0x3a>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f7ff fd5b 	bl	80078d8 <_Balloc>
 8007e22:	4602      	mov	r2, r0
 8007e24:	b928      	cbnz	r0, 8007e32 <__mdiff+0x2e>
 8007e26:	f240 2137 	movw	r1, #567	; 0x237
 8007e2a:	4b3a      	ldr	r3, [pc, #232]	; (8007f14 <__mdiff+0x110>)
 8007e2c:	483a      	ldr	r0, [pc, #232]	; (8007f18 <__mdiff+0x114>)
 8007e2e:	f000 fb59 	bl	80084e4 <__assert_func>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e38:	4610      	mov	r0, r2
 8007e3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	bfa4      	itt	ge
 8007e40:	4623      	movge	r3, r4
 8007e42:	462c      	movge	r4, r5
 8007e44:	4638      	mov	r0, r7
 8007e46:	6861      	ldr	r1, [r4, #4]
 8007e48:	bfa6      	itte	ge
 8007e4a:	461d      	movge	r5, r3
 8007e4c:	2600      	movge	r6, #0
 8007e4e:	2601      	movlt	r6, #1
 8007e50:	f7ff fd42 	bl	80078d8 <_Balloc>
 8007e54:	4602      	mov	r2, r0
 8007e56:	b918      	cbnz	r0, 8007e60 <__mdiff+0x5c>
 8007e58:	f240 2145 	movw	r1, #581	; 0x245
 8007e5c:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <__mdiff+0x110>)
 8007e5e:	e7e5      	b.n	8007e2c <__mdiff+0x28>
 8007e60:	f102 0814 	add.w	r8, r2, #20
 8007e64:	46c2      	mov	sl, r8
 8007e66:	f04f 0c00 	mov.w	ip, #0
 8007e6a:	6927      	ldr	r7, [r4, #16]
 8007e6c:	60c6      	str	r6, [r0, #12]
 8007e6e:	692e      	ldr	r6, [r5, #16]
 8007e70:	f104 0014 	add.w	r0, r4, #20
 8007e74:	f105 0914 	add.w	r9, r5, #20
 8007e78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007e7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e80:	3410      	adds	r4, #16
 8007e82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007e86:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e8a:	fa1f f18b 	uxth.w	r1, fp
 8007e8e:	4461      	add	r1, ip
 8007e90:	fa1f fc83 	uxth.w	ip, r3
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	eba1 010c 	sub.w	r1, r1, ip
 8007e9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ea2:	b289      	uxth	r1, r1
 8007ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007ea8:	454e      	cmp	r6, r9
 8007eaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007eae:	f84a 1b04 	str.w	r1, [sl], #4
 8007eb2:	d8e6      	bhi.n	8007e82 <__mdiff+0x7e>
 8007eb4:	1b73      	subs	r3, r6, r5
 8007eb6:	3b15      	subs	r3, #21
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	3515      	adds	r5, #21
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	42ae      	cmp	r6, r5
 8007ec2:	bf38      	it	cc
 8007ec4:	2304      	movcc	r3, #4
 8007ec6:	4418      	add	r0, r3
 8007ec8:	4443      	add	r3, r8
 8007eca:	461e      	mov	r6, r3
 8007ecc:	4605      	mov	r5, r0
 8007ece:	4575      	cmp	r5, lr
 8007ed0:	d30e      	bcc.n	8007ef0 <__mdiff+0xec>
 8007ed2:	f10e 0103 	add.w	r1, lr, #3
 8007ed6:	1a09      	subs	r1, r1, r0
 8007ed8:	f021 0103 	bic.w	r1, r1, #3
 8007edc:	3803      	subs	r0, #3
 8007ede:	4586      	cmp	lr, r0
 8007ee0:	bf38      	it	cc
 8007ee2:	2100      	movcc	r1, #0
 8007ee4:	440b      	add	r3, r1
 8007ee6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eea:	b189      	cbz	r1, 8007f10 <__mdiff+0x10c>
 8007eec:	6117      	str	r7, [r2, #16]
 8007eee:	e7a3      	b.n	8007e38 <__mdiff+0x34>
 8007ef0:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ef4:	fa1f f188 	uxth.w	r1, r8
 8007ef8:	4461      	add	r1, ip
 8007efa:	140c      	asrs	r4, r1, #16
 8007efc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f00:	b289      	uxth	r1, r1
 8007f02:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f06:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f0a:	f846 1b04 	str.w	r1, [r6], #4
 8007f0e:	e7de      	b.n	8007ece <__mdiff+0xca>
 8007f10:	3f01      	subs	r7, #1
 8007f12:	e7e8      	b.n	8007ee6 <__mdiff+0xe2>
 8007f14:	0800939e 	.word	0x0800939e
 8007f18:	080093af 	.word	0x080093af

08007f1c <__d2b>:
 8007f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4617      	mov	r7, r2
 8007f22:	461c      	mov	r4, r3
 8007f24:	9e08      	ldr	r6, [sp, #32]
 8007f26:	f7ff fcd7 	bl	80078d8 <_Balloc>
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	b930      	cbnz	r0, 8007f3c <__d2b+0x20>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	f240 310f 	movw	r1, #783	; 0x30f
 8007f34:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <__d2b+0xa4>)
 8007f36:	4823      	ldr	r0, [pc, #140]	; (8007fc4 <__d2b+0xa8>)
 8007f38:	f000 fad4 	bl	80084e4 <__assert_func>
 8007f3c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007f40:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007f44:	bb24      	cbnz	r4, 8007f90 <__d2b+0x74>
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	d026      	beq.n	8007f9a <__d2b+0x7e>
 8007f4c:	4668      	mov	r0, sp
 8007f4e:	9700      	str	r7, [sp, #0]
 8007f50:	f7ff fd8a 	bl	8007a68 <__lo0bits>
 8007f54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f58:	b1e8      	cbz	r0, 8007f96 <__d2b+0x7a>
 8007f5a:	f1c0 0320 	rsb	r3, r0, #32
 8007f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f62:	430b      	orrs	r3, r1
 8007f64:	40c2      	lsrs	r2, r0
 8007f66:	616b      	str	r3, [r5, #20]
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf14      	ite	ne
 8007f70:	2102      	movne	r1, #2
 8007f72:	2101      	moveq	r1, #1
 8007f74:	61ab      	str	r3, [r5, #24]
 8007f76:	6129      	str	r1, [r5, #16]
 8007f78:	b1bc      	cbz	r4, 8007faa <__d2b+0x8e>
 8007f7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f7e:	4404      	add	r4, r0
 8007f80:	6034      	str	r4, [r6, #0]
 8007f82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	6018      	str	r0, [r3, #0]
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	b003      	add	sp, #12
 8007f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f94:	e7d7      	b.n	8007f46 <__d2b+0x2a>
 8007f96:	6169      	str	r1, [r5, #20]
 8007f98:	e7e7      	b.n	8007f6a <__d2b+0x4e>
 8007f9a:	a801      	add	r0, sp, #4
 8007f9c:	f7ff fd64 	bl	8007a68 <__lo0bits>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	616b      	str	r3, [r5, #20]
 8007fa6:	3020      	adds	r0, #32
 8007fa8:	e7e5      	b.n	8007f76 <__d2b+0x5a>
 8007faa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007fb2:	6030      	str	r0, [r6, #0]
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f7ff fd37 	bl	8007a28 <__hi0bits>
 8007fba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007fbe:	e7e2      	b.n	8007f86 <__d2b+0x6a>
 8007fc0:	0800939e 	.word	0x0800939e
 8007fc4:	080093af 	.word	0x080093af

08007fc8 <__sfputc_r>:
 8007fc8:	6893      	ldr	r3, [r2, #8]
 8007fca:	b410      	push	{r4}
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	6093      	str	r3, [r2, #8]
 8007fd2:	da07      	bge.n	8007fe4 <__sfputc_r+0x1c>
 8007fd4:	6994      	ldr	r4, [r2, #24]
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	db01      	blt.n	8007fde <__sfputc_r+0x16>
 8007fda:	290a      	cmp	r1, #10
 8007fdc:	d102      	bne.n	8007fe4 <__sfputc_r+0x1c>
 8007fde:	bc10      	pop	{r4}
 8007fe0:	f7fe bbed 	b.w	80067be <__swbuf_r>
 8007fe4:	6813      	ldr	r3, [r2, #0]
 8007fe6:	1c58      	adds	r0, r3, #1
 8007fe8:	6010      	str	r0, [r2, #0]
 8007fea:	7019      	strb	r1, [r3, #0]
 8007fec:	4608      	mov	r0, r1
 8007fee:	bc10      	pop	{r4}
 8007ff0:	4770      	bx	lr

08007ff2 <__sfputs_r>:
 8007ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	18d5      	adds	r5, r2, r3
 8007ffc:	42ac      	cmp	r4, r5
 8007ffe:	d101      	bne.n	8008004 <__sfputs_r+0x12>
 8008000:	2000      	movs	r0, #0
 8008002:	e007      	b.n	8008014 <__sfputs_r+0x22>
 8008004:	463a      	mov	r2, r7
 8008006:	4630      	mov	r0, r6
 8008008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800c:	f7ff ffdc 	bl	8007fc8 <__sfputc_r>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d1f3      	bne.n	8007ffc <__sfputs_r+0xa>
 8008014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008018 <_vfiprintf_r>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460d      	mov	r5, r1
 800801e:	4614      	mov	r4, r2
 8008020:	4698      	mov	r8, r3
 8008022:	4606      	mov	r6, r0
 8008024:	b09d      	sub	sp, #116	; 0x74
 8008026:	b118      	cbz	r0, 8008030 <_vfiprintf_r+0x18>
 8008028:	6a03      	ldr	r3, [r0, #32]
 800802a:	b90b      	cbnz	r3, 8008030 <_vfiprintf_r+0x18>
 800802c:	f7fe fae0 	bl	80065f0 <__sinit>
 8008030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d405      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d402      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f7fe fcd0 	bl	80069e2 <__retarget_lock_acquire_recursive>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	071b      	lsls	r3, r3, #28
 8008046:	d501      	bpl.n	800804c <_vfiprintf_r+0x34>
 8008048:	692b      	ldr	r3, [r5, #16]
 800804a:	b99b      	cbnz	r3, 8008074 <_vfiprintf_r+0x5c>
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f7fe fbf2 	bl	8006838 <__swsetup_r>
 8008054:	b170      	cbz	r0, 8008074 <_vfiprintf_r+0x5c>
 8008056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008058:	07dc      	lsls	r4, r3, #31
 800805a:	d504      	bpl.n	8008066 <_vfiprintf_r+0x4e>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b01d      	add	sp, #116	; 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d4f7      	bmi.n	800805c <_vfiprintf_r+0x44>
 800806c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806e:	f7fe fcb9 	bl	80069e4 <__retarget_lock_release_recursive>
 8008072:	e7f3      	b.n	800805c <_vfiprintf_r+0x44>
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807e:	2330      	movs	r3, #48	; 0x30
 8008080:	f04f 0901 	mov.w	r9, #1
 8008084:	f8cd 800c 	str.w	r8, [sp, #12]
 8008088:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008238 <_vfiprintf_r+0x220>
 800808c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008090:	4623      	mov	r3, r4
 8008092:	469a      	mov	sl, r3
 8008094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008098:	b10a      	cbz	r2, 800809e <_vfiprintf_r+0x86>
 800809a:	2a25      	cmp	r2, #37	; 0x25
 800809c:	d1f9      	bne.n	8008092 <_vfiprintf_r+0x7a>
 800809e:	ebba 0b04 	subs.w	fp, sl, r4
 80080a2:	d00b      	beq.n	80080bc <_vfiprintf_r+0xa4>
 80080a4:	465b      	mov	r3, fp
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ffa1 	bl	8007ff2 <__sfputs_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	f000 80a9 	beq.w	8008208 <_vfiprintf_r+0x1f0>
 80080b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b8:	445a      	add	r2, fp
 80080ba:	9209      	str	r2, [sp, #36]	; 0x24
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80a1 	beq.w	8008208 <_vfiprintf_r+0x1f0>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d0:	f10a 0a01 	add.w	sl, sl, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080dc:	931a      	str	r3, [sp, #104]	; 0x68
 80080de:	4654      	mov	r4, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4854      	ldr	r0, [pc, #336]	; (8008238 <_vfiprintf_r+0x220>)
 80080e8:	f7fe fc7d 	bl	80069e6 <memchr>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	b9d8      	cbnz	r0, 8008128 <_vfiprintf_r+0x110>
 80080f0:	06d1      	lsls	r1, r2, #27
 80080f2:	bf44      	itt	mi
 80080f4:	2320      	movmi	r3, #32
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080fa:	0713      	lsls	r3, r2, #28
 80080fc:	bf44      	itt	mi
 80080fe:	232b      	movmi	r3, #43	; 0x2b
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b2a      	cmp	r3, #42	; 0x2a
 800810a:	d015      	beq.n	8008138 <_vfiprintf_r+0x120>
 800810c:	4654      	mov	r4, sl
 800810e:	2000      	movs	r0, #0
 8008110:	f04f 0c0a 	mov.w	ip, #10
 8008114:	9a07      	ldr	r2, [sp, #28]
 8008116:	4621      	mov	r1, r4
 8008118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811c:	3b30      	subs	r3, #48	; 0x30
 800811e:	2b09      	cmp	r3, #9
 8008120:	d94d      	bls.n	80081be <_vfiprintf_r+0x1a6>
 8008122:	b1b0      	cbz	r0, 8008152 <_vfiprintf_r+0x13a>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	e014      	b.n	8008152 <_vfiprintf_r+0x13a>
 8008128:	eba0 0308 	sub.w	r3, r0, r8
 800812c:	fa09 f303 	lsl.w	r3, r9, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	46a2      	mov	sl, r4
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	e7d2      	b.n	80080de <_vfiprintf_r+0xc6>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfbb      	ittet	lt
 8008144:	425b      	neglt	r3, r3
 8008146:	f042 0202 	orrlt.w	r2, r2, #2
 800814a:	9307      	strge	r3, [sp, #28]
 800814c:	9307      	strlt	r3, [sp, #28]
 800814e:	bfb8      	it	lt
 8008150:	9204      	strlt	r2, [sp, #16]
 8008152:	7823      	ldrb	r3, [r4, #0]
 8008154:	2b2e      	cmp	r3, #46	; 0x2e
 8008156:	d10c      	bne.n	8008172 <_vfiprintf_r+0x15a>
 8008158:	7863      	ldrb	r3, [r4, #1]
 800815a:	2b2a      	cmp	r3, #42	; 0x2a
 800815c:	d134      	bne.n	80081c8 <_vfiprintf_r+0x1b0>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	3402      	adds	r4, #2
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9203      	str	r2, [sp, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfb8      	it	lt
 800816c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800823c <_vfiprintf_r+0x224>
 8008176:	2203      	movs	r2, #3
 8008178:	4650      	mov	r0, sl
 800817a:	7821      	ldrb	r1, [r4, #0]
 800817c:	f7fe fc33 	bl	80069e6 <memchr>
 8008180:	b138      	cbz	r0, 8008192 <_vfiprintf_r+0x17a>
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	eba0 000a 	sub.w	r0, r0, sl
 800818a:	4082      	lsls	r2, r0
 800818c:	4313      	orrs	r3, r2
 800818e:	3401      	adds	r4, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	2206      	movs	r2, #6
 8008198:	4829      	ldr	r0, [pc, #164]	; (8008240 <_vfiprintf_r+0x228>)
 800819a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819e:	f7fe fc22 	bl	80069e6 <memchr>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d03f      	beq.n	8008226 <_vfiprintf_r+0x20e>
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <_vfiprintf_r+0x22c>)
 80081a8:	bb1b      	cbnz	r3, 80081f2 <_vfiprintf_r+0x1da>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	3307      	adds	r3, #7
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	3308      	adds	r3, #8
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b8:	443b      	add	r3, r7
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	e768      	b.n	8008090 <_vfiprintf_r+0x78>
 80081be:	460c      	mov	r4, r1
 80081c0:	2001      	movs	r0, #1
 80081c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c6:	e7a6      	b.n	8008116 <_vfiprintf_r+0xfe>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f04f 0c0a 	mov.w	ip, #10
 80081ce:	4619      	mov	r1, r3
 80081d0:	3401      	adds	r4, #1
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	4620      	mov	r0, r4
 80081d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081da:	3a30      	subs	r2, #48	; 0x30
 80081dc:	2a09      	cmp	r2, #9
 80081de:	d903      	bls.n	80081e8 <_vfiprintf_r+0x1d0>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0c6      	beq.n	8008172 <_vfiprintf_r+0x15a>
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	e7c4      	b.n	8008172 <_vfiprintf_r+0x15a>
 80081e8:	4604      	mov	r4, r0
 80081ea:	2301      	movs	r3, #1
 80081ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f0:	e7f0      	b.n	80081d4 <_vfiprintf_r+0x1bc>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <_vfiprintf_r+0x230>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	f7fd fda9 	bl	8005d54 <_printf_float>
 8008202:	4607      	mov	r7, r0
 8008204:	1c78      	adds	r0, r7, #1
 8008206:	d1d6      	bne.n	80081b6 <_vfiprintf_r+0x19e>
 8008208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x202>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x202>
 8008214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008216:	f7fe fbe5 	bl	80069e4 <__retarget_lock_release_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	065b      	lsls	r3, r3, #25
 800821e:	f53f af1d 	bmi.w	800805c <_vfiprintf_r+0x44>
 8008222:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008224:	e71c      	b.n	8008060 <_vfiprintf_r+0x48>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4630      	mov	r0, r6
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <_vfiprintf_r+0x230>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	f7fe f82f 	bl	8006294 <_printf_i>
 8008236:	e7e4      	b.n	8008202 <_vfiprintf_r+0x1ea>
 8008238:	08009504 	.word	0x08009504
 800823c:	0800950a 	.word	0x0800950a
 8008240:	0800950e 	.word	0x0800950e
 8008244:	08005d55 	.word	0x08005d55
 8008248:	08007ff3 	.word	0x08007ff3

0800824c <__sflush_r>:
 800824c:	898a      	ldrh	r2, [r1, #12]
 800824e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008250:	4605      	mov	r5, r0
 8008252:	0710      	lsls	r0, r2, #28
 8008254:	460c      	mov	r4, r1
 8008256:	d457      	bmi.n	8008308 <__sflush_r+0xbc>
 8008258:	684b      	ldr	r3, [r1, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dc04      	bgt.n	8008268 <__sflush_r+0x1c>
 800825e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc01      	bgt.n	8008268 <__sflush_r+0x1c>
 8008264:	2000      	movs	r0, #0
 8008266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800826a:	2e00      	cmp	r6, #0
 800826c:	d0fa      	beq.n	8008264 <__sflush_r+0x18>
 800826e:	2300      	movs	r3, #0
 8008270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008274:	682f      	ldr	r7, [r5, #0]
 8008276:	6a21      	ldr	r1, [r4, #32]
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	d032      	beq.n	80082e2 <__sflush_r+0x96>
 800827c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	075a      	lsls	r2, r3, #29
 8008282:	d505      	bpl.n	8008290 <__sflush_r+0x44>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	1ac0      	subs	r0, r0, r3
 8008288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800828a:	b10b      	cbz	r3, 8008290 <__sflush_r+0x44>
 800828c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800828e:	1ac0      	subs	r0, r0, r3
 8008290:	2300      	movs	r3, #0
 8008292:	4602      	mov	r2, r0
 8008294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008296:	4628      	mov	r0, r5
 8008298:	6a21      	ldr	r1, [r4, #32]
 800829a:	47b0      	blx	r6
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	d106      	bne.n	80082b0 <__sflush_r+0x64>
 80082a2:	6829      	ldr	r1, [r5, #0]
 80082a4:	291d      	cmp	r1, #29
 80082a6:	d82b      	bhi.n	8008300 <__sflush_r+0xb4>
 80082a8:	4a28      	ldr	r2, [pc, #160]	; (800834c <__sflush_r+0x100>)
 80082aa:	410a      	asrs	r2, r1
 80082ac:	07d6      	lsls	r6, r2, #31
 80082ae:	d427      	bmi.n	8008300 <__sflush_r+0xb4>
 80082b0:	2200      	movs	r2, #0
 80082b2:	6062      	str	r2, [r4, #4]
 80082b4:	6922      	ldr	r2, [r4, #16]
 80082b6:	04d9      	lsls	r1, r3, #19
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	d504      	bpl.n	80082c6 <__sflush_r+0x7a>
 80082bc:	1c42      	adds	r2, r0, #1
 80082be:	d101      	bne.n	80082c4 <__sflush_r+0x78>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b903      	cbnz	r3, 80082c6 <__sflush_r+0x7a>
 80082c4:	6560      	str	r0, [r4, #84]	; 0x54
 80082c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082c8:	602f      	str	r7, [r5, #0]
 80082ca:	2900      	cmp	r1, #0
 80082cc:	d0ca      	beq.n	8008264 <__sflush_r+0x18>
 80082ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d2:	4299      	cmp	r1, r3
 80082d4:	d002      	beq.n	80082dc <__sflush_r+0x90>
 80082d6:	4628      	mov	r0, r5
 80082d8:	f7ff fa02 	bl	80076e0 <_free_r>
 80082dc:	2000      	movs	r0, #0
 80082de:	6360      	str	r0, [r4, #52]	; 0x34
 80082e0:	e7c1      	b.n	8008266 <__sflush_r+0x1a>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b0      	blx	r6
 80082e8:	1c41      	adds	r1, r0, #1
 80082ea:	d1c8      	bne.n	800827e <__sflush_r+0x32>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0c5      	beq.n	800827e <__sflush_r+0x32>
 80082f2:	2b1d      	cmp	r3, #29
 80082f4:	d001      	beq.n	80082fa <__sflush_r+0xae>
 80082f6:	2b16      	cmp	r3, #22
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0xb2>
 80082fa:	602f      	str	r7, [r5, #0]
 80082fc:	e7b2      	b.n	8008264 <__sflush_r+0x18>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	e7ae      	b.n	8008266 <__sflush_r+0x1a>
 8008308:	690f      	ldr	r7, [r1, #16]
 800830a:	2f00      	cmp	r7, #0
 800830c:	d0aa      	beq.n	8008264 <__sflush_r+0x18>
 800830e:	0793      	lsls	r3, r2, #30
 8008310:	bf18      	it	ne
 8008312:	2300      	movne	r3, #0
 8008314:	680e      	ldr	r6, [r1, #0]
 8008316:	bf08      	it	eq
 8008318:	694b      	ldreq	r3, [r1, #20]
 800831a:	1bf6      	subs	r6, r6, r7
 800831c:	600f      	str	r7, [r1, #0]
 800831e:	608b      	str	r3, [r1, #8]
 8008320:	2e00      	cmp	r6, #0
 8008322:	dd9f      	ble.n	8008264 <__sflush_r+0x18>
 8008324:	4633      	mov	r3, r6
 8008326:	463a      	mov	r2, r7
 8008328:	4628      	mov	r0, r5
 800832a:	6a21      	ldr	r1, [r4, #32]
 800832c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008330:	47e0      	blx	ip
 8008332:	2800      	cmp	r0, #0
 8008334:	dc06      	bgt.n	8008344 <__sflush_r+0xf8>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e790      	b.n	8008266 <__sflush_r+0x1a>
 8008344:	4407      	add	r7, r0
 8008346:	1a36      	subs	r6, r6, r0
 8008348:	e7ea      	b.n	8008320 <__sflush_r+0xd4>
 800834a:	bf00      	nop
 800834c:	dfbffffe 	.word	0xdfbffffe

08008350 <_fflush_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	4605      	mov	r5, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b913      	cbnz	r3, 8008360 <_fflush_r+0x10>
 800835a:	2500      	movs	r5, #0
 800835c:	4628      	mov	r0, r5
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	b118      	cbz	r0, 800836a <_fflush_r+0x1a>
 8008362:	6a03      	ldr	r3, [r0, #32]
 8008364:	b90b      	cbnz	r3, 800836a <_fflush_r+0x1a>
 8008366:	f7fe f943 	bl	80065f0 <__sinit>
 800836a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f3      	beq.n	800835a <_fflush_r+0xa>
 8008372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008374:	07d0      	lsls	r0, r2, #31
 8008376:	d404      	bmi.n	8008382 <_fflush_r+0x32>
 8008378:	0599      	lsls	r1, r3, #22
 800837a:	d402      	bmi.n	8008382 <_fflush_r+0x32>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f7fe fb30 	bl	80069e2 <__retarget_lock_acquire_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	4621      	mov	r1, r4
 8008386:	f7ff ff61 	bl	800824c <__sflush_r>
 800838a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800838c:	4605      	mov	r5, r0
 800838e:	07da      	lsls	r2, r3, #31
 8008390:	d4e4      	bmi.n	800835c <_fflush_r+0xc>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	d4e1      	bmi.n	800835c <_fflush_r+0xc>
 8008398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800839a:	f7fe fb23 	bl	80069e4 <__retarget_lock_release_recursive>
 800839e:	e7dd      	b.n	800835c <_fflush_r+0xc>

080083a0 <__swhatbuf_r>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	4615      	mov	r5, r2
 80083aa:	2900      	cmp	r1, #0
 80083ac:	461e      	mov	r6, r3
 80083ae:	b096      	sub	sp, #88	; 0x58
 80083b0:	da0c      	bge.n	80083cc <__swhatbuf_r+0x2c>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	2100      	movs	r1, #0
 80083b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083ba:	bf0c      	ite	eq
 80083bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083c0:	2340      	movne	r3, #64	; 0x40
 80083c2:	2000      	movs	r0, #0
 80083c4:	6031      	str	r1, [r6, #0]
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	b016      	add	sp, #88	; 0x58
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	466a      	mov	r2, sp
 80083ce:	f000 f849 	bl	8008464 <_fstat_r>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dbed      	blt.n	80083b2 <__swhatbuf_r+0x12>
 80083d6:	9901      	ldr	r1, [sp, #4]
 80083d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083e0:	4259      	negs	r1, r3
 80083e2:	4159      	adcs	r1, r3
 80083e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e8:	e7eb      	b.n	80083c2 <__swhatbuf_r+0x22>

080083ea <__smakebuf_r>:
 80083ea:	898b      	ldrh	r3, [r1, #12]
 80083ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ee:	079d      	lsls	r5, r3, #30
 80083f0:	4606      	mov	r6, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	d507      	bpl.n	8008406 <__smakebuf_r+0x1c>
 80083f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	6123      	str	r3, [r4, #16]
 80083fe:	2301      	movs	r3, #1
 8008400:	6163      	str	r3, [r4, #20]
 8008402:	b002      	add	sp, #8
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	466a      	mov	r2, sp
 8008408:	ab01      	add	r3, sp, #4
 800840a:	f7ff ffc9 	bl	80083a0 <__swhatbuf_r>
 800840e:	9900      	ldr	r1, [sp, #0]
 8008410:	4605      	mov	r5, r0
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff f9d4 	bl	80077c0 <_malloc_r>
 8008418:	b948      	cbnz	r0, 800842e <__smakebuf_r+0x44>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	059a      	lsls	r2, r3, #22
 8008420:	d4ef      	bmi.n	8008402 <__smakebuf_r+0x18>
 8008422:	f023 0303 	bic.w	r3, r3, #3
 8008426:	f043 0302 	orr.w	r3, r3, #2
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	e7e3      	b.n	80083f6 <__smakebuf_r+0xc>
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	6020      	str	r0, [r4, #0]
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	9b00      	ldr	r3, [sp, #0]
 800843a:	6120      	str	r0, [r4, #16]
 800843c:	6163      	str	r3, [r4, #20]
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	b15b      	cbz	r3, 800845a <__smakebuf_r+0x70>
 8008442:	4630      	mov	r0, r6
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	f000 f81e 	bl	8008488 <_isatty_r>
 800844c:	b128      	cbz	r0, 800845a <__smakebuf_r+0x70>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	431d      	orrs	r5, r3
 800845e:	81a5      	strh	r5, [r4, #12]
 8008460:	e7cf      	b.n	8008402 <__smakebuf_r+0x18>
	...

08008464 <_fstat_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	2300      	movs	r3, #0
 8008468:	4d06      	ldr	r5, [pc, #24]	; (8008484 <_fstat_r+0x20>)
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f9 fd0a 	bl	8001e8a <_fstat>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_fstat_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_fstat_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	200005d4 	.word	0x200005d4

08008488 <_isatty_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	2300      	movs	r3, #0
 800848c:	4d05      	ldr	r5, [pc, #20]	; (80084a4 <_isatty_r+0x1c>)
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f9 fd08 	bl	8001ea8 <_isatty>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_isatty_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_isatty_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	200005d4 	.word	0x200005d4

080084a8 <_sbrk_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	2300      	movs	r3, #0
 80084ac:	4d05      	ldr	r5, [pc, #20]	; (80084c4 <_sbrk_r+0x1c>)
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f9 fd0e 	bl	8001ed4 <_sbrk>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_sbrk_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_sbrk_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200005d4 	.word	0x200005d4

080084c8 <memcpy>:
 80084c8:	440a      	add	r2, r1
 80084ca:	4291      	cmp	r1, r2
 80084cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d0:	d100      	bne.n	80084d4 <memcpy+0xc>
 80084d2:	4770      	bx	lr
 80084d4:	b510      	push	{r4, lr}
 80084d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084da:	4291      	cmp	r1, r2
 80084dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e0:	d1f9      	bne.n	80084d6 <memcpy+0xe>
 80084e2:	bd10      	pop	{r4, pc}

080084e4 <__assert_func>:
 80084e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084e6:	4614      	mov	r4, r2
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <__assert_func+0x2c>)
 80084ec:	4605      	mov	r5, r0
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68d8      	ldr	r0, [r3, #12]
 80084f2:	b14c      	cbz	r4, 8008508 <__assert_func+0x24>
 80084f4:	4b07      	ldr	r3, [pc, #28]	; (8008514 <__assert_func+0x30>)
 80084f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084fa:	9100      	str	r1, [sp, #0]
 80084fc:	462b      	mov	r3, r5
 80084fe:	4906      	ldr	r1, [pc, #24]	; (8008518 <__assert_func+0x34>)
 8008500:	f000 f842 	bl	8008588 <fiprintf>
 8008504:	f000 f852 	bl	80085ac <abort>
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <__assert_func+0x38>)
 800850a:	461c      	mov	r4, r3
 800850c:	e7f3      	b.n	80084f6 <__assert_func+0x12>
 800850e:	bf00      	nop
 8008510:	20000064 	.word	0x20000064
 8008514:	0800951f 	.word	0x0800951f
 8008518:	0800952c 	.word	0x0800952c
 800851c:	0800955a 	.word	0x0800955a

08008520 <_calloc_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	fba1 5402 	umull	r5, r4, r1, r2
 8008526:	b934      	cbnz	r4, 8008536 <_calloc_r+0x16>
 8008528:	4629      	mov	r1, r5
 800852a:	f7ff f949 	bl	80077c0 <_malloc_r>
 800852e:	4606      	mov	r6, r0
 8008530:	b928      	cbnz	r0, 800853e <_calloc_r+0x1e>
 8008532:	4630      	mov	r0, r6
 8008534:	bd70      	pop	{r4, r5, r6, pc}
 8008536:	220c      	movs	r2, #12
 8008538:	2600      	movs	r6, #0
 800853a:	6002      	str	r2, [r0, #0]
 800853c:	e7f9      	b.n	8008532 <_calloc_r+0x12>
 800853e:	462a      	mov	r2, r5
 8008540:	4621      	mov	r1, r4
 8008542:	f7fe f9d1 	bl	80068e8 <memset>
 8008546:	e7f4      	b.n	8008532 <_calloc_r+0x12>

08008548 <__ascii_mbtowc>:
 8008548:	b082      	sub	sp, #8
 800854a:	b901      	cbnz	r1, 800854e <__ascii_mbtowc+0x6>
 800854c:	a901      	add	r1, sp, #4
 800854e:	b142      	cbz	r2, 8008562 <__ascii_mbtowc+0x1a>
 8008550:	b14b      	cbz	r3, 8008566 <__ascii_mbtowc+0x1e>
 8008552:	7813      	ldrb	r3, [r2, #0]
 8008554:	600b      	str	r3, [r1, #0]
 8008556:	7812      	ldrb	r2, [r2, #0]
 8008558:	1e10      	subs	r0, r2, #0
 800855a:	bf18      	it	ne
 800855c:	2001      	movne	r0, #1
 800855e:	b002      	add	sp, #8
 8008560:	4770      	bx	lr
 8008562:	4610      	mov	r0, r2
 8008564:	e7fb      	b.n	800855e <__ascii_mbtowc+0x16>
 8008566:	f06f 0001 	mvn.w	r0, #1
 800856a:	e7f8      	b.n	800855e <__ascii_mbtowc+0x16>

0800856c <__ascii_wctomb>:
 800856c:	4603      	mov	r3, r0
 800856e:	4608      	mov	r0, r1
 8008570:	b141      	cbz	r1, 8008584 <__ascii_wctomb+0x18>
 8008572:	2aff      	cmp	r2, #255	; 0xff
 8008574:	d904      	bls.n	8008580 <__ascii_wctomb+0x14>
 8008576:	228a      	movs	r2, #138	; 0x8a
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	4770      	bx	lr
 8008580:	2001      	movs	r0, #1
 8008582:	700a      	strb	r2, [r1, #0]
 8008584:	4770      	bx	lr
	...

08008588 <fiprintf>:
 8008588:	b40e      	push	{r1, r2, r3}
 800858a:	b503      	push	{r0, r1, lr}
 800858c:	4601      	mov	r1, r0
 800858e:	ab03      	add	r3, sp, #12
 8008590:	4805      	ldr	r0, [pc, #20]	; (80085a8 <fiprintf+0x20>)
 8008592:	f853 2b04 	ldr.w	r2, [r3], #4
 8008596:	6800      	ldr	r0, [r0, #0]
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	f7ff fd3d 	bl	8008018 <_vfiprintf_r>
 800859e:	b002      	add	sp, #8
 80085a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085a4:	b003      	add	sp, #12
 80085a6:	4770      	bx	lr
 80085a8:	20000064 	.word	0x20000064

080085ac <abort>:
 80085ac:	2006      	movs	r0, #6
 80085ae:	b508      	push	{r3, lr}
 80085b0:	f000 f82c 	bl	800860c <raise>
 80085b4:	2001      	movs	r0, #1
 80085b6:	f7f9 fc1a 	bl	8001dee <_exit>

080085ba <_raise_r>:
 80085ba:	291f      	cmp	r1, #31
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4604      	mov	r4, r0
 80085c0:	460d      	mov	r5, r1
 80085c2:	d904      	bls.n	80085ce <_raise_r+0x14>
 80085c4:	2316      	movs	r3, #22
 80085c6:	6003      	str	r3, [r0, #0]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80085d0:	b112      	cbz	r2, 80085d8 <_raise_r+0x1e>
 80085d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085d6:	b94b      	cbnz	r3, 80085ec <_raise_r+0x32>
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f831 	bl	8008640 <_getpid_r>
 80085de:	462a      	mov	r2, r5
 80085e0:	4601      	mov	r1, r0
 80085e2:	4620      	mov	r0, r4
 80085e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e8:	f000 b818 	b.w	800861c <_kill_r>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d00a      	beq.n	8008606 <_raise_r+0x4c>
 80085f0:	1c59      	adds	r1, r3, #1
 80085f2:	d103      	bne.n	80085fc <_raise_r+0x42>
 80085f4:	2316      	movs	r3, #22
 80085f6:	6003      	str	r3, [r0, #0]
 80085f8:	2001      	movs	r0, #1
 80085fa:	e7e7      	b.n	80085cc <_raise_r+0x12>
 80085fc:	2400      	movs	r4, #0
 80085fe:	4628      	mov	r0, r5
 8008600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008604:	4798      	blx	r3
 8008606:	2000      	movs	r0, #0
 8008608:	e7e0      	b.n	80085cc <_raise_r+0x12>
	...

0800860c <raise>:
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <raise+0xc>)
 800860e:	4601      	mov	r1, r0
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff bfd2 	b.w	80085ba <_raise_r>
 8008616:	bf00      	nop
 8008618:	20000064 	.word	0x20000064

0800861c <_kill_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	2300      	movs	r3, #0
 8008620:	4d06      	ldr	r5, [pc, #24]	; (800863c <_kill_r+0x20>)
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	f7f9 fbd0 	bl	8001dce <_kill>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d102      	bne.n	8008638 <_kill_r+0x1c>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	b103      	cbz	r3, 8008638 <_kill_r+0x1c>
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	200005d4 	.word	0x200005d4

08008640 <_getpid_r>:
 8008640:	f7f9 bbbe 	b.w	8001dc0 <_getpid>

08008644 <powf>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	460c      	mov	r4, r1
 8008648:	4606      	mov	r6, r0
 800864a:	f000 f851 	bl	80086f0 <__ieee754_powf>
 800864e:	4621      	mov	r1, r4
 8008650:	4605      	mov	r5, r0
 8008652:	4620      	mov	r0, r4
 8008654:	f7f8 fd3c 	bl	80010d0 <__aeabi_fcmpun>
 8008658:	bb68      	cbnz	r0, 80086b6 <powf+0x72>
 800865a:	2100      	movs	r1, #0
 800865c:	4630      	mov	r0, r6
 800865e:	f7f8 fd05 	bl	800106c <__aeabi_fcmpeq>
 8008662:	b190      	cbz	r0, 800868a <powf+0x46>
 8008664:	2100      	movs	r1, #0
 8008666:	4620      	mov	r0, r4
 8008668:	f7f8 fd00 	bl	800106c <__aeabi_fcmpeq>
 800866c:	2800      	cmp	r0, #0
 800866e:	d133      	bne.n	80086d8 <powf+0x94>
 8008670:	4620      	mov	r0, r4
 8008672:	f000 f834 	bl	80086de <finitef>
 8008676:	b1f0      	cbz	r0, 80086b6 <powf+0x72>
 8008678:	2100      	movs	r1, #0
 800867a:	4620      	mov	r0, r4
 800867c:	f7f8 fd00 	bl	8001080 <__aeabi_fcmplt>
 8008680:	b1c8      	cbz	r0, 80086b6 <powf+0x72>
 8008682:	f7fe f983 	bl	800698c <__errno>
 8008686:	2322      	movs	r3, #34	; 0x22
 8008688:	e014      	b.n	80086b4 <powf+0x70>
 800868a:	4628      	mov	r0, r5
 800868c:	f000 f827 	bl	80086de <finitef>
 8008690:	b998      	cbnz	r0, 80086ba <powf+0x76>
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f823 	bl	80086de <finitef>
 8008698:	b178      	cbz	r0, 80086ba <powf+0x76>
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f81f 	bl	80086de <finitef>
 80086a0:	b158      	cbz	r0, 80086ba <powf+0x76>
 80086a2:	4629      	mov	r1, r5
 80086a4:	4628      	mov	r0, r5
 80086a6:	f7f8 fd13 	bl	80010d0 <__aeabi_fcmpun>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d0e9      	beq.n	8008682 <powf+0x3e>
 80086ae:	f7fe f96d 	bl	800698c <__errno>
 80086b2:	2321      	movs	r3, #33	; 0x21
 80086b4:	6003      	str	r3, [r0, #0]
 80086b6:	4628      	mov	r0, r5
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	2100      	movs	r1, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	f7f8 fcd5 	bl	800106c <__aeabi_fcmpeq>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0f7      	beq.n	80086b6 <powf+0x72>
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f809 	bl	80086de <finitef>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d0f2      	beq.n	80086b6 <powf+0x72>
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 f804 	bl	80086de <finitef>
 80086d6:	e7d3      	b.n	8008680 <powf+0x3c>
 80086d8:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80086dc:	e7eb      	b.n	80086b6 <powf+0x72>

080086de <finitef>:
 80086de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80086e2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80086e6:	bfac      	ite	ge
 80086e8:	2000      	movge	r0, #0
 80086ea:	2001      	movlt	r0, #1
 80086ec:	4770      	bx	lr
	...

080086f0 <__ieee754_powf>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 80086f8:	4681      	mov	r9, r0
 80086fa:	460f      	mov	r7, r1
 80086fc:	4680      	mov	r8, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b087      	sub	sp, #28
 8008702:	d10d      	bne.n	8008720 <__ieee754_powf+0x30>
 8008704:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8008708:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800870c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8008710:	f240 8336 	bls.w	8008d80 <__ieee754_powf+0x690>
 8008714:	4639      	mov	r1, r7
 8008716:	4648      	mov	r0, r9
 8008718:	f7f8 fa0c 	bl	8000b34 <__addsf3>
 800871c:	4601      	mov	r1, r0
 800871e:	e040      	b.n	80087a2 <__ieee754_powf+0xb2>
 8008720:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008724:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008728:	dcf4      	bgt.n	8008714 <__ieee754_powf+0x24>
 800872a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800872e:	dd08      	ble.n	8008742 <__ieee754_powf+0x52>
 8008730:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8008734:	d1ee      	bne.n	8008714 <__ieee754_powf+0x24>
 8008736:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800873a:	0064      	lsls	r4, r4, #1
 800873c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8008740:	e7e6      	b.n	8008710 <__ieee754_powf+0x20>
 8008742:	2800      	cmp	r0, #0
 8008744:	da20      	bge.n	8008788 <__ieee754_powf+0x98>
 8008746:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800874a:	da2e      	bge.n	80087aa <__ieee754_powf+0xba>
 800874c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008750:	f2c0 831b 	blt.w	8008d8a <__ieee754_powf+0x69a>
 8008754:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008758:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800875c:	fa4a f503 	asr.w	r5, sl, r3
 8008760:	fa05 f303 	lsl.w	r3, r5, r3
 8008764:	4553      	cmp	r3, sl
 8008766:	f040 8310 	bne.w	8008d8a <__ieee754_powf+0x69a>
 800876a:	f005 0501 	and.w	r5, r5, #1
 800876e:	f1c5 0502 	rsb	r5, r5, #2
 8008772:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8008776:	d120      	bne.n	80087ba <__ieee754_powf+0xca>
 8008778:	2c00      	cmp	r4, #0
 800877a:	4649      	mov	r1, r9
 800877c:	da11      	bge.n	80087a2 <__ieee754_powf+0xb2>
 800877e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008782:	f7f8 fb93 	bl	8000eac <__aeabi_fdiv>
 8008786:	e7c9      	b.n	800871c <__ieee754_powf+0x2c>
 8008788:	2500      	movs	r5, #0
 800878a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800878e:	d1f0      	bne.n	8008772 <__ieee754_powf+0x82>
 8008790:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8008794:	f000 82f4 	beq.w	8008d80 <__ieee754_powf+0x690>
 8008798:	dd09      	ble.n	80087ae <__ieee754_powf+0xbe>
 800879a:	2c00      	cmp	r4, #0
 800879c:	f2c0 82f3 	blt.w	8008d86 <__ieee754_powf+0x696>
 80087a0:	4639      	mov	r1, r7
 80087a2:	4608      	mov	r0, r1
 80087a4:	b007      	add	sp, #28
 80087a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087aa:	2502      	movs	r5, #2
 80087ac:	e7ed      	b.n	800878a <__ieee754_powf+0x9a>
 80087ae:	2c00      	cmp	r4, #0
 80087b0:	f280 82e9 	bge.w	8008d86 <__ieee754_powf+0x696>
 80087b4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80087b8:	e7f3      	b.n	80087a2 <__ieee754_powf+0xb2>
 80087ba:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80087be:	d104      	bne.n	80087ca <__ieee754_powf+0xda>
 80087c0:	4649      	mov	r1, r9
 80087c2:	4648      	mov	r0, r9
 80087c4:	f7f8 fabe 	bl	8000d44 <__aeabi_fmul>
 80087c8:	e7a8      	b.n	800871c <__ieee754_powf+0x2c>
 80087ca:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80087ce:	4648      	mov	r0, r9
 80087d0:	d107      	bne.n	80087e2 <__ieee754_powf+0xf2>
 80087d2:	f1b8 0f00 	cmp.w	r8, #0
 80087d6:	db04      	blt.n	80087e2 <__ieee754_powf+0xf2>
 80087d8:	b007      	add	sp, #28
 80087da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087de:	f000 bb5b 	b.w	8008e98 <__ieee754_sqrtf>
 80087e2:	f000 faeb 	bl	8008dbc <fabsf>
 80087e6:	4601      	mov	r1, r0
 80087e8:	b126      	cbz	r6, 80087f4 <__ieee754_powf+0x104>
 80087ea:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80087ee:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80087f2:	d117      	bne.n	8008824 <__ieee754_powf+0x134>
 80087f4:	2c00      	cmp	r4, #0
 80087f6:	da04      	bge.n	8008802 <__ieee754_powf+0x112>
 80087f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80087fc:	f7f8 fb56 	bl	8000eac <__aeabi_fdiv>
 8008800:	4601      	mov	r1, r0
 8008802:	f1b8 0f00 	cmp.w	r8, #0
 8008806:	dacc      	bge.n	80087a2 <__ieee754_powf+0xb2>
 8008808:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800880c:	432e      	orrs	r6, r5
 800880e:	d104      	bne.n	800881a <__ieee754_powf+0x12a>
 8008810:	4608      	mov	r0, r1
 8008812:	f7f8 f98d 	bl	8000b30 <__aeabi_fsub>
 8008816:	4601      	mov	r1, r0
 8008818:	e7b3      	b.n	8008782 <__ieee754_powf+0x92>
 800881a:	2d01      	cmp	r5, #1
 800881c:	d1c1      	bne.n	80087a2 <__ieee754_powf+0xb2>
 800881e:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008822:	e77b      	b.n	800871c <__ieee754_powf+0x2c>
 8008824:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8008828:	3b01      	subs	r3, #1
 800882a:	9302      	str	r3, [sp, #8]
 800882c:	432b      	orrs	r3, r5
 800882e:	d101      	bne.n	8008834 <__ieee754_powf+0x144>
 8008830:	4649      	mov	r1, r9
 8008832:	e7ed      	b.n	8008810 <__ieee754_powf+0x120>
 8008834:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8008838:	f340 809e 	ble.w	8008978 <__ieee754_powf+0x288>
 800883c:	4b47      	ldr	r3, [pc, #284]	; (800895c <__ieee754_powf+0x26c>)
 800883e:	429e      	cmp	r6, r3
 8008840:	dc07      	bgt.n	8008852 <__ieee754_powf+0x162>
 8008842:	2c00      	cmp	r4, #0
 8008844:	da0a      	bge.n	800885c <__ieee754_powf+0x16c>
 8008846:	2000      	movs	r0, #0
 8008848:	b007      	add	sp, #28
 800884a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884e:	f000 bb1e 	b.w	8008e8e <__math_oflowf>
 8008852:	4b43      	ldr	r3, [pc, #268]	; (8008960 <__ieee754_powf+0x270>)
 8008854:	429e      	cmp	r6, r3
 8008856:	dd07      	ble.n	8008868 <__ieee754_powf+0x178>
 8008858:	2c00      	cmp	r4, #0
 800885a:	dcf4      	bgt.n	8008846 <__ieee754_powf+0x156>
 800885c:	2000      	movs	r0, #0
 800885e:	b007      	add	sp, #28
 8008860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	f000 bb0f 	b.w	8008e86 <__math_uflowf>
 8008868:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800886c:	f7f8 f960 	bl	8000b30 <__aeabi_fsub>
 8008870:	493c      	ldr	r1, [pc, #240]	; (8008964 <__ieee754_powf+0x274>)
 8008872:	4606      	mov	r6, r0
 8008874:	f7f8 fa66 	bl	8000d44 <__aeabi_fmul>
 8008878:	493b      	ldr	r1, [pc, #236]	; (8008968 <__ieee754_powf+0x278>)
 800887a:	4680      	mov	r8, r0
 800887c:	4630      	mov	r0, r6
 800887e:	f7f8 fa61 	bl	8000d44 <__aeabi_fmul>
 8008882:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8008886:	4681      	mov	r9, r0
 8008888:	4630      	mov	r0, r6
 800888a:	f7f8 fa5b 	bl	8000d44 <__aeabi_fmul>
 800888e:	4601      	mov	r1, r0
 8008890:	4836      	ldr	r0, [pc, #216]	; (800896c <__ieee754_powf+0x27c>)
 8008892:	f7f8 f94d 	bl	8000b30 <__aeabi_fsub>
 8008896:	4631      	mov	r1, r6
 8008898:	f7f8 fa54 	bl	8000d44 <__aeabi_fmul>
 800889c:	4601      	mov	r1, r0
 800889e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80088a2:	f7f8 f945 	bl	8000b30 <__aeabi_fsub>
 80088a6:	4631      	mov	r1, r6
 80088a8:	4682      	mov	sl, r0
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7f8 fa4a 	bl	8000d44 <__aeabi_fmul>
 80088b0:	4601      	mov	r1, r0
 80088b2:	4650      	mov	r0, sl
 80088b4:	f7f8 fa46 	bl	8000d44 <__aeabi_fmul>
 80088b8:	492d      	ldr	r1, [pc, #180]	; (8008970 <__ieee754_powf+0x280>)
 80088ba:	f7f8 fa43 	bl	8000d44 <__aeabi_fmul>
 80088be:	4601      	mov	r1, r0
 80088c0:	4648      	mov	r0, r9
 80088c2:	f7f8 f935 	bl	8000b30 <__aeabi_fsub>
 80088c6:	4601      	mov	r1, r0
 80088c8:	4606      	mov	r6, r0
 80088ca:	4640      	mov	r0, r8
 80088cc:	f7f8 f932 	bl	8000b34 <__addsf3>
 80088d0:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80088d4:	f029 090f 	bic.w	r9, r9, #15
 80088d8:	4641      	mov	r1, r8
 80088da:	4648      	mov	r0, r9
 80088dc:	f7f8 f928 	bl	8000b30 <__aeabi_fsub>
 80088e0:	4601      	mov	r1, r0
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7f8 f924 	bl	8000b30 <__aeabi_fsub>
 80088e8:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	3d01      	subs	r5, #1
 80088f0:	f024 040f 	bic.w	r4, r4, #15
 80088f4:	431d      	orrs	r5, r3
 80088f6:	4606      	mov	r6, r0
 80088f8:	4621      	mov	r1, r4
 80088fa:	4638      	mov	r0, r7
 80088fc:	bf14      	ite	ne
 80088fe:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8008902:	4d1c      	ldreq	r5, [pc, #112]	; (8008974 <__ieee754_powf+0x284>)
 8008904:	f7f8 f914 	bl	8000b30 <__aeabi_fsub>
 8008908:	4649      	mov	r1, r9
 800890a:	f7f8 fa1b 	bl	8000d44 <__aeabi_fmul>
 800890e:	4639      	mov	r1, r7
 8008910:	4680      	mov	r8, r0
 8008912:	4630      	mov	r0, r6
 8008914:	f7f8 fa16 	bl	8000d44 <__aeabi_fmul>
 8008918:	4601      	mov	r1, r0
 800891a:	4640      	mov	r0, r8
 800891c:	f7f8 f90a 	bl	8000b34 <__addsf3>
 8008920:	4621      	mov	r1, r4
 8008922:	4606      	mov	r6, r0
 8008924:	4648      	mov	r0, r9
 8008926:	f7f8 fa0d 	bl	8000d44 <__aeabi_fmul>
 800892a:	4601      	mov	r1, r0
 800892c:	4607      	mov	r7, r0
 800892e:	4681      	mov	r9, r0
 8008930:	4630      	mov	r0, r6
 8008932:	f7f8 f8ff 	bl	8000b34 <__addsf3>
 8008936:	2800      	cmp	r0, #0
 8008938:	4682      	mov	sl, r0
 800893a:	4680      	mov	r8, r0
 800893c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8008940:	f340 8200 	ble.w	8008d44 <__ieee754_powf+0x654>
 8008944:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8008948:	f340 814e 	ble.w	8008be8 <__ieee754_powf+0x4f8>
 800894c:	2100      	movs	r1, #0
 800894e:	4628      	mov	r0, r5
 8008950:	f7f8 fb96 	bl	8001080 <__aeabi_fcmplt>
 8008954:	3800      	subs	r0, #0
 8008956:	bf18      	it	ne
 8008958:	2001      	movne	r0, #1
 800895a:	e775      	b.n	8008848 <__ieee754_powf+0x158>
 800895c:	3f7ffff3 	.word	0x3f7ffff3
 8008960:	3f800007 	.word	0x3f800007
 8008964:	3fb8aa00 	.word	0x3fb8aa00
 8008968:	36eca570 	.word	0x36eca570
 800896c:	3eaaaaab 	.word	0x3eaaaaab
 8008970:	3fb8aa3b 	.word	0x3fb8aa3b
 8008974:	bf800000 	.word	0xbf800000
 8008978:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800897c:	f040 8111 	bne.w	8008ba2 <__ieee754_powf+0x4b2>
 8008980:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8008984:	f7f8 f9de 	bl	8000d44 <__aeabi_fmul>
 8008988:	f06f 0217 	mvn.w	r2, #23
 800898c:	4606      	mov	r6, r0
 800898e:	15f3      	asrs	r3, r6, #23
 8008990:	3b7f      	subs	r3, #127	; 0x7f
 8008992:	4413      	add	r3, r2
 8008994:	4a85      	ldr	r2, [pc, #532]	; (8008bac <__ieee754_powf+0x4bc>)
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	f3c6 0316 	ubfx	r3, r6, #0, #23
 800899c:	4293      	cmp	r3, r2
 800899e:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 80089a2:	dd08      	ble.n	80089b6 <__ieee754_powf+0x2c6>
 80089a4:	4a82      	ldr	r2, [pc, #520]	; (8008bb0 <__ieee754_powf+0x4c0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f340 80fd 	ble.w	8008ba6 <__ieee754_powf+0x4b6>
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80089b2:	3301      	adds	r3, #1
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	2300      	movs	r3, #0
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	9900      	ldr	r1, [sp, #0]
 80089bc:	4a7d      	ldr	r2, [pc, #500]	; (8008bb4 <__ieee754_powf+0x4c4>)
 80089be:	4630      	mov	r0, r6
 80089c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80089c4:	9603      	str	r6, [sp, #12]
 80089c6:	4611      	mov	r1, r2
 80089c8:	9205      	str	r2, [sp, #20]
 80089ca:	f7f8 f8b1 	bl	8000b30 <__aeabi_fsub>
 80089ce:	9a05      	ldr	r2, [sp, #20]
 80089d0:	9b03      	ldr	r3, [sp, #12]
 80089d2:	4683      	mov	fp, r0
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	9203      	str	r2, [sp, #12]
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	f7f8 f8aa 	bl	8000b34 <__addsf3>
 80089e0:	4601      	mov	r1, r0
 80089e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80089e6:	f7f8 fa61 	bl	8000eac <__aeabi_fdiv>
 80089ea:	4682      	mov	sl, r0
 80089ec:	4601      	mov	r1, r0
 80089ee:	4658      	mov	r0, fp
 80089f0:	f7f8 f9a8 	bl	8000d44 <__aeabi_fmul>
 80089f4:	1076      	asrs	r6, r6, #1
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80089fc:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008a00:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8008a04:	f029 090f 	bic.w	r9, r9, #15
 8008a08:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4648      	mov	r0, r9
 8008a12:	f7f8 f997 	bl	8000d44 <__aeabi_fmul>
 8008a16:	4601      	mov	r1, r0
 8008a18:	4658      	mov	r0, fp
 8008a1a:	f7f8 f889 	bl	8000b30 <__aeabi_fsub>
 8008a1e:	9a03      	ldr	r2, [sp, #12]
 8008a20:	4683      	mov	fp, r0
 8008a22:	4611      	mov	r1, r2
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7f8 f883 	bl	8000b30 <__aeabi_fsub>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f8 f87e 	bl	8000b30 <__aeabi_fsub>
 8008a34:	4649      	mov	r1, r9
 8008a36:	f7f8 f985 	bl	8000d44 <__aeabi_fmul>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f7f8 f877 	bl	8000b30 <__aeabi_fsub>
 8008a42:	4651      	mov	r1, sl
 8008a44:	f7f8 f97e 	bl	8000d44 <__aeabi_fmul>
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4682      	mov	sl, r0
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	f7f8 f979 	bl	8000d44 <__aeabi_fmul>
 8008a52:	4606      	mov	r6, r0
 8008a54:	4958      	ldr	r1, [pc, #352]	; (8008bb8 <__ieee754_powf+0x4c8>)
 8008a56:	f7f8 f975 	bl	8000d44 <__aeabi_fmul>
 8008a5a:	4958      	ldr	r1, [pc, #352]	; (8008bbc <__ieee754_powf+0x4cc>)
 8008a5c:	f7f8 f86a 	bl	8000b34 <__addsf3>
 8008a60:	4631      	mov	r1, r6
 8008a62:	f7f8 f96f 	bl	8000d44 <__aeabi_fmul>
 8008a66:	4956      	ldr	r1, [pc, #344]	; (8008bc0 <__ieee754_powf+0x4d0>)
 8008a68:	f7f8 f864 	bl	8000b34 <__addsf3>
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	f7f8 f969 	bl	8000d44 <__aeabi_fmul>
 8008a72:	4954      	ldr	r1, [pc, #336]	; (8008bc4 <__ieee754_powf+0x4d4>)
 8008a74:	f7f8 f85e 	bl	8000b34 <__addsf3>
 8008a78:	4631      	mov	r1, r6
 8008a7a:	f7f8 f963 	bl	8000d44 <__aeabi_fmul>
 8008a7e:	4952      	ldr	r1, [pc, #328]	; (8008bc8 <__ieee754_powf+0x4d8>)
 8008a80:	f7f8 f858 	bl	8000b34 <__addsf3>
 8008a84:	4631      	mov	r1, r6
 8008a86:	f7f8 f95d 	bl	8000d44 <__aeabi_fmul>
 8008a8a:	4950      	ldr	r1, [pc, #320]	; (8008bcc <__ieee754_powf+0x4dc>)
 8008a8c:	f7f8 f852 	bl	8000b34 <__addsf3>
 8008a90:	4631      	mov	r1, r6
 8008a92:	4683      	mov	fp, r0
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7f8 f955 	bl	8000d44 <__aeabi_fmul>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4658      	mov	r0, fp
 8008a9e:	f7f8 f951 	bl	8000d44 <__aeabi_fmul>
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7f8 f844 	bl	8000b34 <__addsf3>
 8008aac:	4651      	mov	r1, sl
 8008aae:	f7f8 f949 	bl	8000d44 <__aeabi_fmul>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	f7f8 f83e 	bl	8000b34 <__addsf3>
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4683      	mov	fp, r0
 8008abc:	4648      	mov	r0, r9
 8008abe:	f7f8 f941 	bl	8000d44 <__aeabi_fmul>
 8008ac2:	4943      	ldr	r1, [pc, #268]	; (8008bd0 <__ieee754_powf+0x4e0>)
 8008ac4:	9003      	str	r0, [sp, #12]
 8008ac6:	f7f8 f835 	bl	8000b34 <__addsf3>
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f8 f832 	bl	8000b34 <__addsf3>
 8008ad0:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008ad4:	f026 060f 	bic.w	r6, r6, #15
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4648      	mov	r0, r9
 8008adc:	f7f8 f932 	bl	8000d44 <__aeabi_fmul>
 8008ae0:	493b      	ldr	r1, [pc, #236]	; (8008bd0 <__ieee754_powf+0x4e0>)
 8008ae2:	4681      	mov	r9, r0
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f7f8 f823 	bl	8000b30 <__aeabi_fsub>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	4619      	mov	r1, r3
 8008aee:	f7f8 f81f 	bl	8000b30 <__aeabi_fsub>
 8008af2:	4601      	mov	r1, r0
 8008af4:	4658      	mov	r0, fp
 8008af6:	f7f8 f81b 	bl	8000b30 <__aeabi_fsub>
 8008afa:	4641      	mov	r1, r8
 8008afc:	f7f8 f922 	bl	8000d44 <__aeabi_fmul>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4680      	mov	r8, r0
 8008b04:	4650      	mov	r0, sl
 8008b06:	f7f8 f91d 	bl	8000d44 <__aeabi_fmul>
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f7f8 f811 	bl	8000b34 <__addsf3>
 8008b12:	4682      	mov	sl, r0
 8008b14:	4601      	mov	r1, r0
 8008b16:	4648      	mov	r0, r9
 8008b18:	f7f8 f80c 	bl	8000b34 <__addsf3>
 8008b1c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8008b20:	f026 060f 	bic.w	r6, r6, #15
 8008b24:	4630      	mov	r0, r6
 8008b26:	492b      	ldr	r1, [pc, #172]	; (8008bd4 <__ieee754_powf+0x4e4>)
 8008b28:	f7f8 f90c 	bl	8000d44 <__aeabi_fmul>
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	4680      	mov	r8, r0
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7f7 fffd 	bl	8000b30 <__aeabi_fsub>
 8008b36:	4601      	mov	r1, r0
 8008b38:	4650      	mov	r0, sl
 8008b3a:	f7f7 fff9 	bl	8000b30 <__aeabi_fsub>
 8008b3e:	4926      	ldr	r1, [pc, #152]	; (8008bd8 <__ieee754_powf+0x4e8>)
 8008b40:	f7f8 f900 	bl	8000d44 <__aeabi_fmul>
 8008b44:	4925      	ldr	r1, [pc, #148]	; (8008bdc <__ieee754_powf+0x4ec>)
 8008b46:	4681      	mov	r9, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7f8 f8fb 	bl	8000d44 <__aeabi_fmul>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4648      	mov	r0, r9
 8008b52:	f7f7 ffef 	bl	8000b34 <__addsf3>
 8008b56:	4b22      	ldr	r3, [pc, #136]	; (8008be0 <__ieee754_powf+0x4f0>)
 8008b58:	9a00      	ldr	r2, [sp, #0]
 8008b5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b5e:	f7f7 ffe9 	bl	8000b34 <__addsf3>
 8008b62:	4606      	mov	r6, r0
 8008b64:	9801      	ldr	r0, [sp, #4]
 8008b66:	f7f8 f899 	bl	8000c9c <__aeabi_i2f>
 8008b6a:	4682      	mov	sl, r0
 8008b6c:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <__ieee754_powf+0x4f4>)
 8008b6e:	9a00      	ldr	r2, [sp, #0]
 8008b70:	4631      	mov	r1, r6
 8008b72:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008b76:	4640      	mov	r0, r8
 8008b78:	f7f7 ffdc 	bl	8000b34 <__addsf3>
 8008b7c:	4659      	mov	r1, fp
 8008b7e:	f7f7 ffd9 	bl	8000b34 <__addsf3>
 8008b82:	4651      	mov	r1, sl
 8008b84:	f7f7 ffd6 	bl	8000b34 <__addsf3>
 8008b88:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008b8c:	f029 090f 	bic.w	r9, r9, #15
 8008b90:	4651      	mov	r1, sl
 8008b92:	4648      	mov	r0, r9
 8008b94:	f7f7 ffcc 	bl	8000b30 <__aeabi_fsub>
 8008b98:	4659      	mov	r1, fp
 8008b9a:	f7f7 ffc9 	bl	8000b30 <__aeabi_fsub>
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	e69c      	b.n	80088dc <__ieee754_powf+0x1ec>
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	e6f3      	b.n	800898e <__ieee754_powf+0x29e>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e706      	b.n	80089b8 <__ieee754_powf+0x2c8>
 8008baa:	bf00      	nop
 8008bac:	001cc471 	.word	0x001cc471
 8008bb0:	005db3d6 	.word	0x005db3d6
 8008bb4:	0800965c 	.word	0x0800965c
 8008bb8:	3e53f142 	.word	0x3e53f142
 8008bbc:	3e6c3255 	.word	0x3e6c3255
 8008bc0:	3e8ba305 	.word	0x3e8ba305
 8008bc4:	3eaaaaab 	.word	0x3eaaaaab
 8008bc8:	3edb6db7 	.word	0x3edb6db7
 8008bcc:	3f19999a 	.word	0x3f19999a
 8008bd0:	40400000 	.word	0x40400000
 8008bd4:	3f763800 	.word	0x3f763800
 8008bd8:	3f76384f 	.word	0x3f76384f
 8008bdc:	369dc3a0 	.word	0x369dc3a0
 8008be0:	0800966c 	.word	0x0800966c
 8008be4:	08009664 	.word	0x08009664
 8008be8:	f040 80c2 	bne.w	8008d70 <__ieee754_powf+0x680>
 8008bec:	4968      	ldr	r1, [pc, #416]	; (8008d90 <__ieee754_powf+0x6a0>)
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7f7 ffa0 	bl	8000b34 <__addsf3>
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	4681      	mov	r9, r0
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	f7f7 ff99 	bl	8000b30 <__aeabi_fsub>
 8008bfe:	4601      	mov	r1, r0
 8008c00:	4648      	mov	r0, r9
 8008c02:	f7f8 fa5b 	bl	80010bc <__aeabi_fcmpgt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f47f aea0 	bne.w	800894c <__ieee754_powf+0x25c>
 8008c0c:	15e4      	asrs	r4, r4, #23
 8008c0e:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 8008c12:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8008c16:	411c      	asrs	r4, r3
 8008c18:	4444      	add	r4, r8
 8008c1a:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8008c1e:	495d      	ldr	r1, [pc, #372]	; (8008d94 <__ieee754_powf+0x6a4>)
 8008c20:	3b7f      	subs	r3, #127	; 0x7f
 8008c22:	4119      	asrs	r1, r3
 8008c24:	4021      	ands	r1, r4
 8008c26:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008c2a:	f1c3 0317 	rsb	r3, r3, #23
 8008c2e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8008c32:	411c      	asrs	r4, r3
 8008c34:	f1b8 0f00 	cmp.w	r8, #0
 8008c38:	4638      	mov	r0, r7
 8008c3a:	bfb8      	it	lt
 8008c3c:	4264      	neglt	r4, r4
 8008c3e:	f7f7 ff77 	bl	8000b30 <__aeabi_fsub>
 8008c42:	4681      	mov	r9, r0
 8008c44:	4631      	mov	r1, r6
 8008c46:	4648      	mov	r0, r9
 8008c48:	f7f7 ff74 	bl	8000b34 <__addsf3>
 8008c4c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8008c50:	f027 070f 	bic.w	r7, r7, #15
 8008c54:	4638      	mov	r0, r7
 8008c56:	4950      	ldr	r1, [pc, #320]	; (8008d98 <__ieee754_powf+0x6a8>)
 8008c58:	f7f8 f874 	bl	8000d44 <__aeabi_fmul>
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	4680      	mov	r8, r0
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7f7 ff65 	bl	8000b30 <__aeabi_fsub>
 8008c66:	4601      	mov	r1, r0
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7f7 ff61 	bl	8000b30 <__aeabi_fsub>
 8008c6e:	494b      	ldr	r1, [pc, #300]	; (8008d9c <__ieee754_powf+0x6ac>)
 8008c70:	f7f8 f868 	bl	8000d44 <__aeabi_fmul>
 8008c74:	494a      	ldr	r1, [pc, #296]	; (8008da0 <__ieee754_powf+0x6b0>)
 8008c76:	4606      	mov	r6, r0
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7f8 f863 	bl	8000d44 <__aeabi_fmul>
 8008c7e:	4601      	mov	r1, r0
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7f7 ff57 	bl	8000b34 <__addsf3>
 8008c86:	4607      	mov	r7, r0
 8008c88:	4601      	mov	r1, r0
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7f7 ff52 	bl	8000b34 <__addsf3>
 8008c90:	4641      	mov	r1, r8
 8008c92:	4606      	mov	r6, r0
 8008c94:	f7f7 ff4c 	bl	8000b30 <__aeabi_fsub>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f7f7 ff48 	bl	8000b30 <__aeabi_fsub>
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7f8 f84d 	bl	8000d44 <__aeabi_fmul>
 8008caa:	4607      	mov	r7, r0
 8008cac:	493d      	ldr	r1, [pc, #244]	; (8008da4 <__ieee754_powf+0x6b4>)
 8008cae:	f7f8 f849 	bl	8000d44 <__aeabi_fmul>
 8008cb2:	493d      	ldr	r1, [pc, #244]	; (8008da8 <__ieee754_powf+0x6b8>)
 8008cb4:	f7f7 ff3c 	bl	8000b30 <__aeabi_fsub>
 8008cb8:	4639      	mov	r1, r7
 8008cba:	f7f8 f843 	bl	8000d44 <__aeabi_fmul>
 8008cbe:	493b      	ldr	r1, [pc, #236]	; (8008dac <__ieee754_powf+0x6bc>)
 8008cc0:	f7f7 ff38 	bl	8000b34 <__addsf3>
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f8 f83d 	bl	8000d44 <__aeabi_fmul>
 8008cca:	4939      	ldr	r1, [pc, #228]	; (8008db0 <__ieee754_powf+0x6c0>)
 8008ccc:	f7f7 ff30 	bl	8000b30 <__aeabi_fsub>
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f8 f837 	bl	8000d44 <__aeabi_fmul>
 8008cd6:	4937      	ldr	r1, [pc, #220]	; (8008db4 <__ieee754_powf+0x6c4>)
 8008cd8:	f7f7 ff2c 	bl	8000b34 <__addsf3>
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f8 f831 	bl	8000d44 <__aeabi_fmul>
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7f7 ff23 	bl	8000b30 <__aeabi_fsub>
 8008cea:	4607      	mov	r7, r0
 8008cec:	4601      	mov	r1, r0
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7f8 f828 	bl	8000d44 <__aeabi_fmul>
 8008cf4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008cf8:	4681      	mov	r9, r0
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7f7 ff18 	bl	8000b30 <__aeabi_fsub>
 8008d00:	4601      	mov	r1, r0
 8008d02:	4648      	mov	r0, r9
 8008d04:	f7f8 f8d2 	bl	8000eac <__aeabi_fdiv>
 8008d08:	4641      	mov	r1, r8
 8008d0a:	4607      	mov	r7, r0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7f8 f819 	bl	8000d44 <__aeabi_fmul>
 8008d12:	4641      	mov	r1, r8
 8008d14:	f7f7 ff0e 	bl	8000b34 <__addsf3>
 8008d18:	4601      	mov	r1, r0
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7f7 ff08 	bl	8000b30 <__aeabi_fsub>
 8008d20:	4631      	mov	r1, r6
 8008d22:	f7f7 ff05 	bl	8000b30 <__aeabi_fsub>
 8008d26:	4601      	mov	r1, r0
 8008d28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008d2c:	f7f7 ff00 	bl	8000b30 <__aeabi_fsub>
 8008d30:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d38:	da20      	bge.n	8008d7c <__ieee754_powf+0x68c>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	f000 f842 	bl	8008dc4 <scalbnf>
 8008d40:	4629      	mov	r1, r5
 8008d42:	e53f      	b.n	80087c4 <__ieee754_powf+0xd4>
 8008d44:	4b1c      	ldr	r3, [pc, #112]	; (8008db8 <__ieee754_powf+0x6c8>)
 8008d46:	429c      	cmp	r4, r3
 8008d48:	dd07      	ble.n	8008d5a <__ieee754_powf+0x66a>
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f7f8 f997 	bl	8001080 <__aeabi_fcmplt>
 8008d52:	3800      	subs	r0, #0
 8008d54:	bf18      	it	ne
 8008d56:	2001      	movne	r0, #1
 8008d58:	e581      	b.n	800885e <__ieee754_powf+0x16e>
 8008d5a:	d109      	bne.n	8008d70 <__ieee754_powf+0x680>
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fee7 	bl	8000b30 <__aeabi_fsub>
 8008d62:	4631      	mov	r1, r6
 8008d64:	f7f8 f9a0 	bl	80010a8 <__aeabi_fcmpge>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f43f af4f 	beq.w	8008c0c <__ieee754_powf+0x51c>
 8008d6e:	e7ec      	b.n	8008d4a <__ieee754_powf+0x65a>
 8008d70:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008d74:	f73f af4a 	bgt.w	8008c0c <__ieee754_powf+0x51c>
 8008d78:	2400      	movs	r4, #0
 8008d7a:	e763      	b.n	8008c44 <__ieee754_powf+0x554>
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	e7df      	b.n	8008d40 <__ieee754_powf+0x650>
 8008d80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d84:	e50d      	b.n	80087a2 <__ieee754_powf+0xb2>
 8008d86:	2100      	movs	r1, #0
 8008d88:	e50b      	b.n	80087a2 <__ieee754_powf+0xb2>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	e4f1      	b.n	8008772 <__ieee754_powf+0x82>
 8008d8e:	bf00      	nop
 8008d90:	3338aa3c 	.word	0x3338aa3c
 8008d94:	ff800000 	.word	0xff800000
 8008d98:	3f317200 	.word	0x3f317200
 8008d9c:	3f317218 	.word	0x3f317218
 8008da0:	35bfbe8c 	.word	0x35bfbe8c
 8008da4:	3331bb4c 	.word	0x3331bb4c
 8008da8:	35ddea0e 	.word	0x35ddea0e
 8008dac:	388ab355 	.word	0x388ab355
 8008db0:	3b360b61 	.word	0x3b360b61
 8008db4:	3e2aaaab 	.word	0x3e2aaaab
 8008db8:	43160000 	.word	0x43160000

08008dbc <fabsf>:
 8008dbc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008dc0:	4770      	bx	lr
	...

08008dc4 <scalbnf>:
 8008dc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4603      	mov	r3, r0
 8008dcc:	460d      	mov	r5, r1
 8008dce:	4604      	mov	r4, r0
 8008dd0:	d02e      	beq.n	8008e30 <scalbnf+0x6c>
 8008dd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008dd6:	d304      	bcc.n	8008de2 <scalbnf+0x1e>
 8008dd8:	4601      	mov	r1, r0
 8008dda:	f7f7 feab 	bl	8000b34 <__addsf3>
 8008dde:	4603      	mov	r3, r0
 8008de0:	e026      	b.n	8008e30 <scalbnf+0x6c>
 8008de2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8008de6:	d118      	bne.n	8008e1a <scalbnf+0x56>
 8008de8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8008dec:	f7f7 ffaa 	bl	8000d44 <__aeabi_fmul>
 8008df0:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <scalbnf+0x8c>)
 8008df2:	4603      	mov	r3, r0
 8008df4:	4295      	cmp	r5, r2
 8008df6:	db0c      	blt.n	8008e12 <scalbnf+0x4e>
 8008df8:	4604      	mov	r4, r0
 8008dfa:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008dfe:	3a19      	subs	r2, #25
 8008e00:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008e04:	428d      	cmp	r5, r1
 8008e06:	dd0a      	ble.n	8008e1e <scalbnf+0x5a>
 8008e08:	4912      	ldr	r1, [pc, #72]	; (8008e54 <scalbnf+0x90>)
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f361 001e 	bfi	r0, r1, #0, #31
 8008e10:	e000      	b.n	8008e14 <scalbnf+0x50>
 8008e12:	4911      	ldr	r1, [pc, #68]	; (8008e58 <scalbnf+0x94>)
 8008e14:	f7f7 ff96 	bl	8000d44 <__aeabi_fmul>
 8008e18:	e7e1      	b.n	8008dde <scalbnf+0x1a>
 8008e1a:	0dd2      	lsrs	r2, r2, #23
 8008e1c:	e7f0      	b.n	8008e00 <scalbnf+0x3c>
 8008e1e:	1951      	adds	r1, r2, r5
 8008e20:	29fe      	cmp	r1, #254	; 0xfe
 8008e22:	dcf1      	bgt.n	8008e08 <scalbnf+0x44>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	dd05      	ble.n	8008e34 <scalbnf+0x70>
 8008e28:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008e2c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008e30:	4618      	mov	r0, r3
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	f111 0f16 	cmn.w	r1, #22
 8008e38:	da01      	bge.n	8008e3e <scalbnf+0x7a>
 8008e3a:	4907      	ldr	r1, [pc, #28]	; (8008e58 <scalbnf+0x94>)
 8008e3c:	e7e5      	b.n	8008e0a <scalbnf+0x46>
 8008e3e:	f101 0019 	add.w	r0, r1, #25
 8008e42:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008e46:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8008e4a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008e4e:	e7e1      	b.n	8008e14 <scalbnf+0x50>
 8008e50:	ffff3cb0 	.word	0xffff3cb0
 8008e54:	7149f2ca 	.word	0x7149f2ca
 8008e58:	0da24260 	.word	0x0da24260

08008e5c <with_errnof>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4604      	mov	r4, r0
 8008e60:	460d      	mov	r5, r1
 8008e62:	f7fd fd93 	bl	800698c <__errno>
 8008e66:	6005      	str	r5, [r0, #0]
 8008e68:	4620      	mov	r0, r4
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}

08008e6c <xflowf>:
 8008e6c:	b508      	push	{r3, lr}
 8008e6e:	b140      	cbz	r0, 8008e82 <xflowf+0x16>
 8008e70:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8008e74:	f7f7 ff66 	bl	8000d44 <__aeabi_fmul>
 8008e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e7c:	2122      	movs	r1, #34	; 0x22
 8008e7e:	f7ff bfed 	b.w	8008e5c <with_errnof>
 8008e82:	4608      	mov	r0, r1
 8008e84:	e7f6      	b.n	8008e74 <xflowf+0x8>

08008e86 <__math_uflowf>:
 8008e86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8008e8a:	f7ff bfef 	b.w	8008e6c <xflowf>

08008e8e <__math_oflowf>:
 8008e8e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8008e92:	f7ff bfeb 	b.w	8008e6c <xflowf>
	...

08008e98 <__ieee754_sqrtf>:
 8008e98:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008e9c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	d30a      	bcc.n	8008ec0 <__ieee754_sqrtf+0x28>
 8008eaa:	4601      	mov	r1, r0
 8008eac:	f7f7 ff4a 	bl	8000d44 <__aeabi_fmul>
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f7f7 fe3e 	bl	8000b34 <__addsf3>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec0:	2a00      	cmp	r2, #0
 8008ec2:	d0fa      	beq.n	8008eba <__ieee754_sqrtf+0x22>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	da06      	bge.n	8008ed6 <__ieee754_sqrtf+0x3e>
 8008ec8:	4601      	mov	r1, r0
 8008eca:	f7f7 fe31 	bl	8000b30 <__aeabi_fsub>
 8008ece:	4601      	mov	r1, r0
 8008ed0:	f7f7 ffec 	bl	8000eac <__aeabi_fdiv>
 8008ed4:	e7f0      	b.n	8008eb8 <__ieee754_sqrtf+0x20>
 8008ed6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008eda:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008ede:	d03e      	beq.n	8008f5e <__ieee754_sqrtf+0xc6>
 8008ee0:	2400      	movs	r4, #0
 8008ee2:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 8008ee6:	07ca      	lsls	r2, r1, #31
 8008ee8:	f04f 0019 	mov.w	r0, #25
 8008eec:	4626      	mov	r6, r4
 8008eee:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008ef2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008efa:	bf58      	it	pl
 8008efc:	005b      	lslpl	r3, r3, #1
 8008efe:	106d      	asrs	r5, r5, #1
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	1872      	adds	r2, r6, r1
 8008f04:	429a      	cmp	r2, r3
 8008f06:	bfcf      	iteee	gt
 8008f08:	461a      	movgt	r2, r3
 8008f0a:	1856      	addle	r6, r2, r1
 8008f0c:	1864      	addle	r4, r4, r1
 8008f0e:	1a9a      	suble	r2, r3, r2
 8008f10:	3801      	subs	r0, #1
 8008f12:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008f16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008f1a:	d1f2      	bne.n	8008f02 <__ieee754_sqrtf+0x6a>
 8008f1c:	b1ba      	cbz	r2, 8008f4e <__ieee754_sqrtf+0xb6>
 8008f1e:	4e14      	ldr	r6, [pc, #80]	; (8008f70 <__ieee754_sqrtf+0xd8>)
 8008f20:	4f14      	ldr	r7, [pc, #80]	; (8008f74 <__ieee754_sqrtf+0xdc>)
 8008f22:	6830      	ldr	r0, [r6, #0]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	f7f7 fe03 	bl	8000b30 <__aeabi_fsub>
 8008f2a:	f8d6 8000 	ldr.w	r8, [r6]
 8008f2e:	4601      	mov	r1, r0
 8008f30:	4640      	mov	r0, r8
 8008f32:	f7f8 f8af 	bl	8001094 <__aeabi_fcmple>
 8008f36:	b150      	cbz	r0, 8008f4e <__ieee754_sqrtf+0xb6>
 8008f38:	6830      	ldr	r0, [r6, #0]
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	f7f7 fdfa 	bl	8000b34 <__addsf3>
 8008f40:	6836      	ldr	r6, [r6, #0]
 8008f42:	4601      	mov	r1, r0
 8008f44:	4630      	mov	r0, r6
 8008f46:	f7f8 f89b 	bl	8001080 <__aeabi_fcmplt>
 8008f4a:	b168      	cbz	r0, 8008f68 <__ieee754_sqrtf+0xd0>
 8008f4c:	3402      	adds	r4, #2
 8008f4e:	1064      	asrs	r4, r4, #1
 8008f50:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008f54:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008f58:	e7af      	b.n	8008eba <__ieee754_sqrtf+0x22>
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	3201      	adds	r2, #1
 8008f5e:	0218      	lsls	r0, r3, #8
 8008f60:	d5fb      	bpl.n	8008f5a <__ieee754_sqrtf+0xc2>
 8008f62:	3a01      	subs	r2, #1
 8008f64:	1a89      	subs	r1, r1, r2
 8008f66:	e7bb      	b.n	8008ee0 <__ieee754_sqrtf+0x48>
 8008f68:	3401      	adds	r4, #1
 8008f6a:	f024 0401 	bic.w	r4, r4, #1
 8008f6e:	e7ee      	b.n	8008f4e <__ieee754_sqrtf+0xb6>
 8008f70:	200001d4 	.word	0x200001d4
 8008f74:	200001d8 	.word	0x200001d8

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
