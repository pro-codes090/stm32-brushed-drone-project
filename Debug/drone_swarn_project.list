
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  08009ed0  08009ed0  00019ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a57c  0800a57c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a584  0800a584  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001dc  0800a768  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800a768  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ced  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a5  00000000  00000000  00031f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  000344e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e09  00000000  00000000  000356a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b15  00000000  00000000  000364a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a8c  00000000  00000000  0004ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091506  00000000  00000000  00064a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006024  00000000  00000000  000f5f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fbf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009eb8 	.word	0x08009eb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009eb8 	.word	0x08009eb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b972 	b.w	80013f8 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9e08      	ldr	r6, [sp, #32]
 8001132:	460d      	mov	r5, r1
 8001134:	4604      	mov	r4, r0
 8001136:	468e      	mov	lr, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d14c      	bne.n	80011d6 <__udivmoddi4+0xaa>
 800113c:	428a      	cmp	r2, r1
 800113e:	4694      	mov	ip, r2
 8001140:	d967      	bls.n	8001212 <__udivmoddi4+0xe6>
 8001142:	fab2 f382 	clz	r3, r2
 8001146:	b153      	cbz	r3, 800115e <__udivmoddi4+0x32>
 8001148:	fa02 fc03 	lsl.w	ip, r2, r3
 800114c:	f1c3 0220 	rsb	r2, r3, #32
 8001150:	fa01 fe03 	lsl.w	lr, r1, r3
 8001154:	fa20 f202 	lsr.w	r2, r0, r2
 8001158:	ea42 0e0e 	orr.w	lr, r2, lr
 800115c:	409c      	lsls	r4, r3
 800115e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001162:	fbbe f1f7 	udiv	r1, lr, r7
 8001166:	fa1f f58c 	uxth.w	r5, ip
 800116a:	fb07 ee11 	mls	lr, r7, r1, lr
 800116e:	fb01 f005 	mul.w	r0, r1, r5
 8001172:	0c22      	lsrs	r2, r4, #16
 8001174:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001178:	4290      	cmp	r0, r2
 800117a:	d90a      	bls.n	8001192 <__udivmoddi4+0x66>
 800117c:	eb1c 0202 	adds.w	r2, ip, r2
 8001180:	f101 3eff 	add.w	lr, r1, #4294967295
 8001184:	f080 8119 	bcs.w	80013ba <__udivmoddi4+0x28e>
 8001188:	4290      	cmp	r0, r2
 800118a:	f240 8116 	bls.w	80013ba <__udivmoddi4+0x28e>
 800118e:	3902      	subs	r1, #2
 8001190:	4462      	add	r2, ip
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	fbb2 f0f7 	udiv	r0, r2, r7
 8001198:	fb07 2210 	mls	r2, r7, r0, r2
 800119c:	fb00 f505 	mul.w	r5, r0, r5
 80011a0:	b2a4      	uxth	r4, r4
 80011a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011a6:	42a5      	cmp	r5, r4
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0404 	adds.w	r4, ip, r4
 80011ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80011b2:	f080 8104 	bcs.w	80013be <__udivmoddi4+0x292>
 80011b6:	42a5      	cmp	r5, r4
 80011b8:	f240 8101 	bls.w	80013be <__udivmoddi4+0x292>
 80011bc:	4464      	add	r4, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	1b64      	subs	r4, r4, r5
 80011c8:	b11e      	cbz	r6, 80011d2 <__udivmoddi4+0xa6>
 80011ca:	40dc      	lsrs	r4, r3
 80011cc:	2300      	movs	r3, #0
 80011ce:	e9c6 4300 	strd	r4, r3, [r6]
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0xc0>
 80011da:	2e00      	cmp	r6, #0
 80011dc:	f000 80ea 	beq.w	80013b4 <__udivmoddi4+0x288>
 80011e0:	2100      	movs	r1, #0
 80011e2:	e9c6 0500 	strd	r0, r5, [r6]
 80011e6:	4608      	mov	r0, r1
 80011e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ec:	fab3 f183 	clz	r1, r3
 80011f0:	2900      	cmp	r1, #0
 80011f2:	d148      	bne.n	8001286 <__udivmoddi4+0x15a>
 80011f4:	42ab      	cmp	r3, r5
 80011f6:	d302      	bcc.n	80011fe <__udivmoddi4+0xd2>
 80011f8:	4282      	cmp	r2, r0
 80011fa:	f200 80f8 	bhi.w	80013ee <__udivmoddi4+0x2c2>
 80011fe:	1a84      	subs	r4, r0, r2
 8001200:	eb65 0203 	sbc.w	r2, r5, r3
 8001204:	2001      	movs	r0, #1
 8001206:	4696      	mov	lr, r2
 8001208:	2e00      	cmp	r6, #0
 800120a:	d0e2      	beq.n	80011d2 <__udivmoddi4+0xa6>
 800120c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001210:	e7df      	b.n	80011d2 <__udivmoddi4+0xa6>
 8001212:	b902      	cbnz	r2, 8001216 <__udivmoddi4+0xea>
 8001214:	deff      	udf	#255	; 0xff
 8001216:	fab2 f382 	clz	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 808e 	bne.w	800133c <__udivmoddi4+0x210>
 8001220:	1a88      	subs	r0, r1, r2
 8001222:	2101      	movs	r1, #1
 8001224:	0c17      	lsrs	r7, r2, #16
 8001226:	fa1f fe82 	uxth.w	lr, r2
 800122a:	fbb0 f5f7 	udiv	r5, r0, r7
 800122e:	fb07 0015 	mls	r0, r7, r5, r0
 8001232:	0c22      	lsrs	r2, r4, #16
 8001234:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001238:	fb0e f005 	mul.w	r0, lr, r5
 800123c:	4290      	cmp	r0, r2
 800123e:	d908      	bls.n	8001252 <__udivmoddi4+0x126>
 8001240:	eb1c 0202 	adds.w	r2, ip, r2
 8001244:	f105 38ff 	add.w	r8, r5, #4294967295
 8001248:	d202      	bcs.n	8001250 <__udivmoddi4+0x124>
 800124a:	4290      	cmp	r0, r2
 800124c:	f200 80cc 	bhi.w	80013e8 <__udivmoddi4+0x2bc>
 8001250:	4645      	mov	r5, r8
 8001252:	1a12      	subs	r2, r2, r0
 8001254:	fbb2 f0f7 	udiv	r0, r2, r7
 8001258:	fb07 2210 	mls	r2, r7, r0, r2
 800125c:	fb0e fe00 	mul.w	lr, lr, r0
 8001260:	b2a4      	uxth	r4, r4
 8001262:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001266:	45a6      	cmp	lr, r4
 8001268:	d908      	bls.n	800127c <__udivmoddi4+0x150>
 800126a:	eb1c 0404 	adds.w	r4, ip, r4
 800126e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001272:	d202      	bcs.n	800127a <__udivmoddi4+0x14e>
 8001274:	45a6      	cmp	lr, r4
 8001276:	f200 80b4 	bhi.w	80013e2 <__udivmoddi4+0x2b6>
 800127a:	4610      	mov	r0, r2
 800127c:	eba4 040e 	sub.w	r4, r4, lr
 8001280:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001284:	e7a0      	b.n	80011c8 <__udivmoddi4+0x9c>
 8001286:	f1c1 0720 	rsb	r7, r1, #32
 800128a:	408b      	lsls	r3, r1
 800128c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001290:	ea4c 0c03 	orr.w	ip, ip, r3
 8001294:	fa25 fa07 	lsr.w	sl, r5, r7
 8001298:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800129c:	fbba f8f9 	udiv	r8, sl, r9
 80012a0:	408d      	lsls	r5, r1
 80012a2:	fa20 f307 	lsr.w	r3, r0, r7
 80012a6:	fb09 aa18 	mls	sl, r9, r8, sl
 80012aa:	fa1f fe8c 	uxth.w	lr, ip
 80012ae:	432b      	orrs	r3, r5
 80012b0:	fa00 f501 	lsl.w	r5, r0, r1
 80012b4:	fb08 f00e 	mul.w	r0, r8, lr
 80012b8:	0c1c      	lsrs	r4, r3, #16
 80012ba:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012be:	42a0      	cmp	r0, r4
 80012c0:	fa02 f201 	lsl.w	r2, r2, r1
 80012c4:	d90b      	bls.n	80012de <__udivmoddi4+0x1b2>
 80012c6:	eb1c 0404 	adds.w	r4, ip, r4
 80012ca:	f108 3aff 	add.w	sl, r8, #4294967295
 80012ce:	f080 8086 	bcs.w	80013de <__udivmoddi4+0x2b2>
 80012d2:	42a0      	cmp	r0, r4
 80012d4:	f240 8083 	bls.w	80013de <__udivmoddi4+0x2b2>
 80012d8:	f1a8 0802 	sub.w	r8, r8, #2
 80012dc:	4464      	add	r4, ip
 80012de:	1a24      	subs	r4, r4, r0
 80012e0:	b298      	uxth	r0, r3
 80012e2:	fbb4 f3f9 	udiv	r3, r4, r9
 80012e6:	fb09 4413 	mls	r4, r9, r3, r4
 80012ea:	fb03 fe0e 	mul.w	lr, r3, lr
 80012ee:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012f2:	45a6      	cmp	lr, r4
 80012f4:	d908      	bls.n	8001308 <__udivmoddi4+0x1dc>
 80012f6:	eb1c 0404 	adds.w	r4, ip, r4
 80012fa:	f103 30ff 	add.w	r0, r3, #4294967295
 80012fe:	d26a      	bcs.n	80013d6 <__udivmoddi4+0x2aa>
 8001300:	45a6      	cmp	lr, r4
 8001302:	d968      	bls.n	80013d6 <__udivmoddi4+0x2aa>
 8001304:	3b02      	subs	r3, #2
 8001306:	4464      	add	r4, ip
 8001308:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800130c:	fba0 9302 	umull	r9, r3, r0, r2
 8001310:	eba4 040e 	sub.w	r4, r4, lr
 8001314:	429c      	cmp	r4, r3
 8001316:	46c8      	mov	r8, r9
 8001318:	469e      	mov	lr, r3
 800131a:	d354      	bcc.n	80013c6 <__udivmoddi4+0x29a>
 800131c:	d051      	beq.n	80013c2 <__udivmoddi4+0x296>
 800131e:	2e00      	cmp	r6, #0
 8001320:	d067      	beq.n	80013f2 <__udivmoddi4+0x2c6>
 8001322:	ebb5 0308 	subs.w	r3, r5, r8
 8001326:	eb64 040e 	sbc.w	r4, r4, lr
 800132a:	40cb      	lsrs	r3, r1
 800132c:	fa04 f707 	lsl.w	r7, r4, r7
 8001330:	431f      	orrs	r7, r3
 8001332:	40cc      	lsrs	r4, r1
 8001334:	e9c6 7400 	strd	r7, r4, [r6]
 8001338:	2100      	movs	r1, #0
 800133a:	e74a      	b.n	80011d2 <__udivmoddi4+0xa6>
 800133c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001340:	f1c3 0020 	rsb	r0, r3, #32
 8001344:	40c1      	lsrs	r1, r0
 8001346:	409d      	lsls	r5, r3
 8001348:	fa24 f000 	lsr.w	r0, r4, r0
 800134c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001350:	4328      	orrs	r0, r5
 8001352:	fbb1 f5f7 	udiv	r5, r1, r7
 8001356:	fb07 1115 	mls	r1, r7, r5, r1
 800135a:	fa1f fe8c 	uxth.w	lr, ip
 800135e:	0c02      	lsrs	r2, r0, #16
 8001360:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001364:	fb05 f10e 	mul.w	r1, r5, lr
 8001368:	4291      	cmp	r1, r2
 800136a:	fa04 f403 	lsl.w	r4, r4, r3
 800136e:	d908      	bls.n	8001382 <__udivmoddi4+0x256>
 8001370:	eb1c 0202 	adds.w	r2, ip, r2
 8001374:	f105 38ff 	add.w	r8, r5, #4294967295
 8001378:	d22f      	bcs.n	80013da <__udivmoddi4+0x2ae>
 800137a:	4291      	cmp	r1, r2
 800137c:	d92d      	bls.n	80013da <__udivmoddi4+0x2ae>
 800137e:	3d02      	subs	r5, #2
 8001380:	4462      	add	r2, ip
 8001382:	1a52      	subs	r2, r2, r1
 8001384:	fbb2 f1f7 	udiv	r1, r2, r7
 8001388:	fb07 2211 	mls	r2, r7, r1, r2
 800138c:	b280      	uxth	r0, r0
 800138e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001392:	fb01 f20e 	mul.w	r2, r1, lr
 8001396:	4282      	cmp	r2, r0
 8001398:	d908      	bls.n	80013ac <__udivmoddi4+0x280>
 800139a:	eb1c 0000 	adds.w	r0, ip, r0
 800139e:	f101 38ff 	add.w	r8, r1, #4294967295
 80013a2:	d216      	bcs.n	80013d2 <__udivmoddi4+0x2a6>
 80013a4:	4282      	cmp	r2, r0
 80013a6:	d914      	bls.n	80013d2 <__udivmoddi4+0x2a6>
 80013a8:	3902      	subs	r1, #2
 80013aa:	4460      	add	r0, ip
 80013ac:	1a80      	subs	r0, r0, r2
 80013ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80013b2:	e73a      	b.n	800122a <__udivmoddi4+0xfe>
 80013b4:	4631      	mov	r1, r6
 80013b6:	4630      	mov	r0, r6
 80013b8:	e70b      	b.n	80011d2 <__udivmoddi4+0xa6>
 80013ba:	4671      	mov	r1, lr
 80013bc:	e6e9      	b.n	8001192 <__udivmoddi4+0x66>
 80013be:	4610      	mov	r0, r2
 80013c0:	e6fe      	b.n	80011c0 <__udivmoddi4+0x94>
 80013c2:	454d      	cmp	r5, r9
 80013c4:	d2ab      	bcs.n	800131e <__udivmoddi4+0x1f2>
 80013c6:	ebb9 0802 	subs.w	r8, r9, r2
 80013ca:	eb63 0e0c 	sbc.w	lr, r3, ip
 80013ce:	3801      	subs	r0, #1
 80013d0:	e7a5      	b.n	800131e <__udivmoddi4+0x1f2>
 80013d2:	4641      	mov	r1, r8
 80013d4:	e7ea      	b.n	80013ac <__udivmoddi4+0x280>
 80013d6:	4603      	mov	r3, r0
 80013d8:	e796      	b.n	8001308 <__udivmoddi4+0x1dc>
 80013da:	4645      	mov	r5, r8
 80013dc:	e7d1      	b.n	8001382 <__udivmoddi4+0x256>
 80013de:	46d0      	mov	r8, sl
 80013e0:	e77d      	b.n	80012de <__udivmoddi4+0x1b2>
 80013e2:	4464      	add	r4, ip
 80013e4:	3802      	subs	r0, #2
 80013e6:	e749      	b.n	800127c <__udivmoddi4+0x150>
 80013e8:	3d02      	subs	r5, #2
 80013ea:	4462      	add	r2, ip
 80013ec:	e731      	b.n	8001252 <__udivmoddi4+0x126>
 80013ee:	4608      	mov	r0, r1
 80013f0:	e70a      	b.n	8001208 <__udivmoddi4+0xdc>
 80013f2:	4631      	mov	r1, r6
 80013f4:	e6ed      	b.n	80011d2 <__udivmoddi4+0xa6>
 80013f6:	bf00      	nop

080013f8 <__aeabi_idiv0>:
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001400:	b08e      	sub	sp, #56	; 0x38
 8001402:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001404:	f000 ff24 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 f868 	bl	80014dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Init();
 800140c:	f000 ff20 	bl	8002250 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 faca 	bl	80019a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001414:	f000 f8a4 	bl	8001560 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001418:	f000 fa9c 	bl	8001954 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800141c:	f000 f906 	bl	800162c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001420:	f000 fa30 	bl	8001884 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001424:	f000 f9ae 	bl	8001784 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001428:	f000 f8ca 	bl	80015c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

 fc_powerup();
 800142c:	f000 fb18 	bl	8001a60 <fc_powerup>
 config_gyro();
 8001430:	f000 fb9c 	bl	8001b6c <config_gyro>
 config_motors();
 8001434:	f000 fb58 	bl	8001ae8 <config_motors>
 config_wireless();
 8001438:	f000 fbaa 	bl	8001b90 <config_wireless>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	     get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 800143c:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <main+0xcc>)
 800143e:	4923      	ldr	r1, [pc, #140]	; (80014cc <main+0xd0>)
 8001440:	4823      	ldr	r0, [pc, #140]	; (80014d0 <main+0xd4>)
 8001442:	f005 f859 	bl	80064f8 <get_gyro>
	     get_Accl(&hi2c1, &Accl_Data) ;
 8001446:	4923      	ldr	r1, [pc, #140]	; (80014d4 <main+0xd8>)
 8001448:	4821      	ldr	r0, [pc, #132]	; (80014d0 <main+0xd4>)
 800144a:	f004 ffe5 	bl	8006418 <get_Accl>

	     printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <main+0xd0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ffe8 	bl	8000428 <__aeabi_f2d>
 8001458:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <main+0xd0>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ffe1 	bl	8000428 <__aeabi_f2d>
 8001466:	4604      	mov	r4, r0
 8001468:	460d      	mov	r5, r1
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <main+0xd0>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffda 	bl	8000428 <__aeabi_f2d>
 8001474:	4680      	mov	r8, r0
 8001476:	4689      	mov	r9, r1
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <main+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ffd3 	bl	8000428 <__aeabi_f2d>
 8001482:	4682      	mov	sl, r0
 8001484:	468b      	mov	fp, r1
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <main+0xd8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffcc 	bl	8000428 <__aeabi_f2d>
 8001490:	e9c7 0100 	strd	r0, r1, [r7]
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <main+0xd8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffc5 	bl	8000428 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80014a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014aa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80014ae:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80014b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014b6:	e9cd 4500 	strd	r4, r5, [sp]
 80014ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <main+0xdc>)
 80014c0:	f006 f86e 	bl	80075a0 <iprintf>
	     get_gyro(&hi2c1, &Gyro_Data, &Gyro_Calib) ;
 80014c4:	e7ba      	b.n	800143c <main+0x40>
 80014c6:	bf00      	nop
 80014c8:	200003dc 	.word	0x200003dc
 80014cc:	200003d0 	.word	0x200003d0
 80014d0:	200001f8 	.word	0x200001f8
 80014d4:	200003c4 	.word	0x200003c4
 80014d8:	08009ed0 	.word	0x08009ed0

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	; 0x40
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 f99e 	bl	800782c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001502:	2301      	movs	r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001506:	2310      	movs	r3, #16
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001512:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fa21 	bl	8003964 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001528:	f000 fb8e 	bl	8001c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2101      	movs	r1, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fc8e 	bl	8003e68 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001552:	f000 fb79 	bl	8001c48 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	3740      	adds	r7, #64	; 0x40
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <MX_I2C1_Init+0x58>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x54>)
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_I2C1_Init+0x5c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001576:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_I2C1_Init+0x54>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_I2C1_Init+0x54>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_I2C1_Init+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x54>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_I2C1_Init+0x54>)
 80015a0:	f001 f986 	bl	80028b0 <HAL_I2C_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015aa:	f000 fb4d 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001f8 	.word	0x200001f8
 80015b8:	40005400 	.word	0x40005400
 80015bc:	00061a80 	.word	0x00061a80

080015c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_SPI1_Init+0x64>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <MX_SPI1_Init+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_SPI1_Init+0x64>)
 80015cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI1_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI1_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_SPI1_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI1_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_SPI1_Init+0x64>)
 80015ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI1_Init+0x64>)
 80015f4:	2210      	movs	r2, #16
 80015f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_SPI1_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI1_Init+0x64>)
 800160c:	220a      	movs	r2, #10
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_SPI1_Init+0x64>)
 8001612:	f002 fdb7 	bl	8004184 <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800161c:	f000 fb14 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000024c 	.word	0x2000024c
 8001628:	40013000 	.word	0x40013000

0800162c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b092      	sub	sp, #72	; 0x48
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2220      	movs	r2, #32
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 f8e8 	bl	800782c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <MX_TIM1_Init+0x150>)
 800165e:	4a48      	ldr	r2, [pc, #288]	; (8001780 <MX_TIM1_Init+0x154>)
 8001660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 500;
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_TIM1_Init+0x150>)
 8001664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <MX_TIM1_Init+0x150>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <MX_TIM1_Init+0x150>)
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <MX_TIM1_Init+0x150>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167c:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_TIM1_Init+0x150>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_TIM1_Init+0x150>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001688:	483c      	ldr	r0, [pc, #240]	; (800177c <MX_TIM1_Init+0x150>)
 800168a:	f003 fb0f 	bl	8004cac <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001694:	f000 fad8 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a4:	4619      	mov	r1, r3
 80016a6:	4835      	ldr	r0, [pc, #212]	; (800177c <MX_TIM1_Init+0x150>)
 80016a8:	f004 f852 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016b2:	f000 fac9 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4828      	ldr	r0, [pc, #160]	; (800177c <MX_TIM1_Init+0x150>)
 80016dc:	f003 fd44 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80016e6:	f000 faaf 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 80016ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	2204      	movs	r2, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <MX_TIM1_Init+0x150>)
 80016fa:	f003 fd35 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001704:	f000 faa0 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2208      	movs	r2, #8
 8001712:	4619      	mov	r1, r3
 8001714:	4819      	ldr	r0, [pc, #100]	; (800177c <MX_TIM1_Init+0x150>)
 8001716:	f003 fd27 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001720:	f000 fa92 	bl	8001c48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	220c      	movs	r2, #12
 800172a:	4619      	mov	r1, r3
 800172c:	4813      	ldr	r0, [pc, #76]	; (800177c <MX_TIM1_Init+0x150>)
 800172e:	f003 fd1b 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001738:	f000 fa86 	bl	8001c48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM1_Init+0x150>)
 8001760:	f004 f854 	bl	800580c <HAL_TIMEx_ConfigBreakDeadTime>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800176a:	f000 fa6d 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM1_Init+0x150>)
 8001770:	f000 fb66 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3748      	adds	r7, #72	; 0x48
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200002a4 	.word	0x200002a4
 8001780:	40012c00 	.word	0x40012c00

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017be:	2240      	movs	r2, #64	; 0x40
 80017c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017ce:	482c      	ldr	r0, [pc, #176]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017d0:	f003 fa6c 	bl	8004cac <HAL_TIM_PWM_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017da:	f000 fa35 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	4619      	mov	r1, r3
 80017ec:	4824      	ldr	r0, [pc, #144]	; (8001880 <MX_TIM2_Init+0xfc>)
 80017ee:	f003 ffaf 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017f8:	f000 fa26 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fc:	2360      	movs	r3, #96	; 0x60
 80017fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 160;
 8001800:	23a0      	movs	r3, #160	; 0xa0
 8001802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	481b      	ldr	r0, [pc, #108]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001814:	f003 fca8 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800181e:	f000 fa13 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 80;
 8001822:	2350      	movs	r3, #80	; 0x50
 8001824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2204      	movs	r2, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_TIM2_Init+0xfc>)
 800182e:	f003 fc9b 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001838:	f000 fa06 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 40;
 800183c:	2328      	movs	r3, #40	; 0x28
 800183e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2208      	movs	r2, #8
 8001844:	4619      	mov	r1, r3
 8001846:	480e      	ldr	r0, [pc, #56]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001848:	f003 fc8e 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001852:	f000 f9f9 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 20;
 8001856:	2314      	movs	r3, #20
 8001858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	220c      	movs	r2, #12
 800185e:	4619      	mov	r1, r3
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001862:	f003 fc81 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800186c:	f000 f9ec 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <MX_TIM2_Init+0xfc>)
 8001872:	f000 fae5 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002ec 	.word	0x200002ec

08001884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_TIM3_Init+0xc8>)
 80018a8:	4a29      	ldr	r2, [pc, #164]	; (8001950 <MX_TIM3_Init+0xcc>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_TIM3_Init+0xc8>)
 80018ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_TIM3_Init+0xc8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <MX_TIM3_Init+0xc8>)
 80018bc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80018c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <MX_TIM3_Init+0xc8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_TIM3_Init+0xc8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ce:	481f      	ldr	r0, [pc, #124]	; (800194c <MX_TIM3_Init+0xc8>)
 80018d0:	f003 f9ec 	bl	8004cac <HAL_TIM_PWM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80018da:	f000 f9b5 	bl	8001c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	4619      	mov	r1, r3
 80018ec:	4817      	ldr	r0, [pc, #92]	; (800194c <MX_TIM3_Init+0xc8>)
 80018ee:	f003 ff2f 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80018f8:	f000 f9a6 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fc:	2360      	movs	r3, #96	; 0x60
 80018fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001900:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2208      	movs	r2, #8
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM3_Init+0xc8>)
 8001916:	f003 fc27 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001920:	f000 f992 	bl	8001c48 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	220c      	movs	r2, #12
 800192c:	4619      	mov	r1, r3
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_TIM3_Init+0xc8>)
 8001930:	f003 fc1a 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800193a:	f000 f985 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800193e:	4803      	ldr	r0, [pc, #12]	; (800194c <MX_TIM3_Init+0xc8>)
 8001940:	f000 fa7e 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000334 	.word	0x20000334
 8001950:	40000400 	.word	0x40000400

08001954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198c:	f003 ffa1 	bl	80058d2 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f000 f957 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000037c 	.word	0x2000037c
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_GPIO_Init+0xac>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2110      	movs	r1, #16
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019f2:	f000 ff45 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <MX_GPIO_Init+0xb4>)
 80019fe:	f000 ff3f 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a02:	2310      	movs	r3, #16
 8001a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	4619      	mov	r1, r3
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <MX_GPIO_Init+0xb0>)
 8001a1a:	f000 fdad 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4619      	mov	r1, r3
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_GPIO_Init+0xb4>)
 8001a38:	f000 fd9e 	bl	8002578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_GPIO_Init+0xb4>)
 8001a48:	f000 fd96 	bl	8002578 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40010c00 	.word	0x40010c00

08001a60 <fc_powerup>:

/* USER CODE BEGIN 4 */
void  fc_powerup(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
// turn the white and red led ON for a bit
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,0);
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <fc_powerup+0x84>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <fc_powerup+0x84>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001a74:	2108      	movs	r1, #8
 8001a76:	481b      	ldr	r0, [pc, #108]	; (8001ae4 <fc_powerup+0x84>)
 8001a78:	f003 f968 	bl	8004d4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001a7c:	210c      	movs	r1, #12
 8001a7e:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <fc_powerup+0x84>)
 8001a80:	f003 f964 	bl	8004d4c <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 8001a84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a88:	f000 fc44 	bl	8002314 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <fc_powerup+0x84>)
 8001a90:	f003 f9fe 	bl	8004e90 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 8001a94:	210c      	movs	r1, #12
 8001a96:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <fc_powerup+0x84>)
 8001a98:	f003 f9fa 	bl	8004e90 <HAL_TIM_PWM_Stop>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <fc_powerup+0x84>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,32000);
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <fc_powerup+0x84>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8001ab0:	2108      	movs	r1, #8
 8001ab2:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <fc_powerup+0x84>)
 8001ab4:	f003 f94a 	bl	8004d4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8001ab8:	210c      	movs	r1, #12
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <fc_powerup+0x84>)
 8001abc:	f003 f946 	bl	8004d4c <HAL_TIM_PWM_Start>
	HAL_Delay(1000) ;
 8001ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ac4:	f000 fc26 	bl	8002314 <HAL_Delay>
	HAL_Delay(1000) ;
 8001ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001acc:	f000 fc22 	bl	8002314 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3) ;
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <fc_powerup+0x84>)
 8001ad4:	f003 f9dc 	bl	8004e90 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4) ;
 8001ad8:	210c      	movs	r1, #12
 8001ada:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <fc_powerup+0x84>)
 8001adc:	f003 f9d8 	bl	8004e90 <HAL_TIM_PWM_Stop>

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000334 	.word	0x20000334

08001ae8 <config_motors>:

void config_motors() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1,5) ;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <config_motors+0x80>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2205      	movs	r2, #5
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_2,7) ;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <config_motors+0x80>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2207      	movs	r2, #7
 8001afa:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_3,9) ;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <config_motors+0x80>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2209      	movs	r2, #9
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_4,11) ;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <config_motors+0x80>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	220b      	movs	r2, #11
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4816      	ldr	r0, [pc, #88]	; (8001b68 <config_motors+0x80>)
 8001b10:	f003 f91c 	bl	8004d4c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <config_motors+0x80>)
 8001b18:	f003 f918 	bl	8004d4c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4812      	ldr	r0, [pc, #72]	; (8001b68 <config_motors+0x80>)
 8001b20:	f003 f914 	bl	8004d4c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b24:	210c      	movs	r1, #12
 8001b26:	4810      	ldr	r0, [pc, #64]	; (8001b68 <config_motors+0x80>)
 8001b28:	f003 f910 	bl	8004d4c <HAL_TIM_PWM_Start>

   HAL_Delay(1000) ;
 8001b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b30:	f000 fbf0 	bl	8002314 <HAL_Delay>
   HAL_Delay(1000) ;
 8001b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b38:	f000 fbec 	bl	8002314 <HAL_Delay>
   HAL_Delay(1000) ;
 8001b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b40:	f000 fbe8 	bl	8002314 <HAL_Delay>

   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1,0) ;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <config_motors+0x80>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_2,0) ;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <config_motors+0x80>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_3,0) ;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <config_motors+0x80>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_4,0) ;
 8001b5c:	4b02      	ldr	r3, [pc, #8]	; (8001b68 <config_motors+0x80>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40


}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002a4 	.word	0x200002a4

08001b6c <config_gyro>:
void config_gyro() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
   Self_test_mpu6050(&hi2c1) ;
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <config_gyro+0x1c>)
 8001b72:	f004 f87d 	bl	8005c70 <Self_test_mpu6050>
   Mpu6050_Init(&hi2c1) ;			//initalise gyroscope
 8001b76:	4804      	ldr	r0, [pc, #16]	; (8001b88 <config_gyro+0x1c>)
 8001b78:	f004 fafa 	bl	8006170 <Mpu6050_Init>
   gyro_calibrate(&hi2c1,  &Gyro_Calib);
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <config_gyro+0x20>)
 8001b7e:	4802      	ldr	r0, [pc, #8]	; (8001b88 <config_gyro+0x1c>)
 8001b80:	f004 fd5a 	bl	8006638 <gyro_calibrate>

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001f8 	.word	0x200001f8
 8001b8c:	200003dc 	.word	0x200003dc

08001b90 <config_wireless>:
// show the indication
}
void check_if_under_range() {

}
void config_wireless(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <config_wireless+0x64>)
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <config_wireless+0x68>)
 8001b98:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <config_wireless+0x64>)
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <config_wireless+0x64>)
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <config_wireless+0x6c>)
 8001ba4:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <config_wireless+0x64>)
 8001ba8:	2210      	movs	r2, #16
 8001baa:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <config_wireless+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <config_wireless+0x68>)
 8001bb0:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <config_wireless+0x64>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <config_wireless+0x64>)
 8001bbc:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <config_wireless+0x70>)
 8001bbe:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <config_wireless+0x74>)
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <config_wireless+0x64>)
 8001bc4:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <config_wireless+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 8001bcc:	e006      	b.n	8001bdc <config_wireless+0x4c>
	printf("init Failed \n");
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <config_wireless+0x78>)
 8001bd0:	f005 fd4c 	bl	800766c <puts>
	HAL_Delay(1000);
 8001bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd8:	f000 fb9c 	bl	8002314 <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <config_wireless+0x74>)
 8001bde:	f004 ff09 	bl	80069f4 <lora_init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f2      	bne.n	8001bce <config_wireless+0x3e>
	}
	printf("init success \n");
 8001be8:	4808      	ldr	r0, [pc, #32]	; (8001c0c <config_wireless+0x7c>)
 8001bea:	f005 fd3f 	bl	800766c <puts>

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003e8 	.word	0x200003e8
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	2000024c 	.word	0x2000024c
 8001c04:	20000404 	.word	0x20000404
 8001c08:	08009f08 	.word	0x08009f08
 8001c0c:	08009f18 	.word	0x08009f18

08001c10 <HAL_TIM_PeriodElapsedCallback>:
	  }

}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
	...

08001c24 <__io_putchar>:

void __io_putchar(int ch) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001c2c:	1d39      	adds	r1, r7, #4
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	2201      	movs	r2, #1
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <__io_putchar+0x20>)
 8001c36:	f003 fe9c 	bl	8005972 <HAL_UART_Transmit>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000037c 	.word	0x2000037c

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_MspInit+0x40>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_MspInit+0x40>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_MspInit+0x40>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_MspInit+0x40>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_MspInit+0x40>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_MspInit+0x40>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_I2C_MspInit+0x70>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d123      	bne.n	8001d00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cbe:	f043 0308 	orr.w	r3, r3, #8
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd0:	23c0      	movs	r3, #192	; 0xc0
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_I2C_MspInit+0x78>)
 8001ce4:	f000 fc48 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_I2C_MspInit+0x74>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010c00 	.word	0x40010c00

08001d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	; (8001d9c <HAL_SPI_MspInit+0x88>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d12f      	bne.n	8001d94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_SPI_MspInit+0x8c>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d64:	23a0      	movs	r3, #160	; 0xa0
 8001d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <HAL_SPI_MspInit+0x90>)
 8001d78:	f000 fbfe 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d7c:	2340      	movs	r3, #64	; 0x40
 8001d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <HAL_SPI_MspInit+0x90>)
 8001d90:	f000 fbf2 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010800 	.word	0x40010800

08001da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_TIM_PWM_MspInit+0x8c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10c      	bne.n	8001dd4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a1e      	ldr	r2, [pc, #120]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dd2:	e02a      	b.n	8001e2a <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ddc:	d114      	bne.n	8001e08 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	201c      	movs	r0, #28
 8001dfc:	f000 fb85 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e00:	201c      	movs	r0, #28
 8001e02:	f000 fb9e 	bl	8002542 <HAL_NVIC_EnableIRQ>
}
 8001e06:	e010      	b.n	8001e2a <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_TIM_PWM_MspInit+0x94>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10b      	bne.n	8001e2a <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a08      	ldr	r2, [pc, #32]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_TIM_PWM_MspInit+0x90>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40000400 	.word	0x40000400

08001e40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <HAL_TIM_MspPostInit+0x128>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d119      	bne.n	8001e94 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a41      	ldr	r2, [pc, #260]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001e78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2302      	movs	r3, #2
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4838      	ldr	r0, [pc, #224]	; (8001f70 <HAL_TIM_MspPostInit+0x130>)
 8001e8e:	f000 fb73 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e92:	e065      	b.n	8001f60 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d143      	bne.n	8001f26 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6193      	str	r3, [r2, #24]
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6193      	str	r3, [r2, #24]
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4823      	ldr	r0, [pc, #140]	; (8001f70 <HAL_TIM_MspPostInit+0x130>)
 8001ee2:	f000 fb49 	bl	8002578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481e      	ldr	r0, [pc, #120]	; (8001f74 <HAL_TIM_MspPostInit+0x134>)
 8001efc:	f000 fb3c 	bl	8002578 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_TIM_MspPostInit+0x138>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_MspPostInit+0x138>)
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	6053      	str	r3, [r2, #4]
}
 8001f24:	e01c      	b.n	8001f60 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_TIM_MspPostInit+0x13c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d117      	bne.n	8001f60 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001f36:	f043 0308 	orr.w	r3, r3, #8
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_TIM_MspPostInit+0x12c>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2302      	movs	r3, #2
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <HAL_TIM_MspPostInit+0x134>)
 8001f5c:	f000 fb0c 	bl	8002578 <HAL_GPIO_Init>
}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40010c00 	.word	0x40010c00
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40000400 	.word	0x40000400

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d12f      	bne.n	8002000 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480b      	ldr	r0, [pc, #44]	; (8002010 <HAL_UART_MspInit+0x90>)
 8001fe4:	f000 fac8 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_UART_MspInit+0x90>)
 8001ffc:	f000 fabc 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40004400 	.word	0x40004400
 800200c:	40021000 	.word	0x40021000
 8002010:	40010800 	.word	0x40010800

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <NMI_Handler+0x4>

0800201a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler+0x4>

08002026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <BusFault_Handler+0x4>

0800202c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler+0x4>

08002032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205a:	f000 f93f 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM2_IRQHandler+0x10>)
 800206a:	f002 ff75 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200002ec 	.word	0x200002ec

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_kill>:

int _kill(int pid, int sig)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002090:	f005 fc1e 	bl	80078d0 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	2216      	movs	r2, #22
 8002098:	601a      	str	r2, [r3, #0]
  return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_exit>:

void _exit (int status)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020ae:	f04f 31ff 	mov.w	r1, #4294967295
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffe7 	bl	8002086 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b8:	e7fe      	b.n	80020b8 <_exit+0x12>

080020ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e00a      	b.n	80020e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020cc:	f3af 8000 	nop.w
 80020d0:	4601      	mov	r1, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	60ba      	str	r2, [r7, #8]
 80020d8:	b2ca      	uxtb	r2, r1
 80020da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	dbf0      	blt.n	80020cc <_read+0x12>
  }

  return len;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e009      	b.n	800211a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	60ba      	str	r2, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fd88 	bl	8001c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	dbf1      	blt.n	8002106 <_write+0x12>
  }
  return len;
 8002122:	687b      	ldr	r3, [r7, #4]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_close>:

int _close(int file)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002152:	605a      	str	r2, [r3, #4]
  return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <_isatty>:

int _isatty(int file)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f005 fb88 	bl	80078d0 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20005000 	.word	0x20005000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	2000040c 	.word	0x2000040c
 80021f4:	20000560 	.word	0x20000560

080021f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002204:	f7ff fff8 	bl	80021f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800220a:	490c      	ldr	r1, [pc, #48]	; (800223c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002210:	e002      	b.n	8002218 <LoopCopyDataInit>

08002212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002216:	3304      	adds	r3, #4

08002218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800221c:	d3f9      	bcc.n	8002212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221e:	4a09      	ldr	r2, [pc, #36]	; (8002244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002220:	4c09      	ldr	r4, [pc, #36]	; (8002248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002224:	e001      	b.n	800222a <LoopFillZerobss>

08002226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002228:	3204      	adds	r2, #4

0800222a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800222c:	d3fb      	bcc.n	8002226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222e:	f005 fb55 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002232:	f7ff f8e3 	bl	80013fc <main>
  bx lr
 8002236:	4770      	bx	lr
  ldr r0, =_sdata
 8002238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800223c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002240:	0800a58c 	.word	0x0800a58c
  ldr r2, =_sbss
 8002244:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002248:	20000560 	.word	0x20000560

0800224c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC1_2_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_Init+0x28>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_Init+0x28>)
 800225a:	f043 0310 	orr.w	r3, r3, #16
 800225e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f947 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	200f      	movs	r0, #15
 8002268:	f000 f808 	bl	800227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fcf2 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f95f 	bl	800255e <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f927 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000008 	.word	0x20000008
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x1c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_IncTick+0x20>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <HAL_IncTick+0x20>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000410 	.word	0x20000410

08002300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_GetTick+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000410 	.word	0x20000410

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fff0 	bl	8002300 <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffe0 	bl	8002300 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <__NVIC_EnableIRQ+0x34>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff90 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff2d 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff42 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff90 	bl	800244c <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5f 	bl	80023f8 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff35 	bl	80023c0 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b08b      	sub	sp, #44	; 0x2c
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258a:	e169      	b.n	8002860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800258c:	2201      	movs	r2, #1
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f040 8158 	bne.w	800285a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a9a      	ldr	r2, [pc, #616]	; (8002818 <HAL_GPIO_Init+0x2a0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d05e      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025b4:	4a98      	ldr	r2, [pc, #608]	; (8002818 <HAL_GPIO_Init+0x2a0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d875      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025ba:	4a98      	ldr	r2, [pc, #608]	; (800281c <HAL_GPIO_Init+0x2a4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d058      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025c0:	4a96      	ldr	r2, [pc, #600]	; (800281c <HAL_GPIO_Init+0x2a4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d86f      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025c6:	4a96      	ldr	r2, [pc, #600]	; (8002820 <HAL_GPIO_Init+0x2a8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d052      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025cc:	4a94      	ldr	r2, [pc, #592]	; (8002820 <HAL_GPIO_Init+0x2a8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d869      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025d2:	4a94      	ldr	r2, [pc, #592]	; (8002824 <HAL_GPIO_Init+0x2ac>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d04c      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025d8:	4a92      	ldr	r2, [pc, #584]	; (8002824 <HAL_GPIO_Init+0x2ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d863      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025de:	4a92      	ldr	r2, [pc, #584]	; (8002828 <HAL_GPIO_Init+0x2b0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d046      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
 80025e4:	4a90      	ldr	r2, [pc, #576]	; (8002828 <HAL_GPIO_Init+0x2b0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d85d      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025ea:	2b12      	cmp	r3, #18
 80025ec:	d82a      	bhi.n	8002644 <HAL_GPIO_Init+0xcc>
 80025ee:	2b12      	cmp	r3, #18
 80025f0:	d859      	bhi.n	80026a6 <HAL_GPIO_Init+0x12e>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <HAL_GPIO_Init+0x80>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002673 	.word	0x08002673
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	0800265f 	.word	0x0800265f
 8002604:	080026a1 	.word	0x080026a1
 8002608:	080026a7 	.word	0x080026a7
 800260c:	080026a7 	.word	0x080026a7
 8002610:	080026a7 	.word	0x080026a7
 8002614:	080026a7 	.word	0x080026a7
 8002618:	080026a7 	.word	0x080026a7
 800261c:	080026a7 	.word	0x080026a7
 8002620:	080026a7 	.word	0x080026a7
 8002624:	080026a7 	.word	0x080026a7
 8002628:	080026a7 	.word	0x080026a7
 800262c:	080026a7 	.word	0x080026a7
 8002630:	080026a7 	.word	0x080026a7
 8002634:	080026a7 	.word	0x080026a7
 8002638:	080026a7 	.word	0x080026a7
 800263c:	08002655 	.word	0x08002655
 8002640:	08002669 	.word	0x08002669
 8002644:	4a79      	ldr	r2, [pc, #484]	; (800282c <HAL_GPIO_Init+0x2b4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800264a:	e02c      	b.n	80026a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	623b      	str	r3, [r7, #32]
          break;
 8002652:	e029      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	623b      	str	r3, [r7, #32]
          break;
 800265c:	e024      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	3308      	adds	r3, #8
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e01f      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	330c      	adds	r3, #12
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e01a      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800267a:	2304      	movs	r3, #4
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e013      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002688:	2308      	movs	r3, #8
 800268a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	611a      	str	r2, [r3, #16]
          break;
 8002692:	e009      	b.n	80026a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002694:	2308      	movs	r3, #8
 8002696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	615a      	str	r2, [r3, #20]
          break;
 800269e:	e003      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
          break;
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x130>
          break;
 80026a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d801      	bhi.n	80026b2 <HAL_GPIO_Init+0x13a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	e001      	b.n	80026b6 <HAL_GPIO_Init+0x13e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d802      	bhi.n	80026c4 <HAL_GPIO_Init+0x14c>
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	e002      	b.n	80026ca <HAL_GPIO_Init+0x152>
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	3b08      	subs	r3, #8
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	210f      	movs	r1, #15
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	6a39      	ldr	r1, [r7, #32]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80b1 	beq.w	800285a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f8:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <HAL_GPIO_Init+0x2b8>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a4c      	ldr	r2, [pc, #304]	; (8002830 <HAL_GPIO_Init+0x2b8>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_GPIO_Init+0x2b8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002710:	4a48      	ldr	r2, [pc, #288]	; (8002834 <HAL_GPIO_Init+0x2bc>)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a40      	ldr	r2, [pc, #256]	; (8002838 <HAL_GPIO_Init+0x2c0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <HAL_GPIO_Init+0x1ec>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3f      	ldr	r2, [pc, #252]	; (800283c <HAL_GPIO_Init+0x2c4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00d      	beq.n	8002760 <HAL_GPIO_Init+0x1e8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <HAL_GPIO_Init+0x2c8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <HAL_GPIO_Init+0x1e4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3d      	ldr	r2, [pc, #244]	; (8002844 <HAL_GPIO_Init+0x2cc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_GPIO_Init+0x1e0>
 8002754:	2303      	movs	r3, #3
 8002756:	e006      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002758:	2304      	movs	r3, #4
 800275a:	e004      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 800275c:	2302      	movs	r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002764:	2300      	movs	r3, #0
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	4093      	lsls	r3, r2
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002776:	492f      	ldr	r1, [pc, #188]	; (8002834 <HAL_GPIO_Init+0x2bc>)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	492c      	ldr	r1, [pc, #176]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4928      	ldr	r1, [pc, #160]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60cb      	str	r3, [r1, #12]
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	491e      	ldr	r1, [pc, #120]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4918      	ldr	r1, [pc, #96]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4914      	ldr	r1, [pc, #80]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d021      	beq.n	800284c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_GPIO_Init+0x2d0>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e021      	b.n	800285a <HAL_GPIO_Init+0x2e2>
 8002816:	bf00      	nop
 8002818:	10320000 	.word	0x10320000
 800281c:	10310000 	.word	0x10310000
 8002820:	10220000 	.word	0x10220000
 8002824:	10210000 	.word	0x10210000
 8002828:	10120000 	.word	0x10120000
 800282c:	10110000 	.word	0x10110000
 8002830:	40021000 	.word	0x40021000
 8002834:	40010000 	.word	0x40010000
 8002838:	40010800 	.word	0x40010800
 800283c:	40010c00 	.word	0x40010c00
 8002840:	40011000 	.word	0x40011000
 8002844:	40011400 	.word	0x40011400
 8002848:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_GPIO_Init+0x304>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	43db      	mvns	r3, r3
 8002854:	4909      	ldr	r1, [pc, #36]	; (800287c <HAL_GPIO_Init+0x304>)
 8002856:	4013      	ands	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	3301      	adds	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f ae8e 	bne.w	800258c <HAL_GPIO_Init+0x14>
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	372c      	adds	r7, #44	; 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40010400 	.word	0x40010400

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800289c:	e003      	b.n	80028a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e12b      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f9de 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f001 fbf0 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a81      	ldr	r2, [pc, #516]	; (8002b24 <HAL_I2C_Init+0x274>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <HAL_I2C_Init+0x84>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a80      	ldr	r2, [pc, #512]	; (8002b28 <HAL_I2C_Init+0x278>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e006      	b.n	8002942 <HAL_I2C_Init+0x92>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a7d      	ldr	r2, [pc, #500]	; (8002b2c <HAL_I2C_Init+0x27c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0e7      	b.n	8002b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a78      	ldr	r2, [pc, #480]	; (8002b30 <HAL_I2C_Init+0x280>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9b      	lsrs	r3, r3, #18
 8002954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a6a      	ldr	r2, [pc, #424]	; (8002b24 <HAL_I2C_Init+0x274>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d802      	bhi.n	8002984 <HAL_I2C_Init+0xd4>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	e009      	b.n	8002998 <HAL_I2C_Init+0xe8>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	4a69      	ldr	r2, [pc, #420]	; (8002b34 <HAL_I2C_Init+0x284>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	495c      	ldr	r1, [pc, #368]	; (8002b24 <HAL_I2C_Init+0x274>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d819      	bhi.n	80029ec <HAL_I2C_Init+0x13c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e59      	subs	r1, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029cc:	400b      	ands	r3, r1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_I2C_Init+0x138>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e59      	subs	r1, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	e051      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029e8:	2304      	movs	r3, #4
 80029ea:	e04f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_I2C_Init+0x168>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e012      	b.n	8002a3e <HAL_I2C_Init+0x18e>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	0099      	lsls	r1, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x196>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e022      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_I2C_Init+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e58      	subs	r0, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	440b      	add	r3, r1
 8002a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Init+0x1dc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1e58      	subs	r0, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	0099      	lsls	r1, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6911      	ldr	r1, [r2, #16]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	000186a0 	.word	0x000186a0
 8002b28:	001e847f 	.word	0x001e847f
 8002b2c:	003d08ff 	.word	0x003d08ff
 8002b30:	431bde83 	.word	0x431bde83
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	813b      	strh	r3, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b52:	f7ff fbd5 	bl	8002300 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	f040 80d9 	bne.w	8002d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2319      	movs	r3, #25
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	496d      	ldr	r1, [pc, #436]	; (8002d24 <HAL_I2C_Mem_Write+0x1ec>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fcc1 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0cc      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Mem_Write+0x56>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0c5      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d007      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2221      	movs	r2, #33	; 0x21
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a4d      	ldr	r2, [pc, #308]	; (8002d28 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf6:	88f8      	ldrh	r0, [r7, #6]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 faf8 	bl	80031fc <I2C_RequestMemoryWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d052      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e081      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fd86 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1aa      	bne.n	8002c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fd79 	bl	80037bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e016      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000

08002d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d4a:	f7ff fad9 	bl	8002300 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	f040 8244 	bne.w	80031e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2319      	movs	r3, #25
 8002d64:	2201      	movs	r2, #1
 8002d66:	4982      	ldr	r1, [pc, #520]	; (8002f70 <HAL_I2C_Mem_Read+0x244>)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fbc5 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
 8002d76:	e237      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Mem_Read+0x5a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e230      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d007      	beq.n	8002dac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2222      	movs	r2, #34	; 0x22
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2240      	movs	r2, #64	; 0x40
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a62      	ldr	r2, [pc, #392]	; (8002f74 <HAL_I2C_Mem_Read+0x248>)
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dee:	88f8      	ldrh	r0, [r7, #6]
 8002df0:	893a      	ldrh	r2, [r7, #8]
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fa92 	bl	8003328 <I2C_RequestMemoryRead>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1ec      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d113      	bne.n	8002e3e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e1c0      	b.n	80031c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d11e      	bne.n	8002e84 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e56:	b672      	cpsid	i
}
 8002e58:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e80:	b662      	cpsie	i
}
 8002e82:	e035      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11e      	bne.n	8002eca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9c:	b672      	cpsid	i
}
 8002e9e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ec6:	b662      	cpsie	i
}
 8002ec8:	e012      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ef0:	e166      	b.n	80031c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	f200 811f 	bhi.w	800313a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d123      	bne.n	8002f4c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fc9f 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e167      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f4a:	e139      	b.n	80031c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d152      	bne.n	8002ffa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4906      	ldr	r1, [pc, #24]	; (8002f78 <HAL_I2C_Mem_Read+0x24c>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 faca 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e13c      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000
 8002f78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fc2:	b662      	cpsie	i
}
 8002fc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ff8:	e0e2      	b.n	80031c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	2200      	movs	r2, #0
 8003002:	497b      	ldr	r1, [pc, #492]	; (80031f0 <HAL_I2C_Mem_Read+0x4c4>)
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa77 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0e9      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003024:	b672      	cpsid	i
}
 8003026:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800305a:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_I2C_Mem_Read+0x4c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <HAL_I2C_Mem_Read+0x4cc>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0a1a      	lsrs	r2, r3, #8
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00da      	lsls	r2, r3, #3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	3b01      	subs	r3, #1
 8003078:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d118      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030a2:	b662      	cpsie	i
}
 80030a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e09a      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d1d9      	bne.n	8003074 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003102:	b662      	cpsie	i
}
 8003104:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003138:	e042      	b.n	80031c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fb84 	bl	800384c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e04c      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d118      	bne.n	80031c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f ae94 	bne.w	8002ef2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	00010004 	.word	0x00010004
 80031f4:	20000000 	.word	0x20000000
 80031f8:	14f8b589 	.word	0x14f8b589

080031fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	4608      	mov	r0, r1
 8003206:	4611      	mov	r1, r2
 8003208:	461a      	mov	r2, r3
 800320a:	4603      	mov	r3, r0
 800320c:	817b      	strh	r3, [r7, #10]
 800320e:	460b      	mov	r3, r1
 8003210:	813b      	strh	r3, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	2200      	movs	r2, #0
 800322e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f960 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d103      	bne.n	8003256 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e05f      	b.n	800331a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	492d      	ldr	r1, [pc, #180]	; (8003324 <I2C_RequestMemoryWrite+0x128>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f9bb 	bl	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e04c      	b.n	800331a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fa46 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e02b      	b.n	800331a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c8:	893b      	ldrh	r3, [r7, #8]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	e021      	b.n	8003318 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6a39      	ldr	r1, [r7, #32]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fa20 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00d      	beq.n	800330e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d107      	bne.n	800330a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e005      	b.n	800331a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330e:	893b      	ldrh	r3, [r7, #8]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	00010002 	.word	0x00010002

08003328 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	817b      	strh	r3, [r7, #10]
 800333a:	460b      	mov	r3, r1
 800333c:	813b      	strh	r3, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003360:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2200      	movs	r2, #0
 800336a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8c2 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003388:	d103      	bne.n	8003392 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0aa      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	4952      	ldr	r1, [pc, #328]	; (80034f4 <I2C_RequestMemoryRead+0x1cc>)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f91d 	bl	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e097      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9a8 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e076      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e021      	b.n	8003454 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003410:	893b      	ldrh	r3, [r7, #8]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	b29b      	uxth	r3, r3
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f982 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e050      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	6a39      	ldr	r1, [r7, #32]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f967 	bl	800372c <I2C_WaitOnTXEFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2b04      	cmp	r3, #4
 800346a:	d107      	bne.n	800347c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e035      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2200      	movs	r2, #0
 8003498:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f82b 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	d103      	bne.n	80034c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e013      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	6a3a      	ldr	r2, [r7, #32]
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <I2C_RequestMemoryRead+0x1cc>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f886 	bl	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	00010002 	.word	0x00010002

080034f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003508:	e048      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d044      	beq.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fe fef5 	bl	8002300 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d139      	bne.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d10d      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	e00c      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x70>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	429a      	cmp	r2, r3
 800356c:	d116      	bne.n	800359c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e023      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10d      	bne.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	e00c      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d093      	beq.n	800350a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035fa:	e071      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360a:	d123      	bne.n	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e067      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d041      	beq.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fe fe50 	bl	8002300 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d136      	bne.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10c      	bne.n	8003696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e00b      	b.n	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf14      	ite	ne
 80036a8:	2301      	movne	r3, #1
 80036aa:	2300      	moveq	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e021      	b.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10c      	bne.n	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e00b      	b.n	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f af6d 	bne.w	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003738:	e034      	b.n	80037a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f8e3 	bl	8003906 <I2C_IsAcknowledgeFailed>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e034      	b.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d028      	beq.n	80037a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fdd5 	bl	8002300 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11d      	bne.n	80037a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d016      	beq.n	80037a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e007      	b.n	80037b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d1c3      	bne.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f89b 	bl	8003906 <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d028      	beq.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fd8d 	bl	8002300 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11d      	bne.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d1c3      	bne.n	80037ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	e049      	b.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d119      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0210 	mvn.w	r2, #16
 8003870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e030      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fd30 	bl	8002300 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11d      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d016      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d1ae      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d11b      	bne.n	8003956 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003926:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
	...

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e272      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8087 	beq.w	8003a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003984:	4b92      	ldr	r3, [pc, #584]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d112      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
 800399c:	4b8c      	ldr	r3, [pc, #560]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039aa:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d06c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x12c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d168      	bne.n	8003a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e24c      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x76>
 80039cc:	4b80      	ldr	r3, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e02e      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCC_OscConfig+0x98>
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7a      	ldr	r2, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0xbc>
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a71      	ldr	r2, [pc, #452]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b6f      	ldr	r3, [pc, #444]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0xd4>
 8003a20:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a67      	ldr	r2, [pc, #412]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d013      	beq.n	8003a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fc5e 	bl	8002300 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fe fc5a 	bl	8002300 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e200      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe4>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc4a 	bl	8002300 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fc46 	bl	8002300 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e1ec      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x10c>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d11c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
 8003ab6:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d116      	bne.n	8003af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e1c0      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4939      	ldr	r1, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	e03a      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fbff 	bl	8002300 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b06:	f7fe fbfb 	bl	8002300 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e1a1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	e015      	b.n	8003b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3a:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fbde 	bl	8002300 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe fbda 	bl	8002300 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e180      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03a      	beq.n	8003be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fbbe 	bl	8002300 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fbba 	bl	8002300 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e160      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ba6:	2001      	movs	r0, #1
 8003ba8:	f000 face 	bl	8004148 <RCC_Delay>
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fba4 	bl	8002300 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bba:	e00f      	b.n	8003bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fba0 	bl	8002300 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d908      	bls.n	8003bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e146      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	42420000 	.word	0x42420000
 8003bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b92      	ldr	r3, [pc, #584]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e9      	bne.n	8003bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a6 	beq.w	8003d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10d      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c10:	61d3      	str	r3, [r2, #28]
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d118      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fb61 	bl	8002300 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c42:	f7fe fb5d 	bl	8002300 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b64      	cmp	r3, #100	; 0x64
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e103      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <HAL_RCC_OscConfig+0x4c8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x312>
 8003c68:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a6e      	ldr	r2, [pc, #440]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	e02d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x334>
 8003c7e:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a69      	ldr	r2, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e01c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCC_OscConfig+0x356>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a5d      	ldr	r2, [pc, #372]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6213      	str	r3, [r2, #32]
 8003cb8:	e00b      	b.n	8003cd2 <HAL_RCC_OscConfig+0x36e>
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	6213      	str	r3, [r2, #32]
 8003cc6:	4b58      	ldr	r3, [pc, #352]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4a57      	ldr	r2, [pc, #348]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f023 0304 	bic.w	r3, r3, #4
 8003cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fb11 	bl	8002300 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fb0d 	bl	8002300 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e0b1      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x37e>
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fafb 	bl	8002300 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe faf7 	bl	8002300 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e09b      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ee      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d36:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d061      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d146      	bne.n	8003dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe facb 	bl	8002300 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe fac7 	bl	8002300 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e06d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4921      	ldr	r1, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a19      	ldr	r1, [r3, #32]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	430b      	orrs	r3, r1
 8003dba:	491b      	ldr	r1, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fa9b 	bl	8002300 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe fa97 	bl	8002300 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x46a>
 8003dec:	e035      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fa84 	bl	8002300 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe fa80 	bl	8002300 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e026      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x498>
 8003e1a:	e01e      	b.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e019      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_OscConfig+0x500>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0d0      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	4965      	ldr	r1, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d040      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d115      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e073      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4936      	ldr	r1, [pc, #216]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe f9d2 	bl	8002300 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe f9ce 	bl	8002300 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e053      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d210      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0207 	bic.w	r2, r3, #7
 8003f9e:	4922      	ldr	r1, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1cc>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe f930 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40021000 	.word	0x40021000
 8004030:	0800a1a0 	.word	0x0800a1a0
 8004034:	20000000 	.word	0x20000000
 8004038:	20000004 	.word	0x20000004

0800403c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d002      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x30>
 8004066:	2b08      	cmp	r3, #8
 8004068:	d003      	beq.n	8004072 <HAL_RCC_GetSysClockFreq+0x36>
 800406a:	e027      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800406e:	613b      	str	r3, [r7, #16]
      break;
 8004070:	e027      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800409e:	fb03 f202 	mul.w	r2, r3, r2
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e004      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	693b      	ldr	r3, [r7, #16]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	0800a1b8 	.word	0x0800a1b8
 80040dc:	0800a1c8 	.word	0x0800a1c8
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000000 	.word	0x20000000

080040f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040fc:	f7ff fff2 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	0a1b      	lsrs	r3, r3, #8
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK1Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	0800a1b0 	.word	0x0800a1b0

08004120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004124:	f7ff ffde 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	0adb      	lsrs	r3, r3, #11
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	0800a1b0 	.word	0x0800a1b0

08004148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <RCC_Delay+0x34>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <RCC_Delay+0x38>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0a5b      	lsrs	r3, r3, #9
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004164:	bf00      	nop
  }
  while (Delay --);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1e5a      	subs	r2, r3, #1
 800416a:	60fa      	str	r2, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f9      	bne.n	8004164 <RCC_Delay+0x1c>
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	20000000 	.word	0x20000000
 8004180:	10624dd3 	.word	0x10624dd3

08004184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e076      	b.n	8004284 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d108      	bne.n	80041b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d009      	beq.n	80041bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
 80041ae:	e005      	b.n	80041bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fd9c 	bl	8001d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	ea42 0103 	orr.w	r1, r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	0c1a      	lsrs	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f002 0204 	and.w	r2, r2, #4
 8004262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Transmit+0x22>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e12d      	b.n	800450a <HAL_SPI_Transmit+0x27e>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b6:	f7fe f823 	bl	8002300 <HAL_GetTick>
 80042ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d002      	beq.n	80042d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
 80042ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d0:	e116      	b.n	8004500 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_SPI_Transmit+0x52>
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042e2:	e10d      	b.n	8004500 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2203      	movs	r2, #3
 80042e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432a:	d10f      	bne.n	800434c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d007      	beq.n	800436a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004372:	d14f      	bne.n	8004414 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Transmit+0xf6>
 800437c:	8afb      	ldrh	r3, [r7, #22]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d142      	bne.n	8004408 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a6:	e02f      	b.n	8004408 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d112      	bne.n	80043dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80043da:	e015      	b.n	8004408 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043dc:	f7fd ff90 	bl	8002300 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d803      	bhi.n	80043f4 <HAL_SPI_Transmit+0x168>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Transmit+0x16e>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004406:	e07b      	b.n	8004500 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ca      	bne.n	80043a8 <HAL_SPI_Transmit+0x11c>
 8004412:	e050      	b.n	80044b6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_SPI_Transmit+0x196>
 800441c:	8afb      	ldrh	r3, [r7, #22]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d144      	bne.n	80044ac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004448:	e030      	b.n	80044ac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d113      	bne.n	8004480 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	7812      	ldrb	r2, [r2, #0]
 8004464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	86da      	strh	r2, [r3, #54]	; 0x36
 800447e:	e015      	b.n	80044ac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004480:	f7fd ff3e 	bl	8002300 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d803      	bhi.n	8004498 <HAL_SPI_Transmit+0x20c>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d102      	bne.n	800449e <HAL_SPI_Transmit+0x212>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044aa:	e029      	b.n	8004500 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1c9      	bne.n	800444a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fbd8 	bl	8004c70 <SPI_EndRxTxTransaction>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	77fb      	strb	r3, [r7, #31]
 80044f6:	e003      	b.n	8004500 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004508:	7ffb      	ldrb	r3, [r7, #31]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b088      	sub	sp, #32
 8004516:	af02      	add	r7, sp, #8
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d002      	beq.n	8004538 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004536:	e0fb      	b.n	8004730 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004540:	d112      	bne.n	8004568 <HAL_SPI_Receive+0x56>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10e      	bne.n	8004568 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2204      	movs	r2, #4
 800454e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f8ef 	bl	8004742 <HAL_SPI_TransmitReceive>
 8004564:	4603      	mov	r3, r0
 8004566:	e0e8      	b.n	800473a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_SPI_Receive+0x64>
 8004572:	2302      	movs	r3, #2
 8004574:	e0e1      	b.n	800473a <HAL_SPI_Receive+0x228>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800457e:	f7fd febf 	bl	8002300 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Receive+0x7e>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004594:	e0cc      	b.n	8004730 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2204      	movs	r2, #4
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d10f      	bne.n	80045fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d16a      	bne.n	80046fa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004624:	e032      	b.n	800468c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d115      	bne.n	8004660 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f103 020c 	add.w	r2, r3, #12
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800465e:	e015      	b.n	800468c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004660:	f7fd fe4e 	bl	8002300 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d803      	bhi.n	8004678 <HAL_SPI_Receive+0x166>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d102      	bne.n	800467e <HAL_SPI_Receive+0x16c>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800468a:	e051      	b.n	8004730 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1c7      	bne.n	8004626 <HAL_SPI_Receive+0x114>
 8004696:	e035      	b.n	8004704 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d113      	bne.n	80046ce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	b292      	uxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046cc:	e015      	b.n	80046fa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ce:	f7fd fe17 	bl	8002300 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d803      	bhi.n	80046e6 <HAL_SPI_Receive+0x1d4>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d102      	bne.n	80046ec <HAL_SPI_Receive+0x1da>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046f8:	e01a      	b.n	8004730 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1c9      	bne.n	8004698 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fa5f 	bl	8004bcc <SPI_EndRxTransaction>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
 8004726:	e003      	b.n	8004730 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08c      	sub	sp, #48	; 0x30
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004750:	2301      	movs	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x26>
 8004764:	2302      	movs	r3, #2
 8004766:	e198      	b.n	8004a9a <HAL_SPI_TransmitReceive+0x358>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004770:	f7fd fdc6 	bl	8002300 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800478a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800478e:	2b01      	cmp	r3, #1
 8004790:	d00f      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x70>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004798:	d107      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x68>
 80047a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d003      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047b0:	e16d      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x82>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x82>
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047ca:	e160      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d003      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2205      	movs	r2, #5
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	887a      	ldrh	r2, [r7, #2]
 80047f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	887a      	ldrh	r2, [r7, #2]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d007      	beq.n	8004834 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d17c      	bne.n	8004938 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_TransmitReceive+0x10a>
 8004846:	8b7b      	ldrh	r3, [r7, #26]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d16a      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004870:	e057      	b.n	8004922 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11b      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x176>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x176>
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d113      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d119      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x1b8>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d014      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	b292      	uxth	r2, r2
 80048dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	1c9a      	adds	r2, r3, #2
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048f6:	2301      	movs	r3, #1
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048fa:	f7fd fd01 	bl	8002300 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004906:	429a      	cmp	r2, r3
 8004908:	d80b      	bhi.n	8004922 <HAL_SPI_TransmitReceive+0x1e0>
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d007      	beq.n	8004922 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004920:	e0b5      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1a2      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x130>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d19d      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x130>
 8004936:	e080      	b.n	8004a3a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x204>
 8004940:	8b7b      	ldrh	r3, [r7, #26]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d16f      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496c:	e05b      	b.n	8004a26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d11c      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x274>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d017      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x274>
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d114      	bne.n	80049b6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d119      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x2b6>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d014      	beq.n	80049f8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049f4:	2301      	movs	r3, #1
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049f8:	f7fd fc82 	bl	8002300 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d803      	bhi.n	8004a10 <HAL_SPI_TransmitReceive+0x2ce>
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d102      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x2d4>
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d107      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a24:	e033      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d19e      	bne.n	800496e <HAL_SPI_TransmitReceive+0x22c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d199      	bne.n	800496e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f916 	bl	8004c70 <SPI_EndRxTxTransaction>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d006      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a56:	e01a      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a84:	e003      	b.n	8004a8e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3730      	adds	r7, #48	; 0x30
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004acc:	f7fd fc18 	bl	8002300 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004adc:	f7fd fc10 	bl	8002300 <HAL_GetTick>
 8004ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ae2:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	015b      	lsls	r3, r3, #5
 8004ae8:	0d1b      	lsrs	r3, r3, #20
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	fb02 f303 	mul.w	r3, r2, r3
 8004af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004af2:	e054      	b.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afa:	d050      	beq.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004afc:	f7fd fc00 	bl	8002300 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d902      	bls.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d13d      	bne.n	8004b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d111      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b34:	d004      	beq.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d107      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b58:	d10f      	bne.n	8004b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e017      	b.n	8004bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d19b      	bne.n	8004af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d117      	bne.n	8004c40 <SPI_EndRxTransaction+0x74>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c18:	d112      	bne.n	8004c40 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2101      	movs	r1, #1
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff ff49 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01a      	beq.n	8004c66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e013      	b.n	8004c68 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff36 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e000      	b.n	8004c68 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff ff18 	bl	8004abc <SPI_WaitFlagStateUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f043 0220 	orr.w	r2, r3, #32
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e000      	b.n	8004ca4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e041      	b.n	8004d42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fd f868 	bl	8001da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f000 fb22 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_TIM_PWM_Start+0x24>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e022      	b.n	8004db6 <HAL_TIM_PWM_Start+0x6a>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d109      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x3e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	bf14      	ite	ne
 8004d82:	2301      	movne	r3, #1
 8004d84:	2300      	moveq	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	e015      	b.n	8004db6 <HAL_TIM_PWM_Start+0x6a>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d109      	bne.n	8004da4 <HAL_TIM_PWM_Start+0x58>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_PWM_Start+0x6a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	bf14      	ite	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	2300      	moveq	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e05e      	b.n	8004e7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_PWM_Start+0x82>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dcc:	e013      	b.n	8004df6 <HAL_TIM_PWM_Start+0xaa>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0x92>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ddc:	e00b      	b.n	8004df6 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	e003      	b.n	8004df6 <HAL_TIM_PWM_Start+0xaa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fc82 	bl	8005708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_TIM_PWM_Start+0x138>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d107      	bne.n	8004e1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_TIM_PWM_Start+0x138>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_TIM_PWM_Start+0xfa>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d009      	beq.n	8004e46 <HAL_TIM_PWM_Start+0xfa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_TIM_PWM_Start+0x13c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIM_PWM_Start+0xfa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <HAL_TIM_PWM_Start+0x140>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	d010      	beq.n	8004e7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e68:	e007      	b.n	8004e7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800

08004e90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fc30 	bl	8005708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <HAL_TIM_PWM_Stop+0xc4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d117      	bne.n	8004ee2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10f      	bne.n	8004ee2 <HAL_TIM_PWM_Stop+0x52>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a1a      	ldr	r2, [r3, #32]
 8004ec8:	f240 4344 	movw	r3, #1092	; 0x444
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_TIM_PWM_Stop+0x52>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a1a      	ldr	r2, [r3, #32]
 8004ee8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_TIM_PWM_Stop+0x82>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a1a      	ldr	r2, [r3, #32]
 8004ef8:	f240 4344 	movw	r3, #1092	; 0x444
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_PWM_Stop+0x82>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Stop+0x92>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f20:	e013      	b.n	8004f4a <HAL_TIM_PWM_Stop+0xba>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d104      	bne.n	8004f32 <HAL_TIM_PWM_Stop+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	e00b      	b.n	8004f4a <HAL_TIM_PWM_Stop+0xba>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Stop+0xb2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f40:	e003      	b.n	8004f4a <HAL_TIM_PWM_Stop+0xba>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40012c00 	.word	0x40012c00

08004f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d122      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0202 	mvn.w	r2, #2
 8004f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9af 	bl	80052fe <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9a2 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9b1 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d122      	bne.n	8005008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d11b      	bne.n	8005008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0204 	mvn.w	r2, #4
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f985 	bl	80052fe <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f978 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f987 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b08      	cmp	r3, #8
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0208 	mvn.w	r2, #8
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2204      	movs	r2, #4
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f95b 	bl	80052fe <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f94e 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f95d 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b10      	cmp	r3, #16
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b10      	cmp	r3, #16
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0210 	mvn.w	r2, #16
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2208      	movs	r2, #8
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f931 	bl	80052fe <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f924 	bl	80052ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f933 	bl	8005310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0201 	mvn.w	r2, #1
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fc fd9a 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	d10e      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b80      	cmp	r3, #128	; 0x80
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fbdc 	bl	80058c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8f7 	bl	8005322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b20      	cmp	r3, #32
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b20      	cmp	r3, #32
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0220 	mvn.w	r2, #32
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fba7 	bl	80058ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0ae      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	f200 809f 	bhi.w	80052d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080052d5 	.word	0x080052d5
 80051a4:	080052d5 	.word	0x080052d5
 80051a8:	080052d5 	.word	0x080052d5
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080052d5 	.word	0x080052d5
 80051b4:	080052d5 	.word	0x080052d5
 80051b8:	080052d5 	.word	0x080052d5
 80051bc:	08005253 	.word	0x08005253
 80051c0:	080052d5 	.word	0x080052d5
 80051c4:	080052d5 	.word	0x080052d5
 80051c8:	080052d5 	.word	0x080052d5
 80051cc:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f90e 	bl	80053f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]
      break;
 800520e:	e064      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f954 	bl	80054c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]
      break;
 8005250:	e043      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f99d 	bl	8005598 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0208 	orr.w	r2, r2, #8
 800526c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0204 	bic.w	r2, r2, #4
 800527c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
      break;
 8005290:	e023      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f9e7 	bl	800566c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
      break;
 80052d2:	e002      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a29      	ldr	r2, [pc, #164]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d007      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a26      	ldr	r2, [pc, #152]	; (80053f0 <TIM_Base_SetConfig+0xbc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_Base_SetConfig+0x30>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <TIM_Base_SetConfig+0xbc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <TIM_Base_SetConfig+0xc0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a07      	ldr	r2, [pc, #28]	; (80053ec <TIM_Base_SetConfig+0xb8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d103      	bne.n	80053dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	615a      	str	r2, [r3, #20]
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 0201 	bic.w	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0302 	bic.w	r3, r3, #2
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <TIM_OC1_SetConfig+0xc8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <TIM_OC1_SetConfig+0xc8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d111      	bne.n	800549a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00

080054c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f023 0210 	bic.w	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0320 	bic.w	r3, r3, #32
 800550e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <TIM_OC2_SetConfig+0xd0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10d      	bne.n	8005540 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC2_SetConfig+0xd0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d113      	bne.n	8005570 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00

08005598 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d10d      	bne.n	8005612 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <TIM_OC3_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00

0800566c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a0f      	ldr	r2, [pc, #60]	; (8005704 <TIM_OC4_SetConfig+0x98>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d109      	bne.n	80056e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	019b      	lsls	r3, r3, #6
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	40012c00 	.word	0x40012c00

08005708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2201      	movs	r2, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	43db      	mvns	r3, r3
 800572a:	401a      	ands	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 031f 	and.w	r3, r3, #31
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	fa01 f303 	lsl.w	r3, r1, r3
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e046      	b.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d009      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a10      	ldr	r2, [pc, #64]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10c      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800

0800580c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005824:	2302      	movs	r3, #2
 8005826:	e03d      	b.n	80058a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e042      	b.n	800596a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fc fb41 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2224      	movs	r2, #36	; 0x24
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005914:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f91c 	bl	8005b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800592a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800593a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800594a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b08a      	sub	sp, #40	; 0x28
 8005976:	af02      	add	r7, sp, #8
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	d16d      	bne.n	8005a6e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_UART_Transmit+0x2c>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e066      	b.n	8005a70 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2221      	movs	r2, #33	; 0x21
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059b0:	f7fc fca6 	bl	8002300 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ca:	d108      	bne.n	80059de <HAL_UART_Transmit+0x6c>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e003      	b.n	80059e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059e6:	e02a      	b.n	8005a3e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2200      	movs	r2, #0
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f840 	bl	8005a78 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e036      	b.n	8005a70 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e007      	b.n	8005a30 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1cf      	bne.n	80059e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2140      	movs	r1, #64	; 0x40
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f810 	bl	8005a78 <UART_WaitOnFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e006      	b.n	8005a70 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a6e:	2302      	movs	r3, #2
  }
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b090      	sub	sp, #64	; 0x40
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	e050      	b.n	8005b2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d04c      	beq.n	8005b2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a98:	f7fc fc32 	bl	8002300 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d241      	bcs.n	8005b2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac8:	637a      	str	r2, [r7, #52]	; 0x34
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	613b      	str	r3, [r7, #16]
   return(result);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3314      	adds	r3, #20
 8005afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005afc:	623a      	str	r2, [r7, #32]
 8005afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	69f9      	ldr	r1, [r7, #28]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e00f      	b.n	8005b4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4013      	ands	r3, r2
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	bf0c      	ite	eq
 8005b3c:	2301      	moveq	r3, #1
 8005b3e:	2300      	movne	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d09f      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3740      	adds	r7, #64	; 0x40
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b8e:	f023 030c 	bic.w	r3, r3, #12
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <UART_SetConfig+0x114>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fe fab0 	bl	8004120 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	e002      	b.n	8005bca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bc4:	f7fe fa98 	bl	80040f8 <HAL_RCC_GetPCLK1Freq>
 8005bc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009a      	lsls	r2, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <UART_SetConfig+0x118>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	0119      	lsls	r1, r3, #4
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009a      	lsls	r2, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c00:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <UART_SetConfig+0x118>)
 8005c02:	fba3 0302 	umull	r0, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2064      	movs	r0, #100	; 0x64
 8005c0a:	fb00 f303 	mul.w	r3, r0, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	3332      	adds	r3, #50	; 0x32
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <UART_SetConfig+0x118>)
 8005c16:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c20:	4419      	add	r1, r3
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009a      	lsls	r2, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <UART_SetConfig+0x118>)
 8005c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2064      	movs	r0, #100	; 0x64
 8005c42:	fb00 f303 	mul.w	r3, r0, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a07      	ldr	r2, [pc, #28]	; (8005c6c <UART_SetConfig+0x118>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40013800 	.word	0x40013800
 8005c6c:	51eb851f 	.word	0x51eb851f

08005c70 <Self_test_mpu6050>:
#include "mpu6050_driver.h"
#define DEBUG_mpu 0
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

void Self_test_mpu6050(I2C_HandleTypeDef *hi2c) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b092      	sub	sp, #72	; 0x48
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]

	 uint8_t data[4] = {0} ;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t  Gyro_ST[3] = {0};
 8005c7c:	4bc8      	ldr	r3, [pc, #800]	; (8005fa0 <Self_test_mpu6050+0x330>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c82:	2300      	movs	r3, #0
 8005c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 uint8_t  ACCL_ST[3] = {0} ;
 8005c88:	4bc5      	ldr	r3, [pc, #788]	; (8005fa0 <Self_test_mpu6050+0x330>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 float Gyro_FT[3] = {0} ;
 8005c94:	f107 0318 	add.w	r3, r7, #24
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
	 float Accl_FT[3] = {0} ;
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	609a      	str	r2, [r3, #8]

	 // begin test
	 data[0] = 0xE0;
 8005cac:	23e0      	movs	r3, #224	; 0xe0
 8005cae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable gyro self test
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb6:	9302      	str	r3, [sp, #8]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	221b      	movs	r2, #27
 8005cc6:	21d0      	movs	r1, #208	; 0xd0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fc ff35 	bl	8002b38 <HAL_I2C_Mem_Write>
	 data[0] = 0xF0 ;
 8005cce:	23f0      	movs	r3, #240	; 0xf0
 8005cd0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable accel self test
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	9302      	str	r3, [sp, #8]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	221c      	movs	r2, #28
 8005ce8:	21d0      	movs	r1, #208	; 0xd0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc ff24 	bl	8002b38 <HAL_I2C_Mem_Write>
	 HAL_Delay(150) ;
 8005cf0:	2096      	movs	r0, #150	; 0x96
 8005cf2:	f7fc fb0f 	bl	8002314 <HAL_Delay>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_X, 1, &data[0], 1, HAL_MAX_DELAY) ;
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	9302      	str	r3, [sp, #8]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2301      	movs	r3, #1
 8005d08:	220d      	movs	r2, #13
 8005d0a:	21d0      	movs	r1, #208	; 0xd0
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fd f80d 	bl	8002d2c <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Y, 1, &data[1], 1, HAL_MAX_DELAY) ;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d20:	3301      	adds	r3, #1
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2301      	movs	r3, #1
 8005d26:	220e      	movs	r2, #14
 8005d28:	21d0      	movs	r1, #208	; 0xd0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fffe 	bl	8002d2c <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Z, 1, &data[2], 1, HAL_MAX_DELAY) ;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	2301      	movs	r3, #1
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d3e:	3302      	adds	r3, #2
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2301      	movs	r3, #1
 8005d44:	220f      	movs	r2, #15
 8005d46:	21d0      	movs	r1, #208	; 0xd0
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fc ffef 	bl	8002d2c <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_A, 1, &data[3], 1, HAL_MAX_DELAY) ;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	2301      	movs	r3, #1
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d5c:	3303      	adds	r3, #3
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2301      	movs	r3, #1
 8005d62:	2210      	movs	r2, #16
 8005d64:	21d0      	movs	r1, #208	; 0xd0
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc ffe0 	bl	8002d2c <HAL_I2C_Mem_Read>

	 Gyro_ST[0] = (data[0] & 0x1F) ;	// X
 8005d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 Gyro_ST[1] = (data[1] & 0x1F) ;	// Y
 8005d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 Gyro_ST[2] = (data[2] & 0x1F) ;	// Z
 8005d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	 ACCL_ST[0] = (((data[0] &  0xE0 ) >> 3) | ((data[3] & 0x30 ) >> 4));	//X
 8005d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d9a:	10db      	asrs	r3, r3, #3
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	f003 031c 	and.w	r3, r3, #28
 8005da2:	b25a      	sxtb	r2, r3
 8005da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005da8:	111b      	asrs	r3, r3, #4
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 ACCL_ST[1] = (((data[1] &  0xE0 ) >> 3) | ((data[3] & 0x0C ) >> 2));	//Y
 8005dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005dc0:	10db      	asrs	r3, r3, #3
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f003 031c 	and.w	r3, r3, #28
 8005dc8:	b25a      	sxtb	r2, r3
 8005dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dce:	109b      	asrs	r3, r3, #2
 8005dd0:	b25b      	sxtb	r3, r3
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 ACCL_ST[2] = (((data[2] &  0xE0 ) >> 3) | ((data[3] & 0x03 ) >> 0)); //Z
 8005de2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005de6:	10db      	asrs	r3, r3, #3
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	f003 031c 	and.w	r3, r3, #28
 8005dee:	b25a      	sxtb	r2, r3
 8005df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("ACC_ST[0] %u \n" , ACCL_ST[0]) ;
	printf("ACC_ST[1] %u \n" , ACCL_ST[1]) ;
	printf("ACC_ST[2] %u \n" , ACCL_ST[3]) ;
#endif

	Gyro_FT[0] = 25.0*131.0*(powf(1.406,Gyro_ST[0]) - 1.0) ;
 8005e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fa ff42 	bl	8000c94 <__aeabi_ui2f>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4619      	mov	r1, r3
 8005e14:	4863      	ldr	r0, [pc, #396]	; (8005fa4 <Self_test_mpu6050+0x334>)
 8005e16:	f003 fbb5 	bl	8009584 <powf>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa fb03 	bl	8000428 <__aeabi_f2d>
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b60      	ldr	r3, [pc, #384]	; (8005fa8 <Self_test_mpu6050+0x338>)
 8005e28:	f7fa f99e 	bl	8000168 <__aeabi_dsub>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	a354      	add	r3, pc, #336	; (adr r3, 8005f88 <Self_test_mpu6050+0x318>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fb4d 	bl	80004d8 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	f7fa fe1f 	bl	8000a88 <__aeabi_d2f>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	61bb      	str	r3, [r7, #24]
	Gyro_FT[1] = -25.0*131.0*(powf(1.406,Gyro_ST[1]) - 1.0) ;
 8005e4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fa ff1e 	bl	8000c94 <__aeabi_ui2f>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4851      	ldr	r0, [pc, #324]	; (8005fa4 <Self_test_mpu6050+0x334>)
 8005e5e:	f003 fb91 	bl	8009584 <powf>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fa fadf 	bl	8000428 <__aeabi_f2d>
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <Self_test_mpu6050+0x338>)
 8005e70:	f7fa f97a 	bl	8000168 <__aeabi_dsub>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	a344      	add	r3, pc, #272	; (adr r3, 8005f90 <Self_test_mpu6050+0x320>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa fb29 	bl	80004d8 <__aeabi_dmul>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa fdfb 	bl	8000a88 <__aeabi_d2f>
 8005e92:	4603      	mov	r3, r0
 8005e94:	61fb      	str	r3, [r7, #28]
	Gyro_FT[2] = 25.0*131.0*(powf(1.406,Gyro_ST[2]) - 1.0) ;
 8005e96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa fefa 	bl	8000c94 <__aeabi_ui2f>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	483f      	ldr	r0, [pc, #252]	; (8005fa4 <Self_test_mpu6050+0x334>)
 8005ea6:	f003 fb6d 	bl	8009584 <powf>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fabb 	bl	8000428 <__aeabi_f2d>
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	4b3c      	ldr	r3, [pc, #240]	; (8005fa8 <Self_test_mpu6050+0x338>)
 8005eb8:	f7fa f956 	bl	8000168 <__aeabi_dsub>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	a330      	add	r3, pc, #192	; (adr r3, 8005f88 <Self_test_mpu6050+0x318>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa fb05 	bl	80004d8 <__aeabi_dmul>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f7fa fdd7 	bl	8000a88 <__aeabi_d2f>
 8005eda:	4603      	mov	r3, r0
 8005edc:	623b      	str	r3, [r7, #32]

	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[0] - 1.0)/(30)))); ;
 8005ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fa fa8e 	bl	8000404 <__aeabi_i2d>
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <Self_test_mpu6050+0x338>)
 8005eee:	f7fa f93b 	bl	8000168 <__aeabi_dsub>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <Self_test_mpu6050+0x33c>)
 8005f00:	f7fa fc14 	bl	800072c <__aeabi_ddiv>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	f7fa fdbc 	bl	8000a88 <__aeabi_d2f>
 8005f10:	4603      	mov	r3, r0
 8005f12:	4619      	mov	r1, r3
 8005f14:	4826      	ldr	r0, [pc, #152]	; (8005fb0 <Self_test_mpu6050+0x340>)
 8005f16:	f003 fb35 	bl	8009584 <powf>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fa83 	bl	8000428 <__aeabi_f2d>
 8005f22:	a31d      	add	r3, pc, #116	; (adr r3, 8005f98 <Self_test_mpu6050+0x328>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f7fa fad6 	bl	80004d8 <__aeabi_dmul>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4610      	mov	r0, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	f7fa fda8 	bl	8000a88 <__aeabi_d2f>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	60fb      	str	r3, [r7, #12]
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
							  ((ACCL_ST[1] - 1.0)/(30))));
 8005f3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fa5f 	bl	8000404 <__aeabi_i2d>
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <Self_test_mpu6050+0x338>)
 8005f4c:	f7fa f90c 	bl	8000168 <__aeabi_dsub>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4610      	mov	r0, r2
 8005f56:	4619      	mov	r1, r3
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <Self_test_mpu6050+0x33c>)
 8005f5e:	f7fa fbe5 	bl	800072c <__aeabi_ddiv>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
 8005f66:	4610      	mov	r0, r2
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f7fa fd8d 	bl	8000a88 <__aeabi_d2f>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4619      	mov	r1, r3
 8005f72:	480f      	ldr	r0, [pc, #60]	; (8005fb0 <Self_test_mpu6050+0x340>)
 8005f74:	f003 fb06 	bl	8009584 <powf>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fa fa54 	bl	8000428 <__aeabi_f2d>
 8005f80:	e018      	b.n	8005fb4 <Self_test_mpu6050+0x344>
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	40a99600 	.word	0x40a99600
 8005f90:	00000000 	.word	0x00000000
 8005f94:	c0a99600 	.word	0xc0a99600
 8005f98:	5c28f5c3 	.word	0x5c28f5c3
 8005f9c:	4095c28f 	.word	0x4095c28f
 8005fa0:	08009f60 	.word	0x08009f60
 8005fa4:	3fb3f7cf 	.word	0x3fb3f7cf
 8005fa8:	3ff00000 	.word	0x3ff00000
 8005fac:	403e0000 	.word	0x403e0000
 8005fb0:	402d2d2d 	.word	0x402d2d2d
 8005fb4:	a366      	add	r3, pc, #408	; (adr r3, 8006150 <Self_test_mpu6050+0x4e0>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa fa8d 	bl	80004d8 <__aeabi_dmul>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f7fa fd5f 	bl	8000a88 <__aeabi_d2f>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	613b      	str	r3, [r7, #16]
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[2] - 1.0)/(30)))) ;
 8005fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fa fa16 	bl	8000404 <__aeabi_i2d>
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	4b5e      	ldr	r3, [pc, #376]	; (8006158 <Self_test_mpu6050+0x4e8>)
 8005fde:	f7fa f8c3 	bl	8000168 <__aeabi_dsub>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b5b      	ldr	r3, [pc, #364]	; (800615c <Self_test_mpu6050+0x4ec>)
 8005ff0:	f7fa fb9c 	bl	800072c <__aeabi_ddiv>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	f7fa fd44 	bl	8000a88 <__aeabi_d2f>
 8006000:	4603      	mov	r3, r0
 8006002:	4619      	mov	r1, r3
 8006004:	4856      	ldr	r0, [pc, #344]	; (8006160 <Self_test_mpu6050+0x4f0>)
 8006006:	f003 fabd 	bl	8009584 <powf>
 800600a:	4603      	mov	r3, r0
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa fa0b 	bl	8000428 <__aeabi_f2d>
 8006012:	a34f      	add	r3, pc, #316	; (adr r3, 8006150 <Self_test_mpu6050+0x4e0>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa fa5e 	bl	80004d8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	f7fa fd30 	bl	8000a88 <__aeabi_d2f>
 8006028:	4603      	mov	r3, r0
 800602a:	617b      	str	r3, [r7, #20]
	printf("ACC_FT[0] %f \n" , Accl_FT[0]) ;
	printf("ACC_FT[1] %f \n" , Accl_FT[1]) ;
	printf("ACC_FT[2] %f \n" , Accl_FT[3]) ;
#endif

	float temp = 0 ;
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006038:	e03a      	b.n	80060b0 <Self_test_mpu6050+0x440>
	temp = (100 + ((( Gyro_ST[i]- Gyro_FT[i] )/ Gyro_FT[i] )*100 ));
 800603a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800603e:	3338      	adds	r3, #56	; 0x38
 8006040:	443b      	add	r3, r7
 8006042:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fa fe28 	bl	8000c9c <__aeabi_i2f>
 800604c:	4602      	mov	r2, r0
 800604e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	3338      	adds	r3, #56	; 0x38
 8006056:	443b      	add	r3, r7
 8006058:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fa fd66 	bl	8000b30 <__aeabi_fsub>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	3338      	adds	r3, #56	; 0x38
 8006070:	443b      	add	r3, r7
 8006072:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fa ff17 	bl	8000eac <__aeabi_fdiv>
 800607e:	4603      	mov	r3, r0
 8006080:	4938      	ldr	r1, [pc, #224]	; (8006164 <Self_test_mpu6050+0x4f4>)
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa fe5e 	bl	8000d44 <__aeabi_fmul>
 8006088:	4603      	mov	r3, r0
 800608a:	4936      	ldr	r1, [pc, #216]	; (8006164 <Self_test_mpu6050+0x4f4>)
 800608c:	4618      	mov	r0, r3
 800608e:	f7fa fd51 	bl	8000b34 <__addsf3>
 8006092:	4603      	mov	r3, r0
 8006094:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Gyro %f \n", temp) ;
 8006096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006098:	f7fa f9c6 	bl	8000428 <__aeabi_f2d>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4831      	ldr	r0, [pc, #196]	; (8006168 <Self_test_mpu6050+0x4f8>)
 80060a2:	f001 fa7d 	bl	80075a0 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 80060a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060aa:	3301      	adds	r3, #1
 80060ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80060b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d9c0      	bls.n	800603a <Self_test_mpu6050+0x3ca>
	}
temp = 0 ;
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80060c4:	e03a      	b.n	800613c <Self_test_mpu6050+0x4cc>

	temp = (100 + ((( ACCL_ST[i]- Accl_FT[i] )/ Accl_FT[i] )*100 ));
 80060c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060ca:	3338      	adds	r3, #56	; 0x38
 80060cc:	443b      	add	r3, r7
 80060ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fa fde2 	bl	8000c9c <__aeabi_i2f>
 80060d8:	4602      	mov	r2, r0
 80060da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	3338      	adds	r3, #56	; 0x38
 80060e2:	443b      	add	r3, r7
 80060e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7fa fd20 	bl	8000b30 <__aeabi_fsub>
 80060f0:	4603      	mov	r3, r0
 80060f2:	461a      	mov	r2, r3
 80060f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	3338      	adds	r3, #56	; 0x38
 80060fc:	443b      	add	r3, r7
 80060fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fa fed1 	bl	8000eac <__aeabi_fdiv>
 800610a:	4603      	mov	r3, r0
 800610c:	4915      	ldr	r1, [pc, #84]	; (8006164 <Self_test_mpu6050+0x4f4>)
 800610e:	4618      	mov	r0, r3
 8006110:	f7fa fe18 	bl	8000d44 <__aeabi_fmul>
 8006114:	4603      	mov	r3, r0
 8006116:	4913      	ldr	r1, [pc, #76]	; (8006164 <Self_test_mpu6050+0x4f4>)
 8006118:	4618      	mov	r0, r3
 800611a:	f7fa fd0b 	bl	8000b34 <__addsf3>
 800611e:	4603      	mov	r3, r0
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Accl %f \n", temp) ;
 8006122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006124:	f7fa f980 	bl	8000428 <__aeabi_f2d>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	480f      	ldr	r0, [pc, #60]	; (800616c <Self_test_mpu6050+0x4fc>)
 800612e:	f001 fa37 	bl	80075a0 <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 8006132:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006136:	3301      	adds	r3, #1
 8006138:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800613c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006140:	2b02      	cmp	r3, #2
 8006142:	d9c0      	bls.n	80060c6 <Self_test_mpu6050+0x456>
	}
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	3738      	adds	r7, #56	; 0x38
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	5c28f5c3 	.word	0x5c28f5c3
 8006154:	4095c28f 	.word	0x4095c28f
 8006158:	3ff00000 	.word	0x3ff00000
 800615c:	403e0000 	.word	0x403e0000
 8006160:	402d2d2d 	.word	0x402d2d2d
 8006164:	42c80000 	.word	0x42c80000
 8006168:	08009f28 	.word	0x08009f28
 800616c:	08009f44 	.word	0x08009f44

08006170 <Mpu6050_Init>:

void Mpu6050_Init(I2C_HandleTypeDef *hi2c ){
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af04      	add	r7, sp, #16
 8006176:	6078      	str	r0, [r7, #4]
uint8_t data = 0x00;
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]

//who am I
data = MPU_DATASHEET_ADDR ;
 800617c:	2368      	movs	r3, #104	; 0x68
 800617e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, WHO_AM_I, 1, &data, 1, HAL_MAX_DELAY) ;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	9302      	str	r3, [sp, #8]
 8006186:	2301      	movs	r3, #1
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	f107 030f 	add.w	r3, r7, #15
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2301      	movs	r3, #1
 8006192:	2275      	movs	r2, #117	; 0x75
 8006194:	21d0      	movs	r1, #208	; 0xd0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fdc8 	bl	8002d2c <HAL_I2C_Mem_Read>
if (data != MPU_DATASHEET_ADDR) {
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b68      	cmp	r3, #104	; 0x68
 80061a0:	d003      	beq.n	80061aa <Mpu6050_Init+0x3a>
	printf("who am i error \n");
 80061a2:	488f      	ldr	r0, [pc, #572]	; (80063e0 <Mpu6050_Init+0x270>)
 80061a4:	f001 fa62 	bl	800766c <puts>
 80061a8:	e007      	b.n	80061ba <Mpu6050_Init+0x4a>
}else if (data == MPU_DATASHEET_ADDR ) {
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b68      	cmp	r3, #104	; 0x68
 80061ae:	d104      	bne.n	80061ba <Mpu6050_Init+0x4a>
	printf("who am I value : %x \n", data) ;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4619      	mov	r1, r3
 80061b4:	488b      	ldr	r0, [pc, #556]	; (80063e4 <Mpu6050_Init+0x274>)
 80061b6:	f001 f9f3 	bl	80075a0 <iprintf>
}

// power mannagment 1
data = 0x01 ;
 80061ba:	2301      	movs	r3, #1
 80061bc:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	2301      	movs	r3, #1
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	f107 030f 	add.w	r3, r7, #15
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	2301      	movs	r3, #1
 80061d0:	226b      	movs	r2, #107	; 0x6b
 80061d2:	21d0      	movs	r1, #208	; 0xd0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fc fcaf 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	2301      	movs	r3, #1
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f107 030f 	add.w	r3, r7, #15
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	2301      	movs	r3, #1
 80061ec:	226b      	movs	r2, #107	; 0x6b
 80061ee:	21d0      	movs	r1, #208	; 0xd0
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7fc fd9b 	bl	8002d2c <HAL_I2C_Mem_Read>
if (data != 0x01) {
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d003      	beq.n	8006204 <Mpu6050_Init+0x94>
	printf("pwr_mgmt1 error \n");
 80061fc:	487a      	ldr	r0, [pc, #488]	; (80063e8 <Mpu6050_Init+0x278>)
 80061fe:	f001 fa35 	bl	800766c <puts>
 8006202:	e007      	b.n	8006214 <Mpu6050_Init+0xa4>
}else if (data == 0x01 ) {
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d104      	bne.n	8006214 <Mpu6050_Init+0xa4>
	printf("pwr_mgmt1 value : %d \n", data) ;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	4619      	mov	r1, r3
 800620e:	4877      	ldr	r0, [pc, #476]	; (80063ec <Mpu6050_Init+0x27c>)
 8006210:	f001 f9c6 	bl	80075a0 <iprintf>
}


// Configuration CONFIG 0x1A 26
data = 0x01;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
 800621c:	9302      	str	r3, [sp, #8]
 800621e:	2301      	movs	r3, #1
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	f107 030f 	add.w	r3, r7, #15
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2301      	movs	r3, #1
 800622a:	221a      	movs	r2, #26
 800622c:	21d0      	movs	r1, #208	; 0xd0
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc fc82 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006234:	f04f 33ff 	mov.w	r3, #4294967295
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	2301      	movs	r3, #1
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f107 030f 	add.w	r3, r7, #15
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2301      	movs	r3, #1
 8006246:	221a      	movs	r2, #26
 8006248:	21d0      	movs	r1, #208	; 0xd0
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fc fd6e 	bl	8002d2c <HAL_I2C_Mem_Read>

if (data != 0x01) {
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d003      	beq.n	800625e <Mpu6050_Init+0xee>
	printf("config error \n");
 8006256:	4866      	ldr	r0, [pc, #408]	; (80063f0 <Mpu6050_Init+0x280>)
 8006258:	f001 fa08 	bl	800766c <puts>
 800625c:	e007      	b.n	800626e <Mpu6050_Init+0xfe>
}else if (data == 0x01 ) {
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d104      	bne.n	800626e <Mpu6050_Init+0xfe>
	printf("config value : %d \n", data) ;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	4619      	mov	r1, r3
 8006268:	4862      	ldr	r0, [pc, #392]	; (80063f4 <Mpu6050_Init+0x284>)
 800626a:	f001 f999 	bl	80075a0 <iprintf>
}

// Sample rate divider
data = 0x04;
 800626e:	2304      	movs	r3, #4
 8006270:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	2301      	movs	r3, #1
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	f107 030f 	add.w	r3, r7, #15
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2301      	movs	r3, #1
 8006284:	2219      	movs	r2, #25
 8006286:	21d0      	movs	r1, #208	; 0xd0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fc fc55 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	9302      	str	r3, [sp, #8]
 8006294:	2301      	movs	r3, #1
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	f107 030f 	add.w	r3, r7, #15
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2301      	movs	r3, #1
 80062a0:	2219      	movs	r2, #25
 80062a2:	21d0      	movs	r1, #208	; 0xd0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fc fd41 	bl	8002d2c <HAL_I2C_Mem_Read>

if (data != 0x04) {
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d003      	beq.n	80062b8 <Mpu6050_Init+0x148>
	printf("sample rate divider error \n");
 80062b0:	4851      	ldr	r0, [pc, #324]	; (80063f8 <Mpu6050_Init+0x288>)
 80062b2:	f001 f9db 	bl	800766c <puts>
 80062b6:	e007      	b.n	80062c8 <Mpu6050_Init+0x158>
}else if (data == 0x04 ) {
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d104      	bne.n	80062c8 <Mpu6050_Init+0x158>
	printf("sample rate divider value : %d \n", data) ;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	4619      	mov	r1, r3
 80062c2:	484e      	ldr	r0, [pc, #312]	; (80063fc <Mpu6050_Init+0x28c>)
 80062c4:	f001 f96c 	bl	80075a0 <iprintf>
}


// Gyro Config
data = 0x08;
 80062c8:	2308      	movs	r3, #8
 80062ca:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
 80062d0:	9302      	str	r3, [sp, #8]
 80062d2:	2301      	movs	r3, #1
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	f107 030f 	add.w	r3, r7, #15
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2301      	movs	r3, #1
 80062de:	221b      	movs	r2, #27
 80062e0:	21d0      	movs	r1, #208	; 0xd0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fc28 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80062e8:	f04f 33ff 	mov.w	r3, #4294967295
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	2301      	movs	r3, #1
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	f107 030f 	add.w	r3, r7, #15
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2301      	movs	r3, #1
 80062fa:	221b      	movs	r2, #27
 80062fc:	21d0      	movs	r1, #208	; 0xd0
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc fd14 	bl	8002d2c <HAL_I2C_Mem_Read>

if (data != 0x08) {
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d003      	beq.n	8006312 <Mpu6050_Init+0x1a2>
	printf("Gyro config error \n ");
 800630a:	483d      	ldr	r0, [pc, #244]	; (8006400 <Mpu6050_Init+0x290>)
 800630c:	f001 f948 	bl	80075a0 <iprintf>
 8006310:	e007      	b.n	8006322 <Mpu6050_Init+0x1b2>
}else if (data == 0x08 ) {
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b08      	cmp	r3, #8
 8006316:	d104      	bne.n	8006322 <Mpu6050_Init+0x1b2>
	printf("gyro config value : %d \n", data) ;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	4619      	mov	r1, r3
 800631c:	4839      	ldr	r0, [pc, #228]	; (8006404 <Mpu6050_Init+0x294>)
 800631e:	f001 f93f 	bl	80075a0 <iprintf>
}

// Accl Config
data = 0x00;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006326:	f04f 33ff 	mov.w	r3, #4294967295
 800632a:	9302      	str	r3, [sp, #8]
 800632c:	2301      	movs	r3, #1
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	f107 030f 	add.w	r3, r7, #15
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2301      	movs	r3, #1
 8006338:	221c      	movs	r2, #28
 800633a:	21d0      	movs	r1, #208	; 0xd0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fc fbfb 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006342:	f04f 33ff 	mov.w	r3, #4294967295
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	2301      	movs	r3, #1
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	f107 030f 	add.w	r3, r7, #15
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2301      	movs	r3, #1
 8006354:	221c      	movs	r2, #28
 8006356:	21d0      	movs	r1, #208	; 0xd0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fc fce7 	bl	8002d2c <HAL_I2C_Mem_Read>

if (data != 0x00) {
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <Mpu6050_Init+0x1fc>
	printf("Accl config error \n");
 8006364:	4828      	ldr	r0, [pc, #160]	; (8006408 <Mpu6050_Init+0x298>)
 8006366:	f001 f981 	bl	800766c <puts>
 800636a:	e007      	b.n	800637c <Mpu6050_Init+0x20c>
}else if (data == 0x00 ) {
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <Mpu6050_Init+0x20c>
	printf("Accl config value : %d \n", data) ;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	4619      	mov	r1, r3
 8006376:	4825      	ldr	r0, [pc, #148]	; (800640c <Mpu6050_Init+0x29c>)
 8006378:	f001 f912 	bl	80075a0 <iprintf>
}

// signal path reset
data = 0x07 ;
 800637c:	2307      	movs	r3, #7
 800637e:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	9302      	str	r3, [sp, #8]
 8006386:	2301      	movs	r3, #1
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	f107 030f 	add.w	r3, r7, #15
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	2301      	movs	r3, #1
 8006392:	2268      	movs	r2, #104	; 0x68
 8006394:	21d0      	movs	r1, #208	; 0xd0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fc fbce 	bl	8002b38 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	2301      	movs	r3, #1
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	f107 030f 	add.w	r3, r7, #15
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2301      	movs	r3, #1
 80063ae:	2268      	movs	r2, #104	; 0x68
 80063b0:	21d0      	movs	r1, #208	; 0xd0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fc fcba 	bl	8002d2c <HAL_I2C_Mem_Read>
if (data != 0x07) {
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	d003      	beq.n	80063c6 <Mpu6050_Init+0x256>
	printf("(ignore) signal path reset error cannot read write only \n");
 80063be:	4814      	ldr	r0, [pc, #80]	; (8006410 <Mpu6050_Init+0x2a0>)
 80063c0:	f001 f954 	bl	800766c <puts>
}else if (data == 0x07 ) {
	printf("signal path reset value : %d \n", data) ;
}

}
 80063c4:	e007      	b.n	80063d6 <Mpu6050_Init+0x266>
}else if (data == 0x07 ) {
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d104      	bne.n	80063d6 <Mpu6050_Init+0x266>
	printf("signal path reset value : %d \n", data) ;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	4619      	mov	r1, r3
 80063d0:	4810      	ldr	r0, [pc, #64]	; (8006414 <Mpu6050_Init+0x2a4>)
 80063d2:	f001 f8e5 	bl	80075a0 <iprintf>
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	08009f64 	.word	0x08009f64
 80063e4:	08009f74 	.word	0x08009f74
 80063e8:	08009f8c 	.word	0x08009f8c
 80063ec:	08009fa0 	.word	0x08009fa0
 80063f0:	08009fb8 	.word	0x08009fb8
 80063f4:	08009fc8 	.word	0x08009fc8
 80063f8:	08009fdc 	.word	0x08009fdc
 80063fc:	08009ff8 	.word	0x08009ff8
 8006400:	0800a01c 	.word	0x0800a01c
 8006404:	0800a034 	.word	0x0800a034
 8006408:	0800a050 	.word	0x0800a050
 800640c:	0800a064 	.word	0x0800a064
 8006410:	0800a080 	.word	0x0800a080
 8006414:	0800a0bc 	.word	0x0800a0bc

08006418 <get_Accl>:

void get_Accl(I2C_HandleTypeDef *hi2c , MPU_Accl_Val_t * Accl_Data ){
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	; 0x28
 800641c:	af04      	add	r7, sp, #16
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]

	uint8_t data [6];
	int16_t accel_x = 0 ;
 8006422:	2300      	movs	r3, #0
 8006424:	82fb      	strh	r3, [r7, #22]
	int16_t accel_y = 0 ;
 8006426:	2300      	movs	r3, #0
 8006428:	82bb      	strh	r3, [r7, #20]
	int16_t accel_z = 0 ;
 800642a:	2300      	movs	r3, #0
 800642c:	827b      	strh	r3, [r7, #18]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,ACCEL_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	2306      	movs	r3, #6
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	f107 030c 	add.w	r3, r7, #12
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2301      	movs	r3, #1
 8006440:	223b      	movs	r2, #59	; 0x3b
 8006442:	21d0      	movs	r1, #208	; 0xd0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fc fc71 	bl	8002d2c <HAL_I2C_Mem_Read>

	accel_x = data[0] << 8 | data[1] ;
 800644a:	7b3b      	ldrb	r3, [r7, #12]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	b21a      	sxth	r2, r3
 8006450:	7b7b      	ldrb	r3, [r7, #13]
 8006452:	b21b      	sxth	r3, r3
 8006454:	4313      	orrs	r3, r2
 8006456:	82fb      	strh	r3, [r7, #22]
	accel_y = data[2] << 8 | data[3] ;
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	b21a      	sxth	r2, r3
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	b21b      	sxth	r3, r3
 8006462:	4313      	orrs	r3, r2
 8006464:	82bb      	strh	r3, [r7, #20]
    accel_z = data[4] << 8 | data[5] ;
 8006466:	7c3b      	ldrb	r3, [r7, #16]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	b21a      	sxth	r2, r3
 800646c:	7c7b      	ldrb	r3, [r7, #17]
 800646e:	b21b      	sxth	r3, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	827b      	strh	r3, [r7, #18]

    Accl_Data->pitch = (float)( (float)accel_x  / (float)16384 )*(float)9.8 ;
 8006474:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006478:	4618      	mov	r0, r3
 800647a:	f7fa fc0f 	bl	8000c9c <__aeabi_i2f>
 800647e:	4603      	mov	r3, r0
 8006480:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8006484:	4618      	mov	r0, r3
 8006486:	f7fa fd11 	bl	8000eac <__aeabi_fdiv>
 800648a:	4603      	mov	r3, r0
 800648c:	4919      	ldr	r1, [pc, #100]	; (80064f4 <get_Accl+0xdc>)
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fc58 	bl	8000d44 <__aeabi_fmul>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	601a      	str	r2, [r3, #0]
    Accl_Data->roll  = (float)( (float)accel_y  / (float)16384 )*(float)9.8 ;
 800649c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fa fbfb 	bl	8000c9c <__aeabi_i2f>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fa fcfd 	bl	8000eac <__aeabi_fdiv>
 80064b2:	4603      	mov	r3, r0
 80064b4:	490f      	ldr	r1, [pc, #60]	; (80064f4 <get_Accl+0xdc>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fa fc44 	bl	8000d44 <__aeabi_fmul>
 80064bc:	4603      	mov	r3, r0
 80064be:	461a      	mov	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	605a      	str	r2, [r3, #4]
    Accl_Data->yaw   = (float)( (float)accel_z  / (float)16384 )*(float)9.8 ;
 80064c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa fbe7 	bl	8000c9c <__aeabi_i2f>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fa fce9 	bl	8000eac <__aeabi_fdiv>
 80064da:	4603      	mov	r3, r0
 80064dc:	4905      	ldr	r1, [pc, #20]	; (80064f4 <get_Accl+0xdc>)
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fa fc30 	bl	8000d44 <__aeabi_fmul>
 80064e4:	4603      	mov	r3, r0
 80064e6:	461a      	mov	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	609a      	str	r2, [r3, #8]

	printf("[DEBUG] pitch_a: %0.1lf ,roll_a=  %0.1lf ,yaw_a=  %0.1lf \n" , Accl_Data->pitch , Accl_Data->roll, Accl_Data->yaw);
#endif


}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	411ccccd 	.word	0x411ccccd

080064f8 <get_gyro>:

void get_gyro(I2C_HandleTypeDef *hi2c , MPU_Gyro_Val_t * Gyro_Data , MPU_Gyro_calib_t * Calib_Data) {
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

	uint8_t data [6];
	int16_t gyro_x = 0 ;
 8006504:	2300      	movs	r3, #0
 8006506:	83fb      	strh	r3, [r7, #30]
	int16_t gyro_y = 0 ;
 8006508:	2300      	movs	r3, #0
 800650a:	83bb      	strh	r3, [r7, #28]
	int16_t gyro_z = 0 ;
 800650c:	2300      	movs	r3, #0
 800650e:	837b      	strh	r3, [r7, #26]

	HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8006510:	f04f 33ff 	mov.w	r3, #4294967295
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	2306      	movs	r3, #6
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2301      	movs	r3, #1
 8006522:	2243      	movs	r2, #67	; 0x43
 8006524:	21d0      	movs	r1, #208	; 0xd0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7fc fc00 	bl	8002d2c <HAL_I2C_Mem_Read>

	gyro_x = data[0] << 8 | data[1] ;
 800652c:	7d3b      	ldrb	r3, [r7, #20]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	b21a      	sxth	r2, r3
 8006532:	7d7b      	ldrb	r3, [r7, #21]
 8006534:	b21b      	sxth	r3, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	83fb      	strh	r3, [r7, #30]
    gyro_y = data[2] << 8 | data[3] ;
 800653a:	7dbb      	ldrb	r3, [r7, #22]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	b21a      	sxth	r2, r3
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	b21b      	sxth	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	83bb      	strh	r3, [r7, #28]
	gyro_z = data[4] << 8 | data[5] ;
 8006548:	7e3b      	ldrb	r3, [r7, #24]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	b21a      	sxth	r2, r3
 800654e:	7e7b      	ldrb	r3, [r7, #25]
 8006550:	b21b      	sxth	r3, r3
 8006552:	4313      	orrs	r3, r2
 8006554:	837b      	strh	r3, [r7, #26]

	Gyro_Data->pitch = ( gyro_x  / 65.5 ) - Calib_Data->pitch ;
 8006556:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800655a:	4618      	mov	r0, r3
 800655c:	f7f9 ff52 	bl	8000404 <__aeabi_i2d>
 8006560:	a333      	add	r3, pc, #204	; (adr r3, 8006630 <get_gyro+0x138>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7fa f8e1 	bl	800072c <__aeabi_ddiv>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4614      	mov	r4, r2
 8006570:	461d      	mov	r5, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7f9 ff56 	bl	8000428 <__aeabi_f2d>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7f9 fdf0 	bl	8000168 <__aeabi_dsub>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	f7fa fa7a 	bl	8000a88 <__aeabi_d2f>
 8006594:	4602      	mov	r2, r0
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	601a      	str	r2, [r3, #0]
	Gyro_Data->roll  = ( gyro_y  / 65.5 ) - Calib_Data->roll;
 800659a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7f9 ff30 	bl	8000404 <__aeabi_i2d>
 80065a4:	a322      	add	r3, pc, #136	; (adr r3, 8006630 <get_gyro+0x138>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f7fa f8bf 	bl	800072c <__aeabi_ddiv>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4614      	mov	r4, r2
 80065b4:	461d      	mov	r5, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7f9 ff34 	bl	8000428 <__aeabi_f2d>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7f9 fdce 	bl	8000168 <__aeabi_dsub>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4610      	mov	r0, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	f7fa fa58 	bl	8000a88 <__aeabi_d2f>
 80065d8:	4602      	mov	r2, r0
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	605a      	str	r2, [r3, #4]
	Gyro_Data->yaw   = ( gyro_z  / 65.5 ) - Calib_Data->yaw ;
 80065de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7f9 ff0e 	bl	8000404 <__aeabi_i2d>
 80065e8:	a311      	add	r3, pc, #68	; (adr r3, 8006630 <get_gyro+0x138>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f89d 	bl	800072c <__aeabi_ddiv>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4614      	mov	r4, r2
 80065f8:	461d      	mov	r5, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ff12 	bl	8000428 <__aeabi_f2d>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4620      	mov	r0, r4
 800660a:	4629      	mov	r1, r5
 800660c:	f7f9 fdac 	bl	8000168 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	f7fa fa36 	bl	8000a88 <__aeabi_d2f>
 800661c:	4602      	mov	r2, r0
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	609a      	str	r2, [r3, #8]
#if DEBUG_mpu

	printf("[DEBUG] pitch: %0.1lf ,roll=  %0.1lf ,yaw=  %0.1lf \n" , Gyro_Data->pitch , Gyro_Data->roll, Gyro_Data->yaw);
#endif

}
 8006622:	bf00      	nop
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bdb0      	pop	{r4, r5, r7, pc}
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w
 8006630:	00000000 	.word	0x00000000
 8006634:	40506000 	.word	0x40506000

08006638 <gyro_calibrate>:

void gyro_calibrate (I2C_HandleTypeDef *hi2c , MPU_Gyro_calib_t * Calib_Data){
 8006638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800663c:	b094      	sub	sp, #80	; 0x50
 800663e:	af04      	add	r7, sp, #16
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
	uint8_t data [6];
	int16_t gyro_x = 0 ;
 8006644:	2300      	movs	r3, #0
 8006646:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyro_y = 0 ;
 8006648:	2300      	movs	r3, #0
 800664a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t gyro_z = 0 ;
 800664c:	2300      	movs	r3, #0
 800664e:	843b      	strh	r3, [r7, #32]

	float pitch , yaw , roll ;
	double pitch_cal =  0, yaw_cal =  0, roll_cal = 0;
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,16000  );
 8006674:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <gyro_calibrate+0x268>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 800667e:	210c      	movs	r1, #12
 8006680:	4887      	ldr	r0, [pc, #540]	; (80068a0 <gyro_calibrate+0x268>)
 8006682:	f7fe fb63 	bl	8004d4c <HAL_TIM_PWM_Start>
	printf("/////////// CALIBRATING GYRO \\\\\\\\\\\\\\\\\\\\ \n") ;
 8006686:	4887      	ldr	r0, [pc, #540]	; (80068a4 <gyro_calibrate+0x26c>)
 8006688:	f000 fff0 	bl	800766c <puts>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 800668c:	2300      	movs	r3, #0
 800668e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006690:	e085      	b.n	800679e <gyro_calibrate+0x166>

		// needed to communicate with i2c based devices like gyroscope mpu6050
	   HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295
 8006696:	9302      	str	r3, [sp, #8]
 8006698:	2306      	movs	r3, #6
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	2301      	movs	r3, #1
 80066a4:	2243      	movs	r2, #67	; 0x43
 80066a6:	21d0      	movs	r1, #208	; 0xd0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fc fb3f 	bl	8002d2c <HAL_I2C_Mem_Read>

	   gyro_x = data[0] << 8 | data[1] ;
 80066ae:	7b3b      	ldrb	r3, [r7, #12]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	b21a      	sxth	r2, r3
 80066b4:	7b7b      	ldrb	r3, [r7, #13]
 80066b6:	b21b      	sxth	r3, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	   gyro_y = data[2] << 8 | data[3] ;
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	b21a      	sxth	r2, r3
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	b21b      	sxth	r3, r3
 80066c6:	4313      	orrs	r3, r2
 80066c8:	847b      	strh	r3, [r7, #34]	; 0x22
	   gyro_z = data[4] << 8 | data[5] ;
 80066ca:	7c3b      	ldrb	r3, [r7, #16]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	b21a      	sxth	r2, r3
 80066d0:	7c7b      	ldrb	r3, [r7, #17]
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	843b      	strh	r3, [r7, #32]

	   pitch = gyro_x  / 65.5 ; // change in x
 80066d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7f9 fe91 	bl	8000404 <__aeabi_i2d>
 80066e2:	a36d      	add	r3, pc, #436	; (adr r3, 8006898 <gyro_calibrate+0x260>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7fa f820 	bl	800072c <__aeabi_ddiv>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	f7fa f9c8 	bl	8000a88 <__aeabi_d2f>
 80066f8:	4603      	mov	r3, r0
 80066fa:	61fb      	str	r3, [r7, #28]
	   roll  = gyro_y  / 65.5 ;	// change in y
 80066fc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006700:	4618      	mov	r0, r3
 8006702:	f7f9 fe7f 	bl	8000404 <__aeabi_i2d>
 8006706:	a364      	add	r3, pc, #400	; (adr r3, 8006898 <gyro_calibrate+0x260>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7fa f80e 	bl	800072c <__aeabi_ddiv>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	f7fa f9b6 	bl	8000a88 <__aeabi_d2f>
 800671c:	4603      	mov	r3, r0
 800671e:	61bb      	str	r3, [r7, #24]
	   yaw   = gyro_z  / 65.5 ;	// change in z
 8006720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006724:	4618      	mov	r0, r3
 8006726:	f7f9 fe6d 	bl	8000404 <__aeabi_i2d>
 800672a:	a35b      	add	r3, pc, #364	; (adr r3, 8006898 <gyro_calibrate+0x260>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fffc 	bl	800072c <__aeabi_ddiv>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	f7fa f9a4 	bl	8000a88 <__aeabi_d2f>
 8006740:	4603      	mov	r3, r0
 8006742:	617b      	str	r3, [r7, #20]

	   pitch_cal += pitch ;  // this means pitch_cal = pitch + pitch_cal
 8006744:	69f8      	ldr	r0, [r7, #28]
 8006746:	f7f9 fe6f 	bl	8000428 <__aeabi_f2d>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006752:	f7f9 fd0b 	bl	800016c <__adddf3>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	   roll_cal += roll ;
 800675e:	69b8      	ldr	r0, [r7, #24]
 8006760:	f7f9 fe62 	bl	8000428 <__aeabi_f2d>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800676c:	f7f9 fcfe 	bl	800016c <__adddf3>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	   yaw_cal += yaw ;
 8006778:	6978      	ldr	r0, [r7, #20]
 800677a:	f7f9 fe55 	bl	8000428 <__aeabi_f2d>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006786:	f7f9 fcf1 	bl	800016c <__adddf3>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	   HAL_Delay(1) ;
 8006792:	2001      	movs	r0, #1
 8006794:	f7fb fdbe 	bl	8002314 <HAL_Delay>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8006798:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800679a:	3301      	adds	r3, #1
 800679c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800679e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067a0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80067a4:	f4ff af75 	bcc.w	8006692 <gyro_calibrate+0x5a>
	}

	// taking average
	pitch_cal = pitch_cal/ 4000  ;
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	4b3e      	ldr	r3, [pc, #248]	; (80068a8 <gyro_calibrate+0x270>)
 80067ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80067b2:	f7f9 ffbb 	bl	800072c <__aeabi_ddiv>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	roll_cal  = roll_cal / 4000  ;
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	4b39      	ldr	r3, [pc, #228]	; (80068a8 <gyro_calibrate+0x270>)
 80067c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067c8:	f7f9 ffb0 	bl	800072c <__aeabi_ddiv>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	yaw_cal   = yaw_cal  / 4000  ;
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	4b33      	ldr	r3, [pc, #204]	; (80068a8 <gyro_calibrate+0x270>)
 80067da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80067de:	f7f9 ffa5 	bl	800072c <__aeabi_ddiv>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	printf("cal values are  %lf , %lf , %lf \n" , pitch_cal , roll_cal , yaw_cal);
 80067ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f6:	e9cd 2300 	strd	r2, r3, [sp]
 80067fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067fe:	482b      	ldr	r0, [pc, #172]	; (80068ac <gyro_calibrate+0x274>)
 8006800:	f000 fece 	bl	80075a0 <iprintf>

	Calib_Data->pitch = pitch_cal ;
 8006804:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006808:	f7fa f93e 	bl	8000a88 <__aeabi_d2f>
 800680c:	4602      	mov	r2, r0
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	601a      	str	r2, [r3, #0]
	Calib_Data->roll  = roll_cal;
 8006812:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006816:	f7fa f937 	bl	8000a88 <__aeabi_d2f>
 800681a:	4602      	mov	r2, r0
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	Calib_Data->yaw   = yaw_cal;
 8006820:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006824:	f7fa f930 	bl	8000a88 <__aeabi_d2f>
 8006828:	4602      	mov	r2, r0
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	609a      	str	r2, [r3, #8]

	printf("cal values are =  pitch : %lf ,roll: %lf ,yaw: %lf \n" , Calib_Data->pitch ,Calib_Data->roll , Calib_Data->yaw);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fdf8 	bl	8000428 <__aeabi_f2d>
 8006838:	4680      	mov	r8, r0
 800683a:	4689      	mov	r9, r1
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	f7f9 fdf1 	bl	8000428 <__aeabi_f2d>
 8006846:	4604      	mov	r4, r0
 8006848:	460d      	mov	r5, r1
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f7f9 fdea 	bl	8000428 <__aeabi_f2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800685c:	e9cd 4500 	strd	r4, r5, [sp]
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	4812      	ldr	r0, [pc, #72]	; (80068b0 <gyro_calibrate+0x278>)
 8006866:	f000 fe9b 	bl	80075a0 <iprintf>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 800686a:	4b0d      	ldr	r3, [pc, #52]	; (80068a0 <gyro_calibrate+0x268>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <gyro_calibrate+0x268>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800687a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 800687c:	2108      	movs	r1, #8
 800687e:	4808      	ldr	r0, [pc, #32]	; (80068a0 <gyro_calibrate+0x268>)
 8006880:	f7fe fa64 	bl	8004d4c <HAL_TIM_PWM_Start>
printf("/////////////// DONE GYRO CALIBRATION \\\\\\\\\\\\\\\\\\\\ \n") ;
 8006884:	480b      	ldr	r0, [pc, #44]	; (80068b4 <gyro_calibrate+0x27c>)
 8006886:	f000 fef1 	bl	800766c <puts>

	}
	printf("[DEBUG] ///////// SAMPLE DATA END \\\\\\\\\\\ \n") ;
#endif

}
 800688a:	bf00      	nop
 800688c:	3740      	adds	r7, #64	; 0x40
 800688e:	46bd      	mov	sp, r7
 8006890:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006894:	f3af 8000 	nop.w
 8006898:	00000000 	.word	0x00000000
 800689c:	40506000 	.word	0x40506000
 80068a0:	20000334 	.word	0x20000334
 80068a4:	0800a0dc 	.word	0x0800a0dc
 80068a8:	40af4000 	.word	0x40af4000
 80068ac:	0800a108 	.word	0x0800a108
 80068b0:	0800a12c 	.word	0x0800a12c
 80068b4:	0800a164 	.word	0x0800a164

080068b8 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6958      	ldr	r0, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2200      	movs	r2, #0
 80068e2:	4619      	mov	r1, r3
 80068e4:	f7fb ffcc 	bl	8002880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6998      	ldr	r0, [r3, #24]
 80068ee:	f107 010f 	add.w	r1, r7, #15
 80068f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068f6:	2201      	movs	r2, #1
 80068f8:	f7fd fcc8 	bl	800428c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80068fc:	bf00      	nop
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe f8cc 	bl	8004aa2 <HAL_SPI_GetState>
 800690a:	4603      	mov	r3, r0
 800690c:	2b01      	cmp	r3, #1
 800690e:	d1f6      	bne.n	80068fe <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6998      	ldr	r0, [r3, #24]
 8006916:	f107 010e 	add.w	r1, r7, #14
 800691a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800691e:	2201      	movs	r2, #1
 8006920:	f7fd fdf7 	bl	8004512 <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8006924:	bf00      	nop
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe f8b8 	bl	8004aa2 <HAL_SPI_GetState>
 8006932:	4603      	mov	r3, r0
 8006934:	2b01      	cmp	r3, #1
 8006936:	d1f6      	bne.n	8006926 <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6958      	ldr	r0, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	b29b      	uxth	r3, r3
 8006946:	2201      	movs	r2, #1
 8006948:	4619      	mov	r1, r3
 800694a:	f7fb ff99 	bl	8002880 <HAL_GPIO_WritePin>
	return rxByte;
 800694e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
 8006964:	4613      	mov	r3, r2
 8006966:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800696e:	b2db      	uxtb	r3, r3
 8006970:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6958      	ldr	r0, [r3, #20]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	b29b      	uxth	r3, r3
 8006980:	2200      	movs	r2, #0
 8006982:	4619      	mov	r1, r3
 8006984:	f7fb ff7c 	bl	8002880 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6998      	ldr	r0, [r3, #24]
 800698e:	f107 010f 	add.w	r1, r7, #15
 8006992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006996:	2201      	movs	r2, #1
 8006998:	f7fd fc78 	bl	800428c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800699c:	bf00      	nop
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe f87c 	bl	8004aa2 <HAL_SPI_GetState>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d1f6      	bne.n	800699e <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6998      	ldr	r0, [r3, #24]
 80069b6:	1cb9      	adds	r1, r7, #2
 80069b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069bc:	2201      	movs	r2, #1
 80069be:	f7fd fc65 	bl	800428c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80069c2:	bf00      	nop
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe f869 	bl	8004aa2 <HAL_SPI_GetState>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d1f6      	bne.n	80069c4 <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6958      	ldr	r0, [r3, #20]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2201      	movs	r2, #1
 80069e6:	4619      	mov	r1, r3
 80069e8:	f7fb ff4a 	bl	8002880 <HAL_GPIO_WritePin>
}
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <lora_init>:

uint8_t lora_init(lora_t * module){
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6858      	ldr	r0, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f7fb ff37 	bl	8002880 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006a12:	200a      	movs	r0, #10
 8006a14:	f7fb fc7e 	bl	8002314 <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6858      	ldr	r0, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2201      	movs	r2, #1
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7fb ff29 	bl	8002880 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006a2e:	200a      	movs	r0, #10
 8006a30:	f7fb fc70 	bl	8002314 <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 8006a34:	2142      	movs	r1, #66	; 0x42
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff3e 	bl	80068b8 <lora_read_reg>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b12      	cmp	r3, #18
 8006a44:	d006      	beq.n	8006a54 <lora_init+0x60>
		printf("%d \n" ,ret );
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4820      	ldr	r0, [pc, #128]	; (8006acc <lora_init+0xd8>)
 8006a4c:	f000 fda8 	bl	80075a0 <iprintf>
		return 1;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e037      	b.n	8006ac4 <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 8006a54:	2280      	movs	r2, #128	; 0x80
 8006a56:	2101      	movs	r1, #1
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff ff7d 	bl	8006958 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <lora_init+0xdc>)
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	4413      	add	r3, r2
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f831 	bl	8006ad4 <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 8006a72:	2200      	movs	r2, #0
 8006a74:	210e      	movs	r1, #14
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff6e 	bl	8006958 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	210f      	movs	r1, #15
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff69 	bl	8006958 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 8006a86:	210c      	movs	r1, #12
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff15 	bl	80068b8 <lora_read_reg>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	f043 0303 	orr.w	r3, r3, #3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	210c      	movs	r1, #12
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff ff5a 	bl	8006958 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	2126      	movs	r1, #38	; 0x26
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff ff55 	bl	8006958 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 8006aae:	228f      	movs	r2, #143	; 0x8f
 8006ab0:	2109      	movs	r1, #9
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff ff50 	bl	8006958 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8006ab8:	2281      	movs	r2, #129	; 0x81
 8006aba:	2101      	movs	r1, #1
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff4b 	bl	8006958 <lora_write_reg>
	return 0;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	0800a198 	.word	0x0800a198
 8006ad0:	0800a1d0 	.word	0x0800a1d0

08006ad4 <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8006ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae4:	f04f 0000 	mov.w	r0, #0
 8006ae8:	f04f 0100 	mov.w	r1, #0
 8006aec:	04d9      	lsls	r1, r3, #19
 8006aee:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8006af2:	04d0      	lsls	r0, r2, #19
 8006af4:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <lora_set_frequency+0x88>)
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	f7fa faff 	bl	80010fc <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 8006b06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	0c02      	lsrs	r2, r0, #16
 8006b14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006b18:	0c0b      	lsrs	r3, r1, #16
 8006b1a:	b2d3      	uxtb	r3, r2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2106      	movs	r1, #6
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff ff19 	bl	8006958 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 8006b26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	0a02      	lsrs	r2, r0, #8
 8006b34:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006b38:	0a0b      	lsrs	r3, r1, #8
 8006b3a:	b2d3      	uxtb	r3, r2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2107      	movs	r1, #7
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7ff ff09 	bl	8006958 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 8006b46:	7c3b      	ldrb	r3, [r7, #16]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2108      	movs	r1, #8
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ff03 	bl	8006958 <lora_write_reg>
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	01e84800 	.word	0x01e84800

08006b60 <__cvt>:
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b66:	461f      	mov	r7, r3
 8006b68:	bfbb      	ittet	lt
 8006b6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b6e:	461f      	movlt	r7, r3
 8006b70:	2300      	movge	r3, #0
 8006b72:	232d      	movlt	r3, #45	; 0x2d
 8006b74:	b088      	sub	sp, #32
 8006b76:	4614      	mov	r4, r2
 8006b78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b7c:	7013      	strb	r3, [r2, #0]
 8006b7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b84:	f023 0820 	bic.w	r8, r3, #32
 8006b88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b8c:	d005      	beq.n	8006b9a <__cvt+0x3a>
 8006b8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b92:	d100      	bne.n	8006b96 <__cvt+0x36>
 8006b94:	3501      	adds	r5, #1
 8006b96:	2302      	movs	r3, #2
 8006b98:	e000      	b.n	8006b9c <__cvt+0x3c>
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	aa07      	add	r2, sp, #28
 8006b9e:	9204      	str	r2, [sp, #16]
 8006ba0:	aa06      	add	r2, sp, #24
 8006ba2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006ba6:	e9cd 3500 	strd	r3, r5, [sp]
 8006baa:	4622      	mov	r2, r4
 8006bac:	463b      	mov	r3, r7
 8006bae:	f000 ff53 	bl	8007a58 <_dtoa_r>
 8006bb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	d102      	bne.n	8006bc0 <__cvt+0x60>
 8006bba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bbc:	07db      	lsls	r3, r3, #31
 8006bbe:	d522      	bpl.n	8006c06 <__cvt+0xa6>
 8006bc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bc4:	eb06 0905 	add.w	r9, r6, r5
 8006bc8:	d110      	bne.n	8006bec <__cvt+0x8c>
 8006bca:	7833      	ldrb	r3, [r6, #0]
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d10a      	bne.n	8006be6 <__cvt+0x86>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fee6 	bl	80009a8 <__aeabi_dcmpeq>
 8006bdc:	b918      	cbnz	r0, 8006be6 <__cvt+0x86>
 8006bde:	f1c5 0501 	rsb	r5, r5, #1
 8006be2:	f8ca 5000 	str.w	r5, [sl]
 8006be6:	f8da 3000 	ldr.w	r3, [sl]
 8006bea:	4499      	add	r9, r3
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8006bf8:	b108      	cbz	r0, 8006bfe <__cvt+0x9e>
 8006bfa:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bfe:	2230      	movs	r2, #48	; 0x30
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	454b      	cmp	r3, r9
 8006c04:	d307      	bcc.n	8006c16 <__cvt+0xb6>
 8006c06:	4630      	mov	r0, r6
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006c0c:	1b9b      	subs	r3, r3, r6
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	b008      	add	sp, #32
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	9107      	str	r1, [sp, #28]
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e7f0      	b.n	8006c00 <__cvt+0xa0>

08006c1e <__exponent>:
 8006c1e:	4603      	mov	r3, r0
 8006c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c22:	2900      	cmp	r1, #0
 8006c24:	f803 2b02 	strb.w	r2, [r3], #2
 8006c28:	bfb6      	itet	lt
 8006c2a:	222d      	movlt	r2, #45	; 0x2d
 8006c2c:	222b      	movge	r2, #43	; 0x2b
 8006c2e:	4249      	neglt	r1, r1
 8006c30:	2909      	cmp	r1, #9
 8006c32:	7042      	strb	r2, [r0, #1]
 8006c34:	dd2a      	ble.n	8006c8c <__exponent+0x6e>
 8006c36:	f10d 0207 	add.w	r2, sp, #7
 8006c3a:	4617      	mov	r7, r2
 8006c3c:	260a      	movs	r6, #10
 8006c3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c42:	4694      	mov	ip, r2
 8006c44:	fb06 1415 	mls	r4, r6, r5, r1
 8006c48:	3430      	adds	r4, #48	; 0x30
 8006c4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c4e:	460c      	mov	r4, r1
 8006c50:	2c63      	cmp	r4, #99	; 0x63
 8006c52:	4629      	mov	r1, r5
 8006c54:	f102 32ff 	add.w	r2, r2, #4294967295
 8006c58:	dcf1      	bgt.n	8006c3e <__exponent+0x20>
 8006c5a:	3130      	adds	r1, #48	; 0x30
 8006c5c:	f1ac 0402 	sub.w	r4, ip, #2
 8006c60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006c64:	4622      	mov	r2, r4
 8006c66:	1c41      	adds	r1, r0, #1
 8006c68:	42ba      	cmp	r2, r7
 8006c6a:	d30a      	bcc.n	8006c82 <__exponent+0x64>
 8006c6c:	f10d 0209 	add.w	r2, sp, #9
 8006c70:	eba2 020c 	sub.w	r2, r2, ip
 8006c74:	42bc      	cmp	r4, r7
 8006c76:	bf88      	it	hi
 8006c78:	2200      	movhi	r2, #0
 8006c7a:	4413      	add	r3, r2
 8006c7c:	1a18      	subs	r0, r3, r0
 8006c7e:	b003      	add	sp, #12
 8006c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006c8a:	e7ed      	b.n	8006c68 <__exponent+0x4a>
 8006c8c:	2330      	movs	r3, #48	; 0x30
 8006c8e:	3130      	adds	r1, #48	; 0x30
 8006c90:	7083      	strb	r3, [r0, #2]
 8006c92:	70c1      	strb	r1, [r0, #3]
 8006c94:	1d03      	adds	r3, r0, #4
 8006c96:	e7f1      	b.n	8006c7c <__exponent+0x5e>

08006c98 <_printf_float>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b091      	sub	sp, #68	; 0x44
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f000 fdc7 	bl	800783c <_localeconv_r>
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb4:	f7f9 fa4c 	bl	8000150 <strlen>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930e      	str	r3, [sp, #56]	; 0x38
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006cc2:	3307      	adds	r3, #7
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	f103 0208 	add.w	r2, r3, #8
 8006ccc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006cd4:	f8c8 2000 	str.w	r2, [r8]
 8006cd8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4643      	mov	r3, r8
 8006ce0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ce4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006ce8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	4650      	mov	r0, sl
 8006cf0:	4b9c      	ldr	r3, [pc, #624]	; (8006f64 <_printf_float+0x2cc>)
 8006cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf4:	f7f9 fe8a 	bl	8000a0c <__aeabi_dcmpun>
 8006cf8:	bb70      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	4650      	mov	r0, sl
 8006d00:	4b98      	ldr	r3, [pc, #608]	; (8006f64 <_printf_float+0x2cc>)
 8006d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d04:	f7f9 fe64 	bl	80009d0 <__aeabi_dcmple>
 8006d08:	bb30      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4650      	mov	r0, sl
 8006d10:	4641      	mov	r1, r8
 8006d12:	f7f9 fe53 	bl	80009bc <__aeabi_dcmplt>
 8006d16:	b110      	cbz	r0, 8006d1e <_printf_float+0x86>
 8006d18:	232d      	movs	r3, #45	; 0x2d
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1e:	4a92      	ldr	r2, [pc, #584]	; (8006f68 <_printf_float+0x2d0>)
 8006d20:	4b92      	ldr	r3, [pc, #584]	; (8006f6c <_printf_float+0x2d4>)
 8006d22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d26:	bf94      	ite	ls
 8006d28:	4690      	movls	r8, r2
 8006d2a:	4698      	movhi	r8, r3
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	f02b 0304 	bic.w	r3, fp, #4
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	4633      	mov	r3, r6
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	9700      	str	r7, [sp, #0]
 8006d42:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d44:	f000 f9d6 	bl	80070f4 <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f040 8090 	bne.w	8006e6e <_printf_float+0x1d6>
 8006d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d52:	b011      	add	sp, #68	; 0x44
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	4652      	mov	r2, sl
 8006d5a:	4643      	mov	r3, r8
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	4641      	mov	r1, r8
 8006d60:	f7f9 fe54 	bl	8000a0c <__aeabi_dcmpun>
 8006d64:	b148      	cbz	r0, 8006d7a <_printf_float+0xe2>
 8006d66:	f1b8 0f00 	cmp.w	r8, #0
 8006d6a:	bfb8      	it	lt
 8006d6c:	232d      	movlt	r3, #45	; 0x2d
 8006d6e:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <_printf_float+0x2d8>)
 8006d70:	bfb8      	it	lt
 8006d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d76:	4b7f      	ldr	r3, [pc, #508]	; (8006f74 <_printf_float+0x2dc>)
 8006d78:	e7d3      	b.n	8006d22 <_printf_float+0x8a>
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	d142      	bne.n	8006e0a <_printf_float+0x172>
 8006d84:	2306      	movs	r3, #6
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	9206      	str	r2, [sp, #24]
 8006d8c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d92:	aa0d      	add	r2, sp, #52	; 0x34
 8006d94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d98:	9203      	str	r2, [sp, #12]
 8006d9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	4652      	mov	r2, sl
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	4643      	mov	r3, r8
 8006dae:	910b      	str	r1, [sp, #44]	; 0x2c
 8006db0:	f7ff fed6 	bl	8006b60 <__cvt>
 8006db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006db6:	4680      	mov	r8, r0
 8006db8:	2947      	cmp	r1, #71	; 0x47
 8006dba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dbc:	d108      	bne.n	8006dd0 <_printf_float+0x138>
 8006dbe:	1cc8      	adds	r0, r1, #3
 8006dc0:	db02      	blt.n	8006dc8 <_printf_float+0x130>
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	dd40      	ble.n	8006e4a <_printf_float+0x1b2>
 8006dc8:	f1a9 0902 	sub.w	r9, r9, #2
 8006dcc:	fa5f f989 	uxtb.w	r9, r9
 8006dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dd4:	d81f      	bhi.n	8006e16 <_printf_float+0x17e>
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	3901      	subs	r1, #1
 8006dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dde:	910d      	str	r1, [sp, #52]	; 0x34
 8006de0:	f7ff ff1d 	bl	8006c1e <__exponent>
 8006de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006de6:	4682      	mov	sl, r0
 8006de8:	1813      	adds	r3, r2, r0
 8006dea:	2a01      	cmp	r2, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	dc02      	bgt.n	8006df6 <_printf_float+0x15e>
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	07d2      	lsls	r2, r2, #31
 8006df4:	d501      	bpl.n	8006dfa <_printf_float+0x162>
 8006df6:	3301      	adds	r3, #1
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d09b      	beq.n	8006d3a <_printf_float+0xa2>
 8006e02:	232d      	movs	r3, #45	; 0x2d
 8006e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e08:	e797      	b.n	8006d3a <_printf_float+0xa2>
 8006e0a:	2947      	cmp	r1, #71	; 0x47
 8006e0c:	d1bc      	bne.n	8006d88 <_printf_float+0xf0>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ba      	bne.n	8006d88 <_printf_float+0xf0>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7b7      	b.n	8006d86 <_printf_float+0xee>
 8006e16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e1a:	d118      	bne.n	8006e4e <_printf_float+0x1b6>
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	dd0b      	ble.n	8006e3a <_printf_float+0x1a2>
 8006e22:	6121      	str	r1, [r4, #16]
 8006e24:	b913      	cbnz	r3, 8006e2c <_printf_float+0x194>
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	07d0      	lsls	r0, r2, #31
 8006e2a:	d502      	bpl.n	8006e32 <_printf_float+0x19a>
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	440b      	add	r3, r1
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	f04f 0a00 	mov.w	sl, #0
 8006e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e38:	e7df      	b.n	8006dfa <_printf_float+0x162>
 8006e3a:	b913      	cbnz	r3, 8006e42 <_printf_float+0x1aa>
 8006e3c:	6822      	ldr	r2, [r4, #0]
 8006e3e:	07d2      	lsls	r2, r2, #31
 8006e40:	d501      	bpl.n	8006e46 <_printf_float+0x1ae>
 8006e42:	3302      	adds	r3, #2
 8006e44:	e7f4      	b.n	8006e30 <_printf_float+0x198>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7f2      	b.n	8006e30 <_printf_float+0x198>
 8006e4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e50:	4299      	cmp	r1, r3
 8006e52:	db05      	blt.n	8006e60 <_printf_float+0x1c8>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	6121      	str	r1, [r4, #16]
 8006e58:	07d8      	lsls	r0, r3, #31
 8006e5a:	d5ea      	bpl.n	8006e32 <_printf_float+0x19a>
 8006e5c:	1c4b      	adds	r3, r1, #1
 8006e5e:	e7e7      	b.n	8006e30 <_printf_float+0x198>
 8006e60:	2900      	cmp	r1, #0
 8006e62:	bfcc      	ite	gt
 8006e64:	2201      	movgt	r2, #1
 8006e66:	f1c1 0202 	rsble	r2, r1, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	e7e0      	b.n	8006e30 <_printf_float+0x198>
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	055a      	lsls	r2, r3, #21
 8006e72:	d407      	bmi.n	8006e84 <_printf_float+0x1ec>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	4642      	mov	r2, r8
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d12b      	bne.n	8006eda <_printf_float+0x242>
 8006e82:	e764      	b.n	8006d4e <_printf_float+0xb6>
 8006e84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e88:	f240 80dd 	bls.w	8007046 <_printf_float+0x3ae>
 8006e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e90:	2200      	movs	r2, #0
 8006e92:	2300      	movs	r3, #0
 8006e94:	f7f9 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d033      	beq.n	8006f04 <_printf_float+0x26c>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <_printf_float+0x2e0>)
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af51 	beq.w	8006d4e <_printf_float+0xb6>
 8006eac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	db02      	blt.n	8006eba <_printf_float+0x222>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	07d8      	lsls	r0, r3, #31
 8006eb8:	d50f      	bpl.n	8006eda <_printf_float+0x242>
 8006eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f af42 	beq.w	8006d4e <_printf_float+0xb6>
 8006eca:	f04f 0800 	mov.w	r8, #0
 8006ece:	f104 091a 	add.w	r9, r4, #26
 8006ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4543      	cmp	r3, r8
 8006ed8:	dc09      	bgt.n	8006eee <_printf_float+0x256>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	079b      	lsls	r3, r3, #30
 8006ede:	f100 8104 	bmi.w	80070ea <_printf_float+0x452>
 8006ee2:	68e0      	ldr	r0, [r4, #12]
 8006ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	bfb8      	it	lt
 8006eea:	4618      	movlt	r0, r3
 8006eec:	e731      	b.n	8006d52 <_printf_float+0xba>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	464a      	mov	r2, r9
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	f43f af28 	beq.w	8006d4e <_printf_float+0xb6>
 8006efe:	f108 0801 	add.w	r8, r8, #1
 8006f02:	e7e6      	b.n	8006ed2 <_printf_float+0x23a>
 8006f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc38      	bgt.n	8006f7c <_printf_float+0x2e4>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <_printf_float+0x2e0>)
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f af1a 	beq.w	8006d4e <_printf_float+0xb6>
 8006f1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d102      	bne.n	8006f28 <_printf_float+0x290>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	d5d8      	bpl.n	8006eda <_printf_float+0x242>
 8006f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af0b 	beq.w	8006d4e <_printf_float+0xb6>
 8006f38:	f04f 0900 	mov.w	r9, #0
 8006f3c:	f104 0a1a 	add.w	sl, r4, #26
 8006f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f42:	425b      	negs	r3, r3
 8006f44:	454b      	cmp	r3, r9
 8006f46:	dc01      	bgt.n	8006f4c <_printf_float+0x2b4>
 8006f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4a:	e794      	b.n	8006e76 <_printf_float+0x1de>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4652      	mov	r2, sl
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f aef9 	beq.w	8006d4e <_printf_float+0xb6>
 8006f5c:	f109 0901 	add.w	r9, r9, #1
 8006f60:	e7ee      	b.n	8006f40 <_printf_float+0x2a8>
 8006f62:	bf00      	nop
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	0800a1f0 	.word	0x0800a1f0
 8006f6c:	0800a1f4 	.word	0x0800a1f4
 8006f70:	0800a1f8 	.word	0x0800a1f8
 8006f74:	0800a1fc 	.word	0x0800a1fc
 8006f78:	0800a200 	.word	0x0800a200
 8006f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bfa8      	it	ge
 8006f84:	461a      	movge	r2, r3
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	4691      	mov	r9, r2
 8006f8a:	dc37      	bgt.n	8006ffc <_printf_float+0x364>
 8006f8c:	f04f 0b00 	mov.w	fp, #0
 8006f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f94:	f104 021a 	add.w	r2, r4, #26
 8006f98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f9c:	ebaa 0309 	sub.w	r3, sl, r9
 8006fa0:	455b      	cmp	r3, fp
 8006fa2:	dc33      	bgt.n	800700c <_printf_float+0x374>
 8006fa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	db3b      	blt.n	8007024 <_printf_float+0x38c>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07da      	lsls	r2, r3, #31
 8006fb0:	d438      	bmi.n	8007024 <_printf_float+0x38c>
 8006fb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006fb6:	eba2 0903 	sub.w	r9, r2, r3
 8006fba:	eba2 020a 	sub.w	r2, r2, sl
 8006fbe:	4591      	cmp	r9, r2
 8006fc0:	bfa8      	it	ge
 8006fc2:	4691      	movge	r9, r2
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	dc34      	bgt.n	8007034 <_printf_float+0x39c>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fd2:	f104 0a1a 	add.w	sl, r4, #26
 8006fd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	eba3 0309 	sub.w	r3, r3, r9
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	f77f af7a 	ble.w	8006eda <_printf_float+0x242>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f43f aeac 	beq.w	8006d4e <_printf_float+0xb6>
 8006ff6:	f108 0801 	add.w	r8, r8, #1
 8006ffa:	e7ec      	b.n	8006fd6 <_printf_float+0x33e>
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	4631      	mov	r1, r6
 8007000:	4642      	mov	r2, r8
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	d1c0      	bne.n	8006f8c <_printf_float+0x2f4>
 800700a:	e6a0      	b.n	8006d4e <_printf_float+0xb6>
 800700c:	2301      	movs	r3, #1
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	920b      	str	r2, [sp, #44]	; 0x2c
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f ae99 	beq.w	8006d4e <_printf_float+0xb6>
 800701c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800701e:	f10b 0b01 	add.w	fp, fp, #1
 8007022:	e7b9      	b.n	8006f98 <_printf_float+0x300>
 8007024:	4631      	mov	r1, r6
 8007026:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	d1bf      	bne.n	8006fb2 <_printf_float+0x31a>
 8007032:	e68c      	b.n	8006d4e <_printf_float+0xb6>
 8007034:	464b      	mov	r3, r9
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	eb08 020a 	add.w	r2, r8, sl
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	d1c2      	bne.n	8006fca <_printf_float+0x332>
 8007044:	e683      	b.n	8006d4e <_printf_float+0xb6>
 8007046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007048:	2a01      	cmp	r2, #1
 800704a:	dc01      	bgt.n	8007050 <_printf_float+0x3b8>
 800704c:	07db      	lsls	r3, r3, #31
 800704e:	d539      	bpl.n	80070c4 <_printf_float+0x42c>
 8007050:	2301      	movs	r3, #1
 8007052:	4642      	mov	r2, r8
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f ae77 	beq.w	8006d4e <_printf_float+0xb6>
 8007060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae6f 	beq.w	8006d4e <_printf_float+0xb6>
 8007070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800707c:	f7f9 fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8007080:	b9d8      	cbnz	r0, 80070ba <_printf_float+0x422>
 8007082:	f109 33ff 	add.w	r3, r9, #4294967295
 8007086:	f108 0201 	add.w	r2, r8, #1
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d10e      	bne.n	80070b2 <_printf_float+0x41a>
 8007094:	e65b      	b.n	8006d4e <_printf_float+0xb6>
 8007096:	2301      	movs	r3, #1
 8007098:	464a      	mov	r2, r9
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae54 	beq.w	8006d4e <_printf_float+0xb6>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4543      	cmp	r3, r8
 80070b0:	dcf1      	bgt.n	8007096 <_printf_float+0x3fe>
 80070b2:	4653      	mov	r3, sl
 80070b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070b8:	e6de      	b.n	8006e78 <_printf_float+0x1e0>
 80070ba:	f04f 0800 	mov.w	r8, #0
 80070be:	f104 091a 	add.w	r9, r4, #26
 80070c2:	e7f2      	b.n	80070aa <_printf_float+0x412>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4642      	mov	r2, r8
 80070c8:	e7df      	b.n	800708a <_printf_float+0x3f2>
 80070ca:	2301      	movs	r3, #1
 80070cc:	464a      	mov	r2, r9
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f ae3a 	beq.w	8006d4e <_printf_float+0xb6>
 80070da:	f108 0801 	add.w	r8, r8, #1
 80070de:	68e3      	ldr	r3, [r4, #12]
 80070e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070e2:	1a5b      	subs	r3, r3, r1
 80070e4:	4543      	cmp	r3, r8
 80070e6:	dcf0      	bgt.n	80070ca <_printf_float+0x432>
 80070e8:	e6fb      	b.n	8006ee2 <_printf_float+0x24a>
 80070ea:	f04f 0800 	mov.w	r8, #0
 80070ee:	f104 0919 	add.w	r9, r4, #25
 80070f2:	e7f4      	b.n	80070de <_printf_float+0x446>

080070f4 <_printf_common>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	4616      	mov	r6, r2
 80070fa:	4699      	mov	r9, r3
 80070fc:	688a      	ldr	r2, [r1, #8]
 80070fe:	690b      	ldr	r3, [r1, #16]
 8007100:	4607      	mov	r7, r0
 8007102:	4293      	cmp	r3, r2
 8007104:	bfb8      	it	lt
 8007106:	4613      	movlt	r3, r2
 8007108:	6033      	str	r3, [r6, #0]
 800710a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800710e:	460c      	mov	r4, r1
 8007110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007114:	b10a      	cbz	r2, 800711a <_printf_common+0x26>
 8007116:	3301      	adds	r3, #1
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	0699      	lsls	r1, r3, #26
 800711e:	bf42      	ittt	mi
 8007120:	6833      	ldrmi	r3, [r6, #0]
 8007122:	3302      	addmi	r3, #2
 8007124:	6033      	strmi	r3, [r6, #0]
 8007126:	6825      	ldr	r5, [r4, #0]
 8007128:	f015 0506 	ands.w	r5, r5, #6
 800712c:	d106      	bne.n	800713c <_printf_common+0x48>
 800712e:	f104 0a19 	add.w	sl, r4, #25
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	6832      	ldr	r2, [r6, #0]
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	42ab      	cmp	r3, r5
 800713a:	dc2b      	bgt.n	8007194 <_printf_common+0xa0>
 800713c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007140:	1e13      	subs	r3, r2, #0
 8007142:	6822      	ldr	r2, [r4, #0]
 8007144:	bf18      	it	ne
 8007146:	2301      	movne	r3, #1
 8007148:	0692      	lsls	r2, r2, #26
 800714a:	d430      	bmi.n	80071ae <_printf_common+0xba>
 800714c:	4649      	mov	r1, r9
 800714e:	4638      	mov	r0, r7
 8007150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007154:	47c0      	blx	r8
 8007156:	3001      	adds	r0, #1
 8007158:	d023      	beq.n	80071a2 <_printf_common+0xae>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	6922      	ldr	r2, [r4, #16]
 800715e:	f003 0306 	and.w	r3, r3, #6
 8007162:	2b04      	cmp	r3, #4
 8007164:	bf14      	ite	ne
 8007166:	2500      	movne	r5, #0
 8007168:	6833      	ldreq	r3, [r6, #0]
 800716a:	f04f 0600 	mov.w	r6, #0
 800716e:	bf08      	it	eq
 8007170:	68e5      	ldreq	r5, [r4, #12]
 8007172:	f104 041a 	add.w	r4, r4, #26
 8007176:	bf08      	it	eq
 8007178:	1aed      	subeq	r5, r5, r3
 800717a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800717e:	bf08      	it	eq
 8007180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007184:	4293      	cmp	r3, r2
 8007186:	bfc4      	itt	gt
 8007188:	1a9b      	subgt	r3, r3, r2
 800718a:	18ed      	addgt	r5, r5, r3
 800718c:	42b5      	cmp	r5, r6
 800718e:	d11a      	bne.n	80071c6 <_printf_common+0xd2>
 8007190:	2000      	movs	r0, #0
 8007192:	e008      	b.n	80071a6 <_printf_common+0xb2>
 8007194:	2301      	movs	r3, #1
 8007196:	4652      	mov	r2, sl
 8007198:	4649      	mov	r1, r9
 800719a:	4638      	mov	r0, r7
 800719c:	47c0      	blx	r8
 800719e:	3001      	adds	r0, #1
 80071a0:	d103      	bne.n	80071aa <_printf_common+0xb6>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	3501      	adds	r5, #1
 80071ac:	e7c1      	b.n	8007132 <_printf_common+0x3e>
 80071ae:	2030      	movs	r0, #48	; 0x30
 80071b0:	18e1      	adds	r1, r4, r3
 80071b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071bc:	4422      	add	r2, r4
 80071be:	3302      	adds	r3, #2
 80071c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c4:	e7c2      	b.n	800714c <_printf_common+0x58>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4622      	mov	r2, r4
 80071ca:	4649      	mov	r1, r9
 80071cc:	4638      	mov	r0, r7
 80071ce:	47c0      	blx	r8
 80071d0:	3001      	adds	r0, #1
 80071d2:	d0e6      	beq.n	80071a2 <_printf_common+0xae>
 80071d4:	3601      	adds	r6, #1
 80071d6:	e7d9      	b.n	800718c <_printf_common+0x98>

080071d8 <_printf_i>:
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	7e0f      	ldrb	r7, [r1, #24]
 80071de:	4691      	mov	r9, r2
 80071e0:	2f78      	cmp	r7, #120	; 0x78
 80071e2:	4680      	mov	r8, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	469a      	mov	sl, r3
 80071e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ee:	d807      	bhi.n	8007200 <_printf_i+0x28>
 80071f0:	2f62      	cmp	r7, #98	; 0x62
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x32>
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	f000 80d5 	beq.w	80073a4 <_printf_i+0x1cc>
 80071fa:	2f58      	cmp	r7, #88	; 0x58
 80071fc:	f000 80c1 	beq.w	8007382 <_printf_i+0x1aa>
 8007200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007208:	e03a      	b.n	8007280 <_printf_i+0xa8>
 800720a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800720e:	2b15      	cmp	r3, #21
 8007210:	d8f6      	bhi.n	8007200 <_printf_i+0x28>
 8007212:	a101      	add	r1, pc, #4	; (adr r1, 8007218 <_printf_i+0x40>)
 8007214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007218:	08007271 	.word	0x08007271
 800721c:	08007285 	.word	0x08007285
 8007220:	08007201 	.word	0x08007201
 8007224:	08007201 	.word	0x08007201
 8007228:	08007201 	.word	0x08007201
 800722c:	08007201 	.word	0x08007201
 8007230:	08007285 	.word	0x08007285
 8007234:	08007201 	.word	0x08007201
 8007238:	08007201 	.word	0x08007201
 800723c:	08007201 	.word	0x08007201
 8007240:	08007201 	.word	0x08007201
 8007244:	0800738b 	.word	0x0800738b
 8007248:	080072b1 	.word	0x080072b1
 800724c:	08007345 	.word	0x08007345
 8007250:	08007201 	.word	0x08007201
 8007254:	08007201 	.word	0x08007201
 8007258:	080073ad 	.word	0x080073ad
 800725c:	08007201 	.word	0x08007201
 8007260:	080072b1 	.word	0x080072b1
 8007264:	08007201 	.word	0x08007201
 8007268:	08007201 	.word	0x08007201
 800726c:	0800734d 	.word	0x0800734d
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	602a      	str	r2, [r5, #0]
 8007278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e0a0      	b.n	80073c6 <_printf_i+0x1ee>
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	0607      	lsls	r7, r0, #24
 800728a:	f103 0104 	add.w	r1, r3, #4
 800728e:	6029      	str	r1, [r5, #0]
 8007290:	d501      	bpl.n	8007296 <_printf_i+0xbe>
 8007292:	681e      	ldr	r6, [r3, #0]
 8007294:	e003      	b.n	800729e <_printf_i+0xc6>
 8007296:	0646      	lsls	r6, r0, #25
 8007298:	d5fb      	bpl.n	8007292 <_printf_i+0xba>
 800729a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800729e:	2e00      	cmp	r6, #0
 80072a0:	da03      	bge.n	80072aa <_printf_i+0xd2>
 80072a2:	232d      	movs	r3, #45	; 0x2d
 80072a4:	4276      	negs	r6, r6
 80072a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072aa:	230a      	movs	r3, #10
 80072ac:	4859      	ldr	r0, [pc, #356]	; (8007414 <_printf_i+0x23c>)
 80072ae:	e012      	b.n	80072d6 <_printf_i+0xfe>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	6820      	ldr	r0, [r4, #0]
 80072b4:	1d19      	adds	r1, r3, #4
 80072b6:	6029      	str	r1, [r5, #0]
 80072b8:	0605      	lsls	r5, r0, #24
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0xe8>
 80072bc:	681e      	ldr	r6, [r3, #0]
 80072be:	e002      	b.n	80072c6 <_printf_i+0xee>
 80072c0:	0641      	lsls	r1, r0, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0xe4>
 80072c4:	881e      	ldrh	r6, [r3, #0]
 80072c6:	2f6f      	cmp	r7, #111	; 0x6f
 80072c8:	bf0c      	ite	eq
 80072ca:	2308      	moveq	r3, #8
 80072cc:	230a      	movne	r3, #10
 80072ce:	4851      	ldr	r0, [pc, #324]	; (8007414 <_printf_i+0x23c>)
 80072d0:	2100      	movs	r1, #0
 80072d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072d6:	6865      	ldr	r5, [r4, #4]
 80072d8:	2d00      	cmp	r5, #0
 80072da:	bfa8      	it	ge
 80072dc:	6821      	ldrge	r1, [r4, #0]
 80072de:	60a5      	str	r5, [r4, #8]
 80072e0:	bfa4      	itt	ge
 80072e2:	f021 0104 	bicge.w	r1, r1, #4
 80072e6:	6021      	strge	r1, [r4, #0]
 80072e8:	b90e      	cbnz	r6, 80072ee <_printf_i+0x116>
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	d04b      	beq.n	8007386 <_printf_i+0x1ae>
 80072ee:	4615      	mov	r5, r2
 80072f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80072f4:	fb03 6711 	mls	r7, r3, r1, r6
 80072f8:	5dc7      	ldrb	r7, [r0, r7]
 80072fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072fe:	4637      	mov	r7, r6
 8007300:	42bb      	cmp	r3, r7
 8007302:	460e      	mov	r6, r1
 8007304:	d9f4      	bls.n	80072f0 <_printf_i+0x118>
 8007306:	2b08      	cmp	r3, #8
 8007308:	d10b      	bne.n	8007322 <_printf_i+0x14a>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	07de      	lsls	r6, r3, #31
 800730e:	d508      	bpl.n	8007322 <_printf_i+0x14a>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	6861      	ldr	r1, [r4, #4]
 8007314:	4299      	cmp	r1, r3
 8007316:	bfde      	ittt	le
 8007318:	2330      	movle	r3, #48	; 0x30
 800731a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800731e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007322:	1b52      	subs	r2, r2, r5
 8007324:	6122      	str	r2, [r4, #16]
 8007326:	464b      	mov	r3, r9
 8007328:	4621      	mov	r1, r4
 800732a:	4640      	mov	r0, r8
 800732c:	f8cd a000 	str.w	sl, [sp]
 8007330:	aa03      	add	r2, sp, #12
 8007332:	f7ff fedf 	bl	80070f4 <_printf_common>
 8007336:	3001      	adds	r0, #1
 8007338:	d14a      	bne.n	80073d0 <_printf_i+0x1f8>
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	b004      	add	sp, #16
 8007340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	f043 0320 	orr.w	r3, r3, #32
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	2778      	movs	r7, #120	; 0x78
 800734e:	4832      	ldr	r0, [pc, #200]	; (8007418 <_printf_i+0x240>)
 8007350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	6829      	ldr	r1, [r5, #0]
 8007358:	061f      	lsls	r7, r3, #24
 800735a:	f851 6b04 	ldr.w	r6, [r1], #4
 800735e:	d402      	bmi.n	8007366 <_printf_i+0x18e>
 8007360:	065f      	lsls	r7, r3, #25
 8007362:	bf48      	it	mi
 8007364:	b2b6      	uxthmi	r6, r6
 8007366:	07df      	lsls	r7, r3, #31
 8007368:	bf48      	it	mi
 800736a:	f043 0320 	orrmi.w	r3, r3, #32
 800736e:	6029      	str	r1, [r5, #0]
 8007370:	bf48      	it	mi
 8007372:	6023      	strmi	r3, [r4, #0]
 8007374:	b91e      	cbnz	r6, 800737e <_printf_i+0x1a6>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f023 0320 	bic.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	2310      	movs	r3, #16
 8007380:	e7a6      	b.n	80072d0 <_printf_i+0xf8>
 8007382:	4824      	ldr	r0, [pc, #144]	; (8007414 <_printf_i+0x23c>)
 8007384:	e7e4      	b.n	8007350 <_printf_i+0x178>
 8007386:	4615      	mov	r5, r2
 8007388:	e7bd      	b.n	8007306 <_printf_i+0x12e>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	6826      	ldr	r6, [r4, #0]
 800738e:	1d18      	adds	r0, r3, #4
 8007390:	6961      	ldr	r1, [r4, #20]
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	0635      	lsls	r5, r6, #24
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	d501      	bpl.n	800739e <_printf_i+0x1c6>
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	e002      	b.n	80073a4 <_printf_i+0x1cc>
 800739e:	0670      	lsls	r0, r6, #25
 80073a0:	d5fb      	bpl.n	800739a <_printf_i+0x1c2>
 80073a2:	8019      	strh	r1, [r3, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	4615      	mov	r5, r2
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	e7bc      	b.n	8007326 <_printf_i+0x14e>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	2100      	movs	r1, #0
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	4628      	mov	r0, r5
 80073ba:	f000 fab6 	bl	800792a <memchr>
 80073be:	b108      	cbz	r0, 80073c4 <_printf_i+0x1ec>
 80073c0:	1b40      	subs	r0, r0, r5
 80073c2:	6060      	str	r0, [r4, #4]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2300      	movs	r3, #0
 80073ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ce:	e7aa      	b.n	8007326 <_printf_i+0x14e>
 80073d0:	462a      	mov	r2, r5
 80073d2:	4649      	mov	r1, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	47d0      	blx	sl
 80073da:	3001      	adds	r0, #1
 80073dc:	d0ad      	beq.n	800733a <_printf_i+0x162>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	079b      	lsls	r3, r3, #30
 80073e2:	d413      	bmi.n	800740c <_printf_i+0x234>
 80073e4:	68e0      	ldr	r0, [r4, #12]
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	4298      	cmp	r0, r3
 80073ea:	bfb8      	it	lt
 80073ec:	4618      	movlt	r0, r3
 80073ee:	e7a6      	b.n	800733e <_printf_i+0x166>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4632      	mov	r2, r6
 80073f4:	4649      	mov	r1, r9
 80073f6:	4640      	mov	r0, r8
 80073f8:	47d0      	blx	sl
 80073fa:	3001      	adds	r0, #1
 80073fc:	d09d      	beq.n	800733a <_printf_i+0x162>
 80073fe:	3501      	adds	r5, #1
 8007400:	68e3      	ldr	r3, [r4, #12]
 8007402:	9903      	ldr	r1, [sp, #12]
 8007404:	1a5b      	subs	r3, r3, r1
 8007406:	42ab      	cmp	r3, r5
 8007408:	dcf2      	bgt.n	80073f0 <_printf_i+0x218>
 800740a:	e7eb      	b.n	80073e4 <_printf_i+0x20c>
 800740c:	2500      	movs	r5, #0
 800740e:	f104 0619 	add.w	r6, r4, #25
 8007412:	e7f5      	b.n	8007400 <_printf_i+0x228>
 8007414:	0800a202 	.word	0x0800a202
 8007418:	0800a213 	.word	0x0800a213

0800741c <std>:
 800741c:	2300      	movs	r3, #0
 800741e:	b510      	push	{r4, lr}
 8007420:	4604      	mov	r4, r0
 8007422:	e9c0 3300 	strd	r3, r3, [r0]
 8007426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800742a:	6083      	str	r3, [r0, #8]
 800742c:	8181      	strh	r1, [r0, #12]
 800742e:	6643      	str	r3, [r0, #100]	; 0x64
 8007430:	81c2      	strh	r2, [r0, #14]
 8007432:	6183      	str	r3, [r0, #24]
 8007434:	4619      	mov	r1, r3
 8007436:	2208      	movs	r2, #8
 8007438:	305c      	adds	r0, #92	; 0x5c
 800743a:	f000 f9f7 	bl	800782c <memset>
 800743e:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <std+0x58>)
 8007440:	6224      	str	r4, [r4, #32]
 8007442:	6263      	str	r3, [r4, #36]	; 0x24
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <std+0x5c>)
 8007446:	62a3      	str	r3, [r4, #40]	; 0x28
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <std+0x60>)
 800744a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800744c:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <std+0x64>)
 800744e:	6323      	str	r3, [r4, #48]	; 0x30
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <std+0x68>)
 8007452:	429c      	cmp	r4, r3
 8007454:	d006      	beq.n	8007464 <std+0x48>
 8007456:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800745a:	4294      	cmp	r4, r2
 800745c:	d002      	beq.n	8007464 <std+0x48>
 800745e:	33d0      	adds	r3, #208	; 0xd0
 8007460:	429c      	cmp	r4, r3
 8007462:	d105      	bne.n	8007470 <std+0x54>
 8007464:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800746c:	f000 ba5a 	b.w	8007924 <__retarget_lock_init_recursive>
 8007470:	bd10      	pop	{r4, pc}
 8007472:	bf00      	nop
 8007474:	0800767d 	.word	0x0800767d
 8007478:	0800769f 	.word	0x0800769f
 800747c:	080076d7 	.word	0x080076d7
 8007480:	080076fb 	.word	0x080076fb
 8007484:	20000414 	.word	0x20000414

08007488 <stdio_exit_handler>:
 8007488:	4a02      	ldr	r2, [pc, #8]	; (8007494 <stdio_exit_handler+0xc>)
 800748a:	4903      	ldr	r1, [pc, #12]	; (8007498 <stdio_exit_handler+0x10>)
 800748c:	4803      	ldr	r0, [pc, #12]	; (800749c <stdio_exit_handler+0x14>)
 800748e:	f000 b869 	b.w	8007564 <_fwalk_sglue>
 8007492:	bf00      	nop
 8007494:	2000000c 	.word	0x2000000c
 8007498:	08009291 	.word	0x08009291
 800749c:	20000018 	.word	0x20000018

080074a0 <cleanup_stdio>:
 80074a0:	6841      	ldr	r1, [r0, #4]
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <cleanup_stdio+0x34>)
 80074a4:	b510      	push	{r4, lr}
 80074a6:	4299      	cmp	r1, r3
 80074a8:	4604      	mov	r4, r0
 80074aa:	d001      	beq.n	80074b0 <cleanup_stdio+0x10>
 80074ac:	f001 fef0 	bl	8009290 <_fflush_r>
 80074b0:	68a1      	ldr	r1, [r4, #8]
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <cleanup_stdio+0x38>)
 80074b4:	4299      	cmp	r1, r3
 80074b6:	d002      	beq.n	80074be <cleanup_stdio+0x1e>
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 fee9 	bl	8009290 <_fflush_r>
 80074be:	68e1      	ldr	r1, [r4, #12]
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <cleanup_stdio+0x3c>)
 80074c2:	4299      	cmp	r1, r3
 80074c4:	d004      	beq.n	80074d0 <cleanup_stdio+0x30>
 80074c6:	4620      	mov	r0, r4
 80074c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074cc:	f001 bee0 	b.w	8009290 <_fflush_r>
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	20000414 	.word	0x20000414
 80074d8:	2000047c 	.word	0x2000047c
 80074dc:	200004e4 	.word	0x200004e4

080074e0 <global_stdio_init.part.0>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <global_stdio_init.part.0+0x30>)
 80074e4:	4c0b      	ldr	r4, [pc, #44]	; (8007514 <global_stdio_init.part.0+0x34>)
 80074e6:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <global_stdio_init.part.0+0x38>)
 80074e8:	4620      	mov	r0, r4
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	2104      	movs	r1, #4
 80074ee:	2200      	movs	r2, #0
 80074f0:	f7ff ff94 	bl	800741c <std>
 80074f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074f8:	2201      	movs	r2, #1
 80074fa:	2109      	movs	r1, #9
 80074fc:	f7ff ff8e 	bl	800741c <std>
 8007500:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007504:	2202      	movs	r2, #2
 8007506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800750a:	2112      	movs	r1, #18
 800750c:	f7ff bf86 	b.w	800741c <std>
 8007510:	2000054c 	.word	0x2000054c
 8007514:	20000414 	.word	0x20000414
 8007518:	08007489 	.word	0x08007489

0800751c <__sfp_lock_acquire>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__sfp_lock_acquire+0x8>)
 800751e:	f000 ba02 	b.w	8007926 <__retarget_lock_acquire_recursive>
 8007522:	bf00      	nop
 8007524:	20000555 	.word	0x20000555

08007528 <__sfp_lock_release>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__sfp_lock_release+0x8>)
 800752a:	f000 b9fd 	b.w	8007928 <__retarget_lock_release_recursive>
 800752e:	bf00      	nop
 8007530:	20000555 	.word	0x20000555

08007534 <__sinit>:
 8007534:	b510      	push	{r4, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	f7ff fff0 	bl	800751c <__sfp_lock_acquire>
 800753c:	6a23      	ldr	r3, [r4, #32]
 800753e:	b11b      	cbz	r3, 8007548 <__sinit+0x14>
 8007540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007544:	f7ff bff0 	b.w	8007528 <__sfp_lock_release>
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__sinit+0x28>)
 800754a:	6223      	str	r3, [r4, #32]
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <__sinit+0x2c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f5      	bne.n	8007540 <__sinit+0xc>
 8007554:	f7ff ffc4 	bl	80074e0 <global_stdio_init.part.0>
 8007558:	e7f2      	b.n	8007540 <__sinit+0xc>
 800755a:	bf00      	nop
 800755c:	080074a1 	.word	0x080074a1
 8007560:	2000054c 	.word	0x2000054c

08007564 <_fwalk_sglue>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	4607      	mov	r7, r0
 800756a:	4688      	mov	r8, r1
 800756c:	4614      	mov	r4, r2
 800756e:	2600      	movs	r6, #0
 8007570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007574:	f1b9 0901 	subs.w	r9, r9, #1
 8007578:	d505      	bpl.n	8007586 <_fwalk_sglue+0x22>
 800757a:	6824      	ldr	r4, [r4, #0]
 800757c:	2c00      	cmp	r4, #0
 800757e:	d1f7      	bne.n	8007570 <_fwalk_sglue+0xc>
 8007580:	4630      	mov	r0, r6
 8007582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d907      	bls.n	800759c <_fwalk_sglue+0x38>
 800758c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007590:	3301      	adds	r3, #1
 8007592:	d003      	beq.n	800759c <_fwalk_sglue+0x38>
 8007594:	4629      	mov	r1, r5
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	4306      	orrs	r6, r0
 800759c:	3568      	adds	r5, #104	; 0x68
 800759e:	e7e9      	b.n	8007574 <_fwalk_sglue+0x10>

080075a0 <iprintf>:
 80075a0:	b40f      	push	{r0, r1, r2, r3}
 80075a2:	b507      	push	{r0, r1, r2, lr}
 80075a4:	4906      	ldr	r1, [pc, #24]	; (80075c0 <iprintf+0x20>)
 80075a6:	ab04      	add	r3, sp, #16
 80075a8:	6808      	ldr	r0, [r1, #0]
 80075aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ae:	6881      	ldr	r1, [r0, #8]
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	f001 fcd1 	bl	8008f58 <_vfiprintf_r>
 80075b6:	b003      	add	sp, #12
 80075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075bc:	b004      	add	sp, #16
 80075be:	4770      	bx	lr
 80075c0:	20000064 	.word	0x20000064

080075c4 <_puts_r>:
 80075c4:	6a03      	ldr	r3, [r0, #32]
 80075c6:	b570      	push	{r4, r5, r6, lr}
 80075c8:	4605      	mov	r5, r0
 80075ca:	460e      	mov	r6, r1
 80075cc:	6884      	ldr	r4, [r0, #8]
 80075ce:	b90b      	cbnz	r3, 80075d4 <_puts_r+0x10>
 80075d0:	f7ff ffb0 	bl	8007534 <__sinit>
 80075d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075d6:	07db      	lsls	r3, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_puts_r+0x22>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	0598      	lsls	r0, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_puts_r+0x22>
 80075e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e2:	f000 f9a0 	bl	8007926 <__retarget_lock_acquire_recursive>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	0719      	lsls	r1, r3, #28
 80075ea:	d513      	bpl.n	8007614 <_puts_r+0x50>
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	b18b      	cbz	r3, 8007614 <_puts_r+0x50>
 80075f0:	3e01      	subs	r6, #1
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075f8:	3b01      	subs	r3, #1
 80075fa:	60a3      	str	r3, [r4, #8]
 80075fc:	b9e9      	cbnz	r1, 800763a <_puts_r+0x76>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da2e      	bge.n	8007660 <_puts_r+0x9c>
 8007602:	4622      	mov	r2, r4
 8007604:	210a      	movs	r1, #10
 8007606:	4628      	mov	r0, r5
 8007608:	f000 f87b 	bl	8007702 <__swbuf_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d007      	beq.n	8007620 <_puts_r+0x5c>
 8007610:	250a      	movs	r5, #10
 8007612:	e007      	b.n	8007624 <_puts_r+0x60>
 8007614:	4621      	mov	r1, r4
 8007616:	4628      	mov	r0, r5
 8007618:	f000 f8b0 	bl	800777c <__swsetup_r>
 800761c:	2800      	cmp	r0, #0
 800761e:	d0e7      	beq.n	80075f0 <_puts_r+0x2c>
 8007620:	f04f 35ff 	mov.w	r5, #4294967295
 8007624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d405      	bmi.n	8007636 <_puts_r+0x72>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	059b      	lsls	r3, r3, #22
 800762e:	d402      	bmi.n	8007636 <_puts_r+0x72>
 8007630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007632:	f000 f979 	bl	8007928 <__retarget_lock_release_recursive>
 8007636:	4628      	mov	r0, r5
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	2b00      	cmp	r3, #0
 800763c:	da04      	bge.n	8007648 <_puts_r+0x84>
 800763e:	69a2      	ldr	r2, [r4, #24]
 8007640:	429a      	cmp	r2, r3
 8007642:	dc06      	bgt.n	8007652 <_puts_r+0x8e>
 8007644:	290a      	cmp	r1, #10
 8007646:	d004      	beq.n	8007652 <_puts_r+0x8e>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	6022      	str	r2, [r4, #0]
 800764e:	7019      	strb	r1, [r3, #0]
 8007650:	e7cf      	b.n	80075f2 <_puts_r+0x2e>
 8007652:	4622      	mov	r2, r4
 8007654:	4628      	mov	r0, r5
 8007656:	f000 f854 	bl	8007702 <__swbuf_r>
 800765a:	3001      	adds	r0, #1
 800765c:	d1c9      	bne.n	80075f2 <_puts_r+0x2e>
 800765e:	e7df      	b.n	8007620 <_puts_r+0x5c>
 8007660:	250a      	movs	r5, #10
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	701d      	strb	r5, [r3, #0]
 800766a:	e7db      	b.n	8007624 <_puts_r+0x60>

0800766c <puts>:
 800766c:	4b02      	ldr	r3, [pc, #8]	; (8007678 <puts+0xc>)
 800766e:	4601      	mov	r1, r0
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	f7ff bfa7 	b.w	80075c4 <_puts_r>
 8007676:	bf00      	nop
 8007678:	20000064 	.word	0x20000064

0800767c <__sread>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	f000 f900 	bl	8007888 <_read_r>
 8007688:	2800      	cmp	r0, #0
 800768a:	bfab      	itete	ge
 800768c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800768e:	89a3      	ldrhlt	r3, [r4, #12]
 8007690:	181b      	addge	r3, r3, r0
 8007692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007696:	bfac      	ite	ge
 8007698:	6563      	strge	r3, [r4, #84]	; 0x54
 800769a:	81a3      	strhlt	r3, [r4, #12]
 800769c:	bd10      	pop	{r4, pc}

0800769e <__swrite>:
 800769e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a2:	461f      	mov	r7, r3
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	4605      	mov	r5, r0
 80076a8:	05db      	lsls	r3, r3, #23
 80076aa:	460c      	mov	r4, r1
 80076ac:	4616      	mov	r6, r2
 80076ae:	d505      	bpl.n	80076bc <__swrite+0x1e>
 80076b0:	2302      	movs	r3, #2
 80076b2:	2200      	movs	r2, #0
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f8d4 	bl	8007864 <_lseek_r>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	4632      	mov	r2, r6
 80076c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	4628      	mov	r0, r5
 80076c8:	463b      	mov	r3, r7
 80076ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d2:	f000 b8eb 	b.w	80078ac <_write_r>

080076d6 <__sseek>:
 80076d6:	b510      	push	{r4, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 f8c1 	bl	8007864 <_lseek_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	bf15      	itete	ne
 80076e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076f2:	81a3      	strheq	r3, [r4, #12]
 80076f4:	bf18      	it	ne
 80076f6:	81a3      	strhne	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__sclose>:
 80076fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fe:	f000 b8a1 	b.w	8007844 <_close_r>

08007702 <__swbuf_r>:
 8007702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007704:	460e      	mov	r6, r1
 8007706:	4614      	mov	r4, r2
 8007708:	4605      	mov	r5, r0
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x12>
 800770c:	6a03      	ldr	r3, [r0, #32]
 800770e:	b90b      	cbnz	r3, 8007714 <__swbuf_r+0x12>
 8007710:	f7ff ff10 	bl	8007534 <__sinit>
 8007714:	69a3      	ldr	r3, [r4, #24]
 8007716:	60a3      	str	r3, [r4, #8]
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	071a      	lsls	r2, r3, #28
 800771c:	d525      	bpl.n	800776a <__swbuf_r+0x68>
 800771e:	6923      	ldr	r3, [r4, #16]
 8007720:	b31b      	cbz	r3, 800776a <__swbuf_r+0x68>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	b2f6      	uxtb	r6, r6
 8007728:	1a98      	subs	r0, r3, r2
 800772a:	6963      	ldr	r3, [r4, #20]
 800772c:	4637      	mov	r7, r6
 800772e:	4283      	cmp	r3, r0
 8007730:	dc04      	bgt.n	800773c <__swbuf_r+0x3a>
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	f001 fdab 	bl	8009290 <_fflush_r>
 800773a:	b9e0      	cbnz	r0, 8007776 <__swbuf_r+0x74>
 800773c:	68a3      	ldr	r3, [r4, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	701e      	strb	r6, [r3, #0]
 800774a:	6962      	ldr	r2, [r4, #20]
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	429a      	cmp	r2, r3
 8007750:	d004      	beq.n	800775c <__swbuf_r+0x5a>
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	07db      	lsls	r3, r3, #31
 8007756:	d506      	bpl.n	8007766 <__swbuf_r+0x64>
 8007758:	2e0a      	cmp	r6, #10
 800775a:	d104      	bne.n	8007766 <__swbuf_r+0x64>
 800775c:	4621      	mov	r1, r4
 800775e:	4628      	mov	r0, r5
 8007760:	f001 fd96 	bl	8009290 <_fflush_r>
 8007764:	b938      	cbnz	r0, 8007776 <__swbuf_r+0x74>
 8007766:	4638      	mov	r0, r7
 8007768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f805 	bl	800777c <__swsetup_r>
 8007772:	2800      	cmp	r0, #0
 8007774:	d0d5      	beq.n	8007722 <__swbuf_r+0x20>
 8007776:	f04f 37ff 	mov.w	r7, #4294967295
 800777a:	e7f4      	b.n	8007766 <__swbuf_r+0x64>

0800777c <__swsetup_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <__swsetup_r+0xac>)
 8007780:	4605      	mov	r5, r0
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	460c      	mov	r4, r1
 8007786:	b118      	cbz	r0, 8007790 <__swsetup_r+0x14>
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b90b      	cbnz	r3, 8007790 <__swsetup_r+0x14>
 800778c:	f7ff fed2 	bl	8007534 <__sinit>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007796:	0718      	lsls	r0, r3, #28
 8007798:	d422      	bmi.n	80077e0 <__swsetup_r+0x64>
 800779a:	06d9      	lsls	r1, r3, #27
 800779c:	d407      	bmi.n	80077ae <__swsetup_r+0x32>
 800779e:	2309      	movs	r3, #9
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077a6:	f04f 30ff 	mov.w	r0, #4294967295
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	e034      	b.n	8007818 <__swsetup_r+0x9c>
 80077ae:	0758      	lsls	r0, r3, #29
 80077b0:	d512      	bpl.n	80077d8 <__swsetup_r+0x5c>
 80077b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b4:	b141      	cbz	r1, 80077c8 <__swsetup_r+0x4c>
 80077b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ba:	4299      	cmp	r1, r3
 80077bc:	d002      	beq.n	80077c4 <__swsetup_r+0x48>
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 ff2e 	bl	8008620 <_free_r>
 80077c4:	2300      	movs	r3, #0
 80077c6:	6363      	str	r3, [r4, #52]	; 0x34
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077ce:	81a3      	strh	r3, [r4, #12]
 80077d0:	2300      	movs	r3, #0
 80077d2:	6063      	str	r3, [r4, #4]
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f043 0308 	orr.w	r3, r3, #8
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	b94b      	cbnz	r3, 80077f8 <__swsetup_r+0x7c>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ee:	d003      	beq.n	80077f8 <__swsetup_r+0x7c>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f001 fd99 	bl	800932a <__smakebuf_r>
 80077f8:	89a0      	ldrh	r0, [r4, #12]
 80077fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077fe:	f010 0301 	ands.w	r3, r0, #1
 8007802:	d00a      	beq.n	800781a <__swsetup_r+0x9e>
 8007804:	2300      	movs	r3, #0
 8007806:	60a3      	str	r3, [r4, #8]
 8007808:	6963      	ldr	r3, [r4, #20]
 800780a:	425b      	negs	r3, r3
 800780c:	61a3      	str	r3, [r4, #24]
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	b943      	cbnz	r3, 8007824 <__swsetup_r+0xa8>
 8007812:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007816:	d1c4      	bne.n	80077a2 <__swsetup_r+0x26>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	0781      	lsls	r1, r0, #30
 800781c:	bf58      	it	pl
 800781e:	6963      	ldrpl	r3, [r4, #20]
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	e7f4      	b.n	800780e <__swsetup_r+0x92>
 8007824:	2000      	movs	r0, #0
 8007826:	e7f7      	b.n	8007818 <__swsetup_r+0x9c>
 8007828:	20000064 	.word	0x20000064

0800782c <memset>:
 800782c:	4603      	mov	r3, r0
 800782e:	4402      	add	r2, r0
 8007830:	4293      	cmp	r3, r2
 8007832:	d100      	bne.n	8007836 <memset+0xa>
 8007834:	4770      	bx	lr
 8007836:	f803 1b01 	strb.w	r1, [r3], #1
 800783a:	e7f9      	b.n	8007830 <memset+0x4>

0800783c <_localeconv_r>:
 800783c:	4800      	ldr	r0, [pc, #0]	; (8007840 <_localeconv_r+0x4>)
 800783e:	4770      	bx	lr
 8007840:	20000158 	.word	0x20000158

08007844 <_close_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	2300      	movs	r3, #0
 8007848:	4d05      	ldr	r5, [pc, #20]	; (8007860 <_close_r+0x1c>)
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7fa fc6c 	bl	800212c <_close>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_close_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_close_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000550 	.word	0x20000550

08007864 <_lseek_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	2200      	movs	r2, #0
 800786e:	4d05      	ldr	r5, [pc, #20]	; (8007884 <_lseek_r+0x20>)
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7fa fc7e 	bl	8002174 <_lseek>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_lseek_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_lseek_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000550 	.word	0x20000550

08007888 <_read_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	2200      	movs	r2, #0
 8007892:	4d05      	ldr	r5, [pc, #20]	; (80078a8 <_read_r+0x20>)
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f7fa fc0f 	bl	80020ba <_read>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d102      	bne.n	80078a6 <_read_r+0x1e>
 80078a0:	682b      	ldr	r3, [r5, #0]
 80078a2:	b103      	cbz	r3, 80078a6 <_read_r+0x1e>
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	bd38      	pop	{r3, r4, r5, pc}
 80078a8:	20000550 	.word	0x20000550

080078ac <_write_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	2200      	movs	r2, #0
 80078b6:	4d05      	ldr	r5, [pc, #20]	; (80078cc <_write_r+0x20>)
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa fc1a 	bl	80020f4 <_write>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_write_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_write_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	20000550 	.word	0x20000550

080078d0 <__errno>:
 80078d0:	4b01      	ldr	r3, [pc, #4]	; (80078d8 <__errno+0x8>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20000064 	.word	0x20000064

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	2600      	movs	r6, #0
 80078e0:	4d0c      	ldr	r5, [pc, #48]	; (8007914 <__libc_init_array+0x38>)
 80078e2:	4c0d      	ldr	r4, [pc, #52]	; (8007918 <__libc_init_array+0x3c>)
 80078e4:	1b64      	subs	r4, r4, r5
 80078e6:	10a4      	asrs	r4, r4, #2
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	f002 fae4 	bl	8009eb8 <_init>
 80078f0:	2600      	movs	r6, #0
 80078f2:	4d0a      	ldr	r5, [pc, #40]	; (800791c <__libc_init_array+0x40>)
 80078f4:	4c0a      	ldr	r4, [pc, #40]	; (8007920 <__libc_init_array+0x44>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	0800a584 	.word	0x0800a584
 8007918:	0800a584 	.word	0x0800a584
 800791c:	0800a584 	.word	0x0800a584
 8007920:	0800a588 	.word	0x0800a588

08007924 <__retarget_lock_init_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_acquire_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_release_recursive>:
 8007928:	4770      	bx	lr

0800792a <memchr>:
 800792a:	4603      	mov	r3, r0
 800792c:	b510      	push	{r4, lr}
 800792e:	b2c9      	uxtb	r1, r1
 8007930:	4402      	add	r2, r0
 8007932:	4293      	cmp	r3, r2
 8007934:	4618      	mov	r0, r3
 8007936:	d101      	bne.n	800793c <memchr+0x12>
 8007938:	2000      	movs	r0, #0
 800793a:	e003      	b.n	8007944 <memchr+0x1a>
 800793c:	7804      	ldrb	r4, [r0, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	428c      	cmp	r4, r1
 8007942:	d1f6      	bne.n	8007932 <memchr+0x8>
 8007944:	bd10      	pop	{r4, pc}

08007946 <quorem>:
 8007946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	6903      	ldr	r3, [r0, #16]
 800794c:	690c      	ldr	r4, [r1, #16]
 800794e:	4607      	mov	r7, r0
 8007950:	42a3      	cmp	r3, r4
 8007952:	db7f      	blt.n	8007a54 <quorem+0x10e>
 8007954:	3c01      	subs	r4, #1
 8007956:	f100 0514 	add.w	r5, r0, #20
 800795a:	f101 0814 	add.w	r8, r1, #20
 800795e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800796c:	3301      	adds	r3, #1
 800796e:	429a      	cmp	r2, r3
 8007970:	fbb2 f6f3 	udiv	r6, r2, r3
 8007974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800797c:	d331      	bcc.n	80079e2 <quorem+0x9c>
 800797e:	f04f 0e00 	mov.w	lr, #0
 8007982:	4640      	mov	r0, r8
 8007984:	46ac      	mov	ip, r5
 8007986:	46f2      	mov	sl, lr
 8007988:	f850 2b04 	ldr.w	r2, [r0], #4
 800798c:	b293      	uxth	r3, r2
 800798e:	fb06 e303 	mla	r3, r6, r3, lr
 8007992:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007996:	0c1a      	lsrs	r2, r3, #16
 8007998:	b29b      	uxth	r3, r3
 800799a:	fb06 220e 	mla	r2, r6, lr, r2
 800799e:	ebaa 0303 	sub.w	r3, sl, r3
 80079a2:	f8dc a000 	ldr.w	sl, [ip]
 80079a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079aa:	fa1f fa8a 	uxth.w	sl, sl
 80079ae:	4453      	add	r3, sl
 80079b0:	f8dc a000 	ldr.w	sl, [ip]
 80079b4:	b292      	uxth	r2, r2
 80079b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c4:	4581      	cmp	r9, r0
 80079c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ca:	f84c 3b04 	str.w	r3, [ip], #4
 80079ce:	d2db      	bcs.n	8007988 <quorem+0x42>
 80079d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80079d4:	b92b      	cbnz	r3, 80079e2 <quorem+0x9c>
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	3b04      	subs	r3, #4
 80079da:	429d      	cmp	r5, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	d32d      	bcc.n	8007a3c <quorem+0xf6>
 80079e0:	613c      	str	r4, [r7, #16]
 80079e2:	4638      	mov	r0, r7
 80079e4:	f001 f992 	bl	8008d0c <__mcmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	db23      	blt.n	8007a34 <quorem+0xee>
 80079ec:	4629      	mov	r1, r5
 80079ee:	2000      	movs	r0, #0
 80079f0:	3601      	adds	r6, #1
 80079f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f6:	f8d1 c000 	ldr.w	ip, [r1]
 80079fa:	b293      	uxth	r3, r2
 80079fc:	1ac3      	subs	r3, r0, r3
 80079fe:	0c12      	lsrs	r2, r2, #16
 8007a00:	fa1f f08c 	uxth.w	r0, ip
 8007a04:	4403      	add	r3, r0
 8007a06:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a14:	45c1      	cmp	r9, r8
 8007a16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a1a:	f841 3b04 	str.w	r3, [r1], #4
 8007a1e:	d2e8      	bcs.n	80079f2 <quorem+0xac>
 8007a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a28:	b922      	cbnz	r2, 8007a34 <quorem+0xee>
 8007a2a:	3b04      	subs	r3, #4
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	d30a      	bcc.n	8007a48 <quorem+0x102>
 8007a32:	613c      	str	r4, [r7, #16]
 8007a34:	4630      	mov	r0, r6
 8007a36:	b003      	add	sp, #12
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d1cd      	bne.n	80079e0 <quorem+0x9a>
 8007a44:	3c01      	subs	r4, #1
 8007a46:	e7c8      	b.n	80079da <quorem+0x94>
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	3b04      	subs	r3, #4
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	d1f0      	bne.n	8007a32 <quorem+0xec>
 8007a50:	3c01      	subs	r4, #1
 8007a52:	e7eb      	b.n	8007a2c <quorem+0xe6>
 8007a54:	2000      	movs	r0, #0
 8007a56:	e7ee      	b.n	8007a36 <quorem+0xf0>

08007a58 <_dtoa_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	461f      	mov	r7, r3
 8007a60:	69c4      	ldr	r4, [r0, #28]
 8007a62:	b099      	sub	sp, #100	; 0x64
 8007a64:	4605      	mov	r5, r0
 8007a66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007a6e:	b974      	cbnz	r4, 8007a8e <_dtoa_r+0x36>
 8007a70:	2010      	movs	r0, #16
 8007a72:	f000 fe1d 	bl	80086b0 <malloc>
 8007a76:	4602      	mov	r2, r0
 8007a78:	61e8      	str	r0, [r5, #28]
 8007a7a:	b920      	cbnz	r0, 8007a86 <_dtoa_r+0x2e>
 8007a7c:	21ef      	movs	r1, #239	; 0xef
 8007a7e:	4bac      	ldr	r3, [pc, #688]	; (8007d30 <_dtoa_r+0x2d8>)
 8007a80:	48ac      	ldr	r0, [pc, #688]	; (8007d34 <_dtoa_r+0x2dc>)
 8007a82:	f001 fccf 	bl	8009424 <__assert_func>
 8007a86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a8a:	6004      	str	r4, [r0, #0]
 8007a8c:	60c4      	str	r4, [r0, #12]
 8007a8e:	69eb      	ldr	r3, [r5, #28]
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	b151      	cbz	r1, 8007aaa <_dtoa_r+0x52>
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	2301      	movs	r3, #1
 8007a98:	4093      	lsls	r3, r2
 8007a9a:	604a      	str	r2, [r1, #4]
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fefa 	bl	8008898 <_Bfree>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	69eb      	ldr	r3, [r5, #28]
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	1e3b      	subs	r3, r7, #0
 8007aac:	bfaf      	iteee	ge
 8007aae:	2300      	movge	r3, #0
 8007ab0:	2201      	movlt	r2, #1
 8007ab2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ab6:	9305      	strlt	r3, [sp, #20]
 8007ab8:	bfa8      	it	ge
 8007aba:	f8c8 3000 	strge.w	r3, [r8]
 8007abe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007ac2:	4b9d      	ldr	r3, [pc, #628]	; (8007d38 <_dtoa_r+0x2e0>)
 8007ac4:	bfb8      	it	lt
 8007ac6:	f8c8 2000 	strlt.w	r2, [r8]
 8007aca:	ea33 0309 	bics.w	r3, r3, r9
 8007ace:	d119      	bne.n	8007b04 <_dtoa_r+0xac>
 8007ad0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ad4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007adc:	4333      	orrs	r3, r6
 8007ade:	f000 8589 	beq.w	80085f4 <_dtoa_r+0xb9c>
 8007ae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ae4:	b953      	cbnz	r3, 8007afc <_dtoa_r+0xa4>
 8007ae6:	4b95      	ldr	r3, [pc, #596]	; (8007d3c <_dtoa_r+0x2e4>)
 8007ae8:	e023      	b.n	8007b32 <_dtoa_r+0xda>
 8007aea:	4b95      	ldr	r3, [pc, #596]	; (8007d40 <_dtoa_r+0x2e8>)
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	3308      	adds	r3, #8
 8007af0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	9803      	ldr	r0, [sp, #12]
 8007af6:	b019      	add	sp, #100	; 0x64
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	4b8f      	ldr	r3, [pc, #572]	; (8007d3c <_dtoa_r+0x2e4>)
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	3303      	adds	r3, #3
 8007b02:	e7f5      	b.n	8007af0 <_dtoa_r+0x98>
 8007b04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b10:	2200      	movs	r2, #0
 8007b12:	2300      	movs	r3, #0
 8007b14:	f7f8 ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8007b18:	4680      	mov	r8, r0
 8007b1a:	b160      	cbz	r0, 8007b36 <_dtoa_r+0xde>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8562 	beq.w	80085ee <_dtoa_r+0xb96>
 8007b2a:	4b86      	ldr	r3, [pc, #536]	; (8007d44 <_dtoa_r+0x2ec>)
 8007b2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	e7de      	b.n	8007af4 <_dtoa_r+0x9c>
 8007b36:	ab16      	add	r3, sp, #88	; 0x58
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	ab17      	add	r3, sp, #92	; 0x5c
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4628      	mov	r0, r5
 8007b40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b44:	f001 f98a 	bl	8008e5c <__d2b>
 8007b48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b4c:	4682      	mov	sl, r0
 8007b4e:	2c00      	cmp	r4, #0
 8007b50:	d07e      	beq.n	8007c50 <_dtoa_r+0x1f8>
 8007b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b58:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b60:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b75      	ldr	r3, [pc, #468]	; (8007d48 <_dtoa_r+0x2f0>)
 8007b72:	f7f8 faf9 	bl	8000168 <__aeabi_dsub>
 8007b76:	a368      	add	r3, pc, #416	; (adr r3, 8007d18 <_dtoa_r+0x2c0>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 fcac 	bl	80004d8 <__aeabi_dmul>
 8007b80:	a367      	add	r3, pc, #412	; (adr r3, 8007d20 <_dtoa_r+0x2c8>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 faf1 	bl	800016c <__adddf3>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	460f      	mov	r7, r1
 8007b90:	f7f8 fc38 	bl	8000404 <__aeabi_i2d>
 8007b94:	a364      	add	r3, pc, #400	; (adr r3, 8007d28 <_dtoa_r+0x2d0>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fc9d 	bl	80004d8 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	f7f8 fae1 	bl	800016c <__adddf3>
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	f7f8 ff43 	bl	8000a38 <__aeabi_d2iz>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4683      	mov	fp, r0
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7f8 fefe 	bl	80009bc <__aeabi_dcmplt>
 8007bc0:	b148      	cbz	r0, 8007bd6 <_dtoa_r+0x17e>
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	f7f8 fc1e 	bl	8000404 <__aeabi_i2d>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd0:	b908      	cbnz	r0, 8007bd6 <_dtoa_r+0x17e>
 8007bd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bd6:	f1bb 0f16 	cmp.w	fp, #22
 8007bda:	d857      	bhi.n	8007c8c <_dtoa_r+0x234>
 8007bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007be0:	4b5a      	ldr	r3, [pc, #360]	; (8007d4c <_dtoa_r+0x2f4>)
 8007be2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fee7 	bl	80009bc <__aeabi_dcmplt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d04e      	beq.n	8007c90 <_dtoa_r+0x238>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007bfc:	1b1b      	subs	r3, r3, r4
 8007bfe:	1e5a      	subs	r2, r3, #1
 8007c00:	bf46      	itte	mi
 8007c02:	f1c3 0901 	rsbmi	r9, r3, #1
 8007c06:	2300      	movmi	r3, #0
 8007c08:	f04f 0900 	movpl.w	r9, #0
 8007c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c0e:	bf48      	it	mi
 8007c10:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c12:	f1bb 0f00 	cmp.w	fp, #0
 8007c16:	db3d      	blt.n	8007c94 <_dtoa_r+0x23c>
 8007c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007c1e:	445b      	add	r3, fp
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	2300      	movs	r3, #0
 8007c24:	930a      	str	r3, [sp, #40]	; 0x28
 8007c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d867      	bhi.n	8007cfc <_dtoa_r+0x2a4>
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	bfc4      	itt	gt
 8007c30:	3b04      	subgt	r3, #4
 8007c32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c36:	bfc8      	it	gt
 8007c38:	2400      	movgt	r4, #0
 8007c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c3e:	bfd8      	it	le
 8007c40:	2401      	movle	r4, #1
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	f200 8086 	bhi.w	8007d54 <_dtoa_r+0x2fc>
 8007c48:	e8df f003 	tbb	[pc, r3]
 8007c4c:	5637392c 	.word	0x5637392c
 8007c50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007c54:	441c      	add	r4, r3
 8007c56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	bfc1      	itttt	gt
 8007c5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c62:	fa09 f903 	lslgt.w	r9, r9, r3
 8007c66:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007c6a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c6e:	bfd6      	itet	le
 8007c70:	f1c3 0320 	rsble	r3, r3, #32
 8007c74:	ea49 0003 	orrgt.w	r0, r9, r3
 8007c78:	fa06 f003 	lslle.w	r0, r6, r3
 8007c7c:	f7f8 fbb2 	bl	80003e4 <__aeabi_ui2d>
 8007c80:	2201      	movs	r2, #1
 8007c82:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c86:	3c01      	subs	r4, #1
 8007c88:	9213      	str	r2, [sp, #76]	; 0x4c
 8007c8a:	e76f      	b.n	8007b6c <_dtoa_r+0x114>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e7b3      	b.n	8007bf8 <_dtoa_r+0x1a0>
 8007c90:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c92:	e7b2      	b.n	8007bfa <_dtoa_r+0x1a2>
 8007c94:	f1cb 0300 	rsb	r3, fp, #0
 8007c98:	930a      	str	r3, [sp, #40]	; 0x28
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	eba9 090b 	sub.w	r9, r9, fp
 8007ca0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ca2:	e7c0      	b.n	8007c26 <_dtoa_r+0x1ce>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ca8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	dc55      	bgt.n	8007d5a <_dtoa_r+0x302>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	9306      	str	r3, [sp, #24]
 8007cb4:	9308      	str	r3, [sp, #32]
 8007cb6:	9223      	str	r2, [sp, #140]	; 0x8c
 8007cb8:	e00b      	b.n	8007cd2 <_dtoa_r+0x27a>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e7f3      	b.n	8007ca6 <_dtoa_r+0x24e>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cc4:	445b      	add	r3, fp
 8007cc6:	9306      	str	r3, [sp, #24]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	9308      	str	r3, [sp, #32]
 8007cce:	bfb8      	it	lt
 8007cd0:	2301      	movlt	r3, #1
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	69e8      	ldr	r0, [r5, #28]
 8007cd8:	f102 0614 	add.w	r6, r2, #20
 8007cdc:	429e      	cmp	r6, r3
 8007cde:	d940      	bls.n	8007d62 <_dtoa_r+0x30a>
 8007ce0:	6041      	str	r1, [r0, #4]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 fd98 	bl	8008818 <_Balloc>
 8007ce8:	9003      	str	r0, [sp, #12]
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d13c      	bne.n	8007d68 <_dtoa_r+0x310>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	f240 11af 	movw	r1, #431	; 0x1af
 8007cf4:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <_dtoa_r+0x2f8>)
 8007cf6:	e6c3      	b.n	8007a80 <_dtoa_r+0x28>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e7e1      	b.n	8007cc0 <_dtoa_r+0x268>
 8007cfc:	2401      	movs	r4, #1
 8007cfe:	2300      	movs	r3, #0
 8007d00:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d02:	9322      	str	r3, [sp, #136]	; 0x88
 8007d04:	f04f 33ff 	mov.w	r3, #4294967295
 8007d08:	2200      	movs	r2, #0
 8007d0a:	9306      	str	r3, [sp, #24]
 8007d0c:	9308      	str	r3, [sp, #32]
 8007d0e:	2312      	movs	r3, #18
 8007d10:	e7d1      	b.n	8007cb6 <_dtoa_r+0x25e>
 8007d12:	bf00      	nop
 8007d14:	f3af 8000 	nop.w
 8007d18:	636f4361 	.word	0x636f4361
 8007d1c:	3fd287a7 	.word	0x3fd287a7
 8007d20:	8b60c8b3 	.word	0x8b60c8b3
 8007d24:	3fc68a28 	.word	0x3fc68a28
 8007d28:	509f79fb 	.word	0x509f79fb
 8007d2c:	3fd34413 	.word	0x3fd34413
 8007d30:	0800a231 	.word	0x0800a231
 8007d34:	0800a248 	.word	0x0800a248
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	0800a22d 	.word	0x0800a22d
 8007d40:	0800a224 	.word	0x0800a224
 8007d44:	0800a201 	.word	0x0800a201
 8007d48:	3ff80000 	.word	0x3ff80000
 8007d4c:	0800a338 	.word	0x0800a338
 8007d50:	0800a2a0 	.word	0x0800a2a0
 8007d54:	2301      	movs	r3, #1
 8007d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d58:	e7d4      	b.n	8007d04 <_dtoa_r+0x2ac>
 8007d5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d5c:	9306      	str	r3, [sp, #24]
 8007d5e:	9308      	str	r3, [sp, #32]
 8007d60:	e7b7      	b.n	8007cd2 <_dtoa_r+0x27a>
 8007d62:	3101      	adds	r1, #1
 8007d64:	0052      	lsls	r2, r2, #1
 8007d66:	e7b7      	b.n	8007cd8 <_dtoa_r+0x280>
 8007d68:	69eb      	ldr	r3, [r5, #28]
 8007d6a:	9a03      	ldr	r2, [sp, #12]
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	9b08      	ldr	r3, [sp, #32]
 8007d70:	2b0e      	cmp	r3, #14
 8007d72:	f200 80a8 	bhi.w	8007ec6 <_dtoa_r+0x46e>
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	f000 80a5 	beq.w	8007ec6 <_dtoa_r+0x46e>
 8007d7c:	f1bb 0f00 	cmp.w	fp, #0
 8007d80:	dd34      	ble.n	8007dec <_dtoa_r+0x394>
 8007d82:	4b9a      	ldr	r3, [pc, #616]	; (8007fec <_dtoa_r+0x594>)
 8007d84:	f00b 020f 	and.w	r2, fp, #15
 8007d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d98:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007d9c:	d016      	beq.n	8007dcc <_dtoa_r+0x374>
 8007d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da2:	4b93      	ldr	r3, [pc, #588]	; (8007ff0 <_dtoa_r+0x598>)
 8007da4:	2703      	movs	r7, #3
 8007da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007daa:	f7f8 fcbf 	bl	800072c <__aeabi_ddiv>
 8007dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db2:	f004 040f 	and.w	r4, r4, #15
 8007db6:	4e8e      	ldr	r6, [pc, #568]	; (8007ff0 <_dtoa_r+0x598>)
 8007db8:	b954      	cbnz	r4, 8007dd0 <_dtoa_r+0x378>
 8007dba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc2:	f7f8 fcb3 	bl	800072c <__aeabi_ddiv>
 8007dc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dca:	e029      	b.n	8007e20 <_dtoa_r+0x3c8>
 8007dcc:	2702      	movs	r7, #2
 8007dce:	e7f2      	b.n	8007db6 <_dtoa_r+0x35e>
 8007dd0:	07e1      	lsls	r1, r4, #31
 8007dd2:	d508      	bpl.n	8007de6 <_dtoa_r+0x38e>
 8007dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ddc:	f7f8 fb7c 	bl	80004d8 <__aeabi_dmul>
 8007de0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007de4:	3701      	adds	r7, #1
 8007de6:	1064      	asrs	r4, r4, #1
 8007de8:	3608      	adds	r6, #8
 8007dea:	e7e5      	b.n	8007db8 <_dtoa_r+0x360>
 8007dec:	f000 80a5 	beq.w	8007f3a <_dtoa_r+0x4e2>
 8007df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007df4:	f1cb 0400 	rsb	r4, fp, #0
 8007df8:	4b7c      	ldr	r3, [pc, #496]	; (8007fec <_dtoa_r+0x594>)
 8007dfa:	f004 020f 	and.w	r2, r4, #15
 8007dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fb67 	bl	80004d8 <__aeabi_dmul>
 8007e0a:	2702      	movs	r7, #2
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e12:	4e77      	ldr	r6, [pc, #476]	; (8007ff0 <_dtoa_r+0x598>)
 8007e14:	1124      	asrs	r4, r4, #4
 8007e16:	2c00      	cmp	r4, #0
 8007e18:	f040 8084 	bne.w	8007f24 <_dtoa_r+0x4cc>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1d2      	bne.n	8007dc6 <_dtoa_r+0x36e>
 8007e20:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8087 	beq.w	8007f3e <_dtoa_r+0x4e6>
 8007e30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e34:	2200      	movs	r2, #0
 8007e36:	4b6f      	ldr	r3, [pc, #444]	; (8007ff4 <_dtoa_r+0x59c>)
 8007e38:	f7f8 fdc0 	bl	80009bc <__aeabi_dcmplt>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d07e      	beq.n	8007f3e <_dtoa_r+0x4e6>
 8007e40:	9b08      	ldr	r3, [sp, #32]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d07b      	beq.n	8007f3e <_dtoa_r+0x4e6>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dd38      	ble.n	8007ebe <_dtoa_r+0x466>
 8007e4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b69      	ldr	r3, [pc, #420]	; (8007ff8 <_dtoa_r+0x5a0>)
 8007e54:	f7f8 fb40 	bl	80004d8 <__aeabi_dmul>
 8007e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e5c:	9c06      	ldr	r4, [sp, #24]
 8007e5e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007e62:	3701      	adds	r7, #1
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7f8 facd 	bl	8000404 <__aeabi_i2d>
 8007e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e6e:	f7f8 fb33 	bl	80004d8 <__aeabi_dmul>
 8007e72:	2200      	movs	r2, #0
 8007e74:	4b61      	ldr	r3, [pc, #388]	; (8007ffc <_dtoa_r+0x5a4>)
 8007e76:	f7f8 f979 	bl	800016c <__adddf3>
 8007e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e82:	9611      	str	r6, [sp, #68]	; 0x44
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d15d      	bne.n	8007f44 <_dtoa_r+0x4ec>
 8007e88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4b5c      	ldr	r3, [pc, #368]	; (8008000 <_dtoa_r+0x5a8>)
 8007e90:	f7f8 f96a 	bl	8000168 <__aeabi_dsub>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e9c:	4633      	mov	r3, r6
 8007e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ea0:	f7f8 fdaa 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	f040 8295 	bne.w	80083d4 <_dtoa_r+0x97c>
 8007eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007eb4:	f7f8 fd82 	bl	80009bc <__aeabi_dcmplt>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f040 8289 	bne.w	80083d0 <_dtoa_r+0x978>
 8007ebe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ec2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f2c0 8151 	blt.w	8008170 <_dtoa_r+0x718>
 8007ece:	f1bb 0f0e 	cmp.w	fp, #14
 8007ed2:	f300 814d 	bgt.w	8008170 <_dtoa_r+0x718>
 8007ed6:	4b45      	ldr	r3, [pc, #276]	; (8007fec <_dtoa_r+0x594>)
 8007ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007edc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ee0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ee4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f280 80da 	bge.w	80080a0 <_dtoa_r+0x648>
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f300 80d6 	bgt.w	80080a0 <_dtoa_r+0x648>
 8007ef4:	f040 826b 	bne.w	80083ce <_dtoa_r+0x976>
 8007ef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efc:	2200      	movs	r2, #0
 8007efe:	4b40      	ldr	r3, [pc, #256]	; (8008000 <_dtoa_r+0x5a8>)
 8007f00:	f7f8 faea 	bl	80004d8 <__aeabi_dmul>
 8007f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f08:	f7f8 fd6c 	bl	80009e4 <__aeabi_dcmpge>
 8007f0c:	9c08      	ldr	r4, [sp, #32]
 8007f0e:	4626      	mov	r6, r4
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f040 8241 	bne.w	8008398 <_dtoa_r+0x940>
 8007f16:	2331      	movs	r3, #49	; 0x31
 8007f18:	9f03      	ldr	r7, [sp, #12]
 8007f1a:	f10b 0b01 	add.w	fp, fp, #1
 8007f1e:	f807 3b01 	strb.w	r3, [r7], #1
 8007f22:	e23d      	b.n	80083a0 <_dtoa_r+0x948>
 8007f24:	07e2      	lsls	r2, r4, #31
 8007f26:	d505      	bpl.n	8007f34 <_dtoa_r+0x4dc>
 8007f28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f2c:	f7f8 fad4 	bl	80004d8 <__aeabi_dmul>
 8007f30:	2301      	movs	r3, #1
 8007f32:	3701      	adds	r7, #1
 8007f34:	1064      	asrs	r4, r4, #1
 8007f36:	3608      	adds	r6, #8
 8007f38:	e76d      	b.n	8007e16 <_dtoa_r+0x3be>
 8007f3a:	2702      	movs	r7, #2
 8007f3c:	e770      	b.n	8007e20 <_dtoa_r+0x3c8>
 8007f3e:	46d8      	mov	r8, fp
 8007f40:	9c08      	ldr	r4, [sp, #32]
 8007f42:	e78f      	b.n	8007e64 <_dtoa_r+0x40c>
 8007f44:	9903      	ldr	r1, [sp, #12]
 8007f46:	4b29      	ldr	r3, [pc, #164]	; (8007fec <_dtoa_r+0x594>)
 8007f48:	4421      	add	r1, r4
 8007f4a:	9112      	str	r1, [sp, #72]	; 0x48
 8007f4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f52:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007f56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d054      	beq.n	8008008 <_dtoa_r+0x5b0>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	4928      	ldr	r1, [pc, #160]	; (8008004 <_dtoa_r+0x5ac>)
 8007f62:	f7f8 fbe3 	bl	800072c <__aeabi_ddiv>
 8007f66:	463b      	mov	r3, r7
 8007f68:	4632      	mov	r2, r6
 8007f6a:	f7f8 f8fd 	bl	8000168 <__aeabi_dsub>
 8007f6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f72:	9f03      	ldr	r7, [sp, #12]
 8007f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f78:	f7f8 fd5e 	bl	8000a38 <__aeabi_d2iz>
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	f7f8 fa41 	bl	8000404 <__aeabi_i2d>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8a:	f7f8 f8ed 	bl	8000168 <__aeabi_dsub>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	3430      	adds	r4, #48	; 0x30
 8007f94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f9c:	f807 4b01 	strb.w	r4, [r7], #1
 8007fa0:	f7f8 fd0c 	bl	80009bc <__aeabi_dcmplt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d173      	bne.n	8008090 <_dtoa_r+0x638>
 8007fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fac:	2000      	movs	r0, #0
 8007fae:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <_dtoa_r+0x59c>)
 8007fb0:	f7f8 f8da 	bl	8000168 <__aeabi_dsub>
 8007fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fb8:	f7f8 fd00 	bl	80009bc <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	f040 80b6 	bne.w	800812e <_dtoa_r+0x6d6>
 8007fc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fc4:	429f      	cmp	r7, r3
 8007fc6:	f43f af7a 	beq.w	8007ebe <_dtoa_r+0x466>
 8007fca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <_dtoa_r+0x5a0>)
 8007fd2:	f7f8 fa81 	bl	80004d8 <__aeabi_dmul>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <_dtoa_r+0x5a0>)
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fea:	e7c3      	b.n	8007f74 <_dtoa_r+0x51c>
 8007fec:	0800a338 	.word	0x0800a338
 8007ff0:	0800a310 	.word	0x0800a310
 8007ff4:	3ff00000 	.word	0x3ff00000
 8007ff8:	40240000 	.word	0x40240000
 8007ffc:	401c0000 	.word	0x401c0000
 8008000:	40140000 	.word	0x40140000
 8008004:	3fe00000 	.word	0x3fe00000
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fa64 	bl	80004d8 <__aeabi_dmul>
 8008010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008012:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008016:	9c03      	ldr	r4, [sp, #12]
 8008018:	9314      	str	r3, [sp, #80]	; 0x50
 800801a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801e:	f7f8 fd0b 	bl	8000a38 <__aeabi_d2iz>
 8008022:	9015      	str	r0, [sp, #84]	; 0x54
 8008024:	f7f8 f9ee 	bl	8000404 <__aeabi_i2d>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	f7f8 f89a 	bl	8000168 <__aeabi_dsub>
 8008034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008036:	4606      	mov	r6, r0
 8008038:	3330      	adds	r3, #48	; 0x30
 800803a:	f804 3b01 	strb.w	r3, [r4], #1
 800803e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008040:	460f      	mov	r7, r1
 8008042:	429c      	cmp	r4, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	d124      	bne.n	8008094 <_dtoa_r+0x63c>
 800804a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800804e:	4baf      	ldr	r3, [pc, #700]	; (800830c <_dtoa_r+0x8b4>)
 8008050:	f7f8 f88c 	bl	800016c <__adddf3>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 8008060:	2800      	cmp	r0, #0
 8008062:	d163      	bne.n	800812c <_dtoa_r+0x6d4>
 8008064:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008068:	2000      	movs	r0, #0
 800806a:	49a8      	ldr	r1, [pc, #672]	; (800830c <_dtoa_r+0x8b4>)
 800806c:	f7f8 f87c 	bl	8000168 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 fca0 	bl	80009bc <__aeabi_dcmplt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f43f af1e 	beq.w	8007ebe <_dtoa_r+0x466>
 8008082:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008084:	1e7b      	subs	r3, r7, #1
 8008086:	9314      	str	r3, [sp, #80]	; 0x50
 8008088:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800808c:	2b30      	cmp	r3, #48	; 0x30
 800808e:	d0f8      	beq.n	8008082 <_dtoa_r+0x62a>
 8008090:	46c3      	mov	fp, r8
 8008092:	e03b      	b.n	800810c <_dtoa_r+0x6b4>
 8008094:	4b9e      	ldr	r3, [pc, #632]	; (8008310 <_dtoa_r+0x8b8>)
 8008096:	f7f8 fa1f 	bl	80004d8 <__aeabi_dmul>
 800809a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800809e:	e7bc      	b.n	800801a <_dtoa_r+0x5c2>
 80080a0:	9f03      	ldr	r7, [sp, #12]
 80080a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 fb3d 	bl	800072c <__aeabi_ddiv>
 80080b2:	f7f8 fcc1 	bl	8000a38 <__aeabi_d2iz>
 80080b6:	4604      	mov	r4, r0
 80080b8:	f7f8 f9a4 	bl	8000404 <__aeabi_i2d>
 80080bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080c0:	f7f8 fa0a 	bl	80004d8 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 f84c 	bl	8000168 <__aeabi_dsub>
 80080d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80080d4:	f807 6b01 	strb.w	r6, [r7], #1
 80080d8:	9e03      	ldr	r6, [sp, #12]
 80080da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80080de:	1bbe      	subs	r6, r7, r6
 80080e0:	45b4      	cmp	ip, r6
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	d136      	bne.n	8008156 <_dtoa_r+0x6fe>
 80080e8:	f7f8 f840 	bl	800016c <__adddf3>
 80080ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	f7f8 fc80 	bl	80009f8 <__aeabi_dcmpgt>
 80080f8:	bb58      	cbnz	r0, 8008152 <_dtoa_r+0x6fa>
 80080fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8008106:	b108      	cbz	r0, 800810c <_dtoa_r+0x6b4>
 8008108:	07e3      	lsls	r3, r4, #31
 800810a:	d422      	bmi.n	8008152 <_dtoa_r+0x6fa>
 800810c:	4651      	mov	r1, sl
 800810e:	4628      	mov	r0, r5
 8008110:	f000 fbc2 	bl	8008898 <_Bfree>
 8008114:	2300      	movs	r3, #0
 8008116:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008118:	703b      	strb	r3, [r7, #0]
 800811a:	f10b 0301 	add.w	r3, fp, #1
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008122:	2b00      	cmp	r3, #0
 8008124:	f43f ace6 	beq.w	8007af4 <_dtoa_r+0x9c>
 8008128:	601f      	str	r7, [r3, #0]
 800812a:	e4e3      	b.n	8007af4 <_dtoa_r+0x9c>
 800812c:	4627      	mov	r7, r4
 800812e:	463b      	mov	r3, r7
 8008130:	461f      	mov	r7, r3
 8008132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008136:	2a39      	cmp	r2, #57	; 0x39
 8008138:	d107      	bne.n	800814a <_dtoa_r+0x6f2>
 800813a:	9a03      	ldr	r2, [sp, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d1f7      	bne.n	8008130 <_dtoa_r+0x6d8>
 8008140:	2230      	movs	r2, #48	; 0x30
 8008142:	9903      	ldr	r1, [sp, #12]
 8008144:	f108 0801 	add.w	r8, r8, #1
 8008148:	700a      	strb	r2, [r1, #0]
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	3201      	adds	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e79e      	b.n	8008090 <_dtoa_r+0x638>
 8008152:	46d8      	mov	r8, fp
 8008154:	e7eb      	b.n	800812e <_dtoa_r+0x6d6>
 8008156:	2200      	movs	r2, #0
 8008158:	4b6d      	ldr	r3, [pc, #436]	; (8008310 <_dtoa_r+0x8b8>)
 800815a:	f7f8 f9bd 	bl	80004d8 <__aeabi_dmul>
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	4680      	mov	r8, r0
 8008164:	4689      	mov	r9, r1
 8008166:	f7f8 fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800816a:	2800      	cmp	r0, #0
 800816c:	d09b      	beq.n	80080a6 <_dtoa_r+0x64e>
 800816e:	e7cd      	b.n	800810c <_dtoa_r+0x6b4>
 8008170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008172:	2a00      	cmp	r2, #0
 8008174:	f000 80c4 	beq.w	8008300 <_dtoa_r+0x8a8>
 8008178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800817a:	2a01      	cmp	r2, #1
 800817c:	f300 80a8 	bgt.w	80082d0 <_dtoa_r+0x878>
 8008180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008182:	2a00      	cmp	r2, #0
 8008184:	f000 80a0 	beq.w	80082c8 <_dtoa_r+0x870>
 8008188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800818c:	464f      	mov	r7, r9
 800818e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008192:	2101      	movs	r1, #1
 8008194:	441a      	add	r2, r3
 8008196:	4628      	mov	r0, r5
 8008198:	4499      	add	r9, r3
 800819a:	9209      	str	r2, [sp, #36]	; 0x24
 800819c:	f000 fc32 	bl	8008a04 <__i2b>
 80081a0:	4606      	mov	r6, r0
 80081a2:	b15f      	cbz	r7, 80081bc <_dtoa_r+0x764>
 80081a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dd08      	ble.n	80081bc <_dtoa_r+0x764>
 80081aa:	42bb      	cmp	r3, r7
 80081ac:	bfa8      	it	ge
 80081ae:	463b      	movge	r3, r7
 80081b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b2:	eba9 0903 	sub.w	r9, r9, r3
 80081b6:	1aff      	subs	r7, r7, r3
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081be:	b1f3      	cbz	r3, 80081fe <_dtoa_r+0x7a6>
 80081c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 80a0 	beq.w	8008308 <_dtoa_r+0x8b0>
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	dd10      	ble.n	80081ee <_dtoa_r+0x796>
 80081cc:	4631      	mov	r1, r6
 80081ce:	4622      	mov	r2, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 fcd5 	bl	8008b80 <__pow5mult>
 80081d6:	4652      	mov	r2, sl
 80081d8:	4601      	mov	r1, r0
 80081da:	4606      	mov	r6, r0
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 fc27 	bl	8008a30 <__multiply>
 80081e2:	4680      	mov	r8, r0
 80081e4:	4651      	mov	r1, sl
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 fb56 	bl	8008898 <_Bfree>
 80081ec:	46c2      	mov	sl, r8
 80081ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f0:	1b1a      	subs	r2, r3, r4
 80081f2:	d004      	beq.n	80081fe <_dtoa_r+0x7a6>
 80081f4:	4651      	mov	r1, sl
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 fcc2 	bl	8008b80 <__pow5mult>
 80081fc:	4682      	mov	sl, r0
 80081fe:	2101      	movs	r1, #1
 8008200:	4628      	mov	r0, r5
 8008202:	f000 fbff 	bl	8008a04 <__i2b>
 8008206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008208:	4604      	mov	r4, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	f340 8082 	ble.w	8008314 <_dtoa_r+0x8bc>
 8008210:	461a      	mov	r2, r3
 8008212:	4601      	mov	r1, r0
 8008214:	4628      	mov	r0, r5
 8008216:	f000 fcb3 	bl	8008b80 <__pow5mult>
 800821a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800821c:	4604      	mov	r4, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	dd7b      	ble.n	800831a <_dtoa_r+0x8c2>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800822c:	6918      	ldr	r0, [r3, #16]
 800822e:	f000 fb9b 	bl	8008968 <__hi0bits>
 8008232:	f1c0 0020 	rsb	r0, r0, #32
 8008236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008238:	4418      	add	r0, r3
 800823a:	f010 001f 	ands.w	r0, r0, #31
 800823e:	f000 8092 	beq.w	8008366 <_dtoa_r+0x90e>
 8008242:	f1c0 0320 	rsb	r3, r0, #32
 8008246:	2b04      	cmp	r3, #4
 8008248:	f340 8085 	ble.w	8008356 <_dtoa_r+0x8fe>
 800824c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824e:	f1c0 001c 	rsb	r0, r0, #28
 8008252:	4403      	add	r3, r0
 8008254:	4481      	add	r9, r0
 8008256:	4407      	add	r7, r0
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	f1b9 0f00 	cmp.w	r9, #0
 800825e:	dd05      	ble.n	800826c <_dtoa_r+0x814>
 8008260:	4651      	mov	r1, sl
 8008262:	464a      	mov	r2, r9
 8008264:	4628      	mov	r0, r5
 8008266:	f000 fce5 	bl	8008c34 <__lshift>
 800826a:	4682      	mov	sl, r0
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd05      	ble.n	800827e <_dtoa_r+0x826>
 8008272:	4621      	mov	r1, r4
 8008274:	461a      	mov	r2, r3
 8008276:	4628      	mov	r0, r5
 8008278:	f000 fcdc 	bl	8008c34 <__lshift>
 800827c:	4604      	mov	r4, r0
 800827e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d072      	beq.n	800836a <_dtoa_r+0x912>
 8008284:	4621      	mov	r1, r4
 8008286:	4650      	mov	r0, sl
 8008288:	f000 fd40 	bl	8008d0c <__mcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	da6c      	bge.n	800836a <_dtoa_r+0x912>
 8008290:	2300      	movs	r3, #0
 8008292:	4651      	mov	r1, sl
 8008294:	220a      	movs	r2, #10
 8008296:	4628      	mov	r0, r5
 8008298:	f000 fb20 	bl	80088dc <__multadd>
 800829c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829e:	4682      	mov	sl, r0
 80082a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 81ac 	beq.w	8008602 <_dtoa_r+0xbaa>
 80082aa:	2300      	movs	r3, #0
 80082ac:	4631      	mov	r1, r6
 80082ae:	220a      	movs	r2, #10
 80082b0:	4628      	mov	r0, r5
 80082b2:	f000 fb13 	bl	80088dc <__multadd>
 80082b6:	9b06      	ldr	r3, [sp, #24]
 80082b8:	4606      	mov	r6, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f300 8093 	bgt.w	80083e6 <_dtoa_r+0x98e>
 80082c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	dc59      	bgt.n	800837a <_dtoa_r+0x922>
 80082c6:	e08e      	b.n	80083e6 <_dtoa_r+0x98e>
 80082c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082ce:	e75d      	b.n	800818c <_dtoa_r+0x734>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	1e5c      	subs	r4, r3, #1
 80082d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	bfbf      	itttt	lt
 80082da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80082de:	1ae3      	sublt	r3, r4, r3
 80082e0:	18d2      	addlt	r2, r2, r3
 80082e2:	bfa8      	it	ge
 80082e4:	1b1c      	subge	r4, r3, r4
 80082e6:	9b08      	ldr	r3, [sp, #32]
 80082e8:	bfbe      	ittt	lt
 80082ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 80082ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80082ee:	2400      	movlt	r4, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfb5      	itete	lt
 80082f4:	eba9 0703 	sublt.w	r7, r9, r3
 80082f8:	464f      	movge	r7, r9
 80082fa:	2300      	movlt	r3, #0
 80082fc:	9b08      	ldrge	r3, [sp, #32]
 80082fe:	e747      	b.n	8008190 <_dtoa_r+0x738>
 8008300:	464f      	mov	r7, r9
 8008302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008304:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008306:	e74c      	b.n	80081a2 <_dtoa_r+0x74a>
 8008308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800830a:	e773      	b.n	80081f4 <_dtoa_r+0x79c>
 800830c:	3fe00000 	.word	0x3fe00000
 8008310:	40240000 	.word	0x40240000
 8008314:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008316:	2b01      	cmp	r3, #1
 8008318:	dc18      	bgt.n	800834c <_dtoa_r+0x8f4>
 800831a:	9b04      	ldr	r3, [sp, #16]
 800831c:	b9b3      	cbnz	r3, 800834c <_dtoa_r+0x8f4>
 800831e:	9b05      	ldr	r3, [sp, #20]
 8008320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008324:	b993      	cbnz	r3, 800834c <_dtoa_r+0x8f4>
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800832c:	0d1b      	lsrs	r3, r3, #20
 800832e:	051b      	lsls	r3, r3, #20
 8008330:	b17b      	cbz	r3, 8008352 <_dtoa_r+0x8fa>
 8008332:	f04f 0801 	mov.w	r8, #1
 8008336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008338:	f109 0901 	add.w	r9, r9, #1
 800833c:	3301      	adds	r3, #1
 800833e:	9309      	str	r3, [sp, #36]	; 0x24
 8008340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	f47f af6f 	bne.w	8008226 <_dtoa_r+0x7ce>
 8008348:	2001      	movs	r0, #1
 800834a:	e774      	b.n	8008236 <_dtoa_r+0x7de>
 800834c:	f04f 0800 	mov.w	r8, #0
 8008350:	e7f6      	b.n	8008340 <_dtoa_r+0x8e8>
 8008352:	4698      	mov	r8, r3
 8008354:	e7f4      	b.n	8008340 <_dtoa_r+0x8e8>
 8008356:	d080      	beq.n	800825a <_dtoa_r+0x802>
 8008358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835a:	331c      	adds	r3, #28
 800835c:	441a      	add	r2, r3
 800835e:	4499      	add	r9, r3
 8008360:	441f      	add	r7, r3
 8008362:	9209      	str	r2, [sp, #36]	; 0x24
 8008364:	e779      	b.n	800825a <_dtoa_r+0x802>
 8008366:	4603      	mov	r3, r0
 8008368:	e7f6      	b.n	8008358 <_dtoa_r+0x900>
 800836a:	9b08      	ldr	r3, [sp, #32]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc34      	bgt.n	80083da <_dtoa_r+0x982>
 8008370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008372:	2b02      	cmp	r3, #2
 8008374:	dd31      	ble.n	80083da <_dtoa_r+0x982>
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	9306      	str	r3, [sp, #24]
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	b963      	cbnz	r3, 8008398 <_dtoa_r+0x940>
 800837e:	4621      	mov	r1, r4
 8008380:	2205      	movs	r2, #5
 8008382:	4628      	mov	r0, r5
 8008384:	f000 faaa 	bl	80088dc <__multadd>
 8008388:	4601      	mov	r1, r0
 800838a:	4604      	mov	r4, r0
 800838c:	4650      	mov	r0, sl
 800838e:	f000 fcbd 	bl	8008d0c <__mcmp>
 8008392:	2800      	cmp	r0, #0
 8008394:	f73f adbf 	bgt.w	8007f16 <_dtoa_r+0x4be>
 8008398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800839a:	9f03      	ldr	r7, [sp, #12]
 800839c:	ea6f 0b03 	mvn.w	fp, r3
 80083a0:	f04f 0800 	mov.w	r8, #0
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 fa76 	bl	8008898 <_Bfree>
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	f43f aead 	beq.w	800810c <_dtoa_r+0x6b4>
 80083b2:	f1b8 0f00 	cmp.w	r8, #0
 80083b6:	d005      	beq.n	80083c4 <_dtoa_r+0x96c>
 80083b8:	45b0      	cmp	r8, r6
 80083ba:	d003      	beq.n	80083c4 <_dtoa_r+0x96c>
 80083bc:	4641      	mov	r1, r8
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fa6a 	bl	8008898 <_Bfree>
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	f000 fa66 	bl	8008898 <_Bfree>
 80083cc:	e69e      	b.n	800810c <_dtoa_r+0x6b4>
 80083ce:	2400      	movs	r4, #0
 80083d0:	4626      	mov	r6, r4
 80083d2:	e7e1      	b.n	8008398 <_dtoa_r+0x940>
 80083d4:	46c3      	mov	fp, r8
 80083d6:	4626      	mov	r6, r4
 80083d8:	e59d      	b.n	8007f16 <_dtoa_r+0x4be>
 80083da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80c8 	beq.w	8008572 <_dtoa_r+0xb1a>
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	9306      	str	r3, [sp, #24]
 80083e6:	2f00      	cmp	r7, #0
 80083e8:	dd05      	ble.n	80083f6 <_dtoa_r+0x99e>
 80083ea:	4631      	mov	r1, r6
 80083ec:	463a      	mov	r2, r7
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 fc20 	bl	8008c34 <__lshift>
 80083f4:	4606      	mov	r6, r0
 80083f6:	f1b8 0f00 	cmp.w	r8, #0
 80083fa:	d05b      	beq.n	80084b4 <_dtoa_r+0xa5c>
 80083fc:	4628      	mov	r0, r5
 80083fe:	6871      	ldr	r1, [r6, #4]
 8008400:	f000 fa0a 	bl	8008818 <_Balloc>
 8008404:	4607      	mov	r7, r0
 8008406:	b928      	cbnz	r0, 8008414 <_dtoa_r+0x9bc>
 8008408:	4602      	mov	r2, r0
 800840a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800840e:	4b81      	ldr	r3, [pc, #516]	; (8008614 <_dtoa_r+0xbbc>)
 8008410:	f7ff bb36 	b.w	8007a80 <_dtoa_r+0x28>
 8008414:	6932      	ldr	r2, [r6, #16]
 8008416:	f106 010c 	add.w	r1, r6, #12
 800841a:	3202      	adds	r2, #2
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	300c      	adds	r0, #12
 8008420:	f000 fff2 	bl	8009408 <memcpy>
 8008424:	2201      	movs	r2, #1
 8008426:	4639      	mov	r1, r7
 8008428:	4628      	mov	r0, r5
 800842a:	f000 fc03 	bl	8008c34 <__lshift>
 800842e:	46b0      	mov	r8, r6
 8008430:	4606      	mov	r6, r0
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	9a03      	ldr	r2, [sp, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	9308      	str	r3, [sp, #32]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	4413      	add	r3, r2
 800843e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	930a      	str	r3, [sp, #40]	; 0x28
 8008448:	9b08      	ldr	r3, [sp, #32]
 800844a:	4621      	mov	r1, r4
 800844c:	3b01      	subs	r3, #1
 800844e:	4650      	mov	r0, sl
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	f7ff fa78 	bl	8007946 <quorem>
 8008456:	4641      	mov	r1, r8
 8008458:	9006      	str	r0, [sp, #24]
 800845a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800845e:	4650      	mov	r0, sl
 8008460:	f000 fc54 	bl	8008d0c <__mcmp>
 8008464:	4632      	mov	r2, r6
 8008466:	9009      	str	r0, [sp, #36]	; 0x24
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f000 fc6a 	bl	8008d44 <__mdiff>
 8008470:	68c2      	ldr	r2, [r0, #12]
 8008472:	4607      	mov	r7, r0
 8008474:	bb02      	cbnz	r2, 80084b8 <_dtoa_r+0xa60>
 8008476:	4601      	mov	r1, r0
 8008478:	4650      	mov	r0, sl
 800847a:	f000 fc47 	bl	8008d0c <__mcmp>
 800847e:	4602      	mov	r2, r0
 8008480:	4639      	mov	r1, r7
 8008482:	4628      	mov	r0, r5
 8008484:	920c      	str	r2, [sp, #48]	; 0x30
 8008486:	f000 fa07 	bl	8008898 <_Bfree>
 800848a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800848c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848e:	9f08      	ldr	r7, [sp, #32]
 8008490:	ea43 0102 	orr.w	r1, r3, r2
 8008494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008496:	4319      	orrs	r1, r3
 8008498:	d110      	bne.n	80084bc <_dtoa_r+0xa64>
 800849a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800849e:	d029      	beq.n	80084f4 <_dtoa_r+0xa9c>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd02      	ble.n	80084ac <_dtoa_r+0xa54>
 80084a6:	9b06      	ldr	r3, [sp, #24]
 80084a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	f883 9000 	strb.w	r9, [r3]
 80084b2:	e777      	b.n	80083a4 <_dtoa_r+0x94c>
 80084b4:	4630      	mov	r0, r6
 80084b6:	e7ba      	b.n	800842e <_dtoa_r+0x9d6>
 80084b8:	2201      	movs	r2, #1
 80084ba:	e7e1      	b.n	8008480 <_dtoa_r+0xa28>
 80084bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	db04      	blt.n	80084cc <_dtoa_r+0xa74>
 80084c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80084c4:	430b      	orrs	r3, r1
 80084c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084c8:	430b      	orrs	r3, r1
 80084ca:	d120      	bne.n	800850e <_dtoa_r+0xab6>
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	dded      	ble.n	80084ac <_dtoa_r+0xa54>
 80084d0:	4651      	mov	r1, sl
 80084d2:	2201      	movs	r2, #1
 80084d4:	4628      	mov	r0, r5
 80084d6:	f000 fbad 	bl	8008c34 <__lshift>
 80084da:	4621      	mov	r1, r4
 80084dc:	4682      	mov	sl, r0
 80084de:	f000 fc15 	bl	8008d0c <__mcmp>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	dc03      	bgt.n	80084ee <_dtoa_r+0xa96>
 80084e6:	d1e1      	bne.n	80084ac <_dtoa_r+0xa54>
 80084e8:	f019 0f01 	tst.w	r9, #1
 80084ec:	d0de      	beq.n	80084ac <_dtoa_r+0xa54>
 80084ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084f2:	d1d8      	bne.n	80084a6 <_dtoa_r+0xa4e>
 80084f4:	2339      	movs	r3, #57	; 0x39
 80084f6:	9a04      	ldr	r2, [sp, #16]
 80084f8:	7013      	strb	r3, [r2, #0]
 80084fa:	463b      	mov	r3, r7
 80084fc:	461f      	mov	r7, r3
 80084fe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008502:	3b01      	subs	r3, #1
 8008504:	2a39      	cmp	r2, #57	; 0x39
 8008506:	d06b      	beq.n	80085e0 <_dtoa_r+0xb88>
 8008508:	3201      	adds	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e74a      	b.n	80083a4 <_dtoa_r+0x94c>
 800850e:	2a00      	cmp	r2, #0
 8008510:	dd07      	ble.n	8008522 <_dtoa_r+0xaca>
 8008512:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008516:	d0ed      	beq.n	80084f4 <_dtoa_r+0xa9c>
 8008518:	9a04      	ldr	r2, [sp, #16]
 800851a:	f109 0301 	add.w	r3, r9, #1
 800851e:	7013      	strb	r3, [r2, #0]
 8008520:	e740      	b.n	80083a4 <_dtoa_r+0x94c>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008526:	f803 9c01 	strb.w	r9, [r3, #-1]
 800852a:	4293      	cmp	r3, r2
 800852c:	d042      	beq.n	80085b4 <_dtoa_r+0xb5c>
 800852e:	4651      	mov	r1, sl
 8008530:	2300      	movs	r3, #0
 8008532:	220a      	movs	r2, #10
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f9d1 	bl	80088dc <__multadd>
 800853a:	45b0      	cmp	r8, r6
 800853c:	4682      	mov	sl, r0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f04f 020a 	mov.w	r2, #10
 8008546:	4641      	mov	r1, r8
 8008548:	4628      	mov	r0, r5
 800854a:	d107      	bne.n	800855c <_dtoa_r+0xb04>
 800854c:	f000 f9c6 	bl	80088dc <__multadd>
 8008550:	4680      	mov	r8, r0
 8008552:	4606      	mov	r6, r0
 8008554:	9b08      	ldr	r3, [sp, #32]
 8008556:	3301      	adds	r3, #1
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	e775      	b.n	8008448 <_dtoa_r+0x9f0>
 800855c:	f000 f9be 	bl	80088dc <__multadd>
 8008560:	4631      	mov	r1, r6
 8008562:	4680      	mov	r8, r0
 8008564:	2300      	movs	r3, #0
 8008566:	220a      	movs	r2, #10
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f9b7 	bl	80088dc <__multadd>
 800856e:	4606      	mov	r6, r0
 8008570:	e7f0      	b.n	8008554 <_dtoa_r+0xafc>
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	9306      	str	r3, [sp, #24]
 8008576:	9f03      	ldr	r7, [sp, #12]
 8008578:	4621      	mov	r1, r4
 800857a:	4650      	mov	r0, sl
 800857c:	f7ff f9e3 	bl	8007946 <quorem>
 8008580:	9b03      	ldr	r3, [sp, #12]
 8008582:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008586:	f807 9b01 	strb.w	r9, [r7], #1
 800858a:	1afa      	subs	r2, r7, r3
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	4293      	cmp	r3, r2
 8008590:	dd07      	ble.n	80085a2 <_dtoa_r+0xb4a>
 8008592:	4651      	mov	r1, sl
 8008594:	2300      	movs	r3, #0
 8008596:	220a      	movs	r2, #10
 8008598:	4628      	mov	r0, r5
 800859a:	f000 f99f 	bl	80088dc <__multadd>
 800859e:	4682      	mov	sl, r0
 80085a0:	e7ea      	b.n	8008578 <_dtoa_r+0xb20>
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	f04f 0800 	mov.w	r8, #0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bfcc      	ite	gt
 80085ac:	461f      	movgt	r7, r3
 80085ae:	2701      	movle	r7, #1
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	441f      	add	r7, r3
 80085b4:	4651      	mov	r1, sl
 80085b6:	2201      	movs	r2, #1
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 fb3b 	bl	8008c34 <__lshift>
 80085be:	4621      	mov	r1, r4
 80085c0:	4682      	mov	sl, r0
 80085c2:	f000 fba3 	bl	8008d0c <__mcmp>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	dc97      	bgt.n	80084fa <_dtoa_r+0xaa2>
 80085ca:	d102      	bne.n	80085d2 <_dtoa_r+0xb7a>
 80085cc:	f019 0f01 	tst.w	r9, #1
 80085d0:	d193      	bne.n	80084fa <_dtoa_r+0xaa2>
 80085d2:	463b      	mov	r3, r7
 80085d4:	461f      	mov	r7, r3
 80085d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085da:	2a30      	cmp	r2, #48	; 0x30
 80085dc:	d0fa      	beq.n	80085d4 <_dtoa_r+0xb7c>
 80085de:	e6e1      	b.n	80083a4 <_dtoa_r+0x94c>
 80085e0:	9a03      	ldr	r2, [sp, #12]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d18a      	bne.n	80084fc <_dtoa_r+0xaa4>
 80085e6:	2331      	movs	r3, #49	; 0x31
 80085e8:	f10b 0b01 	add.w	fp, fp, #1
 80085ec:	e797      	b.n	800851e <_dtoa_r+0xac6>
 80085ee:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <_dtoa_r+0xbc0>)
 80085f0:	f7ff ba9f 	b.w	8007b32 <_dtoa_r+0xda>
 80085f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f aa77 	bne.w	8007aea <_dtoa_r+0x92>
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <_dtoa_r+0xbc4>)
 80085fe:	f7ff ba98 	b.w	8007b32 <_dtoa_r+0xda>
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dcb6      	bgt.n	8008576 <_dtoa_r+0xb1e>
 8008608:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800860a:	2b02      	cmp	r3, #2
 800860c:	f73f aeb5 	bgt.w	800837a <_dtoa_r+0x922>
 8008610:	e7b1      	b.n	8008576 <_dtoa_r+0xb1e>
 8008612:	bf00      	nop
 8008614:	0800a2a0 	.word	0x0800a2a0
 8008618:	0800a200 	.word	0x0800a200
 800861c:	0800a224 	.word	0x0800a224

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d040      	beq.n	80086aa <_free_r+0x8a>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f8e4 	bl	8008800 <__malloc_lock>
 8008638:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <_free_r+0x8c>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	b933      	cbnz	r3, 800864c <_free_r+0x2c>
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008648:	f000 b8e0 	b.w	800880c <__malloc_unlock>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d908      	bls.n	8008662 <_free_r+0x42>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	1821      	adds	r1, r4, r0
 8008654:	428b      	cmp	r3, r1
 8008656:	bf01      	itttt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	1809      	addeq	r1, r1, r0
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	e7ed      	b.n	800863e <_free_r+0x1e>
 8008662:	461a      	mov	r2, r3
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b10b      	cbz	r3, 800866c <_free_r+0x4c>
 8008668:	42a3      	cmp	r3, r4
 800866a:	d9fa      	bls.n	8008662 <_free_r+0x42>
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	1850      	adds	r0, r2, r1
 8008670:	42a0      	cmp	r0, r4
 8008672:	d10b      	bne.n	800868c <_free_r+0x6c>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	4401      	add	r1, r0
 8008678:	1850      	adds	r0, r2, r1
 800867a:	4283      	cmp	r3, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	d1e0      	bne.n	8008642 <_free_r+0x22>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4408      	add	r0, r1
 8008686:	6010      	str	r0, [r2, #0]
 8008688:	6053      	str	r3, [r2, #4]
 800868a:	e7da      	b.n	8008642 <_free_r+0x22>
 800868c:	d902      	bls.n	8008694 <_free_r+0x74>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d6      	b.n	8008642 <_free_r+0x22>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6054      	str	r4, [r2, #4]
 80086a8:	e7cb      	b.n	8008642 <_free_r+0x22>
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20000558 	.word	0x20000558

080086b0 <malloc>:
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <malloc+0xc>)
 80086b2:	4601      	mov	r1, r0
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	f000 b823 	b.w	8008700 <_malloc_r>
 80086ba:	bf00      	nop
 80086bc:	20000064 	.word	0x20000064

080086c0 <sbrk_aligned>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	4e0e      	ldr	r6, [pc, #56]	; (80086fc <sbrk_aligned+0x3c>)
 80086c4:	460c      	mov	r4, r1
 80086c6:	6831      	ldr	r1, [r6, #0]
 80086c8:	4605      	mov	r5, r0
 80086ca:	b911      	cbnz	r1, 80086d2 <sbrk_aligned+0x12>
 80086cc:	f000 fe8c 	bl	80093e8 <_sbrk_r>
 80086d0:	6030      	str	r0, [r6, #0]
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 fe87 	bl	80093e8 <_sbrk_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	d00a      	beq.n	80086f4 <sbrk_aligned+0x34>
 80086de:	1cc4      	adds	r4, r0, #3
 80086e0:	f024 0403 	bic.w	r4, r4, #3
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	d007      	beq.n	80086f8 <sbrk_aligned+0x38>
 80086e8:	1a21      	subs	r1, r4, r0
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 fe7c 	bl	80093e8 <_sbrk_r>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d101      	bne.n	80086f8 <sbrk_aligned+0x38>
 80086f4:	f04f 34ff 	mov.w	r4, #4294967295
 80086f8:	4620      	mov	r0, r4
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	2000055c 	.word	0x2000055c

08008700 <_malloc_r>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	1ccd      	adds	r5, r1, #3
 8008706:	f025 0503 	bic.w	r5, r5, #3
 800870a:	3508      	adds	r5, #8
 800870c:	2d0c      	cmp	r5, #12
 800870e:	bf38      	it	cc
 8008710:	250c      	movcc	r5, #12
 8008712:	2d00      	cmp	r5, #0
 8008714:	4607      	mov	r7, r0
 8008716:	db01      	blt.n	800871c <_malloc_r+0x1c>
 8008718:	42a9      	cmp	r1, r5
 800871a:	d905      	bls.n	8008728 <_malloc_r+0x28>
 800871c:	230c      	movs	r3, #12
 800871e:	2600      	movs	r6, #0
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	4630      	mov	r0, r6
 8008724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008728:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087fc <_malloc_r+0xfc>
 800872c:	f000 f868 	bl	8008800 <__malloc_lock>
 8008730:	f8d8 3000 	ldr.w	r3, [r8]
 8008734:	461c      	mov	r4, r3
 8008736:	bb5c      	cbnz	r4, 8008790 <_malloc_r+0x90>
 8008738:	4629      	mov	r1, r5
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ffc0 	bl	80086c0 <sbrk_aligned>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	4604      	mov	r4, r0
 8008744:	d155      	bne.n	80087f2 <_malloc_r+0xf2>
 8008746:	f8d8 4000 	ldr.w	r4, [r8]
 800874a:	4626      	mov	r6, r4
 800874c:	2e00      	cmp	r6, #0
 800874e:	d145      	bne.n	80087dc <_malloc_r+0xdc>
 8008750:	2c00      	cmp	r4, #0
 8008752:	d048      	beq.n	80087e6 <_malloc_r+0xe6>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	4631      	mov	r1, r6
 8008758:	4638      	mov	r0, r7
 800875a:	eb04 0903 	add.w	r9, r4, r3
 800875e:	f000 fe43 	bl	80093e8 <_sbrk_r>
 8008762:	4581      	cmp	r9, r0
 8008764:	d13f      	bne.n	80087e6 <_malloc_r+0xe6>
 8008766:	6821      	ldr	r1, [r4, #0]
 8008768:	4638      	mov	r0, r7
 800876a:	1a6d      	subs	r5, r5, r1
 800876c:	4629      	mov	r1, r5
 800876e:	f7ff ffa7 	bl	80086c0 <sbrk_aligned>
 8008772:	3001      	adds	r0, #1
 8008774:	d037      	beq.n	80087e6 <_malloc_r+0xe6>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	442b      	add	r3, r5
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	f8d8 3000 	ldr.w	r3, [r8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d038      	beq.n	80087f6 <_malloc_r+0xf6>
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	42a2      	cmp	r2, r4
 8008788:	d12b      	bne.n	80087e2 <_malloc_r+0xe2>
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	e00f      	b.n	80087b0 <_malloc_r+0xb0>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	1b52      	subs	r2, r2, r5
 8008794:	d41f      	bmi.n	80087d6 <_malloc_r+0xd6>
 8008796:	2a0b      	cmp	r2, #11
 8008798:	d917      	bls.n	80087ca <_malloc_r+0xca>
 800879a:	1961      	adds	r1, r4, r5
 800879c:	42a3      	cmp	r3, r4
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	bf18      	it	ne
 80087a2:	6059      	strne	r1, [r3, #4]
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	bf08      	it	eq
 80087a8:	f8c8 1000 	streq.w	r1, [r8]
 80087ac:	5162      	str	r2, [r4, r5]
 80087ae:	604b      	str	r3, [r1, #4]
 80087b0:	4638      	mov	r0, r7
 80087b2:	f104 060b 	add.w	r6, r4, #11
 80087b6:	f000 f829 	bl	800880c <__malloc_unlock>
 80087ba:	f026 0607 	bic.w	r6, r6, #7
 80087be:	1d23      	adds	r3, r4, #4
 80087c0:	1af2      	subs	r2, r6, r3
 80087c2:	d0ae      	beq.n	8008722 <_malloc_r+0x22>
 80087c4:	1b9b      	subs	r3, r3, r6
 80087c6:	50a3      	str	r3, [r4, r2]
 80087c8:	e7ab      	b.n	8008722 <_malloc_r+0x22>
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	6862      	ldr	r2, [r4, #4]
 80087ce:	d1dd      	bne.n	800878c <_malloc_r+0x8c>
 80087d0:	f8c8 2000 	str.w	r2, [r8]
 80087d4:	e7ec      	b.n	80087b0 <_malloc_r+0xb0>
 80087d6:	4623      	mov	r3, r4
 80087d8:	6864      	ldr	r4, [r4, #4]
 80087da:	e7ac      	b.n	8008736 <_malloc_r+0x36>
 80087dc:	4634      	mov	r4, r6
 80087de:	6876      	ldr	r6, [r6, #4]
 80087e0:	e7b4      	b.n	800874c <_malloc_r+0x4c>
 80087e2:	4613      	mov	r3, r2
 80087e4:	e7cc      	b.n	8008780 <_malloc_r+0x80>
 80087e6:	230c      	movs	r3, #12
 80087e8:	4638      	mov	r0, r7
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	f000 f80e 	bl	800880c <__malloc_unlock>
 80087f0:	e797      	b.n	8008722 <_malloc_r+0x22>
 80087f2:	6025      	str	r5, [r4, #0]
 80087f4:	e7dc      	b.n	80087b0 <_malloc_r+0xb0>
 80087f6:	605b      	str	r3, [r3, #4]
 80087f8:	deff      	udf	#255	; 0xff
 80087fa:	bf00      	nop
 80087fc:	20000558 	.word	0x20000558

08008800 <__malloc_lock>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__malloc_lock+0x8>)
 8008802:	f7ff b890 	b.w	8007926 <__retarget_lock_acquire_recursive>
 8008806:	bf00      	nop
 8008808:	20000554 	.word	0x20000554

0800880c <__malloc_unlock>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__malloc_unlock+0x8>)
 800880e:	f7ff b88b 	b.w	8007928 <__retarget_lock_release_recursive>
 8008812:	bf00      	nop
 8008814:	20000554 	.word	0x20000554

08008818 <_Balloc>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	69c6      	ldr	r6, [r0, #28]
 800881c:	4604      	mov	r4, r0
 800881e:	460d      	mov	r5, r1
 8008820:	b976      	cbnz	r6, 8008840 <_Balloc+0x28>
 8008822:	2010      	movs	r0, #16
 8008824:	f7ff ff44 	bl	80086b0 <malloc>
 8008828:	4602      	mov	r2, r0
 800882a:	61e0      	str	r0, [r4, #28]
 800882c:	b920      	cbnz	r0, 8008838 <_Balloc+0x20>
 800882e:	216b      	movs	r1, #107	; 0x6b
 8008830:	4b17      	ldr	r3, [pc, #92]	; (8008890 <_Balloc+0x78>)
 8008832:	4818      	ldr	r0, [pc, #96]	; (8008894 <_Balloc+0x7c>)
 8008834:	f000 fdf6 	bl	8009424 <__assert_func>
 8008838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800883c:	6006      	str	r6, [r0, #0]
 800883e:	60c6      	str	r6, [r0, #12]
 8008840:	69e6      	ldr	r6, [r4, #28]
 8008842:	68f3      	ldr	r3, [r6, #12]
 8008844:	b183      	cbz	r3, 8008868 <_Balloc+0x50>
 8008846:	69e3      	ldr	r3, [r4, #28]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800884e:	b9b8      	cbnz	r0, 8008880 <_Balloc+0x68>
 8008850:	2101      	movs	r1, #1
 8008852:	fa01 f605 	lsl.w	r6, r1, r5
 8008856:	1d72      	adds	r2, r6, #5
 8008858:	4620      	mov	r0, r4
 800885a:	0092      	lsls	r2, r2, #2
 800885c:	f000 fe00 	bl	8009460 <_calloc_r>
 8008860:	b160      	cbz	r0, 800887c <_Balloc+0x64>
 8008862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008866:	e00e      	b.n	8008886 <_Balloc+0x6e>
 8008868:	2221      	movs	r2, #33	; 0x21
 800886a:	2104      	movs	r1, #4
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fdf7 	bl	8009460 <_calloc_r>
 8008872:	69e3      	ldr	r3, [r4, #28]
 8008874:	60f0      	str	r0, [r6, #12]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e4      	bne.n	8008846 <_Balloc+0x2e>
 800887c:	2000      	movs	r0, #0
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	6802      	ldr	r2, [r0, #0]
 8008882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008886:	2300      	movs	r3, #0
 8008888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800888c:	e7f7      	b.n	800887e <_Balloc+0x66>
 800888e:	bf00      	nop
 8008890:	0800a231 	.word	0x0800a231
 8008894:	0800a2b1 	.word	0x0800a2b1

08008898 <_Bfree>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	69c6      	ldr	r6, [r0, #28]
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	b976      	cbnz	r6, 80088c0 <_Bfree+0x28>
 80088a2:	2010      	movs	r0, #16
 80088a4:	f7ff ff04 	bl	80086b0 <malloc>
 80088a8:	4602      	mov	r2, r0
 80088aa:	61e8      	str	r0, [r5, #28]
 80088ac:	b920      	cbnz	r0, 80088b8 <_Bfree+0x20>
 80088ae:	218f      	movs	r1, #143	; 0x8f
 80088b0:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <_Bfree+0x3c>)
 80088b2:	4809      	ldr	r0, [pc, #36]	; (80088d8 <_Bfree+0x40>)
 80088b4:	f000 fdb6 	bl	8009424 <__assert_func>
 80088b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088bc:	6006      	str	r6, [r0, #0]
 80088be:	60c6      	str	r6, [r0, #12]
 80088c0:	b13c      	cbz	r4, 80088d2 <_Bfree+0x3a>
 80088c2:	69eb      	ldr	r3, [r5, #28]
 80088c4:	6862      	ldr	r2, [r4, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088cc:	6021      	str	r1, [r4, #0]
 80088ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	0800a231 	.word	0x0800a231
 80088d8:	0800a2b1 	.word	0x0800a2b1

080088dc <__multadd>:
 80088dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4607      	mov	r7, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	461e      	mov	r6, r3
 80088e6:	2000      	movs	r0, #0
 80088e8:	690d      	ldr	r5, [r1, #16]
 80088ea:	f101 0c14 	add.w	ip, r1, #20
 80088ee:	f8dc 3000 	ldr.w	r3, [ip]
 80088f2:	3001      	adds	r0, #1
 80088f4:	b299      	uxth	r1, r3
 80088f6:	fb02 6101 	mla	r1, r2, r1, r6
 80088fa:	0c1e      	lsrs	r6, r3, #16
 80088fc:	0c0b      	lsrs	r3, r1, #16
 80088fe:	fb02 3306 	mla	r3, r2, r6, r3
 8008902:	b289      	uxth	r1, r1
 8008904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008908:	4285      	cmp	r5, r0
 800890a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800890e:	f84c 1b04 	str.w	r1, [ip], #4
 8008912:	dcec      	bgt.n	80088ee <__multadd+0x12>
 8008914:	b30e      	cbz	r6, 800895a <__multadd+0x7e>
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	42ab      	cmp	r3, r5
 800891a:	dc19      	bgt.n	8008950 <__multadd+0x74>
 800891c:	6861      	ldr	r1, [r4, #4]
 800891e:	4638      	mov	r0, r7
 8008920:	3101      	adds	r1, #1
 8008922:	f7ff ff79 	bl	8008818 <_Balloc>
 8008926:	4680      	mov	r8, r0
 8008928:	b928      	cbnz	r0, 8008936 <__multadd+0x5a>
 800892a:	4602      	mov	r2, r0
 800892c:	21ba      	movs	r1, #186	; 0xba
 800892e:	4b0c      	ldr	r3, [pc, #48]	; (8008960 <__multadd+0x84>)
 8008930:	480c      	ldr	r0, [pc, #48]	; (8008964 <__multadd+0x88>)
 8008932:	f000 fd77 	bl	8009424 <__assert_func>
 8008936:	6922      	ldr	r2, [r4, #16]
 8008938:	f104 010c 	add.w	r1, r4, #12
 800893c:	3202      	adds	r2, #2
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	300c      	adds	r0, #12
 8008942:	f000 fd61 	bl	8009408 <memcpy>
 8008946:	4621      	mov	r1, r4
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff ffa5 	bl	8008898 <_Bfree>
 800894e:	4644      	mov	r4, r8
 8008950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008954:	3501      	adds	r5, #1
 8008956:	615e      	str	r6, [r3, #20]
 8008958:	6125      	str	r5, [r4, #16]
 800895a:	4620      	mov	r0, r4
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	0800a2a0 	.word	0x0800a2a0
 8008964:	0800a2b1 	.word	0x0800a2b1

08008968 <__hi0bits>:
 8008968:	0c02      	lsrs	r2, r0, #16
 800896a:	0412      	lsls	r2, r2, #16
 800896c:	4603      	mov	r3, r0
 800896e:	b9ca      	cbnz	r2, 80089a4 <__hi0bits+0x3c>
 8008970:	0403      	lsls	r3, r0, #16
 8008972:	2010      	movs	r0, #16
 8008974:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008978:	bf04      	itt	eq
 800897a:	021b      	lsleq	r3, r3, #8
 800897c:	3008      	addeq	r0, #8
 800897e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008982:	bf04      	itt	eq
 8008984:	011b      	lsleq	r3, r3, #4
 8008986:	3004      	addeq	r0, #4
 8008988:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800898c:	bf04      	itt	eq
 800898e:	009b      	lsleq	r3, r3, #2
 8008990:	3002      	addeq	r0, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	db05      	blt.n	80089a2 <__hi0bits+0x3a>
 8008996:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800899a:	f100 0001 	add.w	r0, r0, #1
 800899e:	bf08      	it	eq
 80089a0:	2020      	moveq	r0, #32
 80089a2:	4770      	bx	lr
 80089a4:	2000      	movs	r0, #0
 80089a6:	e7e5      	b.n	8008974 <__hi0bits+0xc>

080089a8 <__lo0bits>:
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	4602      	mov	r2, r0
 80089ac:	f013 0007 	ands.w	r0, r3, #7
 80089b0:	d00b      	beq.n	80089ca <__lo0bits+0x22>
 80089b2:	07d9      	lsls	r1, r3, #31
 80089b4:	d421      	bmi.n	80089fa <__lo0bits+0x52>
 80089b6:	0798      	lsls	r0, r3, #30
 80089b8:	bf49      	itett	mi
 80089ba:	085b      	lsrmi	r3, r3, #1
 80089bc:	089b      	lsrpl	r3, r3, #2
 80089be:	2001      	movmi	r0, #1
 80089c0:	6013      	strmi	r3, [r2, #0]
 80089c2:	bf5c      	itt	pl
 80089c4:	2002      	movpl	r0, #2
 80089c6:	6013      	strpl	r3, [r2, #0]
 80089c8:	4770      	bx	lr
 80089ca:	b299      	uxth	r1, r3
 80089cc:	b909      	cbnz	r1, 80089d2 <__lo0bits+0x2a>
 80089ce:	2010      	movs	r0, #16
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	b2d9      	uxtb	r1, r3
 80089d4:	b909      	cbnz	r1, 80089da <__lo0bits+0x32>
 80089d6:	3008      	adds	r0, #8
 80089d8:	0a1b      	lsrs	r3, r3, #8
 80089da:	0719      	lsls	r1, r3, #28
 80089dc:	bf04      	itt	eq
 80089de:	091b      	lsreq	r3, r3, #4
 80089e0:	3004      	addeq	r0, #4
 80089e2:	0799      	lsls	r1, r3, #30
 80089e4:	bf04      	itt	eq
 80089e6:	089b      	lsreq	r3, r3, #2
 80089e8:	3002      	addeq	r0, #2
 80089ea:	07d9      	lsls	r1, r3, #31
 80089ec:	d403      	bmi.n	80089f6 <__lo0bits+0x4e>
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	f100 0001 	add.w	r0, r0, #1
 80089f4:	d003      	beq.n	80089fe <__lo0bits+0x56>
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	4770      	bx	lr
 80089fa:	2000      	movs	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	2020      	movs	r0, #32
 8008a00:	4770      	bx	lr
	...

08008a04 <__i2b>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	460c      	mov	r4, r1
 8008a08:	2101      	movs	r1, #1
 8008a0a:	f7ff ff05 	bl	8008818 <_Balloc>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <__i2b+0x1a>
 8008a12:	f240 1145 	movw	r1, #325	; 0x145
 8008a16:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <__i2b+0x24>)
 8008a18:	4804      	ldr	r0, [pc, #16]	; (8008a2c <__i2b+0x28>)
 8008a1a:	f000 fd03 	bl	8009424 <__assert_func>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	6144      	str	r4, [r0, #20]
 8008a22:	6103      	str	r3, [r0, #16]
 8008a24:	bd10      	pop	{r4, pc}
 8008a26:	bf00      	nop
 8008a28:	0800a2a0 	.word	0x0800a2a0
 8008a2c:	0800a2b1 	.word	0x0800a2b1

08008a30 <__multiply>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	4691      	mov	r9, r2
 8008a36:	690a      	ldr	r2, [r1, #16]
 8008a38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	bfbe      	ittt	lt
 8008a42:	460b      	movlt	r3, r1
 8008a44:	464c      	movlt	r4, r9
 8008a46:	4699      	movlt	r9, r3
 8008a48:	6927      	ldr	r7, [r4, #16]
 8008a4a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	eb07 060a 	add.w	r6, r7, sl
 8008a56:	42b3      	cmp	r3, r6
 8008a58:	b085      	sub	sp, #20
 8008a5a:	bfb8      	it	lt
 8008a5c:	3101      	addlt	r1, #1
 8008a5e:	f7ff fedb 	bl	8008818 <_Balloc>
 8008a62:	b930      	cbnz	r0, 8008a72 <__multiply+0x42>
 8008a64:	4602      	mov	r2, r0
 8008a66:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a6a:	4b43      	ldr	r3, [pc, #268]	; (8008b78 <__multiply+0x148>)
 8008a6c:	4843      	ldr	r0, [pc, #268]	; (8008b7c <__multiply+0x14c>)
 8008a6e:	f000 fcd9 	bl	8009424 <__assert_func>
 8008a72:	f100 0514 	add.w	r5, r0, #20
 8008a76:	462b      	mov	r3, r5
 8008a78:	2200      	movs	r2, #0
 8008a7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a7e:	4543      	cmp	r3, r8
 8008a80:	d321      	bcc.n	8008ac6 <__multiply+0x96>
 8008a82:	f104 0314 	add.w	r3, r4, #20
 8008a86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a8a:	f109 0314 	add.w	r3, r9, #20
 8008a8e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a92:	9202      	str	r2, [sp, #8]
 8008a94:	1b3a      	subs	r2, r7, r4
 8008a96:	3a15      	subs	r2, #21
 8008a98:	f022 0203 	bic.w	r2, r2, #3
 8008a9c:	3204      	adds	r2, #4
 8008a9e:	f104 0115 	add.w	r1, r4, #21
 8008aa2:	428f      	cmp	r7, r1
 8008aa4:	bf38      	it	cc
 8008aa6:	2204      	movcc	r2, #4
 8008aa8:	9201      	str	r2, [sp, #4]
 8008aaa:	9a02      	ldr	r2, [sp, #8]
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d80c      	bhi.n	8008acc <__multiply+0x9c>
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	dd03      	ble.n	8008abe <__multiply+0x8e>
 8008ab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d05a      	beq.n	8008b74 <__multiply+0x144>
 8008abe:	6106      	str	r6, [r0, #16]
 8008ac0:	b005      	add	sp, #20
 8008ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac6:	f843 2b04 	str.w	r2, [r3], #4
 8008aca:	e7d8      	b.n	8008a7e <__multiply+0x4e>
 8008acc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ad0:	f1ba 0f00 	cmp.w	sl, #0
 8008ad4:	d023      	beq.n	8008b1e <__multiply+0xee>
 8008ad6:	46a9      	mov	r9, r5
 8008ad8:	f04f 0c00 	mov.w	ip, #0
 8008adc:	f104 0e14 	add.w	lr, r4, #20
 8008ae0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008ae4:	f8d9 1000 	ldr.w	r1, [r9]
 8008ae8:	fa1f fb82 	uxth.w	fp, r2
 8008aec:	b289      	uxth	r1, r1
 8008aee:	fb0a 110b 	mla	r1, sl, fp, r1
 8008af2:	4461      	add	r1, ip
 8008af4:	f8d9 c000 	ldr.w	ip, [r9]
 8008af8:	0c12      	lsrs	r2, r2, #16
 8008afa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008afe:	fb0a c202 	mla	r2, sl, r2, ip
 8008b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b06:	b289      	uxth	r1, r1
 8008b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b0c:	4577      	cmp	r7, lr
 8008b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b12:	f849 1b04 	str.w	r1, [r9], #4
 8008b16:	d8e3      	bhi.n	8008ae0 <__multiply+0xb0>
 8008b18:	9a01      	ldr	r2, [sp, #4]
 8008b1a:	f845 c002 	str.w	ip, [r5, r2]
 8008b1e:	9a03      	ldr	r2, [sp, #12]
 8008b20:	3304      	adds	r3, #4
 8008b22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b26:	f1b9 0f00 	cmp.w	r9, #0
 8008b2a:	d021      	beq.n	8008b70 <__multiply+0x140>
 8008b2c:	46ae      	mov	lr, r5
 8008b2e:	f04f 0a00 	mov.w	sl, #0
 8008b32:	6829      	ldr	r1, [r5, #0]
 8008b34:	f104 0c14 	add.w	ip, r4, #20
 8008b38:	f8bc b000 	ldrh.w	fp, [ip]
 8008b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b40:	b289      	uxth	r1, r1
 8008b42:	fb09 220b 	mla	r2, r9, fp, r2
 8008b46:	4452      	add	r2, sl
 8008b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8008b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b58:	f8be 1000 	ldrh.w	r1, [lr]
 8008b5c:	4567      	cmp	r7, ip
 8008b5e:	fb09 110a 	mla	r1, r9, sl, r1
 8008b62:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b6a:	d8e5      	bhi.n	8008b38 <__multiply+0x108>
 8008b6c:	9a01      	ldr	r2, [sp, #4]
 8008b6e:	50a9      	str	r1, [r5, r2]
 8008b70:	3504      	adds	r5, #4
 8008b72:	e79a      	b.n	8008aaa <__multiply+0x7a>
 8008b74:	3e01      	subs	r6, #1
 8008b76:	e79c      	b.n	8008ab2 <__multiply+0x82>
 8008b78:	0800a2a0 	.word	0x0800a2a0
 8008b7c:	0800a2b1 	.word	0x0800a2b1

08008b80 <__pow5mult>:
 8008b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b84:	4615      	mov	r5, r2
 8008b86:	f012 0203 	ands.w	r2, r2, #3
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	460f      	mov	r7, r1
 8008b8e:	d007      	beq.n	8008ba0 <__pow5mult+0x20>
 8008b90:	4c25      	ldr	r4, [pc, #148]	; (8008c28 <__pow5mult+0xa8>)
 8008b92:	3a01      	subs	r2, #1
 8008b94:	2300      	movs	r3, #0
 8008b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b9a:	f7ff fe9f 	bl	80088dc <__multadd>
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	10ad      	asrs	r5, r5, #2
 8008ba2:	d03d      	beq.n	8008c20 <__pow5mult+0xa0>
 8008ba4:	69f4      	ldr	r4, [r6, #28]
 8008ba6:	b97c      	cbnz	r4, 8008bc8 <__pow5mult+0x48>
 8008ba8:	2010      	movs	r0, #16
 8008baa:	f7ff fd81 	bl	80086b0 <malloc>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	61f0      	str	r0, [r6, #28]
 8008bb2:	b928      	cbnz	r0, 8008bc0 <__pow5mult+0x40>
 8008bb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <__pow5mult+0xac>)
 8008bba:	481d      	ldr	r0, [pc, #116]	; (8008c30 <__pow5mult+0xb0>)
 8008bbc:	f000 fc32 	bl	8009424 <__assert_func>
 8008bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc4:	6004      	str	r4, [r0, #0]
 8008bc6:	60c4      	str	r4, [r0, #12]
 8008bc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bd0:	b94c      	cbnz	r4, 8008be6 <__pow5mult+0x66>
 8008bd2:	f240 2171 	movw	r1, #625	; 0x271
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7ff ff14 	bl	8008a04 <__i2b>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	07eb      	lsls	r3, r5, #31
 8008bec:	d50a      	bpl.n	8008c04 <__pow5mult+0x84>
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ff1c 	bl	8008a30 <__multiply>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff fe4b 	bl	8008898 <_Bfree>
 8008c02:	4647      	mov	r7, r8
 8008c04:	106d      	asrs	r5, r5, #1
 8008c06:	d00b      	beq.n	8008c20 <__pow5mult+0xa0>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	b938      	cbnz	r0, 8008c1c <__pow5mult+0x9c>
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff ff0d 	bl	8008a30 <__multiply>
 8008c16:	6020      	str	r0, [r4, #0]
 8008c18:	f8c0 9000 	str.w	r9, [r0]
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	e7e4      	b.n	8008bea <__pow5mult+0x6a>
 8008c20:	4638      	mov	r0, r7
 8008c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c26:	bf00      	nop
 8008c28:	0800a400 	.word	0x0800a400
 8008c2c:	0800a231 	.word	0x0800a231
 8008c30:	0800a2b1 	.word	0x0800a2b1

08008c34 <__lshift>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	460c      	mov	r4, r1
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	4691      	mov	r9, r2
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6849      	ldr	r1, [r1, #4]
 8008c42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c4c:	f108 0601 	add.w	r6, r8, #1
 8008c50:	42b3      	cmp	r3, r6
 8008c52:	db0b      	blt.n	8008c6c <__lshift+0x38>
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff fddf 	bl	8008818 <_Balloc>
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	b948      	cbnz	r0, 8008c72 <__lshift+0x3e>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <__lshift+0xd0>)
 8008c66:	4828      	ldr	r0, [pc, #160]	; (8008d08 <__lshift+0xd4>)
 8008c68:	f000 fbdc 	bl	8009424 <__assert_func>
 8008c6c:	3101      	adds	r1, #1
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	e7ee      	b.n	8008c50 <__lshift+0x1c>
 8008c72:	2300      	movs	r3, #0
 8008c74:	f100 0114 	add.w	r1, r0, #20
 8008c78:	f100 0210 	add.w	r2, r0, #16
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	4553      	cmp	r3, sl
 8008c80:	db33      	blt.n	8008cea <__lshift+0xb6>
 8008c82:	6920      	ldr	r0, [r4, #16]
 8008c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c88:	f104 0314 	add.w	r3, r4, #20
 8008c8c:	f019 091f 	ands.w	r9, r9, #31
 8008c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c98:	d02b      	beq.n	8008cf2 <__lshift+0xbe>
 8008c9a:	468a      	mov	sl, r1
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f1c9 0e20 	rsb	lr, r9, #32
 8008ca2:	6818      	ldr	r0, [r3, #0]
 8008ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ca8:	4310      	orrs	r0, r2
 8008caa:	f84a 0b04 	str.w	r0, [sl], #4
 8008cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb2:	459c      	cmp	ip, r3
 8008cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cb8:	d8f3      	bhi.n	8008ca2 <__lshift+0x6e>
 8008cba:	ebac 0304 	sub.w	r3, ip, r4
 8008cbe:	3b15      	subs	r3, #21
 8008cc0:	f023 0303 	bic.w	r3, r3, #3
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	f104 0015 	add.w	r0, r4, #21
 8008cca:	4584      	cmp	ip, r0
 8008ccc:	bf38      	it	cc
 8008cce:	2304      	movcc	r3, #4
 8008cd0:	50ca      	str	r2, [r1, r3]
 8008cd2:	b10a      	cbz	r2, 8008cd8 <__lshift+0xa4>
 8008cd4:	f108 0602 	add.w	r6, r8, #2
 8008cd8:	3e01      	subs	r6, #1
 8008cda:	4638      	mov	r0, r7
 8008cdc:	4621      	mov	r1, r4
 8008cde:	612e      	str	r6, [r5, #16]
 8008ce0:	f7ff fdda 	bl	8008898 <_Bfree>
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cee:	3301      	adds	r3, #1
 8008cf0:	e7c5      	b.n	8008c7e <__lshift+0x4a>
 8008cf2:	3904      	subs	r1, #4
 8008cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf8:	459c      	cmp	ip, r3
 8008cfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cfe:	d8f9      	bhi.n	8008cf4 <__lshift+0xc0>
 8008d00:	e7ea      	b.n	8008cd8 <__lshift+0xa4>
 8008d02:	bf00      	nop
 8008d04:	0800a2a0 	.word	0x0800a2a0
 8008d08:	0800a2b1 	.word	0x0800a2b1

08008d0c <__mcmp>:
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	690a      	ldr	r2, [r1, #16]
 8008d10:	6900      	ldr	r0, [r0, #16]
 8008d12:	b530      	push	{r4, r5, lr}
 8008d14:	1a80      	subs	r0, r0, r2
 8008d16:	d10d      	bne.n	8008d34 <__mcmp+0x28>
 8008d18:	3314      	adds	r3, #20
 8008d1a:	3114      	adds	r1, #20
 8008d1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d2c:	4295      	cmp	r5, r2
 8008d2e:	d002      	beq.n	8008d36 <__mcmp+0x2a>
 8008d30:	d304      	bcc.n	8008d3c <__mcmp+0x30>
 8008d32:	2001      	movs	r0, #1
 8008d34:	bd30      	pop	{r4, r5, pc}
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	d3f4      	bcc.n	8008d24 <__mcmp+0x18>
 8008d3a:	e7fb      	b.n	8008d34 <__mcmp+0x28>
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e7f8      	b.n	8008d34 <__mcmp+0x28>
	...

08008d44 <__mdiff>:
 8008d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	460d      	mov	r5, r1
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4628      	mov	r0, r5
 8008d50:	4614      	mov	r4, r2
 8008d52:	f7ff ffdb 	bl	8008d0c <__mcmp>
 8008d56:	1e06      	subs	r6, r0, #0
 8008d58:	d111      	bne.n	8008d7e <__mdiff+0x3a>
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	f7ff fd5b 	bl	8008818 <_Balloc>
 8008d62:	4602      	mov	r2, r0
 8008d64:	b928      	cbnz	r0, 8008d72 <__mdiff+0x2e>
 8008d66:	f240 2137 	movw	r1, #567	; 0x237
 8008d6a:	4b3a      	ldr	r3, [pc, #232]	; (8008e54 <__mdiff+0x110>)
 8008d6c:	483a      	ldr	r0, [pc, #232]	; (8008e58 <__mdiff+0x114>)
 8008d6e:	f000 fb59 	bl	8009424 <__assert_func>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d78:	4610      	mov	r0, r2
 8008d7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	bfa4      	itt	ge
 8008d80:	4623      	movge	r3, r4
 8008d82:	462c      	movge	r4, r5
 8008d84:	4638      	mov	r0, r7
 8008d86:	6861      	ldr	r1, [r4, #4]
 8008d88:	bfa6      	itte	ge
 8008d8a:	461d      	movge	r5, r3
 8008d8c:	2600      	movge	r6, #0
 8008d8e:	2601      	movlt	r6, #1
 8008d90:	f7ff fd42 	bl	8008818 <_Balloc>
 8008d94:	4602      	mov	r2, r0
 8008d96:	b918      	cbnz	r0, 8008da0 <__mdiff+0x5c>
 8008d98:	f240 2145 	movw	r1, #581	; 0x245
 8008d9c:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <__mdiff+0x110>)
 8008d9e:	e7e5      	b.n	8008d6c <__mdiff+0x28>
 8008da0:	f102 0814 	add.w	r8, r2, #20
 8008da4:	46c2      	mov	sl, r8
 8008da6:	f04f 0c00 	mov.w	ip, #0
 8008daa:	6927      	ldr	r7, [r4, #16]
 8008dac:	60c6      	str	r6, [r0, #12]
 8008dae:	692e      	ldr	r6, [r5, #16]
 8008db0:	f104 0014 	add.w	r0, r4, #20
 8008db4:	f105 0914 	add.w	r9, r5, #20
 8008db8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008dbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dc0:	3410      	adds	r4, #16
 8008dc2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008dc6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dca:	fa1f f18b 	uxth.w	r1, fp
 8008dce:	4461      	add	r1, ip
 8008dd0:	fa1f fc83 	uxth.w	ip, r3
 8008dd4:	0c1b      	lsrs	r3, r3, #16
 8008dd6:	eba1 010c 	sub.w	r1, r1, ip
 8008dda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dde:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008de2:	b289      	uxth	r1, r1
 8008de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008de8:	454e      	cmp	r6, r9
 8008dea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008dee:	f84a 1b04 	str.w	r1, [sl], #4
 8008df2:	d8e6      	bhi.n	8008dc2 <__mdiff+0x7e>
 8008df4:	1b73      	subs	r3, r6, r5
 8008df6:	3b15      	subs	r3, #21
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	3515      	adds	r5, #21
 8008dfe:	3304      	adds	r3, #4
 8008e00:	42ae      	cmp	r6, r5
 8008e02:	bf38      	it	cc
 8008e04:	2304      	movcc	r3, #4
 8008e06:	4418      	add	r0, r3
 8008e08:	4443      	add	r3, r8
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	4575      	cmp	r5, lr
 8008e10:	d30e      	bcc.n	8008e30 <__mdiff+0xec>
 8008e12:	f10e 0103 	add.w	r1, lr, #3
 8008e16:	1a09      	subs	r1, r1, r0
 8008e18:	f021 0103 	bic.w	r1, r1, #3
 8008e1c:	3803      	subs	r0, #3
 8008e1e:	4586      	cmp	lr, r0
 8008e20:	bf38      	it	cc
 8008e22:	2100      	movcc	r1, #0
 8008e24:	440b      	add	r3, r1
 8008e26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e2a:	b189      	cbz	r1, 8008e50 <__mdiff+0x10c>
 8008e2c:	6117      	str	r7, [r2, #16]
 8008e2e:	e7a3      	b.n	8008d78 <__mdiff+0x34>
 8008e30:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e34:	fa1f f188 	uxth.w	r1, r8
 8008e38:	4461      	add	r1, ip
 8008e3a:	140c      	asrs	r4, r1, #16
 8008e3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e40:	b289      	uxth	r1, r1
 8008e42:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e46:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008e4a:	f846 1b04 	str.w	r1, [r6], #4
 8008e4e:	e7de      	b.n	8008e0e <__mdiff+0xca>
 8008e50:	3f01      	subs	r7, #1
 8008e52:	e7e8      	b.n	8008e26 <__mdiff+0xe2>
 8008e54:	0800a2a0 	.word	0x0800a2a0
 8008e58:	0800a2b1 	.word	0x0800a2b1

08008e5c <__d2b>:
 8008e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e5e:	2101      	movs	r1, #1
 8008e60:	4617      	mov	r7, r2
 8008e62:	461c      	mov	r4, r3
 8008e64:	9e08      	ldr	r6, [sp, #32]
 8008e66:	f7ff fcd7 	bl	8008818 <_Balloc>
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b930      	cbnz	r0, 8008e7c <__d2b+0x20>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	f240 310f 	movw	r1, #783	; 0x30f
 8008e74:	4b22      	ldr	r3, [pc, #136]	; (8008f00 <__d2b+0xa4>)
 8008e76:	4823      	ldr	r0, [pc, #140]	; (8008f04 <__d2b+0xa8>)
 8008e78:	f000 fad4 	bl	8009424 <__assert_func>
 8008e7c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e80:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008e84:	bb24      	cbnz	r4, 8008ed0 <__d2b+0x74>
 8008e86:	2f00      	cmp	r7, #0
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	d026      	beq.n	8008eda <__d2b+0x7e>
 8008e8c:	4668      	mov	r0, sp
 8008e8e:	9700      	str	r7, [sp, #0]
 8008e90:	f7ff fd8a 	bl	80089a8 <__lo0bits>
 8008e94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e98:	b1e8      	cbz	r0, 8008ed6 <__d2b+0x7a>
 8008e9a:	f1c0 0320 	rsb	r3, r0, #32
 8008e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	40c2      	lsrs	r2, r0
 8008ea6:	616b      	str	r3, [r5, #20]
 8008ea8:	9201      	str	r2, [sp, #4]
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bf14      	ite	ne
 8008eb0:	2102      	movne	r1, #2
 8008eb2:	2101      	moveq	r1, #1
 8008eb4:	61ab      	str	r3, [r5, #24]
 8008eb6:	6129      	str	r1, [r5, #16]
 8008eb8:	b1bc      	cbz	r4, 8008eea <__d2b+0x8e>
 8008eba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008ebe:	4404      	add	r4, r0
 8008ec0:	6034      	str	r4, [r6, #0]
 8008ec2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec8:	6018      	str	r0, [r3, #0]
 8008eca:	4628      	mov	r0, r5
 8008ecc:	b003      	add	sp, #12
 8008ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed4:	e7d7      	b.n	8008e86 <__d2b+0x2a>
 8008ed6:	6169      	str	r1, [r5, #20]
 8008ed8:	e7e7      	b.n	8008eaa <__d2b+0x4e>
 8008eda:	a801      	add	r0, sp, #4
 8008edc:	f7ff fd64 	bl	80089a8 <__lo0bits>
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	616b      	str	r3, [r5, #20]
 8008ee6:	3020      	adds	r0, #32
 8008ee8:	e7e5      	b.n	8008eb6 <__d2b+0x5a>
 8008eea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eee:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008ef2:	6030      	str	r0, [r6, #0]
 8008ef4:	6918      	ldr	r0, [r3, #16]
 8008ef6:	f7ff fd37 	bl	8008968 <__hi0bits>
 8008efa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008efe:	e7e2      	b.n	8008ec6 <__d2b+0x6a>
 8008f00:	0800a2a0 	.word	0x0800a2a0
 8008f04:	0800a2b1 	.word	0x0800a2b1

08008f08 <__sfputc_r>:
 8008f08:	6893      	ldr	r3, [r2, #8]
 8008f0a:	b410      	push	{r4}
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	6093      	str	r3, [r2, #8]
 8008f12:	da07      	bge.n	8008f24 <__sfputc_r+0x1c>
 8008f14:	6994      	ldr	r4, [r2, #24]
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	db01      	blt.n	8008f1e <__sfputc_r+0x16>
 8008f1a:	290a      	cmp	r1, #10
 8008f1c:	d102      	bne.n	8008f24 <__sfputc_r+0x1c>
 8008f1e:	bc10      	pop	{r4}
 8008f20:	f7fe bbef 	b.w	8007702 <__swbuf_r>
 8008f24:	6813      	ldr	r3, [r2, #0]
 8008f26:	1c58      	adds	r0, r3, #1
 8008f28:	6010      	str	r0, [r2, #0]
 8008f2a:	7019      	strb	r1, [r3, #0]
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	bc10      	pop	{r4}
 8008f30:	4770      	bx	lr

08008f32 <__sfputs_r>:
 8008f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	18d5      	adds	r5, r2, r3
 8008f3c:	42ac      	cmp	r4, r5
 8008f3e:	d101      	bne.n	8008f44 <__sfputs_r+0x12>
 8008f40:	2000      	movs	r0, #0
 8008f42:	e007      	b.n	8008f54 <__sfputs_r+0x22>
 8008f44:	463a      	mov	r2, r7
 8008f46:	4630      	mov	r0, r6
 8008f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4c:	f7ff ffdc 	bl	8008f08 <__sfputc_r>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d1f3      	bne.n	8008f3c <__sfputs_r+0xa>
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f58 <_vfiprintf_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	4614      	mov	r4, r2
 8008f60:	4698      	mov	r8, r3
 8008f62:	4606      	mov	r6, r0
 8008f64:	b09d      	sub	sp, #116	; 0x74
 8008f66:	b118      	cbz	r0, 8008f70 <_vfiprintf_r+0x18>
 8008f68:	6a03      	ldr	r3, [r0, #32]
 8008f6a:	b90b      	cbnz	r3, 8008f70 <_vfiprintf_r+0x18>
 8008f6c:	f7fe fae2 	bl	8007534 <__sinit>
 8008f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f72:	07d9      	lsls	r1, r3, #31
 8008f74:	d405      	bmi.n	8008f82 <_vfiprintf_r+0x2a>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	059a      	lsls	r2, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_vfiprintf_r+0x2a>
 8008f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7e:	f7fe fcd2 	bl	8007926 <__retarget_lock_acquire_recursive>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	071b      	lsls	r3, r3, #28
 8008f86:	d501      	bpl.n	8008f8c <_vfiprintf_r+0x34>
 8008f88:	692b      	ldr	r3, [r5, #16]
 8008f8a:	b99b      	cbnz	r3, 8008fb4 <_vfiprintf_r+0x5c>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7fe fbf4 	bl	800777c <__swsetup_r>
 8008f94:	b170      	cbz	r0, 8008fb4 <_vfiprintf_r+0x5c>
 8008f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f98:	07dc      	lsls	r4, r3, #31
 8008f9a:	d504      	bpl.n	8008fa6 <_vfiprintf_r+0x4e>
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	b01d      	add	sp, #116	; 0x74
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	0598      	lsls	r0, r3, #22
 8008faa:	d4f7      	bmi.n	8008f9c <_vfiprintf_r+0x44>
 8008fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fae:	f7fe fcbb 	bl	8007928 <__retarget_lock_release_recursive>
 8008fb2:	e7f3      	b.n	8008f9c <_vfiprintf_r+0x44>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb8:	2320      	movs	r3, #32
 8008fba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fbe:	2330      	movs	r3, #48	; 0x30
 8008fc0:	f04f 0901 	mov.w	r9, #1
 8008fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009178 <_vfiprintf_r+0x220>
 8008fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fd0:	4623      	mov	r3, r4
 8008fd2:	469a      	mov	sl, r3
 8008fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fd8:	b10a      	cbz	r2, 8008fde <_vfiprintf_r+0x86>
 8008fda:	2a25      	cmp	r2, #37	; 0x25
 8008fdc:	d1f9      	bne.n	8008fd2 <_vfiprintf_r+0x7a>
 8008fde:	ebba 0b04 	subs.w	fp, sl, r4
 8008fe2:	d00b      	beq.n	8008ffc <_vfiprintf_r+0xa4>
 8008fe4:	465b      	mov	r3, fp
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ffa1 	bl	8008f32 <__sfputs_r>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f000 80a9 	beq.w	8009148 <_vfiprintf_r+0x1f0>
 8008ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff8:	445a      	add	r2, fp
 8008ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8008ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80a1 	beq.w	8009148 <_vfiprintf_r+0x1f0>
 8009006:	2300      	movs	r3, #0
 8009008:	f04f 32ff 	mov.w	r2, #4294967295
 800900c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009010:	f10a 0a01 	add.w	sl, sl, #1
 8009014:	9304      	str	r3, [sp, #16]
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800901c:	931a      	str	r3, [sp, #104]	; 0x68
 800901e:	4654      	mov	r4, sl
 8009020:	2205      	movs	r2, #5
 8009022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009026:	4854      	ldr	r0, [pc, #336]	; (8009178 <_vfiprintf_r+0x220>)
 8009028:	f7fe fc7f 	bl	800792a <memchr>
 800902c:	9a04      	ldr	r2, [sp, #16]
 800902e:	b9d8      	cbnz	r0, 8009068 <_vfiprintf_r+0x110>
 8009030:	06d1      	lsls	r1, r2, #27
 8009032:	bf44      	itt	mi
 8009034:	2320      	movmi	r3, #32
 8009036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800903a:	0713      	lsls	r3, r2, #28
 800903c:	bf44      	itt	mi
 800903e:	232b      	movmi	r3, #43	; 0x2b
 8009040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009044:	f89a 3000 	ldrb.w	r3, [sl]
 8009048:	2b2a      	cmp	r3, #42	; 0x2a
 800904a:	d015      	beq.n	8009078 <_vfiprintf_r+0x120>
 800904c:	4654      	mov	r4, sl
 800904e:	2000      	movs	r0, #0
 8009050:	f04f 0c0a 	mov.w	ip, #10
 8009054:	9a07      	ldr	r2, [sp, #28]
 8009056:	4621      	mov	r1, r4
 8009058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800905c:	3b30      	subs	r3, #48	; 0x30
 800905e:	2b09      	cmp	r3, #9
 8009060:	d94d      	bls.n	80090fe <_vfiprintf_r+0x1a6>
 8009062:	b1b0      	cbz	r0, 8009092 <_vfiprintf_r+0x13a>
 8009064:	9207      	str	r2, [sp, #28]
 8009066:	e014      	b.n	8009092 <_vfiprintf_r+0x13a>
 8009068:	eba0 0308 	sub.w	r3, r0, r8
 800906c:	fa09 f303 	lsl.w	r3, r9, r3
 8009070:	4313      	orrs	r3, r2
 8009072:	46a2      	mov	sl, r4
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	e7d2      	b.n	800901e <_vfiprintf_r+0xc6>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	1d19      	adds	r1, r3, #4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	9103      	str	r1, [sp, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfbb      	ittet	lt
 8009084:	425b      	neglt	r3, r3
 8009086:	f042 0202 	orrlt.w	r2, r2, #2
 800908a:	9307      	strge	r3, [sp, #28]
 800908c:	9307      	strlt	r3, [sp, #28]
 800908e:	bfb8      	it	lt
 8009090:	9204      	strlt	r2, [sp, #16]
 8009092:	7823      	ldrb	r3, [r4, #0]
 8009094:	2b2e      	cmp	r3, #46	; 0x2e
 8009096:	d10c      	bne.n	80090b2 <_vfiprintf_r+0x15a>
 8009098:	7863      	ldrb	r3, [r4, #1]
 800909a:	2b2a      	cmp	r3, #42	; 0x2a
 800909c:	d134      	bne.n	8009108 <_vfiprintf_r+0x1b0>
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	3402      	adds	r4, #2
 80090a2:	1d1a      	adds	r2, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	9203      	str	r2, [sp, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfb8      	it	lt
 80090ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800917c <_vfiprintf_r+0x224>
 80090b6:	2203      	movs	r2, #3
 80090b8:	4650      	mov	r0, sl
 80090ba:	7821      	ldrb	r1, [r4, #0]
 80090bc:	f7fe fc35 	bl	800792a <memchr>
 80090c0:	b138      	cbz	r0, 80090d2 <_vfiprintf_r+0x17a>
 80090c2:	2240      	movs	r2, #64	; 0x40
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	eba0 000a 	sub.w	r0, r0, sl
 80090ca:	4082      	lsls	r2, r0
 80090cc:	4313      	orrs	r3, r2
 80090ce:	3401      	adds	r4, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d6:	2206      	movs	r2, #6
 80090d8:	4829      	ldr	r0, [pc, #164]	; (8009180 <_vfiprintf_r+0x228>)
 80090da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090de:	f7fe fc24 	bl	800792a <memchr>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d03f      	beq.n	8009166 <_vfiprintf_r+0x20e>
 80090e6:	4b27      	ldr	r3, [pc, #156]	; (8009184 <_vfiprintf_r+0x22c>)
 80090e8:	bb1b      	cbnz	r3, 8009132 <_vfiprintf_r+0x1da>
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	3307      	adds	r3, #7
 80090ee:	f023 0307 	bic.w	r3, r3, #7
 80090f2:	3308      	adds	r3, #8
 80090f4:	9303      	str	r3, [sp, #12]
 80090f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f8:	443b      	add	r3, r7
 80090fa:	9309      	str	r3, [sp, #36]	; 0x24
 80090fc:	e768      	b.n	8008fd0 <_vfiprintf_r+0x78>
 80090fe:	460c      	mov	r4, r1
 8009100:	2001      	movs	r0, #1
 8009102:	fb0c 3202 	mla	r2, ip, r2, r3
 8009106:	e7a6      	b.n	8009056 <_vfiprintf_r+0xfe>
 8009108:	2300      	movs	r3, #0
 800910a:	f04f 0c0a 	mov.w	ip, #10
 800910e:	4619      	mov	r1, r3
 8009110:	3401      	adds	r4, #1
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	4620      	mov	r0, r4
 8009116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800911a:	3a30      	subs	r2, #48	; 0x30
 800911c:	2a09      	cmp	r2, #9
 800911e:	d903      	bls.n	8009128 <_vfiprintf_r+0x1d0>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0c6      	beq.n	80090b2 <_vfiprintf_r+0x15a>
 8009124:	9105      	str	r1, [sp, #20]
 8009126:	e7c4      	b.n	80090b2 <_vfiprintf_r+0x15a>
 8009128:	4604      	mov	r4, r0
 800912a:	2301      	movs	r3, #1
 800912c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009130:	e7f0      	b.n	8009114 <_vfiprintf_r+0x1bc>
 8009132:	ab03      	add	r3, sp, #12
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	462a      	mov	r2, r5
 8009138:	4630      	mov	r0, r6
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <_vfiprintf_r+0x230>)
 800913c:	a904      	add	r1, sp, #16
 800913e:	f7fd fdab 	bl	8006c98 <_printf_float>
 8009142:	4607      	mov	r7, r0
 8009144:	1c78      	adds	r0, r7, #1
 8009146:	d1d6      	bne.n	80090f6 <_vfiprintf_r+0x19e>
 8009148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800914a:	07d9      	lsls	r1, r3, #31
 800914c:	d405      	bmi.n	800915a <_vfiprintf_r+0x202>
 800914e:	89ab      	ldrh	r3, [r5, #12]
 8009150:	059a      	lsls	r2, r3, #22
 8009152:	d402      	bmi.n	800915a <_vfiprintf_r+0x202>
 8009154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009156:	f7fe fbe7 	bl	8007928 <__retarget_lock_release_recursive>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	065b      	lsls	r3, r3, #25
 800915e:	f53f af1d 	bmi.w	8008f9c <_vfiprintf_r+0x44>
 8009162:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009164:	e71c      	b.n	8008fa0 <_vfiprintf_r+0x48>
 8009166:	ab03      	add	r3, sp, #12
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	462a      	mov	r2, r5
 800916c:	4630      	mov	r0, r6
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <_vfiprintf_r+0x230>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	f7fe f831 	bl	80071d8 <_printf_i>
 8009176:	e7e4      	b.n	8009142 <_vfiprintf_r+0x1ea>
 8009178:	0800a40c 	.word	0x0800a40c
 800917c:	0800a412 	.word	0x0800a412
 8009180:	0800a416 	.word	0x0800a416
 8009184:	08006c99 	.word	0x08006c99
 8009188:	08008f33 	.word	0x08008f33

0800918c <__sflush_r>:
 800918c:	898a      	ldrh	r2, [r1, #12]
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	4605      	mov	r5, r0
 8009192:	0710      	lsls	r0, r2, #28
 8009194:	460c      	mov	r4, r1
 8009196:	d457      	bmi.n	8009248 <__sflush_r+0xbc>
 8009198:	684b      	ldr	r3, [r1, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dc04      	bgt.n	80091a8 <__sflush_r+0x1c>
 800919e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	dc01      	bgt.n	80091a8 <__sflush_r+0x1c>
 80091a4:	2000      	movs	r0, #0
 80091a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	d0fa      	beq.n	80091a4 <__sflush_r+0x18>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091b4:	682f      	ldr	r7, [r5, #0]
 80091b6:	6a21      	ldr	r1, [r4, #32]
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	d032      	beq.n	8009222 <__sflush_r+0x96>
 80091bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	075a      	lsls	r2, r3, #29
 80091c2:	d505      	bpl.n	80091d0 <__sflush_r+0x44>
 80091c4:	6863      	ldr	r3, [r4, #4]
 80091c6:	1ac0      	subs	r0, r0, r3
 80091c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091ca:	b10b      	cbz	r3, 80091d0 <__sflush_r+0x44>
 80091cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ce:	1ac0      	subs	r0, r0, r3
 80091d0:	2300      	movs	r3, #0
 80091d2:	4602      	mov	r2, r0
 80091d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d6:	4628      	mov	r0, r5
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	47b0      	blx	r6
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	d106      	bne.n	80091f0 <__sflush_r+0x64>
 80091e2:	6829      	ldr	r1, [r5, #0]
 80091e4:	291d      	cmp	r1, #29
 80091e6:	d82b      	bhi.n	8009240 <__sflush_r+0xb4>
 80091e8:	4a28      	ldr	r2, [pc, #160]	; (800928c <__sflush_r+0x100>)
 80091ea:	410a      	asrs	r2, r1
 80091ec:	07d6      	lsls	r6, r2, #31
 80091ee:	d427      	bmi.n	8009240 <__sflush_r+0xb4>
 80091f0:	2200      	movs	r2, #0
 80091f2:	6062      	str	r2, [r4, #4]
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	04d9      	lsls	r1, r3, #19
 80091f8:	6022      	str	r2, [r4, #0]
 80091fa:	d504      	bpl.n	8009206 <__sflush_r+0x7a>
 80091fc:	1c42      	adds	r2, r0, #1
 80091fe:	d101      	bne.n	8009204 <__sflush_r+0x78>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b903      	cbnz	r3, 8009206 <__sflush_r+0x7a>
 8009204:	6560      	str	r0, [r4, #84]	; 0x54
 8009206:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009208:	602f      	str	r7, [r5, #0]
 800920a:	2900      	cmp	r1, #0
 800920c:	d0ca      	beq.n	80091a4 <__sflush_r+0x18>
 800920e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009212:	4299      	cmp	r1, r3
 8009214:	d002      	beq.n	800921c <__sflush_r+0x90>
 8009216:	4628      	mov	r0, r5
 8009218:	f7ff fa02 	bl	8008620 <_free_r>
 800921c:	2000      	movs	r0, #0
 800921e:	6360      	str	r0, [r4, #52]	; 0x34
 8009220:	e7c1      	b.n	80091a6 <__sflush_r+0x1a>
 8009222:	2301      	movs	r3, #1
 8009224:	4628      	mov	r0, r5
 8009226:	47b0      	blx	r6
 8009228:	1c41      	adds	r1, r0, #1
 800922a:	d1c8      	bne.n	80091be <__sflush_r+0x32>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0c5      	beq.n	80091be <__sflush_r+0x32>
 8009232:	2b1d      	cmp	r3, #29
 8009234:	d001      	beq.n	800923a <__sflush_r+0xae>
 8009236:	2b16      	cmp	r3, #22
 8009238:	d101      	bne.n	800923e <__sflush_r+0xb2>
 800923a:	602f      	str	r7, [r5, #0]
 800923c:	e7b2      	b.n	80091a4 <__sflush_r+0x18>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	e7ae      	b.n	80091a6 <__sflush_r+0x1a>
 8009248:	690f      	ldr	r7, [r1, #16]
 800924a:	2f00      	cmp	r7, #0
 800924c:	d0aa      	beq.n	80091a4 <__sflush_r+0x18>
 800924e:	0793      	lsls	r3, r2, #30
 8009250:	bf18      	it	ne
 8009252:	2300      	movne	r3, #0
 8009254:	680e      	ldr	r6, [r1, #0]
 8009256:	bf08      	it	eq
 8009258:	694b      	ldreq	r3, [r1, #20]
 800925a:	1bf6      	subs	r6, r6, r7
 800925c:	600f      	str	r7, [r1, #0]
 800925e:	608b      	str	r3, [r1, #8]
 8009260:	2e00      	cmp	r6, #0
 8009262:	dd9f      	ble.n	80091a4 <__sflush_r+0x18>
 8009264:	4633      	mov	r3, r6
 8009266:	463a      	mov	r2, r7
 8009268:	4628      	mov	r0, r5
 800926a:	6a21      	ldr	r1, [r4, #32]
 800926c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009270:	47e0      	blx	ip
 8009272:	2800      	cmp	r0, #0
 8009274:	dc06      	bgt.n	8009284 <__sflush_r+0xf8>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	e790      	b.n	80091a6 <__sflush_r+0x1a>
 8009284:	4407      	add	r7, r0
 8009286:	1a36      	subs	r6, r6, r0
 8009288:	e7ea      	b.n	8009260 <__sflush_r+0xd4>
 800928a:	bf00      	nop
 800928c:	dfbffffe 	.word	0xdfbffffe

08009290 <_fflush_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b913      	cbnz	r3, 80092a0 <_fflush_r+0x10>
 800929a:	2500      	movs	r5, #0
 800929c:	4628      	mov	r0, r5
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	b118      	cbz	r0, 80092aa <_fflush_r+0x1a>
 80092a2:	6a03      	ldr	r3, [r0, #32]
 80092a4:	b90b      	cbnz	r3, 80092aa <_fflush_r+0x1a>
 80092a6:	f7fe f945 	bl	8007534 <__sinit>
 80092aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0f3      	beq.n	800929a <_fflush_r+0xa>
 80092b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092b4:	07d0      	lsls	r0, r2, #31
 80092b6:	d404      	bmi.n	80092c2 <_fflush_r+0x32>
 80092b8:	0599      	lsls	r1, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_fflush_r+0x32>
 80092bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092be:	f7fe fb32 	bl	8007926 <__retarget_lock_acquire_recursive>
 80092c2:	4628      	mov	r0, r5
 80092c4:	4621      	mov	r1, r4
 80092c6:	f7ff ff61 	bl	800918c <__sflush_r>
 80092ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092cc:	4605      	mov	r5, r0
 80092ce:	07da      	lsls	r2, r3, #31
 80092d0:	d4e4      	bmi.n	800929c <_fflush_r+0xc>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	059b      	lsls	r3, r3, #22
 80092d6:	d4e1      	bmi.n	800929c <_fflush_r+0xc>
 80092d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092da:	f7fe fb25 	bl	8007928 <__retarget_lock_release_recursive>
 80092de:	e7dd      	b.n	800929c <_fflush_r+0xc>

080092e0 <__swhatbuf_r>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	460c      	mov	r4, r1
 80092e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e8:	4615      	mov	r5, r2
 80092ea:	2900      	cmp	r1, #0
 80092ec:	461e      	mov	r6, r3
 80092ee:	b096      	sub	sp, #88	; 0x58
 80092f0:	da0c      	bge.n	800930c <__swhatbuf_r+0x2c>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	2100      	movs	r1, #0
 80092f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092fa:	bf0c      	ite	eq
 80092fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009300:	2340      	movne	r3, #64	; 0x40
 8009302:	2000      	movs	r0, #0
 8009304:	6031      	str	r1, [r6, #0]
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	b016      	add	sp, #88	; 0x58
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	466a      	mov	r2, sp
 800930e:	f000 f849 	bl	80093a4 <_fstat_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	dbed      	blt.n	80092f2 <__swhatbuf_r+0x12>
 8009316:	9901      	ldr	r1, [sp, #4]
 8009318:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800931c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009320:	4259      	negs	r1, r3
 8009322:	4159      	adcs	r1, r3
 8009324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009328:	e7eb      	b.n	8009302 <__swhatbuf_r+0x22>

0800932a <__smakebuf_r>:
 800932a:	898b      	ldrh	r3, [r1, #12]
 800932c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800932e:	079d      	lsls	r5, r3, #30
 8009330:	4606      	mov	r6, r0
 8009332:	460c      	mov	r4, r1
 8009334:	d507      	bpl.n	8009346 <__smakebuf_r+0x1c>
 8009336:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	2301      	movs	r3, #1
 8009340:	6163      	str	r3, [r4, #20]
 8009342:	b002      	add	sp, #8
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	466a      	mov	r2, sp
 8009348:	ab01      	add	r3, sp, #4
 800934a:	f7ff ffc9 	bl	80092e0 <__swhatbuf_r>
 800934e:	9900      	ldr	r1, [sp, #0]
 8009350:	4605      	mov	r5, r0
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff f9d4 	bl	8008700 <_malloc_r>
 8009358:	b948      	cbnz	r0, 800936e <__smakebuf_r+0x44>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	059a      	lsls	r2, r3, #22
 8009360:	d4ef      	bmi.n	8009342 <__smakebuf_r+0x18>
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	f043 0302 	orr.w	r3, r3, #2
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	e7e3      	b.n	8009336 <__smakebuf_r+0xc>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	6020      	str	r0, [r4, #0]
 8009372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	9b00      	ldr	r3, [sp, #0]
 800937a:	6120      	str	r0, [r4, #16]
 800937c:	6163      	str	r3, [r4, #20]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	b15b      	cbz	r3, 800939a <__smakebuf_r+0x70>
 8009382:	4630      	mov	r0, r6
 8009384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009388:	f000 f81e 	bl	80093c8 <_isatty_r>
 800938c:	b128      	cbz	r0, 800939a <__smakebuf_r+0x70>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	f043 0301 	orr.w	r3, r3, #1
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	431d      	orrs	r5, r3
 800939e:	81a5      	strh	r5, [r4, #12]
 80093a0:	e7cf      	b.n	8009342 <__smakebuf_r+0x18>
	...

080093a4 <_fstat_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	2300      	movs	r3, #0
 80093a8:	4d06      	ldr	r5, [pc, #24]	; (80093c4 <_fstat_r+0x20>)
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	f7f8 fec6 	bl	8002142 <_fstat>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d102      	bne.n	80093c0 <_fstat_r+0x1c>
 80093ba:	682b      	ldr	r3, [r5, #0]
 80093bc:	b103      	cbz	r3, 80093c0 <_fstat_r+0x1c>
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	20000550 	.word	0x20000550

080093c8 <_isatty_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	2300      	movs	r3, #0
 80093cc:	4d05      	ldr	r5, [pc, #20]	; (80093e4 <_isatty_r+0x1c>)
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	602b      	str	r3, [r5, #0]
 80093d4:	f7f8 fec4 	bl	8002160 <_isatty>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_isatty_r+0x1a>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_isatty_r+0x1a>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20000550 	.word	0x20000550

080093e8 <_sbrk_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	2300      	movs	r3, #0
 80093ec:	4d05      	ldr	r5, [pc, #20]	; (8009404 <_sbrk_r+0x1c>)
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f8 feca 	bl	800218c <_sbrk>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_sbrk_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_sbrk_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000550 	.word	0x20000550

08009408 <memcpy>:
 8009408:	440a      	add	r2, r1
 800940a:	4291      	cmp	r1, r2
 800940c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009410:	d100      	bne.n	8009414 <memcpy+0xc>
 8009412:	4770      	bx	lr
 8009414:	b510      	push	{r4, lr}
 8009416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941a:	4291      	cmp	r1, r2
 800941c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009420:	d1f9      	bne.n	8009416 <memcpy+0xe>
 8009422:	bd10      	pop	{r4, pc}

08009424 <__assert_func>:
 8009424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009426:	4614      	mov	r4, r2
 8009428:	461a      	mov	r2, r3
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <__assert_func+0x2c>)
 800942c:	4605      	mov	r5, r0
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68d8      	ldr	r0, [r3, #12]
 8009432:	b14c      	cbz	r4, 8009448 <__assert_func+0x24>
 8009434:	4b07      	ldr	r3, [pc, #28]	; (8009454 <__assert_func+0x30>)
 8009436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800943a:	9100      	str	r1, [sp, #0]
 800943c:	462b      	mov	r3, r5
 800943e:	4906      	ldr	r1, [pc, #24]	; (8009458 <__assert_func+0x34>)
 8009440:	f000 f842 	bl	80094c8 <fiprintf>
 8009444:	f000 f852 	bl	80094ec <abort>
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <__assert_func+0x38>)
 800944a:	461c      	mov	r4, r3
 800944c:	e7f3      	b.n	8009436 <__assert_func+0x12>
 800944e:	bf00      	nop
 8009450:	20000064 	.word	0x20000064
 8009454:	0800a427 	.word	0x0800a427
 8009458:	0800a434 	.word	0x0800a434
 800945c:	0800a462 	.word	0x0800a462

08009460 <_calloc_r>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	fba1 5402 	umull	r5, r4, r1, r2
 8009466:	b934      	cbnz	r4, 8009476 <_calloc_r+0x16>
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff f949 	bl	8008700 <_malloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	b928      	cbnz	r0, 800947e <_calloc_r+0x1e>
 8009472:	4630      	mov	r0, r6
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	220c      	movs	r2, #12
 8009478:	2600      	movs	r6, #0
 800947a:	6002      	str	r2, [r0, #0]
 800947c:	e7f9      	b.n	8009472 <_calloc_r+0x12>
 800947e:	462a      	mov	r2, r5
 8009480:	4621      	mov	r1, r4
 8009482:	f7fe f9d3 	bl	800782c <memset>
 8009486:	e7f4      	b.n	8009472 <_calloc_r+0x12>

08009488 <__ascii_mbtowc>:
 8009488:	b082      	sub	sp, #8
 800948a:	b901      	cbnz	r1, 800948e <__ascii_mbtowc+0x6>
 800948c:	a901      	add	r1, sp, #4
 800948e:	b142      	cbz	r2, 80094a2 <__ascii_mbtowc+0x1a>
 8009490:	b14b      	cbz	r3, 80094a6 <__ascii_mbtowc+0x1e>
 8009492:	7813      	ldrb	r3, [r2, #0]
 8009494:	600b      	str	r3, [r1, #0]
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	1e10      	subs	r0, r2, #0
 800949a:	bf18      	it	ne
 800949c:	2001      	movne	r0, #1
 800949e:	b002      	add	sp, #8
 80094a0:	4770      	bx	lr
 80094a2:	4610      	mov	r0, r2
 80094a4:	e7fb      	b.n	800949e <__ascii_mbtowc+0x16>
 80094a6:	f06f 0001 	mvn.w	r0, #1
 80094aa:	e7f8      	b.n	800949e <__ascii_mbtowc+0x16>

080094ac <__ascii_wctomb>:
 80094ac:	4603      	mov	r3, r0
 80094ae:	4608      	mov	r0, r1
 80094b0:	b141      	cbz	r1, 80094c4 <__ascii_wctomb+0x18>
 80094b2:	2aff      	cmp	r2, #255	; 0xff
 80094b4:	d904      	bls.n	80094c0 <__ascii_wctomb+0x14>
 80094b6:	228a      	movs	r2, #138	; 0x8a
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	4770      	bx	lr
 80094c0:	2001      	movs	r0, #1
 80094c2:	700a      	strb	r2, [r1, #0]
 80094c4:	4770      	bx	lr
	...

080094c8 <fiprintf>:
 80094c8:	b40e      	push	{r1, r2, r3}
 80094ca:	b503      	push	{r0, r1, lr}
 80094cc:	4601      	mov	r1, r0
 80094ce:	ab03      	add	r3, sp, #12
 80094d0:	4805      	ldr	r0, [pc, #20]	; (80094e8 <fiprintf+0x20>)
 80094d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d6:	6800      	ldr	r0, [r0, #0]
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	f7ff fd3d 	bl	8008f58 <_vfiprintf_r>
 80094de:	b002      	add	sp, #8
 80094e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e4:	b003      	add	sp, #12
 80094e6:	4770      	bx	lr
 80094e8:	20000064 	.word	0x20000064

080094ec <abort>:
 80094ec:	2006      	movs	r0, #6
 80094ee:	b508      	push	{r3, lr}
 80094f0:	f000 f82c 	bl	800954c <raise>
 80094f4:	2001      	movs	r0, #1
 80094f6:	f7f8 fdd6 	bl	80020a6 <_exit>

080094fa <_raise_r>:
 80094fa:	291f      	cmp	r1, #31
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4604      	mov	r4, r0
 8009500:	460d      	mov	r5, r1
 8009502:	d904      	bls.n	800950e <_raise_r+0x14>
 8009504:	2316      	movs	r3, #22
 8009506:	6003      	str	r3, [r0, #0]
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009510:	b112      	cbz	r2, 8009518 <_raise_r+0x1e>
 8009512:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009516:	b94b      	cbnz	r3, 800952c <_raise_r+0x32>
 8009518:	4620      	mov	r0, r4
 800951a:	f000 f831 	bl	8009580 <_getpid_r>
 800951e:	462a      	mov	r2, r5
 8009520:	4601      	mov	r1, r0
 8009522:	4620      	mov	r0, r4
 8009524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009528:	f000 b818 	b.w	800955c <_kill_r>
 800952c:	2b01      	cmp	r3, #1
 800952e:	d00a      	beq.n	8009546 <_raise_r+0x4c>
 8009530:	1c59      	adds	r1, r3, #1
 8009532:	d103      	bne.n	800953c <_raise_r+0x42>
 8009534:	2316      	movs	r3, #22
 8009536:	6003      	str	r3, [r0, #0]
 8009538:	2001      	movs	r0, #1
 800953a:	e7e7      	b.n	800950c <_raise_r+0x12>
 800953c:	2400      	movs	r4, #0
 800953e:	4628      	mov	r0, r5
 8009540:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009544:	4798      	blx	r3
 8009546:	2000      	movs	r0, #0
 8009548:	e7e0      	b.n	800950c <_raise_r+0x12>
	...

0800954c <raise>:
 800954c:	4b02      	ldr	r3, [pc, #8]	; (8009558 <raise+0xc>)
 800954e:	4601      	mov	r1, r0
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	f7ff bfd2 	b.w	80094fa <_raise_r>
 8009556:	bf00      	nop
 8009558:	20000064 	.word	0x20000064

0800955c <_kill_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	2300      	movs	r3, #0
 8009560:	4d06      	ldr	r5, [pc, #24]	; (800957c <_kill_r+0x20>)
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	4611      	mov	r1, r2
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	f7f8 fd8c 	bl	8002086 <_kill>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d102      	bne.n	8009578 <_kill_r+0x1c>
 8009572:	682b      	ldr	r3, [r5, #0]
 8009574:	b103      	cbz	r3, 8009578 <_kill_r+0x1c>
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	20000550 	.word	0x20000550

08009580 <_getpid_r>:
 8009580:	f7f8 bd7a 	b.w	8002078 <_getpid>

08009584 <powf>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	460c      	mov	r4, r1
 8009588:	4606      	mov	r6, r0
 800958a:	f000 f851 	bl	8009630 <__ieee754_powf>
 800958e:	4621      	mov	r1, r4
 8009590:	4605      	mov	r5, r0
 8009592:	4620      	mov	r0, r4
 8009594:	f7f7 fd9c 	bl	80010d0 <__aeabi_fcmpun>
 8009598:	bb68      	cbnz	r0, 80095f6 <powf+0x72>
 800959a:	2100      	movs	r1, #0
 800959c:	4630      	mov	r0, r6
 800959e:	f7f7 fd65 	bl	800106c <__aeabi_fcmpeq>
 80095a2:	b190      	cbz	r0, 80095ca <powf+0x46>
 80095a4:	2100      	movs	r1, #0
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7f7 fd60 	bl	800106c <__aeabi_fcmpeq>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d133      	bne.n	8009618 <powf+0x94>
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 f834 	bl	800961e <finitef>
 80095b6:	b1f0      	cbz	r0, 80095f6 <powf+0x72>
 80095b8:	2100      	movs	r1, #0
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7f7 fd60 	bl	8001080 <__aeabi_fcmplt>
 80095c0:	b1c8      	cbz	r0, 80095f6 <powf+0x72>
 80095c2:	f7fe f985 	bl	80078d0 <__errno>
 80095c6:	2322      	movs	r3, #34	; 0x22
 80095c8:	e014      	b.n	80095f4 <powf+0x70>
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f827 	bl	800961e <finitef>
 80095d0:	b998      	cbnz	r0, 80095fa <powf+0x76>
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f823 	bl	800961e <finitef>
 80095d8:	b178      	cbz	r0, 80095fa <powf+0x76>
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 f81f 	bl	800961e <finitef>
 80095e0:	b158      	cbz	r0, 80095fa <powf+0x76>
 80095e2:	4629      	mov	r1, r5
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7f7 fd73 	bl	80010d0 <__aeabi_fcmpun>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0e9      	beq.n	80095c2 <powf+0x3e>
 80095ee:	f7fe f96f 	bl	80078d0 <__errno>
 80095f2:	2321      	movs	r3, #33	; 0x21
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	4628      	mov	r0, r5
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	2100      	movs	r1, #0
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7f7 fd35 	bl	800106c <__aeabi_fcmpeq>
 8009602:	2800      	cmp	r0, #0
 8009604:	d0f7      	beq.n	80095f6 <powf+0x72>
 8009606:	4630      	mov	r0, r6
 8009608:	f000 f809 	bl	800961e <finitef>
 800960c:	2800      	cmp	r0, #0
 800960e:	d0f2      	beq.n	80095f6 <powf+0x72>
 8009610:	4620      	mov	r0, r4
 8009612:	f000 f804 	bl	800961e <finitef>
 8009616:	e7d3      	b.n	80095c0 <powf+0x3c>
 8009618:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800961c:	e7eb      	b.n	80095f6 <powf+0x72>

0800961e <finitef>:
 800961e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009622:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009626:	bfac      	ite	ge
 8009628:	2000      	movge	r0, #0
 800962a:	2001      	movlt	r0, #1
 800962c:	4770      	bx	lr
	...

08009630 <__ieee754_powf>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8009638:	4681      	mov	r9, r0
 800963a:	460f      	mov	r7, r1
 800963c:	4680      	mov	r8, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b087      	sub	sp, #28
 8009642:	d10d      	bne.n	8009660 <__ieee754_powf+0x30>
 8009644:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8009648:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800964c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8009650:	f240 8336 	bls.w	8009cc0 <__ieee754_powf+0x690>
 8009654:	4639      	mov	r1, r7
 8009656:	4648      	mov	r0, r9
 8009658:	f7f7 fa6c 	bl	8000b34 <__addsf3>
 800965c:	4601      	mov	r1, r0
 800965e:	e040      	b.n	80096e2 <__ieee754_powf+0xb2>
 8009660:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009664:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009668:	dcf4      	bgt.n	8009654 <__ieee754_powf+0x24>
 800966a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800966e:	dd08      	ble.n	8009682 <__ieee754_powf+0x52>
 8009670:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8009674:	d1ee      	bne.n	8009654 <__ieee754_powf+0x24>
 8009676:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800967a:	0064      	lsls	r4, r4, #1
 800967c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8009680:	e7e6      	b.n	8009650 <__ieee754_powf+0x20>
 8009682:	2800      	cmp	r0, #0
 8009684:	da20      	bge.n	80096c8 <__ieee754_powf+0x98>
 8009686:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800968a:	da2e      	bge.n	80096ea <__ieee754_powf+0xba>
 800968c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8009690:	f2c0 831b 	blt.w	8009cca <__ieee754_powf+0x69a>
 8009694:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8009698:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800969c:	fa4a f503 	asr.w	r5, sl, r3
 80096a0:	fa05 f303 	lsl.w	r3, r5, r3
 80096a4:	4553      	cmp	r3, sl
 80096a6:	f040 8310 	bne.w	8009cca <__ieee754_powf+0x69a>
 80096aa:	f005 0501 	and.w	r5, r5, #1
 80096ae:	f1c5 0502 	rsb	r5, r5, #2
 80096b2:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80096b6:	d120      	bne.n	80096fa <__ieee754_powf+0xca>
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	4649      	mov	r1, r9
 80096bc:	da11      	bge.n	80096e2 <__ieee754_powf+0xb2>
 80096be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80096c2:	f7f7 fbf3 	bl	8000eac <__aeabi_fdiv>
 80096c6:	e7c9      	b.n	800965c <__ieee754_powf+0x2c>
 80096c8:	2500      	movs	r5, #0
 80096ca:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80096ce:	d1f0      	bne.n	80096b2 <__ieee754_powf+0x82>
 80096d0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80096d4:	f000 82f4 	beq.w	8009cc0 <__ieee754_powf+0x690>
 80096d8:	dd09      	ble.n	80096ee <__ieee754_powf+0xbe>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	f2c0 82f3 	blt.w	8009cc6 <__ieee754_powf+0x696>
 80096e0:	4639      	mov	r1, r7
 80096e2:	4608      	mov	r0, r1
 80096e4:	b007      	add	sp, #28
 80096e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ea:	2502      	movs	r5, #2
 80096ec:	e7ed      	b.n	80096ca <__ieee754_powf+0x9a>
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	f280 82e9 	bge.w	8009cc6 <__ieee754_powf+0x696>
 80096f4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80096f8:	e7f3      	b.n	80096e2 <__ieee754_powf+0xb2>
 80096fa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80096fe:	d104      	bne.n	800970a <__ieee754_powf+0xda>
 8009700:	4649      	mov	r1, r9
 8009702:	4648      	mov	r0, r9
 8009704:	f7f7 fb1e 	bl	8000d44 <__aeabi_fmul>
 8009708:	e7a8      	b.n	800965c <__ieee754_powf+0x2c>
 800970a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800970e:	4648      	mov	r0, r9
 8009710:	d107      	bne.n	8009722 <__ieee754_powf+0xf2>
 8009712:	f1b8 0f00 	cmp.w	r8, #0
 8009716:	db04      	blt.n	8009722 <__ieee754_powf+0xf2>
 8009718:	b007      	add	sp, #28
 800971a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971e:	f000 bb5b 	b.w	8009dd8 <__ieee754_sqrtf>
 8009722:	f000 faeb 	bl	8009cfc <fabsf>
 8009726:	4601      	mov	r1, r0
 8009728:	b126      	cbz	r6, 8009734 <__ieee754_powf+0x104>
 800972a:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800972e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009732:	d117      	bne.n	8009764 <__ieee754_powf+0x134>
 8009734:	2c00      	cmp	r4, #0
 8009736:	da04      	bge.n	8009742 <__ieee754_powf+0x112>
 8009738:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800973c:	f7f7 fbb6 	bl	8000eac <__aeabi_fdiv>
 8009740:	4601      	mov	r1, r0
 8009742:	f1b8 0f00 	cmp.w	r8, #0
 8009746:	dacc      	bge.n	80096e2 <__ieee754_powf+0xb2>
 8009748:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800974c:	432e      	orrs	r6, r5
 800974e:	d104      	bne.n	800975a <__ieee754_powf+0x12a>
 8009750:	4608      	mov	r0, r1
 8009752:	f7f7 f9ed 	bl	8000b30 <__aeabi_fsub>
 8009756:	4601      	mov	r1, r0
 8009758:	e7b3      	b.n	80096c2 <__ieee754_powf+0x92>
 800975a:	2d01      	cmp	r5, #1
 800975c:	d1c1      	bne.n	80096e2 <__ieee754_powf+0xb2>
 800975e:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8009762:	e77b      	b.n	800965c <__ieee754_powf+0x2c>
 8009764:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009768:	3b01      	subs	r3, #1
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	432b      	orrs	r3, r5
 800976e:	d101      	bne.n	8009774 <__ieee754_powf+0x144>
 8009770:	4649      	mov	r1, r9
 8009772:	e7ed      	b.n	8009750 <__ieee754_powf+0x120>
 8009774:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8009778:	f340 809e 	ble.w	80098b8 <__ieee754_powf+0x288>
 800977c:	4b47      	ldr	r3, [pc, #284]	; (800989c <__ieee754_powf+0x26c>)
 800977e:	429e      	cmp	r6, r3
 8009780:	dc07      	bgt.n	8009792 <__ieee754_powf+0x162>
 8009782:	2c00      	cmp	r4, #0
 8009784:	da0a      	bge.n	800979c <__ieee754_powf+0x16c>
 8009786:	2000      	movs	r0, #0
 8009788:	b007      	add	sp, #28
 800978a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978e:	f000 bb1e 	b.w	8009dce <__math_oflowf>
 8009792:	4b43      	ldr	r3, [pc, #268]	; (80098a0 <__ieee754_powf+0x270>)
 8009794:	429e      	cmp	r6, r3
 8009796:	dd07      	ble.n	80097a8 <__ieee754_powf+0x178>
 8009798:	2c00      	cmp	r4, #0
 800979a:	dcf4      	bgt.n	8009786 <__ieee754_powf+0x156>
 800979c:	2000      	movs	r0, #0
 800979e:	b007      	add	sp, #28
 80097a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	f000 bb0f 	b.w	8009dc6 <__math_uflowf>
 80097a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80097ac:	f7f7 f9c0 	bl	8000b30 <__aeabi_fsub>
 80097b0:	493c      	ldr	r1, [pc, #240]	; (80098a4 <__ieee754_powf+0x274>)
 80097b2:	4606      	mov	r6, r0
 80097b4:	f7f7 fac6 	bl	8000d44 <__aeabi_fmul>
 80097b8:	493b      	ldr	r1, [pc, #236]	; (80098a8 <__ieee754_powf+0x278>)
 80097ba:	4680      	mov	r8, r0
 80097bc:	4630      	mov	r0, r6
 80097be:	f7f7 fac1 	bl	8000d44 <__aeabi_fmul>
 80097c2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80097c6:	4681      	mov	r9, r0
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7f7 fabb 	bl	8000d44 <__aeabi_fmul>
 80097ce:	4601      	mov	r1, r0
 80097d0:	4836      	ldr	r0, [pc, #216]	; (80098ac <__ieee754_powf+0x27c>)
 80097d2:	f7f7 f9ad 	bl	8000b30 <__aeabi_fsub>
 80097d6:	4631      	mov	r1, r6
 80097d8:	f7f7 fab4 	bl	8000d44 <__aeabi_fmul>
 80097dc:	4601      	mov	r1, r0
 80097de:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80097e2:	f7f7 f9a5 	bl	8000b30 <__aeabi_fsub>
 80097e6:	4631      	mov	r1, r6
 80097e8:	4682      	mov	sl, r0
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7f7 faaa 	bl	8000d44 <__aeabi_fmul>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4650      	mov	r0, sl
 80097f4:	f7f7 faa6 	bl	8000d44 <__aeabi_fmul>
 80097f8:	492d      	ldr	r1, [pc, #180]	; (80098b0 <__ieee754_powf+0x280>)
 80097fa:	f7f7 faa3 	bl	8000d44 <__aeabi_fmul>
 80097fe:	4601      	mov	r1, r0
 8009800:	4648      	mov	r0, r9
 8009802:	f7f7 f995 	bl	8000b30 <__aeabi_fsub>
 8009806:	4601      	mov	r1, r0
 8009808:	4606      	mov	r6, r0
 800980a:	4640      	mov	r0, r8
 800980c:	f7f7 f992 	bl	8000b34 <__addsf3>
 8009810:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8009814:	f029 090f 	bic.w	r9, r9, #15
 8009818:	4641      	mov	r1, r8
 800981a:	4648      	mov	r0, r9
 800981c:	f7f7 f988 	bl	8000b30 <__aeabi_fsub>
 8009820:	4601      	mov	r1, r0
 8009822:	4630      	mov	r0, r6
 8009824:	f7f7 f984 	bl	8000b30 <__aeabi_fsub>
 8009828:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	3d01      	subs	r5, #1
 8009830:	f024 040f 	bic.w	r4, r4, #15
 8009834:	431d      	orrs	r5, r3
 8009836:	4606      	mov	r6, r0
 8009838:	4621      	mov	r1, r4
 800983a:	4638      	mov	r0, r7
 800983c:	bf14      	ite	ne
 800983e:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8009842:	4d1c      	ldreq	r5, [pc, #112]	; (80098b4 <__ieee754_powf+0x284>)
 8009844:	f7f7 f974 	bl	8000b30 <__aeabi_fsub>
 8009848:	4649      	mov	r1, r9
 800984a:	f7f7 fa7b 	bl	8000d44 <__aeabi_fmul>
 800984e:	4639      	mov	r1, r7
 8009850:	4680      	mov	r8, r0
 8009852:	4630      	mov	r0, r6
 8009854:	f7f7 fa76 	bl	8000d44 <__aeabi_fmul>
 8009858:	4601      	mov	r1, r0
 800985a:	4640      	mov	r0, r8
 800985c:	f7f7 f96a 	bl	8000b34 <__addsf3>
 8009860:	4621      	mov	r1, r4
 8009862:	4606      	mov	r6, r0
 8009864:	4648      	mov	r0, r9
 8009866:	f7f7 fa6d 	bl	8000d44 <__aeabi_fmul>
 800986a:	4601      	mov	r1, r0
 800986c:	4607      	mov	r7, r0
 800986e:	4681      	mov	r9, r0
 8009870:	4630      	mov	r0, r6
 8009872:	f7f7 f95f 	bl	8000b34 <__addsf3>
 8009876:	2800      	cmp	r0, #0
 8009878:	4682      	mov	sl, r0
 800987a:	4680      	mov	r8, r0
 800987c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8009880:	f340 8200 	ble.w	8009c84 <__ieee754_powf+0x654>
 8009884:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8009888:	f340 814e 	ble.w	8009b28 <__ieee754_powf+0x4f8>
 800988c:	2100      	movs	r1, #0
 800988e:	4628      	mov	r0, r5
 8009890:	f7f7 fbf6 	bl	8001080 <__aeabi_fcmplt>
 8009894:	3800      	subs	r0, #0
 8009896:	bf18      	it	ne
 8009898:	2001      	movne	r0, #1
 800989a:	e775      	b.n	8009788 <__ieee754_powf+0x158>
 800989c:	3f7ffff3 	.word	0x3f7ffff3
 80098a0:	3f800007 	.word	0x3f800007
 80098a4:	3fb8aa00 	.word	0x3fb8aa00
 80098a8:	36eca570 	.word	0x36eca570
 80098ac:	3eaaaaab 	.word	0x3eaaaaab
 80098b0:	3fb8aa3b 	.word	0x3fb8aa3b
 80098b4:	bf800000 	.word	0xbf800000
 80098b8:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80098bc:	f040 8111 	bne.w	8009ae2 <__ieee754_powf+0x4b2>
 80098c0:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80098c4:	f7f7 fa3e 	bl	8000d44 <__aeabi_fmul>
 80098c8:	f06f 0217 	mvn.w	r2, #23
 80098cc:	4606      	mov	r6, r0
 80098ce:	15f3      	asrs	r3, r6, #23
 80098d0:	3b7f      	subs	r3, #127	; 0x7f
 80098d2:	4413      	add	r3, r2
 80098d4:	4a85      	ldr	r2, [pc, #532]	; (8009aec <__ieee754_powf+0x4bc>)
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	f3c6 0316 	ubfx	r3, r6, #0, #23
 80098dc:	4293      	cmp	r3, r2
 80098de:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 80098e2:	dd08      	ble.n	80098f6 <__ieee754_powf+0x2c6>
 80098e4:	4a82      	ldr	r2, [pc, #520]	; (8009af0 <__ieee754_powf+0x4c0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	f340 80fd 	ble.w	8009ae6 <__ieee754_powf+0x4b6>
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80098f2:	3301      	adds	r3, #1
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	9900      	ldr	r1, [sp, #0]
 80098fc:	4a7d      	ldr	r2, [pc, #500]	; (8009af4 <__ieee754_powf+0x4c4>)
 80098fe:	4630      	mov	r0, r6
 8009900:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009904:	9603      	str	r6, [sp, #12]
 8009906:	4611      	mov	r1, r2
 8009908:	9205      	str	r2, [sp, #20]
 800990a:	f7f7 f911 	bl	8000b30 <__aeabi_fsub>
 800990e:	9a05      	ldr	r2, [sp, #20]
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	4683      	mov	fp, r0
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	9203      	str	r2, [sp, #12]
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	f7f7 f90a 	bl	8000b34 <__addsf3>
 8009920:	4601      	mov	r1, r0
 8009922:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009926:	f7f7 fac1 	bl	8000eac <__aeabi_fdiv>
 800992a:	4682      	mov	sl, r0
 800992c:	4601      	mov	r1, r0
 800992e:	4658      	mov	r0, fp
 8009930:	f7f7 fa08 	bl	8000d44 <__aeabi_fmul>
 8009934:	1076      	asrs	r6, r6, #1
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800993c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8009940:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8009944:	f029 090f 	bic.w	r9, r9, #15
 8009948:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800994c:	4680      	mov	r8, r0
 800994e:	4631      	mov	r1, r6
 8009950:	4648      	mov	r0, r9
 8009952:	f7f7 f9f7 	bl	8000d44 <__aeabi_fmul>
 8009956:	4601      	mov	r1, r0
 8009958:	4658      	mov	r0, fp
 800995a:	f7f7 f8e9 	bl	8000b30 <__aeabi_fsub>
 800995e:	9a03      	ldr	r2, [sp, #12]
 8009960:	4683      	mov	fp, r0
 8009962:	4611      	mov	r1, r2
 8009964:	4630      	mov	r0, r6
 8009966:	f7f7 f8e3 	bl	8000b30 <__aeabi_fsub>
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	4601      	mov	r1, r0
 800996e:	4618      	mov	r0, r3
 8009970:	f7f7 f8de 	bl	8000b30 <__aeabi_fsub>
 8009974:	4649      	mov	r1, r9
 8009976:	f7f7 f9e5 	bl	8000d44 <__aeabi_fmul>
 800997a:	4601      	mov	r1, r0
 800997c:	4658      	mov	r0, fp
 800997e:	f7f7 f8d7 	bl	8000b30 <__aeabi_fsub>
 8009982:	4651      	mov	r1, sl
 8009984:	f7f7 f9de 	bl	8000d44 <__aeabi_fmul>
 8009988:	4641      	mov	r1, r8
 800998a:	4682      	mov	sl, r0
 800998c:	4640      	mov	r0, r8
 800998e:	f7f7 f9d9 	bl	8000d44 <__aeabi_fmul>
 8009992:	4606      	mov	r6, r0
 8009994:	4958      	ldr	r1, [pc, #352]	; (8009af8 <__ieee754_powf+0x4c8>)
 8009996:	f7f7 f9d5 	bl	8000d44 <__aeabi_fmul>
 800999a:	4958      	ldr	r1, [pc, #352]	; (8009afc <__ieee754_powf+0x4cc>)
 800999c:	f7f7 f8ca 	bl	8000b34 <__addsf3>
 80099a0:	4631      	mov	r1, r6
 80099a2:	f7f7 f9cf 	bl	8000d44 <__aeabi_fmul>
 80099a6:	4956      	ldr	r1, [pc, #344]	; (8009b00 <__ieee754_powf+0x4d0>)
 80099a8:	f7f7 f8c4 	bl	8000b34 <__addsf3>
 80099ac:	4631      	mov	r1, r6
 80099ae:	f7f7 f9c9 	bl	8000d44 <__aeabi_fmul>
 80099b2:	4954      	ldr	r1, [pc, #336]	; (8009b04 <__ieee754_powf+0x4d4>)
 80099b4:	f7f7 f8be 	bl	8000b34 <__addsf3>
 80099b8:	4631      	mov	r1, r6
 80099ba:	f7f7 f9c3 	bl	8000d44 <__aeabi_fmul>
 80099be:	4952      	ldr	r1, [pc, #328]	; (8009b08 <__ieee754_powf+0x4d8>)
 80099c0:	f7f7 f8b8 	bl	8000b34 <__addsf3>
 80099c4:	4631      	mov	r1, r6
 80099c6:	f7f7 f9bd 	bl	8000d44 <__aeabi_fmul>
 80099ca:	4950      	ldr	r1, [pc, #320]	; (8009b0c <__ieee754_powf+0x4dc>)
 80099cc:	f7f7 f8b2 	bl	8000b34 <__addsf3>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4683      	mov	fp, r0
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7f7 f9b5 	bl	8000d44 <__aeabi_fmul>
 80099da:	4601      	mov	r1, r0
 80099dc:	4658      	mov	r0, fp
 80099de:	f7f7 f9b1 	bl	8000d44 <__aeabi_fmul>
 80099e2:	4606      	mov	r6, r0
 80099e4:	4649      	mov	r1, r9
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7f7 f8a4 	bl	8000b34 <__addsf3>
 80099ec:	4651      	mov	r1, sl
 80099ee:	f7f7 f9a9 	bl	8000d44 <__aeabi_fmul>
 80099f2:	4631      	mov	r1, r6
 80099f4:	f7f7 f89e 	bl	8000b34 <__addsf3>
 80099f8:	4649      	mov	r1, r9
 80099fa:	4683      	mov	fp, r0
 80099fc:	4648      	mov	r0, r9
 80099fe:	f7f7 f9a1 	bl	8000d44 <__aeabi_fmul>
 8009a02:	4943      	ldr	r1, [pc, #268]	; (8009b10 <__ieee754_powf+0x4e0>)
 8009a04:	9003      	str	r0, [sp, #12]
 8009a06:	f7f7 f895 	bl	8000b34 <__addsf3>
 8009a0a:	4659      	mov	r1, fp
 8009a0c:	f7f7 f892 	bl	8000b34 <__addsf3>
 8009a10:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8009a14:	f026 060f 	bic.w	r6, r6, #15
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4648      	mov	r0, r9
 8009a1c:	f7f7 f992 	bl	8000d44 <__aeabi_fmul>
 8009a20:	493b      	ldr	r1, [pc, #236]	; (8009b10 <__ieee754_powf+0x4e0>)
 8009a22:	4681      	mov	r9, r0
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7f7 f883 	bl	8000b30 <__aeabi_fsub>
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7f7 f87f 	bl	8000b30 <__aeabi_fsub>
 8009a32:	4601      	mov	r1, r0
 8009a34:	4658      	mov	r0, fp
 8009a36:	f7f7 f87b 	bl	8000b30 <__aeabi_fsub>
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	f7f7 f982 	bl	8000d44 <__aeabi_fmul>
 8009a40:	4631      	mov	r1, r6
 8009a42:	4680      	mov	r8, r0
 8009a44:	4650      	mov	r0, sl
 8009a46:	f7f7 f97d 	bl	8000d44 <__aeabi_fmul>
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	f7f7 f871 	bl	8000b34 <__addsf3>
 8009a52:	4682      	mov	sl, r0
 8009a54:	4601      	mov	r1, r0
 8009a56:	4648      	mov	r0, r9
 8009a58:	f7f7 f86c 	bl	8000b34 <__addsf3>
 8009a5c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8009a60:	f026 060f 	bic.w	r6, r6, #15
 8009a64:	4630      	mov	r0, r6
 8009a66:	492b      	ldr	r1, [pc, #172]	; (8009b14 <__ieee754_powf+0x4e4>)
 8009a68:	f7f7 f96c 	bl	8000d44 <__aeabi_fmul>
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4680      	mov	r8, r0
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7f7 f85d 	bl	8000b30 <__aeabi_fsub>
 8009a76:	4601      	mov	r1, r0
 8009a78:	4650      	mov	r0, sl
 8009a7a:	f7f7 f859 	bl	8000b30 <__aeabi_fsub>
 8009a7e:	4926      	ldr	r1, [pc, #152]	; (8009b18 <__ieee754_powf+0x4e8>)
 8009a80:	f7f7 f960 	bl	8000d44 <__aeabi_fmul>
 8009a84:	4925      	ldr	r1, [pc, #148]	; (8009b1c <__ieee754_powf+0x4ec>)
 8009a86:	4681      	mov	r9, r0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7f7 f95b 	bl	8000d44 <__aeabi_fmul>
 8009a8e:	4601      	mov	r1, r0
 8009a90:	4648      	mov	r0, r9
 8009a92:	f7f7 f84f 	bl	8000b34 <__addsf3>
 8009a96:	4b22      	ldr	r3, [pc, #136]	; (8009b20 <__ieee754_powf+0x4f0>)
 8009a98:	9a00      	ldr	r2, [sp, #0]
 8009a9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a9e:	f7f7 f849 	bl	8000b34 <__addsf3>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	9801      	ldr	r0, [sp, #4]
 8009aa6:	f7f7 f8f9 	bl	8000c9c <__aeabi_i2f>
 8009aaa:	4682      	mov	sl, r0
 8009aac:	4b1d      	ldr	r3, [pc, #116]	; (8009b24 <__ieee754_powf+0x4f4>)
 8009aae:	9a00      	ldr	r2, [sp, #0]
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7f7 f83c 	bl	8000b34 <__addsf3>
 8009abc:	4659      	mov	r1, fp
 8009abe:	f7f7 f839 	bl	8000b34 <__addsf3>
 8009ac2:	4651      	mov	r1, sl
 8009ac4:	f7f7 f836 	bl	8000b34 <__addsf3>
 8009ac8:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8009acc:	f029 090f 	bic.w	r9, r9, #15
 8009ad0:	4651      	mov	r1, sl
 8009ad2:	4648      	mov	r0, r9
 8009ad4:	f7f7 f82c 	bl	8000b30 <__aeabi_fsub>
 8009ad8:	4659      	mov	r1, fp
 8009ada:	f7f7 f829 	bl	8000b30 <__aeabi_fsub>
 8009ade:	4641      	mov	r1, r8
 8009ae0:	e69c      	b.n	800981c <__ieee754_powf+0x1ec>
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	e6f3      	b.n	80098ce <__ieee754_powf+0x29e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e706      	b.n	80098f8 <__ieee754_powf+0x2c8>
 8009aea:	bf00      	nop
 8009aec:	001cc471 	.word	0x001cc471
 8009af0:	005db3d6 	.word	0x005db3d6
 8009af4:	0800a564 	.word	0x0800a564
 8009af8:	3e53f142 	.word	0x3e53f142
 8009afc:	3e6c3255 	.word	0x3e6c3255
 8009b00:	3e8ba305 	.word	0x3e8ba305
 8009b04:	3eaaaaab 	.word	0x3eaaaaab
 8009b08:	3edb6db7 	.word	0x3edb6db7
 8009b0c:	3f19999a 	.word	0x3f19999a
 8009b10:	40400000 	.word	0x40400000
 8009b14:	3f763800 	.word	0x3f763800
 8009b18:	3f76384f 	.word	0x3f76384f
 8009b1c:	369dc3a0 	.word	0x369dc3a0
 8009b20:	0800a574 	.word	0x0800a574
 8009b24:	0800a56c 	.word	0x0800a56c
 8009b28:	f040 80c2 	bne.w	8009cb0 <__ieee754_powf+0x680>
 8009b2c:	4968      	ldr	r1, [pc, #416]	; (8009cd0 <__ieee754_powf+0x6a0>)
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7f7 f800 	bl	8000b34 <__addsf3>
 8009b34:	4639      	mov	r1, r7
 8009b36:	4681      	mov	r9, r0
 8009b38:	4650      	mov	r0, sl
 8009b3a:	f7f6 fff9 	bl	8000b30 <__aeabi_fsub>
 8009b3e:	4601      	mov	r1, r0
 8009b40:	4648      	mov	r0, r9
 8009b42:	f7f7 fabb 	bl	80010bc <__aeabi_fcmpgt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f47f aea0 	bne.w	800988c <__ieee754_powf+0x25c>
 8009b4c:	15e4      	asrs	r4, r4, #23
 8009b4e:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 8009b52:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8009b56:	411c      	asrs	r4, r3
 8009b58:	4444      	add	r4, r8
 8009b5a:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8009b5e:	495d      	ldr	r1, [pc, #372]	; (8009cd4 <__ieee754_powf+0x6a4>)
 8009b60:	3b7f      	subs	r3, #127	; 0x7f
 8009b62:	4119      	asrs	r1, r3
 8009b64:	4021      	ands	r1, r4
 8009b66:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009b6a:	f1c3 0317 	rsb	r3, r3, #23
 8009b6e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8009b72:	411c      	asrs	r4, r3
 8009b74:	f1b8 0f00 	cmp.w	r8, #0
 8009b78:	4638      	mov	r0, r7
 8009b7a:	bfb8      	it	lt
 8009b7c:	4264      	neglt	r4, r4
 8009b7e:	f7f6 ffd7 	bl	8000b30 <__aeabi_fsub>
 8009b82:	4681      	mov	r9, r0
 8009b84:	4631      	mov	r1, r6
 8009b86:	4648      	mov	r0, r9
 8009b88:	f7f6 ffd4 	bl	8000b34 <__addsf3>
 8009b8c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8009b90:	f027 070f 	bic.w	r7, r7, #15
 8009b94:	4638      	mov	r0, r7
 8009b96:	4950      	ldr	r1, [pc, #320]	; (8009cd8 <__ieee754_powf+0x6a8>)
 8009b98:	f7f7 f8d4 	bl	8000d44 <__aeabi_fmul>
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7f6 ffc5 	bl	8000b30 <__aeabi_fsub>
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7f6 ffc1 	bl	8000b30 <__aeabi_fsub>
 8009bae:	494b      	ldr	r1, [pc, #300]	; (8009cdc <__ieee754_powf+0x6ac>)
 8009bb0:	f7f7 f8c8 	bl	8000d44 <__aeabi_fmul>
 8009bb4:	494a      	ldr	r1, [pc, #296]	; (8009ce0 <__ieee754_powf+0x6b0>)
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7f7 f8c3 	bl	8000d44 <__aeabi_fmul>
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7f6 ffb7 	bl	8000b34 <__addsf3>
 8009bc6:	4607      	mov	r7, r0
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4640      	mov	r0, r8
 8009bcc:	f7f6 ffb2 	bl	8000b34 <__addsf3>
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	f7f6 ffac 	bl	8000b30 <__aeabi_fsub>
 8009bd8:	4601      	mov	r1, r0
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f7f6 ffa8 	bl	8000b30 <__aeabi_fsub>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4680      	mov	r8, r0
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7f7 f8ad 	bl	8000d44 <__aeabi_fmul>
 8009bea:	4607      	mov	r7, r0
 8009bec:	493d      	ldr	r1, [pc, #244]	; (8009ce4 <__ieee754_powf+0x6b4>)
 8009bee:	f7f7 f8a9 	bl	8000d44 <__aeabi_fmul>
 8009bf2:	493d      	ldr	r1, [pc, #244]	; (8009ce8 <__ieee754_powf+0x6b8>)
 8009bf4:	f7f6 ff9c 	bl	8000b30 <__aeabi_fsub>
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f7 f8a3 	bl	8000d44 <__aeabi_fmul>
 8009bfe:	493b      	ldr	r1, [pc, #236]	; (8009cec <__ieee754_powf+0x6bc>)
 8009c00:	f7f6 ff98 	bl	8000b34 <__addsf3>
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f7 f89d 	bl	8000d44 <__aeabi_fmul>
 8009c0a:	4939      	ldr	r1, [pc, #228]	; (8009cf0 <__ieee754_powf+0x6c0>)
 8009c0c:	f7f6 ff90 	bl	8000b30 <__aeabi_fsub>
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f7 f897 	bl	8000d44 <__aeabi_fmul>
 8009c16:	4937      	ldr	r1, [pc, #220]	; (8009cf4 <__ieee754_powf+0x6c4>)
 8009c18:	f7f6 ff8c 	bl	8000b34 <__addsf3>
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f7 f891 	bl	8000d44 <__aeabi_fmul>
 8009c22:	4601      	mov	r1, r0
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7f6 ff83 	bl	8000b30 <__aeabi_fsub>
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7f7 f888 	bl	8000d44 <__aeabi_fmul>
 8009c34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009c38:	4681      	mov	r9, r0
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f7f6 ff78 	bl	8000b30 <__aeabi_fsub>
 8009c40:	4601      	mov	r1, r0
 8009c42:	4648      	mov	r0, r9
 8009c44:	f7f7 f932 	bl	8000eac <__aeabi_fdiv>
 8009c48:	4641      	mov	r1, r8
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7f7 f879 	bl	8000d44 <__aeabi_fmul>
 8009c52:	4641      	mov	r1, r8
 8009c54:	f7f6 ff6e 	bl	8000b34 <__addsf3>
 8009c58:	4601      	mov	r1, r0
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	f7f6 ff68 	bl	8000b30 <__aeabi_fsub>
 8009c60:	4631      	mov	r1, r6
 8009c62:	f7f6 ff65 	bl	8000b30 <__aeabi_fsub>
 8009c66:	4601      	mov	r1, r0
 8009c68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009c6c:	f7f6 ff60 	bl	8000b30 <__aeabi_fsub>
 8009c70:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8009c74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c78:	da20      	bge.n	8009cbc <__ieee754_powf+0x68c>
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	f000 f842 	bl	8009d04 <scalbnf>
 8009c80:	4629      	mov	r1, r5
 8009c82:	e53f      	b.n	8009704 <__ieee754_powf+0xd4>
 8009c84:	4b1c      	ldr	r3, [pc, #112]	; (8009cf8 <__ieee754_powf+0x6c8>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	dd07      	ble.n	8009c9a <__ieee754_powf+0x66a>
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7f7 f9f7 	bl	8001080 <__aeabi_fcmplt>
 8009c92:	3800      	subs	r0, #0
 8009c94:	bf18      	it	ne
 8009c96:	2001      	movne	r0, #1
 8009c98:	e581      	b.n	800979e <__ieee754_powf+0x16e>
 8009c9a:	d109      	bne.n	8009cb0 <__ieee754_powf+0x680>
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 ff47 	bl	8000b30 <__aeabi_fsub>
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	f7f7 fa00 	bl	80010a8 <__aeabi_fcmpge>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f af4f 	beq.w	8009b4c <__ieee754_powf+0x51c>
 8009cae:	e7ec      	b.n	8009c8a <__ieee754_powf+0x65a>
 8009cb0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009cb4:	f73f af4a 	bgt.w	8009b4c <__ieee754_powf+0x51c>
 8009cb8:	2400      	movs	r4, #0
 8009cba:	e763      	b.n	8009b84 <__ieee754_powf+0x554>
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	e7df      	b.n	8009c80 <__ieee754_powf+0x650>
 8009cc0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009cc4:	e50d      	b.n	80096e2 <__ieee754_powf+0xb2>
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	e50b      	b.n	80096e2 <__ieee754_powf+0xb2>
 8009cca:	2500      	movs	r5, #0
 8009ccc:	e4f1      	b.n	80096b2 <__ieee754_powf+0x82>
 8009cce:	bf00      	nop
 8009cd0:	3338aa3c 	.word	0x3338aa3c
 8009cd4:	ff800000 	.word	0xff800000
 8009cd8:	3f317200 	.word	0x3f317200
 8009cdc:	3f317218 	.word	0x3f317218
 8009ce0:	35bfbe8c 	.word	0x35bfbe8c
 8009ce4:	3331bb4c 	.word	0x3331bb4c
 8009ce8:	35ddea0e 	.word	0x35ddea0e
 8009cec:	388ab355 	.word	0x388ab355
 8009cf0:	3b360b61 	.word	0x3b360b61
 8009cf4:	3e2aaaab 	.word	0x3e2aaaab
 8009cf8:	43160000 	.word	0x43160000

08009cfc <fabsf>:
 8009cfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009d00:	4770      	bx	lr
	...

08009d04 <scalbnf>:
 8009d04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	4604      	mov	r4, r0
 8009d10:	d02e      	beq.n	8009d70 <scalbnf+0x6c>
 8009d12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d16:	d304      	bcc.n	8009d22 <scalbnf+0x1e>
 8009d18:	4601      	mov	r1, r0
 8009d1a:	f7f6 ff0b 	bl	8000b34 <__addsf3>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	e026      	b.n	8009d70 <scalbnf+0x6c>
 8009d22:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009d26:	d118      	bne.n	8009d5a <scalbnf+0x56>
 8009d28:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009d2c:	f7f7 f80a 	bl	8000d44 <__aeabi_fmul>
 8009d30:	4a17      	ldr	r2, [pc, #92]	; (8009d90 <scalbnf+0x8c>)
 8009d32:	4603      	mov	r3, r0
 8009d34:	4295      	cmp	r5, r2
 8009d36:	db0c      	blt.n	8009d52 <scalbnf+0x4e>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009d3e:	3a19      	subs	r2, #25
 8009d40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009d44:	428d      	cmp	r5, r1
 8009d46:	dd0a      	ble.n	8009d5e <scalbnf+0x5a>
 8009d48:	4912      	ldr	r1, [pc, #72]	; (8009d94 <scalbnf+0x90>)
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f361 001e 	bfi	r0, r1, #0, #31
 8009d50:	e000      	b.n	8009d54 <scalbnf+0x50>
 8009d52:	4911      	ldr	r1, [pc, #68]	; (8009d98 <scalbnf+0x94>)
 8009d54:	f7f6 fff6 	bl	8000d44 <__aeabi_fmul>
 8009d58:	e7e1      	b.n	8009d1e <scalbnf+0x1a>
 8009d5a:	0dd2      	lsrs	r2, r2, #23
 8009d5c:	e7f0      	b.n	8009d40 <scalbnf+0x3c>
 8009d5e:	1951      	adds	r1, r2, r5
 8009d60:	29fe      	cmp	r1, #254	; 0xfe
 8009d62:	dcf1      	bgt.n	8009d48 <scalbnf+0x44>
 8009d64:	2900      	cmp	r1, #0
 8009d66:	dd05      	ble.n	8009d74 <scalbnf+0x70>
 8009d68:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009d6c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009d70:	4618      	mov	r0, r3
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	f111 0f16 	cmn.w	r1, #22
 8009d78:	da01      	bge.n	8009d7e <scalbnf+0x7a>
 8009d7a:	4907      	ldr	r1, [pc, #28]	; (8009d98 <scalbnf+0x94>)
 8009d7c:	e7e5      	b.n	8009d4a <scalbnf+0x46>
 8009d7e:	f101 0019 	add.w	r0, r1, #25
 8009d82:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009d86:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009d8a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009d8e:	e7e1      	b.n	8009d54 <scalbnf+0x50>
 8009d90:	ffff3cb0 	.word	0xffff3cb0
 8009d94:	7149f2ca 	.word	0x7149f2ca
 8009d98:	0da24260 	.word	0x0da24260

08009d9c <with_errnof>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	f7fd fd95 	bl	80078d0 <__errno>
 8009da6:	6005      	str	r5, [r0, #0]
 8009da8:	4620      	mov	r0, r4
 8009daa:	bd38      	pop	{r3, r4, r5, pc}

08009dac <xflowf>:
 8009dac:	b508      	push	{r3, lr}
 8009dae:	b140      	cbz	r0, 8009dc2 <xflowf+0x16>
 8009db0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8009db4:	f7f6 ffc6 	bl	8000d44 <__aeabi_fmul>
 8009db8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dbc:	2122      	movs	r1, #34	; 0x22
 8009dbe:	f7ff bfed 	b.w	8009d9c <with_errnof>
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	e7f6      	b.n	8009db4 <xflowf+0x8>

08009dc6 <__math_uflowf>:
 8009dc6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8009dca:	f7ff bfef 	b.w	8009dac <xflowf>

08009dce <__math_oflowf>:
 8009dce:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8009dd2:	f7ff bfeb 	b.w	8009dac <xflowf>
	...

08009dd8 <__ieee754_sqrtf>:
 8009dd8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009ddc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	4603      	mov	r3, r0
 8009de6:	4604      	mov	r4, r0
 8009de8:	d30a      	bcc.n	8009e00 <__ieee754_sqrtf+0x28>
 8009dea:	4601      	mov	r1, r0
 8009dec:	f7f6 ffaa 	bl	8000d44 <__aeabi_fmul>
 8009df0:	4601      	mov	r1, r0
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7f6 fe9e 	bl	8000b34 <__addsf3>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	d0fa      	beq.n	8009dfa <__ieee754_sqrtf+0x22>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	da06      	bge.n	8009e16 <__ieee754_sqrtf+0x3e>
 8009e08:	4601      	mov	r1, r0
 8009e0a:	f7f6 fe91 	bl	8000b30 <__aeabi_fsub>
 8009e0e:	4601      	mov	r1, r0
 8009e10:	f7f7 f84c 	bl	8000eac <__aeabi_fdiv>
 8009e14:	e7f0      	b.n	8009df8 <__ieee754_sqrtf+0x20>
 8009e16:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009e1a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009e1e:	d03e      	beq.n	8009e9e <__ieee754_sqrtf+0xc6>
 8009e20:	2400      	movs	r4, #0
 8009e22:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 8009e26:	07ca      	lsls	r2, r1, #31
 8009e28:	f04f 0019 	mov.w	r0, #25
 8009e2c:	4626      	mov	r6, r4
 8009e2e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009e32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009e36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e3a:	bf58      	it	pl
 8009e3c:	005b      	lslpl	r3, r3, #1
 8009e3e:	106d      	asrs	r5, r5, #1
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	1872      	adds	r2, r6, r1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bfcf      	iteee	gt
 8009e48:	461a      	movgt	r2, r3
 8009e4a:	1856      	addle	r6, r2, r1
 8009e4c:	1864      	addle	r4, r4, r1
 8009e4e:	1a9a      	suble	r2, r3, r2
 8009e50:	3801      	subs	r0, #1
 8009e52:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8009e56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e5a:	d1f2      	bne.n	8009e42 <__ieee754_sqrtf+0x6a>
 8009e5c:	b1ba      	cbz	r2, 8009e8e <__ieee754_sqrtf+0xb6>
 8009e5e:	4e14      	ldr	r6, [pc, #80]	; (8009eb0 <__ieee754_sqrtf+0xd8>)
 8009e60:	4f14      	ldr	r7, [pc, #80]	; (8009eb4 <__ieee754_sqrtf+0xdc>)
 8009e62:	6830      	ldr	r0, [r6, #0]
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	f7f6 fe63 	bl	8000b30 <__aeabi_fsub>
 8009e6a:	f8d6 8000 	ldr.w	r8, [r6]
 8009e6e:	4601      	mov	r1, r0
 8009e70:	4640      	mov	r0, r8
 8009e72:	f7f7 f90f 	bl	8001094 <__aeabi_fcmple>
 8009e76:	b150      	cbz	r0, 8009e8e <__ieee754_sqrtf+0xb6>
 8009e78:	6830      	ldr	r0, [r6, #0]
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	f7f6 fe5a 	bl	8000b34 <__addsf3>
 8009e80:	6836      	ldr	r6, [r6, #0]
 8009e82:	4601      	mov	r1, r0
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7f7 f8fb 	bl	8001080 <__aeabi_fcmplt>
 8009e8a:	b168      	cbz	r0, 8009ea8 <__ieee754_sqrtf+0xd0>
 8009e8c:	3402      	adds	r4, #2
 8009e8e:	1064      	asrs	r4, r4, #1
 8009e90:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009e94:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009e98:	e7af      	b.n	8009dfa <__ieee754_sqrtf+0x22>
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	3201      	adds	r2, #1
 8009e9e:	0218      	lsls	r0, r3, #8
 8009ea0:	d5fb      	bpl.n	8009e9a <__ieee754_sqrtf+0xc2>
 8009ea2:	3a01      	subs	r2, #1
 8009ea4:	1a89      	subs	r1, r1, r2
 8009ea6:	e7bb      	b.n	8009e20 <__ieee754_sqrtf+0x48>
 8009ea8:	3401      	adds	r4, #1
 8009eaa:	f024 0401 	bic.w	r4, r4, #1
 8009eae:	e7ee      	b.n	8009e8e <__ieee754_sqrtf+0xb6>
 8009eb0:	200001d4 	.word	0x200001d4
 8009eb4:	200001d8 	.word	0x200001d8

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
