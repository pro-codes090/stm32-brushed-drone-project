
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009abc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08009bd0  08009bd0  00019bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2ac  0800a2ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b4  0800a2b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b4  0800a2b4  0001a2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2b8  0800a2b8  0001a2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001dc  0800a498  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800a498  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128f7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a1  00000000  00000000  00032afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00034fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00036148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b58  00000000  00000000  00037220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014155  00000000  00000000  00050d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091034  00000000  00000000  00064ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006020  00000000  00000000  000f5f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08009bb4 	.word	0x08009bb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08009bb4 	.word	0x08009bb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b976 	b.w	8001400 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9e08      	ldr	r6, [sp, #32]
 8001132:	460d      	mov	r5, r1
 8001134:	4604      	mov	r4, r0
 8001136:	4688      	mov	r8, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d14d      	bne.n	80011d8 <__udivmoddi4+0xac>
 800113c:	428a      	cmp	r2, r1
 800113e:	4694      	mov	ip, r2
 8001140:	d968      	bls.n	8001214 <__udivmoddi4+0xe8>
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b152      	cbz	r2, 800115e <__udivmoddi4+0x32>
 8001148:	fa01 f302 	lsl.w	r3, r1, r2
 800114c:	f1c2 0120 	rsb	r1, r2, #32
 8001150:	fa20 f101 	lsr.w	r1, r0, r1
 8001154:	fa0c fc02 	lsl.w	ip, ip, r2
 8001158:	ea41 0803 	orr.w	r8, r1, r3
 800115c:	4094      	lsls	r4, r2
 800115e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001162:	fbb8 f7f1 	udiv	r7, r8, r1
 8001166:	fa1f fe8c 	uxth.w	lr, ip
 800116a:	fb01 8817 	mls	r8, r1, r7, r8
 800116e:	fb07 f00e 	mul.w	r0, r7, lr
 8001172:	0c23      	lsrs	r3, r4, #16
 8001174:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001178:	4298      	cmp	r0, r3
 800117a:	d90a      	bls.n	8001192 <__udivmoddi4+0x66>
 800117c:	eb1c 0303 	adds.w	r3, ip, r3
 8001180:	f107 35ff 	add.w	r5, r7, #4294967295
 8001184:	f080 811e 	bcs.w	80013c4 <__udivmoddi4+0x298>
 8001188:	4298      	cmp	r0, r3
 800118a:	f240 811b 	bls.w	80013c4 <__udivmoddi4+0x298>
 800118e:	3f02      	subs	r7, #2
 8001190:	4463      	add	r3, ip
 8001192:	1a1b      	subs	r3, r3, r0
 8001194:	fbb3 f0f1 	udiv	r0, r3, r1
 8001198:	fb01 3310 	mls	r3, r1, r0, r3
 800119c:	fb00 fe0e 	mul.w	lr, r0, lr
 80011a0:	b2a4      	uxth	r4, r4
 80011a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011a6:	45a6      	cmp	lr, r4
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0404 	adds.w	r4, ip, r4
 80011ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80011b2:	f080 8109 	bcs.w	80013c8 <__udivmoddi4+0x29c>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8106 	bls.w	80013c8 <__udivmoddi4+0x29c>
 80011bc:	4464      	add	r4, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	eba4 040e 	sub.w	r4, r4, lr
 80011c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80011ca:	b11e      	cbz	r6, 80011d4 <__udivmoddi4+0xa8>
 80011cc:	2300      	movs	r3, #0
 80011ce:	40d4      	lsrs	r4, r2
 80011d0:	e9c6 4300 	strd	r4, r3, [r6]
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d8:	428b      	cmp	r3, r1
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0xc2>
 80011dc:	2e00      	cmp	r6, #0
 80011de:	f000 80ee 	beq.w	80013be <__udivmoddi4+0x292>
 80011e2:	2100      	movs	r1, #0
 80011e4:	e9c6 0500 	strd	r0, r5, [r6]
 80011e8:	4608      	mov	r0, r1
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ee:	fab3 f183 	clz	r1, r3
 80011f2:	2900      	cmp	r1, #0
 80011f4:	d14a      	bne.n	800128c <__udivmoddi4+0x160>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d302      	bcc.n	8001200 <__udivmoddi4+0xd4>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	f200 80fc 	bhi.w	80013f8 <__udivmoddi4+0x2cc>
 8001200:	1a84      	subs	r4, r0, r2
 8001202:	eb65 0303 	sbc.w	r3, r5, r3
 8001206:	2001      	movs	r0, #1
 8001208:	4698      	mov	r8, r3
 800120a:	2e00      	cmp	r6, #0
 800120c:	d0e2      	beq.n	80011d4 <__udivmoddi4+0xa8>
 800120e:	e9c6 4800 	strd	r4, r8, [r6]
 8001212:	e7df      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001214:	b902      	cbnz	r2, 8001218 <__udivmoddi4+0xec>
 8001216:	deff      	udf	#255	; 0xff
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	2a00      	cmp	r2, #0
 800121e:	f040 8091 	bne.w	8001344 <__udivmoddi4+0x218>
 8001222:	eba1 000c 	sub.w	r0, r1, ip
 8001226:	2101      	movs	r1, #1
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	fa1f fe8c 	uxth.w	lr, ip
 8001230:	fbb0 f3f7 	udiv	r3, r0, r7
 8001234:	fb07 0013 	mls	r0, r7, r3, r0
 8001238:	0c25      	lsrs	r5, r4, #16
 800123a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800123e:	fb0e f003 	mul.w	r0, lr, r3
 8001242:	42a8      	cmp	r0, r5
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x12c>
 8001246:	eb1c 0505 	adds.w	r5, ip, r5
 800124a:	f103 38ff 	add.w	r8, r3, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x12a>
 8001250:	42a8      	cmp	r0, r5
 8001252:	f200 80ce 	bhi.w	80013f2 <__udivmoddi4+0x2c6>
 8001256:	4643      	mov	r3, r8
 8001258:	1a2d      	subs	r5, r5, r0
 800125a:	fbb5 f0f7 	udiv	r0, r5, r7
 800125e:	fb07 5510 	mls	r5, r7, r0, r5
 8001262:	fb0e fe00 	mul.w	lr, lr, r0
 8001266:	b2a4      	uxth	r4, r4
 8001268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800126c:	45a6      	cmp	lr, r4
 800126e:	d908      	bls.n	8001282 <__udivmoddi4+0x156>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f100 35ff 	add.w	r5, r0, #4294967295
 8001278:	d202      	bcs.n	8001280 <__udivmoddi4+0x154>
 800127a:	45a6      	cmp	lr, r4
 800127c:	f200 80b6 	bhi.w	80013ec <__udivmoddi4+0x2c0>
 8001280:	4628      	mov	r0, r5
 8001282:	eba4 040e 	sub.w	r4, r4, lr
 8001286:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800128a:	e79e      	b.n	80011ca <__udivmoddi4+0x9e>
 800128c:	f1c1 0720 	rsb	r7, r1, #32
 8001290:	408b      	lsls	r3, r1
 8001292:	fa22 fc07 	lsr.w	ip, r2, r7
 8001296:	ea4c 0c03 	orr.w	ip, ip, r3
 800129a:	fa25 fa07 	lsr.w	sl, r5, r7
 800129e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012a2:	fbba f8f9 	udiv	r8, sl, r9
 80012a6:	fa20 f307 	lsr.w	r3, r0, r7
 80012aa:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ae:	408d      	lsls	r5, r1
 80012b0:	fa1f fe8c 	uxth.w	lr, ip
 80012b4:	431d      	orrs	r5, r3
 80012b6:	fa00 f301 	lsl.w	r3, r0, r1
 80012ba:	fb08 f00e 	mul.w	r0, r8, lr
 80012be:	0c2c      	lsrs	r4, r5, #16
 80012c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012c4:	42a0      	cmp	r0, r4
 80012c6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ca:	d90b      	bls.n	80012e4 <__udivmoddi4+0x1b8>
 80012cc:	eb1c 0404 	adds.w	r4, ip, r4
 80012d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80012d4:	f080 8088 	bcs.w	80013e8 <__udivmoddi4+0x2bc>
 80012d8:	42a0      	cmp	r0, r4
 80012da:	f240 8085 	bls.w	80013e8 <__udivmoddi4+0x2bc>
 80012de:	f1a8 0802 	sub.w	r8, r8, #2
 80012e2:	4464      	add	r4, ip
 80012e4:	1a24      	subs	r4, r4, r0
 80012e6:	fbb4 f0f9 	udiv	r0, r4, r9
 80012ea:	fb09 4410 	mls	r4, r9, r0, r4
 80012ee:	fb00 fe0e 	mul.w	lr, r0, lr
 80012f2:	b2ad      	uxth	r5, r5
 80012f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012f8:	45a6      	cmp	lr, r4
 80012fa:	d908      	bls.n	800130e <__udivmoddi4+0x1e2>
 80012fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001300:	f100 35ff 	add.w	r5, r0, #4294967295
 8001304:	d26c      	bcs.n	80013e0 <__udivmoddi4+0x2b4>
 8001306:	45a6      	cmp	lr, r4
 8001308:	d96a      	bls.n	80013e0 <__udivmoddi4+0x2b4>
 800130a:	3802      	subs	r0, #2
 800130c:	4464      	add	r4, ip
 800130e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001312:	fba0 9502 	umull	r9, r5, r0, r2
 8001316:	eba4 040e 	sub.w	r4, r4, lr
 800131a:	42ac      	cmp	r4, r5
 800131c:	46c8      	mov	r8, r9
 800131e:	46ae      	mov	lr, r5
 8001320:	d356      	bcc.n	80013d0 <__udivmoddi4+0x2a4>
 8001322:	d053      	beq.n	80013cc <__udivmoddi4+0x2a0>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d069      	beq.n	80013fc <__udivmoddi4+0x2d0>
 8001328:	ebb3 0208 	subs.w	r2, r3, r8
 800132c:	eb64 040e 	sbc.w	r4, r4, lr
 8001330:	fa22 f301 	lsr.w	r3, r2, r1
 8001334:	fa04 f707 	lsl.w	r7, r4, r7
 8001338:	431f      	orrs	r7, r3
 800133a:	40cc      	lsrs	r4, r1
 800133c:	e9c6 7400 	strd	r7, r4, [r6]
 8001340:	2100      	movs	r1, #0
 8001342:	e747      	b.n	80011d4 <__udivmoddi4+0xa8>
 8001344:	fa0c fc02 	lsl.w	ip, ip, r2
 8001348:	f1c2 0120 	rsb	r1, r2, #32
 800134c:	fa25 f301 	lsr.w	r3, r5, r1
 8001350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001354:	fa20 f101 	lsr.w	r1, r0, r1
 8001358:	4095      	lsls	r5, r2
 800135a:	430d      	orrs	r5, r1
 800135c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001360:	fb07 3311 	mls	r3, r7, r1, r3
 8001364:	fa1f fe8c 	uxth.w	lr, ip
 8001368:	0c28      	lsrs	r0, r5, #16
 800136a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136e:	fb01 f30e 	mul.w	r3, r1, lr
 8001372:	4283      	cmp	r3, r0
 8001374:	fa04 f402 	lsl.w	r4, r4, r2
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x260>
 800137a:	eb1c 0000 	adds.w	r0, ip, r0
 800137e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001382:	d22f      	bcs.n	80013e4 <__udivmoddi4+0x2b8>
 8001384:	4283      	cmp	r3, r0
 8001386:	d92d      	bls.n	80013e4 <__udivmoddi4+0x2b8>
 8001388:	3902      	subs	r1, #2
 800138a:	4460      	add	r0, ip
 800138c:	1ac0      	subs	r0, r0, r3
 800138e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001392:	fb07 0013 	mls	r0, r7, r3, r0
 8001396:	b2ad      	uxth	r5, r5
 8001398:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800139c:	fb03 f00e 	mul.w	r0, r3, lr
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d908      	bls.n	80013b6 <__udivmoddi4+0x28a>
 80013a4:	eb1c 0505 	adds.w	r5, ip, r5
 80013a8:	f103 38ff 	add.w	r8, r3, #4294967295
 80013ac:	d216      	bcs.n	80013dc <__udivmoddi4+0x2b0>
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d914      	bls.n	80013dc <__udivmoddi4+0x2b0>
 80013b2:	3b02      	subs	r3, #2
 80013b4:	4465      	add	r5, ip
 80013b6:	1a28      	subs	r0, r5, r0
 80013b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013bc:	e738      	b.n	8001230 <__udivmoddi4+0x104>
 80013be:	4631      	mov	r1, r6
 80013c0:	4630      	mov	r0, r6
 80013c2:	e707      	b.n	80011d4 <__udivmoddi4+0xa8>
 80013c4:	462f      	mov	r7, r5
 80013c6:	e6e4      	b.n	8001192 <__udivmoddi4+0x66>
 80013c8:	4618      	mov	r0, r3
 80013ca:	e6f9      	b.n	80011c0 <__udivmoddi4+0x94>
 80013cc:	454b      	cmp	r3, r9
 80013ce:	d2a9      	bcs.n	8001324 <__udivmoddi4+0x1f8>
 80013d0:	ebb9 0802 	subs.w	r8, r9, r2
 80013d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80013d8:	3801      	subs	r0, #1
 80013da:	e7a3      	b.n	8001324 <__udivmoddi4+0x1f8>
 80013dc:	4643      	mov	r3, r8
 80013de:	e7ea      	b.n	80013b6 <__udivmoddi4+0x28a>
 80013e0:	4628      	mov	r0, r5
 80013e2:	e794      	b.n	800130e <__udivmoddi4+0x1e2>
 80013e4:	4641      	mov	r1, r8
 80013e6:	e7d1      	b.n	800138c <__udivmoddi4+0x260>
 80013e8:	46d0      	mov	r8, sl
 80013ea:	e77b      	b.n	80012e4 <__udivmoddi4+0x1b8>
 80013ec:	4464      	add	r4, ip
 80013ee:	3802      	subs	r0, #2
 80013f0:	e747      	b.n	8001282 <__udivmoddi4+0x156>
 80013f2:	3b02      	subs	r3, #2
 80013f4:	4465      	add	r5, ip
 80013f6:	e72f      	b.n	8001258 <__udivmoddi4+0x12c>
 80013f8:	4608      	mov	r0, r1
 80013fa:	e706      	b.n	800120a <__udivmoddi4+0xde>
 80013fc:	4631      	mov	r1, r6
 80013fe:	e6e9      	b.n	80011d4 <__udivmoddi4+0xa8>

08001400 <__aeabi_idiv0>:
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001408:	f000 fdce 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f824 	bl	8001458 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Init();
 8001410:	f000 fdca 	bl	8001fa8 <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 fa5c 	bl	80018d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001418:	f000 f860 	bl	80014dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800141c:	f000 fa2e 	bl	800187c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001420:	f000 f8c2 	bl	80015a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001424:	f000 f9c2 	bl	80017ac <MX_TIM3_Init>
  MX_TIM2_Init();
 8001428:	f000 f96a 	bl	8001700 <MX_TIM2_Init>
  MX_SPI1_Init();
 800142c:	f000 f886 	bl	800153c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Init();
 8001430:	f000 fdba 	bl	8001fa8 <HAL_Init>

//  fc_powerup();
   Self_test_mpu6050(&hi2c1) ;
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <main+0x4c>)
 8001436:	f004 fb0f 	bl	8005a58 <Self_test_mpu6050>
   Mpu6050_Init(&hi2c1) ;			//initalise gyroscope
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <main+0x4c>)
 800143c:	f004 fd8c 	bl	8005f58 <Mpu6050_Init>
   gyro_calibrate(&hi2c1,  &Gyro_Calib);
 8001440:	4904      	ldr	r1, [pc, #16]	; (8001454 <main+0x50>)
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <main+0x4c>)
 8001444:	f004 fedc 	bl	8006200 <gyro_calibrate>
   //get_Accl(&hi2c1, &Accl_Data) ;
   //
   //printf(" %0.2lf , %0.2lf , %0.2lf ,%0.2lf , %0.2lf , %0.2lf \r" , Gyro_Data.pitch , Gyro_Data.roll, Gyro_Data.yaw , Accl_Data.pitch , Accl_Data.roll, Accl_Data.yaw);

   // config your wirelss module such as a lora module
   config_wireless();
 8001448:	f000 fa82 	bl	8001950 <config_wireless>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800144c:	e7fe      	b.n	800144c <main+0x48>
 800144e:	bf00      	nop
 8001450:	200001f8 	.word	0x200001f8
 8001454:	200003c4 	.word	0x200003c4

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f005 f988 	bl	800677c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	2301      	movs	r3, #1
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001482:	2310      	movs	r3, #16
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800148e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f002 f90f 	bl	80036bc <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a4:	f000 fab0 	bl	8001a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ac:	2302      	movs	r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014b4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014ba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2102      	movs	r1, #2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fb7b 	bl	8003bc0 <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80014d0:	f000 fa9a 	bl	8001a08 <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3740      	adds	r7, #64	; 0x40
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <MX_I2C1_Init+0x58>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x5c>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2C1_Init+0x54>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_I2C1_Init+0x54>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_I2C1_Init+0x54>)
 80014fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001500:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_I2C1_Init+0x54>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_I2C1_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_I2C1_Init+0x54>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_I2C1_Init+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_I2C1_Init+0x54>)
 800151c:	f001 f874 	bl	8002608 <HAL_I2C_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001526:	f000 fa6f 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001f8 	.word	0x200001f8
 8001534:	40005400 	.word	0x40005400
 8001538:	00061a80 	.word	0x00061a80

0800153c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_SPI1_Init+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001548:	f44f 7282 	mov.w	r2, #260	; 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001568:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800156c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001570:	2208      	movs	r2, #8
 8001572:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI1_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI1_Init+0x64>)
 8001588:	220a      	movs	r2, #10
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_SPI1_Init+0x64>)
 800158e:	f002 fca5 	bl	8003edc <HAL_SPI_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001598:	f000 fa36 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000024c 	.word	0x2000024c
 80015a4:	40013000 	.word	0x40013000

080015a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b092      	sub	sp, #72	; 0x48
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2220      	movs	r2, #32
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 f8d2 	bl	800677c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015da:	4a48      	ldr	r2, [pc, #288]	; (80016fc <MX_TIM1_Init+0x154>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015e0:	2264      	movs	r2, #100	; 0x64
 80015e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 80015ea:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015ec:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80015f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f8:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <MX_TIM1_Init+0x150>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001604:	483c      	ldr	r0, [pc, #240]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001606:	f003 fa4c 	bl	8004aa2 <HAL_TIM_PWM_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001610:	f000 f9fa 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001620:	4619      	mov	r1, r3
 8001622:	4835      	ldr	r0, [pc, #212]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001624:	f003 ff86 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800162e:	f000 f9eb 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001632:	2360      	movs	r3, #96	; 0x60
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	4619      	mov	r1, r3
 8001656:	4828      	ldr	r0, [pc, #160]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001658:	f003 fc78 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001662:	f000 f9d1 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 8001666:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2204      	movs	r2, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4820      	ldr	r0, [pc, #128]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001676:	f003 fc69 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001680:	f000 f9c2 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	2208      	movs	r2, #8
 800168e:	4619      	mov	r1, r3
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <MX_TIM1_Init+0x150>)
 8001692:	f003 fc5b 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800169c:	f000 f9b4 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	220c      	movs	r2, #12
 80016a6:	4619      	mov	r1, r3
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_TIM1_Init+0x150>)
 80016aa:	f003 fc4f 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80016b4:	f000 f9a8 	bl	8001a08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4807      	ldr	r0, [pc, #28]	; (80016f8 <MX_TIM1_Init+0x150>)
 80016dc:	f003 ff88 	bl	80055f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80016e6:	f000 f98f 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <MX_TIM1_Init+0x150>)
 80016ec:	f000 fa9e 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 80016f0:	bf00      	nop
 80016f2:	3748      	adds	r7, #72	; 0x48
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200002a4 	.word	0x200002a4
 80016fc:	40012c00 	.word	0x40012c00

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_TIM2_Init+0xa8>)
 800172c:	2264      	movs	r2, #100	; 0x64
 800172e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001738:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 800173c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800174a:	4817      	ldr	r0, [pc, #92]	; (80017a8 <MX_TIM2_Init+0xa8>)
 800174c:	f003 f95a 	bl	8004a04 <HAL_TIM_OC_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 f957 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <MX_TIM2_Init+0xa8>)
 800176a:	f003 fee3 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001774:	f000 f948 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM2_Init+0xa8>)
 8001790:	f003 fb80 	bl	8004e94 <HAL_TIM_OC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800179a:	f000 f935 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200002ec 	.word	0x200002ec

080017ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017d0:	4a29      	ldr	r2, [pc, #164]	; (8001878 <MX_TIM3_Init+0xcc>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <MX_TIM3_Init+0xc8>)
 80017f6:	f003 f954 	bl	8004aa2 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001800:	f000 f902 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4619      	mov	r1, r3
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_TIM3_Init+0xc8>)
 8001814:	f003 fe8e 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800181e:	f000 f8f3 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	; 0x60
 8001824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8001826:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800182a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2208      	movs	r2, #8
 8001838:	4619      	mov	r1, r3
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <MX_TIM3_Init+0xc8>)
 800183c:	f003 fb86 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001846:	f000 f8df 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	220c      	movs	r2, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM3_Init+0xc8>)
 8001856:	f003 fb79 	bl	8004f4c <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001860:	f000 f8d2 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM3_Init+0xc8>)
 8001866:	f000 f9e1 	bl	8001c2c <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000334 	.word	0x20000334
 8001878:	40000400 	.word	0x40000400

0800187c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f003 feff 	bl	80056b6 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f000 f8a3 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000037c 	.word	0x2000037c
 80018cc:	40004400 	.word	0x40004400

080018d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_GPIO_Init+0x78>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_GPIO_Init+0x78>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_GPIO_Init+0x78>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_GPIO_Init+0x78>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <MX_GPIO_Init+0x78>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_GPIO_Init+0x78>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4619      	mov	r1, r3
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <MX_GPIO_Init+0x7c>)
 800192a:	f000 fcd1 	bl	80022d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192e:	2301      	movs	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	4619      	mov	r1, r3
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_GPIO_Init+0x7c>)
 800193a:	f000 fcc9 	bl	80022d0 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40010c00 	.word	0x40010c00

08001950 <config_wireless>:
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 , RESET) ;
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 , RESET) ;

}

void config_wireless(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	lora_pins.dio0.port  = LORA_DIO0_PORT;
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <config_wireless+0x64>)
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <config_wireless+0x68>)
 8001958:	60da      	str	r2, [r3, #12]
	lora_pins.dio0.pin   = LORA_DIO0_PIN;
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <config_wireless+0x64>)
 800195c:	2220      	movs	r2, #32
 800195e:	609a      	str	r2, [r3, #8]
	lora_pins.nss.port   = LORA_SS_PORT;	// NSS pin to which port is connected
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <config_wireless+0x64>)
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <config_wireless+0x6c>)
 8001964:	615a      	str	r2, [r3, #20]
	lora_pins.nss.pin    = LORA_SS_PIN;		// NSS pin to which pin is connected
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <config_wireless+0x64>)
 8001968:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800196c:	611a      	str	r2, [r3, #16]
	lora_pins.reset.port = LORA_RESET_PORT;	// RESET pin to which port is connected
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <config_wireless+0x64>)
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <config_wireless+0x68>)
 8001972:	605a      	str	r2, [r3, #4]
	lora_pins.reset.pin  = LORA_RESET_PIN;	// RESET pin to which pin is connected
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <config_wireless+0x64>)
 8001976:	2210      	movs	r2, #16
 8001978:	601a      	str	r2, [r3, #0]
	lora_pins.spi  			 = &hspi1;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <config_wireless+0x64>)
 800197c:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <config_wireless+0x70>)
 800197e:	619a      	str	r2, [r3, #24]
	lora.pin = &lora_pins;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <config_wireless+0x74>)
 8001982:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <config_wireless+0x64>)
 8001984:	601a      	str	r2, [r3, #0]
	lora.frequency = FREQ_433MHZ;	// 433MHZ Frequency
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <config_wireless+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	711a      	strb	r2, [r3, #4]

	while(lora_init(&lora)){										// Initialize the lora module
 800198c:	e006      	b.n	800199c <config_wireless+0x4c>
	printf("init Failed \n");
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <config_wireless+0x78>)
 8001990:	f005 fbe2 	bl	8007158 <puts>
	HAL_Delay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001998:	f000 fb68 	bl	800206c <HAL_Delay>
	while(lora_init(&lora)){										// Initialize the lora module
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <config_wireless+0x74>)
 800199e:	f004 fe0d 	bl	80065bc <lora_init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f2      	bne.n	800198e <config_wireless+0x3e>
	}
	printf("init success \n");
 80019a8:	4808      	ldr	r0, [pc, #32]	; (80019cc <config_wireless+0x7c>)
 80019aa:	f005 fbd5 	bl	8007158 <puts>


}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200003d0 	.word	0x200003d0
 80019b8:	40011800 	.word	0x40011800
 80019bc:	40010800 	.word	0x40010800
 80019c0:	2000024c 	.word	0x2000024c
 80019c4:	200003ec 	.word	0x200003ec
 80019c8:	08009bd0 	.word	0x08009bd0
 80019cc:	08009be0 	.word	0x08009be0

080019d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <__io_putchar>:

void __io_putchar(int ch) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80019ec:	1d39      	adds	r1, r7, #4
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	2201      	movs	r2, #1
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <__io_putchar+0x20>)
 80019f6:	f003 feae 	bl	8005756 <HAL_UART_Transmit>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000037c 	.word	0x2000037c

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <Error_Handler+0x8>
	...

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_MspInit+0x40>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_MspInit+0x40>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_MspInit+0x40>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_MspInit+0x40>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_MspInit+0x40>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_MspInit+0x40>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_I2C_MspInit+0x70>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d123      	bne.n	8001ac0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a90:	23c0      	movs	r3, #192	; 0xc0
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <HAL_I2C_MspInit+0x78>)
 8001aa4:	f000 fc14 	bl	80022d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab2:	61d3      	str	r3, [r2, #28]
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_I2C_MspInit+0x74>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_SPI_MspInit+0xa0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d13b      	bne.n	8001b6c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_SPI_MspInit+0xa4>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b24:	2310      	movs	r3, #16
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <HAL_SPI_MspInit+0xa8>)
 8001b38:	f000 fbca 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b3c:	23a0      	movs	r3, #160	; 0xa0
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <HAL_SPI_MspInit+0xa8>)
 8001b50:	f000 fbbe 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b54:	2340      	movs	r3, #64	; 0x40
 8001b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_SPI_MspInit+0xa8>)
 8001b68:	f000 fbb2 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40013000 	.word	0x40013000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010800 	.word	0x40010800

08001b80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x58>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10c      	bne.n	8001bac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	6193      	str	r3, [r2, #24]
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001baa:	e010      	b.n	8001bce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_TIM_PWM_MspInit+0x60>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40000400 	.word	0x40000400

08001be4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_TIM_OC_MspInit+0x44>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_OC_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_TIM_OC_MspInit+0x44>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fb25 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fb3e 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_MspPostInit+0x98>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d119      	bne.n	8001c80 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001c64:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	4814      	ldr	r0, [pc, #80]	; (8001ccc <HAL_TIM_MspPostInit+0xa0>)
 8001c7a:	f000 fb29 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c7e:	e01c      	b.n	8001cba <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIM_MspPostInit+0xa4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d117      	bne.n	8001cba <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_TIM_MspPostInit+0x9c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <HAL_TIM_MspPostInit+0xa8>)
 8001cb6:	f000 fb0b 	bl	80022d0 <HAL_GPIO_Init>
}
 8001cba:	bf00      	nop
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40010c00 	.word	0x40010c00

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_UART_MspInit+0x88>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d12f      	bne.n	8001d58 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	61d3      	str	r3, [r2, #28]
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480b      	ldr	r0, [pc, #44]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d3c:	f000 fac8 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d40:	2308      	movs	r3, #8
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0x90>)
 8001d54:	f000 fabc 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db2:	f000 f93f 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM2_IRQHandler+0x10>)
 8001dc2:	f002 ff5f 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200002ec 	.word	0x200002ec

08001dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <_kill>:

int _kill(int pid, int sig)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de8:	f004 fc9e 	bl	8006728 <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2216      	movs	r2, #22
 8001df0:	601a      	str	r2, [r3, #0]
  return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_exit>:

void _exit (int status)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e06:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffe7 	bl	8001dde <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e10:	e7fe      	b.n	8001e10 <_exit+0x12>

08001e12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00a      	b.n	8001e3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e24:	f3af 8000 	nop.w
 8001e28:	4601      	mov	r1, r0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	dbf0      	blt.n	8001e24 <_read+0x12>
  }

  return len;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e009      	b.n	8001e72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	60ba      	str	r2, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fdbc 	bl	80019e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf1      	blt.n	8001e5e <_write+0x12>
  }
  return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_close>:

int _close(int file)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eaa:	605a      	str	r2, [r3, #4]
  return 0;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <_isatty>:

int _isatty(int file)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f004 fc08 	bl	8006728 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20005000 	.word	0x20005000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	200003f4 	.word	0x200003f4
 8001f4c:	20000410 	.word	0x20000410

08001f50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff fff8 	bl	8001f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f62:	490c      	ldr	r1, [pc, #48]	; (8001f94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f64:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f78:	4c09      	ldr	r4, [pc, #36]	; (8001fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f004 fbd5 	bl	8006734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8a:	f7ff fa3b 	bl	8001404 <main>
  bx lr
 8001f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f98:	0800a2bc 	.word	0x0800a2bc
  ldr r2, =_sbss
 8001f9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fa0:	2000040c 	.word	0x2000040c

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x28>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f947 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	200f      	movs	r0, #15
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fd26 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f95f 	bl	80022b6 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f927 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000000 	.word	0x20000000
 800202c:	20000008 	.word	0x20000008
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_IncTick+0x20>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000008 	.word	0x20000008
 8002054:	200003f8 	.word	0x200003f8

08002058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_GetTick+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	200003f8 	.word	0x200003f8

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fff0 	bl	8002058 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffe0 	bl	8002058 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <__NVIC_EnableIRQ+0x34>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff90 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff2d 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff42 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff35 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b08b      	sub	sp, #44	; 0x2c
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	e169      	b.n	80025b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e4:	2201      	movs	r2, #1
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8158 	bne.w	80025b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a9a      	ldr	r2, [pc, #616]	; (8002570 <HAL_GPIO_Init+0x2a0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d05e      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 800230c:	4a98      	ldr	r2, [pc, #608]	; (8002570 <HAL_GPIO_Init+0x2a0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d875      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002312:	4a98      	ldr	r2, [pc, #608]	; (8002574 <HAL_GPIO_Init+0x2a4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d058      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002318:	4a96      	ldr	r2, [pc, #600]	; (8002574 <HAL_GPIO_Init+0x2a4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d86f      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800231e:	4a96      	ldr	r2, [pc, #600]	; (8002578 <HAL_GPIO_Init+0x2a8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d052      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002324:	4a94      	ldr	r2, [pc, #592]	; (8002578 <HAL_GPIO_Init+0x2a8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d869      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800232a:	4a94      	ldr	r2, [pc, #592]	; (800257c <HAL_GPIO_Init+0x2ac>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04c      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 8002330:	4a92      	ldr	r2, [pc, #584]	; (800257c <HAL_GPIO_Init+0x2ac>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d863      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002336:	4a92      	ldr	r2, [pc, #584]	; (8002580 <HAL_GPIO_Init+0x2b0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d046      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
 800233c:	4a90      	ldr	r2, [pc, #576]	; (8002580 <HAL_GPIO_Init+0x2b0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d85d      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 8002342:	2b12      	cmp	r3, #18
 8002344:	d82a      	bhi.n	800239c <HAL_GPIO_Init+0xcc>
 8002346:	2b12      	cmp	r3, #18
 8002348:	d859      	bhi.n	80023fe <HAL_GPIO_Init+0x12e>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <HAL_GPIO_Init+0x80>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	080023cb 	.word	0x080023cb
 8002354:	080023a5 	.word	0x080023a5
 8002358:	080023b7 	.word	0x080023b7
 800235c:	080023f9 	.word	0x080023f9
 8002360:	080023ff 	.word	0x080023ff
 8002364:	080023ff 	.word	0x080023ff
 8002368:	080023ff 	.word	0x080023ff
 800236c:	080023ff 	.word	0x080023ff
 8002370:	080023ff 	.word	0x080023ff
 8002374:	080023ff 	.word	0x080023ff
 8002378:	080023ff 	.word	0x080023ff
 800237c:	080023ff 	.word	0x080023ff
 8002380:	080023ff 	.word	0x080023ff
 8002384:	080023ff 	.word	0x080023ff
 8002388:	080023ff 	.word	0x080023ff
 800238c:	080023ff 	.word	0x080023ff
 8002390:	080023ff 	.word	0x080023ff
 8002394:	080023ad 	.word	0x080023ad
 8002398:	080023c1 	.word	0x080023c1
 800239c:	4a79      	ldr	r2, [pc, #484]	; (8002584 <HAL_GPIO_Init+0x2b4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023a2:	e02c      	b.n	80023fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e029      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	3304      	adds	r3, #4
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e024      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	3308      	adds	r3, #8
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e01f      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	330c      	adds	r3, #12
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e01a      	b.n	8002400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023d2:	2304      	movs	r3, #4
 80023d4:	623b      	str	r3, [r7, #32]
          break;
 80023d6:	e013      	b.n	8002400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	611a      	str	r2, [r3, #16]
          break;
 80023ea:	e009      	b.n	8002400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ec:	2308      	movs	r3, #8
 80023ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	615a      	str	r2, [r3, #20]
          break;
 80023f6:	e003      	b.n	8002400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
          break;
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x130>
          break;
 80023fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d801      	bhi.n	800240a <HAL_GPIO_Init+0x13a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	e001      	b.n	800240e <HAL_GPIO_Init+0x13e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3304      	adds	r3, #4
 800240e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d802      	bhi.n	800241c <HAL_GPIO_Init+0x14c>
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x152>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	3b08      	subs	r3, #8
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	210f      	movs	r1, #15
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	6a39      	ldr	r1, [r7, #32]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	431a      	orrs	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80b1 	beq.w	80025b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002450:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <HAL_GPIO_Init+0x2b8>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_GPIO_Init+0x2b8>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <HAL_GPIO_Init+0x2b8>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_GPIO_Init+0x2bc>)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a40      	ldr	r2, [pc, #256]	; (8002590 <HAL_GPIO_Init+0x2c0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_GPIO_Init+0x1ec>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <HAL_GPIO_Init+0x2c4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00d      	beq.n	80024b8 <HAL_GPIO_Init+0x1e8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <HAL_GPIO_Init+0x2c8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <HAL_GPIO_Init+0x1e4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3d      	ldr	r2, [pc, #244]	; (800259c <HAL_GPIO_Init+0x2cc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_GPIO_Init+0x1e0>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e006      	b.n	80024be <HAL_GPIO_Init+0x1ee>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x1ee>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x1ee>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x1ee>
 80024bc:	2300      	movs	r3, #0
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ce:	492f      	ldr	r1, [pc, #188]	; (800258c <HAL_GPIO_Init+0x2bc>)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	492c      	ldr	r1, [pc, #176]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4928      	ldr	r1, [pc, #160]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002500:	4013      	ands	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d006      	beq.n	800251e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	4922      	ldr	r1, [pc, #136]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
 800251c:	e006      	b.n	800252c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	43db      	mvns	r3, r3
 8002526:	491e      	ldr	r1, [pc, #120]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002528:	4013      	ands	r3, r2
 800252a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4918      	ldr	r1, [pc, #96]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	43db      	mvns	r3, r3
 800254e:	4914      	ldr	r1, [pc, #80]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002550:	4013      	ands	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d021      	beq.n	80025a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	490e      	ldr	r1, [pc, #56]	; (80025a0 <HAL_GPIO_Init+0x2d0>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e021      	b.n	80025b2 <HAL_GPIO_Init+0x2e2>
 800256e:	bf00      	nop
 8002570:	10320000 	.word	0x10320000
 8002574:	10310000 	.word	0x10310000
 8002578:	10220000 	.word	0x10220000
 800257c:	10210000 	.word	0x10210000
 8002580:	10120000 	.word	0x10120000
 8002584:	10110000 	.word	0x10110000
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	40010800 	.word	0x40010800
 8002594:	40010c00 	.word	0x40010c00
 8002598:	40011000 	.word	0x40011000
 800259c:	40011400 	.word	0x40011400
 80025a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4909      	ldr	r1, [pc, #36]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f ae8e 	bne.w	80022e4 <HAL_GPIO_Init+0x14>
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	372c      	adds	r7, #44	; 0x2c
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	40010400 	.word	0x40010400

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e12b      	b.n	8002872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff fa12 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800266a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800266c:	f001 fbf0 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8002670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a81      	ldr	r2, [pc, #516]	; (800287c <HAL_I2C_Init+0x274>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d807      	bhi.n	800268c <HAL_I2C_Init+0x84>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a80      	ldr	r2, [pc, #512]	; (8002880 <HAL_I2C_Init+0x278>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e006      	b.n	800269a <HAL_I2C_Init+0x92>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <HAL_I2C_Init+0x27c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	bf94      	ite	ls
 8002694:	2301      	movls	r3, #1
 8002696:	2300      	movhi	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0e7      	b.n	8002872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a78      	ldr	r2, [pc, #480]	; (8002888 <HAL_I2C_Init+0x280>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a6a      	ldr	r2, [pc, #424]	; (800287c <HAL_I2C_Init+0x274>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d802      	bhi.n	80026dc <HAL_I2C_Init+0xd4>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3301      	adds	r3, #1
 80026da:	e009      	b.n	80026f0 <HAL_I2C_Init+0xe8>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_I2C_Init+0x284>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	3301      	adds	r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	495c      	ldr	r1, [pc, #368]	; (800287c <HAL_I2C_Init+0x274>)
 800270c:	428b      	cmp	r3, r1
 800270e:	d819      	bhi.n	8002744 <HAL_I2C_Init+0x13c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e59      	subs	r1, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fbb1 f3f3 	udiv	r3, r1, r3
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002724:	400b      	ands	r3, r1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_I2C_Init+0x138>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e59      	subs	r1, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fbb1 f3f3 	udiv	r3, r1, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	e051      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002740:	2304      	movs	r3, #4
 8002742:	e04f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <HAL_I2C_Init+0x168>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e58      	subs	r0, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e012      	b.n	8002796 <HAL_I2C_Init+0x18e>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Init+0x196>
 800279a:	2301      	movs	r3, #1
 800279c:	e022      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10e      	bne.n	80027c4 <HAL_I2C_Init+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1e58      	subs	r0, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	440b      	add	r3, r1
 80027b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c2:	e00f      	b.n	80027e4 <HAL_I2C_Init+0x1dc>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e58      	subs	r0, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	0099      	lsls	r1, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6911      	ldr	r1, [r2, #16]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	000186a0 	.word	0x000186a0
 8002880:	001e847f 	.word	0x001e847f
 8002884:	003d08ff 	.word	0x003d08ff
 8002888:	431bde83 	.word	0x431bde83
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	460b      	mov	r3, r1
 80028a4:	813b      	strh	r3, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028aa:	f7ff fbd5 	bl	8002058 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	f040 80d9 	bne.w	8002a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2319      	movs	r3, #25
 80028c4:	2201      	movs	r2, #1
 80028c6:	496d      	ldr	r1, [pc, #436]	; (8002a7c <HAL_I2C_Mem_Write+0x1ec>)
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fcc1 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0cc      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Mem_Write+0x56>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0c5      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d007      	beq.n	800290c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2221      	movs	r2, #33	; 0x21
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a3a      	ldr	r2, [r7, #32]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800293c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a4d      	ldr	r2, [pc, #308]	; (8002a80 <HAL_I2C_Mem_Write+0x1f0>)
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800294e:	88f8      	ldrh	r0, [r7, #6]
 8002950:	893a      	ldrh	r2, [r7, #8]
 8002952:	8979      	ldrh	r1, [r7, #10]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4603      	mov	r3, r0
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 faf8 	bl	8002f54 <I2C_RequestMemoryWrite>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d052      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e081      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fd86 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00d      	beq.n	800299a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b04      	cmp	r3, #4
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d11b      	bne.n	8002a10 <HAL_I2C_Mem_Write+0x180>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1aa      	bne.n	800296e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fd79 	bl	8003514 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d107      	bne.n	8002a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e016      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	00100002 	.word	0x00100002
 8002a80:	ffff0000 	.word	0xffff0000

08002a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	460b      	mov	r3, r1
 8002a98:	813b      	strh	r3, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	f7ff fad9 	bl	8002058 <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	f040 8244 	bne.w	8002f3e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2319      	movs	r3, #25
 8002abc:	2201      	movs	r2, #1
 8002abe:	4982      	ldr	r1, [pc, #520]	; (8002cc8 <HAL_I2C_Mem_Read+0x244>)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fbc5 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
 8002ace:	e237      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Mem_Read+0x5a>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e230      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d007      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2222      	movs	r2, #34	; 0x22
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2240      	movs	r2, #64	; 0x40
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <HAL_I2C_Mem_Read+0x248>)
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b46:	88f8      	ldrh	r0, [r7, #6]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4603      	mov	r3, r0
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa92 	bl	8003080 <I2C_RequestMemoryRead>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1ec      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d113      	bne.n	8002b96 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e1c0      	b.n	8002f18 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d11e      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bae:	b672      	cpsid	i
}
 8002bb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd8:	b662      	cpsie	i
}
 8002bda:	e035      	b.n	8002c48 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d11e      	bne.n	8002c22 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf4:	b672      	cpsid	i
}
 8002bf6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c1e:	b662      	cpsie	i
}
 8002c20:	e012      	b.n	8002c48 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c48:	e166      	b.n	8002f18 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	f200 811f 	bhi.w	8002e92 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d123      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fc9f 	bl	80035a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e167      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ca2:	e139      	b.n	8002f18 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d152      	bne.n	8002d52 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4906      	ldr	r1, [pc, #24]	; (8002cd0 <HAL_I2C_Mem_Read+0x24c>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 faca 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e13c      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
 8002cc6:	bf00      	nop
 8002cc8:	00100002 	.word	0x00100002
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd4:	b672      	cpsid	i
}
 8002cd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d1a:	b662      	cpsie	i
}
 8002d1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d50:	e0e2      	b.n	8002f18 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2200      	movs	r2, #0
 8002d5a:	497b      	ldr	r1, [pc, #492]	; (8002f48 <HAL_I2C_Mem_Read+0x4c4>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fa77 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0e9      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7c:	b672      	cpsid	i
}
 8002d7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002db2:	4b66      	ldr	r3, [pc, #408]	; (8002f4c <HAL_I2C_Mem_Read+0x4c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	08db      	lsrs	r3, r3, #3
 8002db8:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_I2C_Mem_Read+0x4cc>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0a1a      	lsrs	r2, r3, #8
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d118      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dfa:	b662      	cpsie	i
}
 8002dfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e09a      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d1d9      	bne.n	8002dcc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5a:	b662      	cpsie	i
}
 8002e5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e90:	e042      	b.n	8002f18 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb84 	bl	80035a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04c      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d118      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f47f ae94 	bne.w	8002c4a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010004 	.word	0x00010004
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	14f8b589 	.word	0x14f8b589

08002f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f960 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d103      	bne.n	8002fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e05f      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <I2C_RequestMemoryWrite+0x128>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f9bb 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04c      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa46 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e02b      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e021      	b.n	8003070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa20 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e005      	b.n	8003072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	893b      	ldrh	r3, [r7, #8]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	00010002 	.word	0x00010002

08003080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f8c2 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e0:	d103      	bne.n	80030ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0aa      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	4952      	ldr	r1, [pc, #328]	; (800324c <I2C_RequestMemoryRead+0x1cc>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f91d 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e097      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f9a8 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e076      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e021      	b.n	80031ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f982 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e050      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ae:	6a39      	ldr	r1, [r7, #32]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f967 	bl	8003484 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e035      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f82b 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	d103      	bne.n	8003218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e013      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	6a3a      	ldr	r2, [r7, #32]
 8003230:	4906      	ldr	r1, [pc, #24]	; (800324c <I2C_RequestMemoryRead+0x1cc>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f886 	bl	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	00010002 	.word	0x00010002

08003250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003260:	e048      	b.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d044      	beq.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fe fef5 	bl	8002058 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d139      	bne.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10d      	bne.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	e00c      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d116      	bne.n	80032f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e023      	b.n	800333c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10d      	bne.n	800331a <I2C_WaitOnFlagUntilTimeout+0xca>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	43da      	mvns	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	e00c      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	429a      	cmp	r2, r3
 8003338:	d093      	beq.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003352:	e071      	b.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003362:	d123      	bne.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800337c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e067      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d041      	beq.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe fe50 	bl	8002058 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d136      	bne.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10c      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e00b      	b.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e021      	b.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d10c      	bne.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	43da      	mvns	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e00b      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af6d 	bne.w	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003490:	e034      	b.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8e3 	bl	800365e <I2C_IsAcknowledgeFailed>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e034      	b.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d028      	beq.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fdd5 	bl	8002058 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11d      	bne.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d016      	beq.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e007      	b.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b80      	cmp	r3, #128	; 0x80
 8003508:	d1c3      	bne.n	8003492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003520:	e034      	b.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f89b 	bl	800365e <I2C_IsAcknowledgeFailed>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e034      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d028      	beq.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fd8d 	bl	8002058 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11d      	bne.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d016      	beq.n	800358c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e007      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d1c3      	bne.n	8003522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035b0:	e049      	b.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d119      	bne.n	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0210 	mvn.w	r2, #16
 80035c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e030      	b.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fe fd30 	bl	8002058 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d016      	beq.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d1ae      	bne.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d11b      	bne.n	80036ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e272      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8087 	beq.w	80037ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036dc:	4b92      	ldr	r3, [pc, #584]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d00c      	beq.n	8003702 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e8:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d112      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
 80036f4:	4b8c      	ldr	r3, [pc, #560]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d10b      	bne.n	800371a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003702:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d06c      	beq.n	80037e8 <HAL_RCC_OscConfig+0x12c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d168      	bne.n	80037e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e24c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x76>
 8003724:	4b80      	ldr	r3, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7f      	ldr	r2, [pc, #508]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e02e      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x98>
 800373a:	4b7b      	ldr	r3, [pc, #492]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7a      	ldr	r2, [pc, #488]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b78      	ldr	r3, [pc, #480]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a77      	ldr	r2, [pc, #476]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800374c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0xbc>
 800375e:	4b72      	ldr	r3, [pc, #456]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a71      	ldr	r2, [pc, #452]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xd4>
 8003778:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a6a      	ldr	r2, [pc, #424]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b68      	ldr	r3, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a67      	ldr	r2, [pc, #412]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fc5e 	bl	8002058 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe fc5a 	bl	8002058 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e200      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xe4>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe fc4a 	bl	8002058 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe fc46 	bl	8002058 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1ec      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x10c>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f6:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b08      	cmp	r3, #8
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x18c>
 800380e:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x176>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1c0      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4939      	ldr	r1, [pc, #228]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_RCC_OscConfig+0x270>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7fe fbff 	bl	8002058 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe fbfb 	bl	8002058 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1a1      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4927      	ldr	r1, [pc, #156]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCC_OscConfig+0x270>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe fbde 	bl	8002058 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbda 	bl	8002058 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e180      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d03a      	beq.n	8003940 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d019      	beq.n	8003906 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <HAL_RCC_OscConfig+0x274>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fe fbbe 	bl	8002058 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe fbba 	bl	8002058 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e160      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038fe:	2001      	movs	r0, #1
 8003900:	f000 face 	bl	8003ea0 <RCC_Delay>
 8003904:	e01c      	b.n	8003940 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCC_OscConfig+0x274>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390c:	f7fe fba4 	bl	8002058 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003912:	e00f      	b.n	8003934 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7fe fba0 	bl	8002058 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d908      	bls.n	8003934 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e146      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	42420000 	.word	0x42420000
 8003930:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b92      	ldr	r3, [pc, #584]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e9      	bne.n	8003914 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a6 	beq.w	8003a9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b8b      	ldr	r3, [pc, #556]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b88      	ldr	r3, [pc, #544]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4a87      	ldr	r2, [pc, #540]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	61d3      	str	r3, [r2, #28]
 800396a:	4b85      	ldr	r3, [pc, #532]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b82      	ldr	r3, [pc, #520]	; (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4b7f      	ldr	r3, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	; (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fe fb61 	bl	8002058 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fe fb5d 	bl	8002058 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e103      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <HAL_RCC_OscConfig+0x4c8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x312>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a6e      	ldr	r2, [pc, #440]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e02d      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x334>
 80039d6:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a69      	ldr	r2, [pc, #420]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6213      	str	r3, [r2, #32]
 80039e2:	4b67      	ldr	r3, [pc, #412]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4a66      	ldr	r2, [pc, #408]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6213      	str	r3, [r2, #32]
 80039ee:	e01c      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x356>
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a60      	ldr	r2, [pc, #384]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6213      	str	r3, [r2, #32]
 8003a04:	4b5e      	ldr	r3, [pc, #376]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a5d      	ldr	r2, [pc, #372]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0x36e>
 8003a12:	4b5b      	ldr	r3, [pc, #364]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a5a      	ldr	r2, [pc, #360]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	4b58      	ldr	r3, [pc, #352]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fb11 	bl	8002058 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe fb0d 	bl	8002058 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e0b1      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0ee      	beq.n	8003a3a <HAL_RCC_OscConfig+0x37e>
 8003a5c:	e014      	b.n	8003a88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fafb 	bl	8002058 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fe faf7 	bl	8002058 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e09b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8087 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d061      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d146      	bne.n	8003b46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe facb 	bl	8002058 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fac7 	bl	8002058 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e06d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4921      	ldr	r1, [pc, #132]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a19      	ldr	r1, [r3, #32]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	430b      	orrs	r3, r1
 8003b12:	491b      	ldr	r1, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe fa9b 	bl	8002058 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fe fa97 	bl	8002058 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e03d      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x46a>
 8003b44:	e035      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_RCC_OscConfig+0x4cc>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fa84 	bl	8002058 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fe fa80 	bl	8002058 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e026      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x498>
 8003b72:	e01e      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e019      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40007000 	.word	0x40007000
 8003b88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_OscConfig+0x500>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000

08003bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0d0      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d910      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	4965      	ldr	r1, [pc, #404]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d040      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d115      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e073      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06b      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4936      	ldr	r1, [pc, #216]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb0:	f7fe f9d2 	bl	8002058 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fe f9ce 	bl	8002058 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e053      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 020c 	and.w	r2, r3, #12
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d1eb      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d210      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0207 	bic.w	r2, r3, #7
 8003cf6:	4922      	ldr	r1, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 f821 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1cc>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe f930 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40021000 	.word	0x40021000
 8003d88:	08009e68 	.word	0x08009e68
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	20000004 	.word	0x20000004

08003d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	2300      	movs	r3, #0
 8003da8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x36>
 8003dc2:	e027      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc6:	613b      	str	r3, [r7, #16]
      break;
 8003dc8:	e027      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	0c9b      	lsrs	r3, r3, #18
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
 8003dd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0c5b      	lsrs	r3, r3, #17
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003df6:	fb03 f202 	mul.w	r2, r3, r2
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e004      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	613b      	str	r3, [r7, #16]
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e16:	613b      	str	r3, [r7, #16]
      break;
 8003e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1a:	693b      	ldr	r3, [r7, #16]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	08009e80 	.word	0x08009e80
 8003e34:	08009e90 	.word	0x08009e90
 8003e38:	003d0900 	.word	0x003d0900

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	20000000 	.word	0x20000000

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff2 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	08009e78 	.word	0x08009e78

08003e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e7c:	f7ff ffde 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0adb      	lsrs	r3, r3, #11
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08009e78 	.word	0x08009e78

08003ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCC_Delay+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <RCC_Delay+0x38>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a5b      	lsrs	r3, r3, #9
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ebc:	bf00      	nop
  }
  while (Delay --);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <RCC_Delay+0x1c>
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	10624dd3 	.word	0x10624dd3

08003edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e076      	b.n	8003fdc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efe:	d009      	beq.n	8003f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
 8003f06:	e005      	b.n	8003f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd fdd0 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	ea42 0103 	orr.w	r1, r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	0c1a      	lsrs	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f002 0204 	and.w	r2, r2, #4
 8003fba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_SPI_Transmit+0x22>
 8004002:	2302      	movs	r3, #2
 8004004:	e12d      	b.n	8004262 <HAL_SPI_Transmit+0x27e>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400e:	f7fe f823 	bl	8002058 <HAL_GetTick>
 8004012:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d002      	beq.n	800402a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004024:	2302      	movs	r3, #2
 8004026:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004028:	e116      	b.n	8004258 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_Transmit+0x52>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	77fb      	strb	r3, [r7, #31]
    goto error;
 800403a:	e10d      	b.n	8004258 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2203      	movs	r2, #3
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	d10f      	bne.n	80040a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d007      	beq.n	80040c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ca:	d14f      	bne.n	800416c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_SPI_Transmit+0xf6>
 80040d4:	8afb      	ldrh	r3, [r7, #22]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d142      	bne.n	8004160 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	1c9a      	adds	r2, r3, #2
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040fe:	e02f      	b.n	8004160 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d112      	bne.n	8004134 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c9a      	adds	r2, r3, #2
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
 8004132:	e015      	b.n	8004160 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004134:	f7fd ff90 	bl	8002058 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d803      	bhi.n	800414c <HAL_SPI_Transmit+0x168>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414a:	d102      	bne.n	8004152 <HAL_SPI_Transmit+0x16e>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800415e:	e07b      	b.n	8004258 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ca      	bne.n	8004100 <HAL_SPI_Transmit+0x11c>
 800416a:	e050      	b.n	800420e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_Transmit+0x196>
 8004174:	8afb      	ldrh	r3, [r7, #22]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d144      	bne.n	8004204 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041a0:	e030      	b.n	8004204 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d113      	bne.n	80041d8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80041d6:	e015      	b.n	8004204 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d8:	f7fd ff3e 	bl	8002058 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d803      	bhi.n	80041f0 <HAL_SPI_Transmit+0x20c>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d102      	bne.n	80041f6 <HAL_SPI_Transmit+0x212>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004202:	e029      	b.n	8004258 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1c9      	bne.n	80041a2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fbd8 	bl	80049c8 <SPI_EndRxTxTransaction>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10a      	bne.n	8004242 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e003      	b.n	8004258 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004260:	7ffb      	ldrb	r3, [r7, #31]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af02      	add	r7, sp, #8
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800428e:	e0fb      	b.n	8004488 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004298:	d112      	bne.n	80042c0 <HAL_SPI_Receive+0x56>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2204      	movs	r2, #4
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f8ef 	bl	800449a <HAL_SPI_TransmitReceive>
 80042bc:	4603      	mov	r3, r0
 80042be:	e0e8      	b.n	8004492 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_SPI_Receive+0x64>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e0e1      	b.n	8004492 <HAL_SPI_Receive+0x228>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d6:	f7fd febf 	bl	8002058 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_SPI_Receive+0x7e>
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042ec:	e0cc      	b.n	8004488 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2204      	movs	r2, #4
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	d10f      	bne.n	8004356 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d007      	beq.n	8004374 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d16a      	bne.n	8004452 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800437c:	e032      	b.n	80043e4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d115      	bne.n	80043b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f103 020c 	add.w	r2, r3, #12
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043b6:	e015      	b.n	80043e4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b8:	f7fd fe4e 	bl	8002058 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d803      	bhi.n	80043d0 <HAL_SPI_Receive+0x166>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d102      	bne.n	80043d6 <HAL_SPI_Receive+0x16c>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043e2:	e051      	b.n	8004488 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1c7      	bne.n	800437e <HAL_SPI_Receive+0x114>
 80043ee:	e035      	b.n	800445c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d113      	bne.n	8004426 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	b292      	uxth	r2, r2
 800440a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004424:	e015      	b.n	8004452 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004426:	f7fd fe17 	bl	8002058 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d803      	bhi.n	800443e <HAL_SPI_Receive+0x1d4>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d102      	bne.n	8004444 <HAL_SPI_Receive+0x1da>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004450:	e01a      	b.n	8004488 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1c9      	bne.n	80043f0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fa5f 	bl	8004924 <SPI_EndRxTransaction>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
 800447e:	e003      	b.n	8004488 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004490:	7dfb      	ldrb	r3, [r7, #23]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08c      	sub	sp, #48	; 0x30
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x26>
 80044bc:	2302      	movs	r3, #2
 80044be:	e198      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x358>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044c8:	f7fd fdc6 	bl	8002058 <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d00f      	beq.n	800450a <HAL_SPI_TransmitReceive+0x70>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f0:	d107      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x68>
 80044fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d003      	beq.n	800450a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004502:	2302      	movs	r3, #2
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004508:	e16d      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_SPI_TransmitReceive+0x82>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_TransmitReceive+0x82>
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004522:	e160      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b04      	cmp	r3, #4
 800452e:	d003      	beq.n	8004538 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2205      	movs	r2, #5
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	887a      	ldrh	r2, [r7, #2]
 800455a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d007      	beq.n	800458c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d17c      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x10a>
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d16a      	bne.n	800467a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	881a      	ldrh	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	e057      	b.n	800467a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d11b      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x176>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x176>
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d113      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d119      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x1b8>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d014      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	b292      	uxth	r2, r2
 8004634:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800464e:	2301      	movs	r3, #1
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004652:	f7fd fd01 	bl	8002058 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800465e:	429a      	cmp	r2, r3
 8004660:	d80b      	bhi.n	800467a <HAL_SPI_TransmitReceive+0x1e0>
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d007      	beq.n	800467a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004678:	e0b5      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1a2      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x130>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d19d      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x130>
 800468e:	e080      	b.n	8004792 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_TransmitReceive+0x204>
 8004698:	8b7b      	ldrh	r3, [r7, #26]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d16f      	bne.n	800477e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c4:	e05b      	b.n	800477e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d11c      	bne.n	800470e <HAL_SPI_TransmitReceive+0x274>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <HAL_SPI_TransmitReceive+0x274>
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d114      	bne.n	800470e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d119      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x2b6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800474c:	2301      	movs	r3, #1
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004750:	f7fd fc82 	bl	8002058 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475c:	429a      	cmp	r2, r3
 800475e:	d803      	bhi.n	8004768 <HAL_SPI_TransmitReceive+0x2ce>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d102      	bne.n	800476e <HAL_SPI_TransmitReceive+0x2d4>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800477c:	e033      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d19e      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x22c>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d199      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f916 	bl	80049c8 <SPI_EndRxTxTransaction>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047ae:	e01a      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047dc:	e003      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3730      	adds	r7, #48	; 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004808:	b2db      	uxtb	r3, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004824:	f7fd fc18 	bl	8002058 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	4413      	add	r3, r2
 8004832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004834:	f7fd fc10 	bl	8002058 <HAL_GetTick>
 8004838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800483a:	4b39      	ldr	r3, [pc, #228]	; (8004920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	015b      	lsls	r3, r3, #5
 8004840:	0d1b      	lsrs	r3, r3, #20
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484a:	e054      	b.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004852:	d050      	beq.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004854:	f7fd fc00 	bl	8002058 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	429a      	cmp	r2, r3
 8004862:	d902      	bls.n	800486a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d13d      	bne.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004882:	d111      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488c:	d004      	beq.n	8004898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004896:	d107      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b0:	d10f      	bne.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e017      	b.n	8004916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4013      	ands	r3, r2
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	429a      	cmp	r2, r3
 8004912:	d19b      	bne.n	800484c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004938:	d111      	bne.n	800495e <SPI_EndRxTransaction+0x3a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004942:	d004      	beq.n	800494e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494c:	d107      	bne.n	800495e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004966:	d117      	bne.n	8004998 <SPI_EndRxTransaction+0x74>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004970:	d112      	bne.n	8004998 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	2101      	movs	r1, #1
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f7ff ff49 	bl	8004814 <SPI_WaitFlagStateUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01a      	beq.n	80049be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e013      	b.n	80049c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff ff36 	bl	8004814 <SPI_WaitFlagStateUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	f043 0220 	orr.w	r2, r3, #32
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e000      	b.n	80049c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff ff18 	bl	8004814 <SPI_WaitFlagStateUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e000      	b.n	80049fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e041      	b.n	8004a9a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f8da 	bl	8001be4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fb68 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e041      	b.n	8004b38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fd f859 	bl	8001b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 fb19 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x24>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e022      	b.n	8004baa <HAL_TIM_PWM_Start+0x6a>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d109      	bne.n	8004b7e <HAL_TIM_PWM_Start+0x3e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e015      	b.n	8004baa <HAL_TIM_PWM_Start+0x6a>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d109      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x58>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e008      	b.n	8004baa <HAL_TIM_PWM_Start+0x6a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e05e      	b.n	8004c70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x82>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	e013      	b.n	8004bea <HAL_TIM_PWM_Start+0xaa>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d104      	bne.n	8004bd2 <HAL_TIM_PWM_Start+0x92>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd0:	e00b      	b.n	8004bea <HAL_TIM_PWM_Start+0xaa>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0xa2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	e003      	b.n	8004bea <HAL_TIM_PWM_Start+0xaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	6839      	ldr	r1, [r7, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fc7a 	bl	80054ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_TIM_PWM_Start+0x138>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIM_PWM_Start+0x138>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIM_PWM_Start+0xfa>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d009      	beq.n	8004c3a <HAL_TIM_PWM_Start+0xfa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <HAL_TIM_PWM_Start+0x13c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIM_PWM_Start+0xfa>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <HAL_TIM_PWM_Start+0x140>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d111      	bne.n	8004c5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d010      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5c:	e007      	b.n	8004c6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0202 	mvn.w	r2, #2
 8004cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa0b 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9fe 	bl	80050d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa0d 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0204 	mvn.w	r2, #4
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9e1 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9d4 	bl	80050d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9e3 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0208 	mvn.w	r2, #8
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f9b7 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9aa 	bl	80050d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f9b9 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d122      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f98d 	bl	80050e2 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f980 	bl	80050d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f98f 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10e      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d107      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0201 	mvn.w	r2, #1
 8004e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fde4 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d10e      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b80      	cmp	r3, #128	; 0x80
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fc38 	bl	80056a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f953 	bl	8005106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0220 	mvn.w	r2, #32
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fc03 	bl	8005692 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e048      	b.n	8004f44 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d839      	bhi.n	8004f34 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08004f35 	.word	0x08004f35
 8004ed0:	08004f35 	.word	0x08004f35
 8004ed4:	08004f35 	.word	0x08004f35
 8004ed8:	08004f0b 	.word	0x08004f0b
 8004edc:	08004f35 	.word	0x08004f35
 8004ee0:	08004f35 	.word	0x08004f35
 8004ee4:	08004f35 	.word	0x08004f35
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f35 	.word	0x08004f35
 8004ef0:	08004f35 	.word	0x08004f35
 8004ef4:	08004f35 	.word	0x08004f35
 8004ef8:	08004f27 	.word	0x08004f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f96a 	bl	80051dc <TIM_OC1_SetConfig>
      break;
 8004f08:	e017      	b.n	8004f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f9c9 	bl	80052a8 <TIM_OC2_SetConfig>
      break;
 8004f16:	e010      	b.n	8004f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fa2c 	bl	800537c <TIM_OC3_SetConfig>
      break;
 8004f24:	e009      	b.n	8004f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fa8f 	bl	8005450 <TIM_OC4_SetConfig>
      break;
 8004f32:	e002      	b.n	8004f3a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	75fb      	strb	r3, [r7, #23]
      break;
 8004f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e0ae      	b.n	80050c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	f200 809f 	bhi.w	80050b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	080050b9 	.word	0x080050b9
 8004f88:	080050b9 	.word	0x080050b9
 8004f8c:	080050b9 	.word	0x080050b9
 8004f90:	08004ff5 	.word	0x08004ff5
 8004f94:	080050b9 	.word	0x080050b9
 8004f98:	080050b9 	.word	0x080050b9
 8004f9c:	080050b9 	.word	0x080050b9
 8004fa0:	08005037 	.word	0x08005037
 8004fa4:	080050b9 	.word	0x080050b9
 8004fa8:	080050b9 	.word	0x080050b9
 8004fac:	080050b9 	.word	0x080050b9
 8004fb0:	08005077 	.word	0x08005077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f90e 	bl	80051dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0204 	bic.w	r2, r2, #4
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	619a      	str	r2, [r3, #24]
      break;
 8004ff2:	e064      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f954 	bl	80052a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6999      	ldr	r1, [r3, #24]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	619a      	str	r2, [r3, #24]
      break;
 8005034:	e043      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f99d 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0208 	orr.w	r2, r2, #8
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0204 	bic.w	r2, r2, #4
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	61da      	str	r2, [r3, #28]
      break;
 8005074:	e023      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68b9      	ldr	r1, [r7, #8]
 800507c:	4618      	mov	r0, r3
 800507e:	f000 f9e7 	bl	8005450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69d9      	ldr	r1, [r3, #28]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	021a      	lsls	r2, r3, #8
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	61da      	str	r2, [r3, #28]
      break;
 80050b6:	e002      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
      break;
 80050bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a26      	ldr	r2, [pc, #152]	; (80051d4 <TIM_Base_SetConfig+0xbc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <TIM_Base_SetConfig+0xc0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <TIM_Base_SetConfig+0xb8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <TIM_Base_SetConfig+0xbc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <TIM_Base_SetConfig+0xc0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <TIM_Base_SetConfig+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800

080051dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d111      	bne.n	800527e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00

080052a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 0210 	bic.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_OC2_SetConfig+0xd0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10d      	bne.n	8005324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <TIM_OC2_SetConfig+0xd0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d113      	bne.n	8005354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	40012c00 	.word	0x40012c00

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	; (800544c <TIM_OC3_SetConfig+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40012c00 	.word	0x40012c00

08005450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0f      	ldr	r2, [pc, #60]	; (80054e8 <TIM_OC4_SetConfig+0x98>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00

080054ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e046      	b.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d009      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10c      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800

080055f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005608:	2302      	movs	r3, #2
 800560a:	e03d      	b.n	8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e042      	b.n	800574e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fc fafb 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2224      	movs	r2, #36	; 0x24
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f91c 	bl	8005938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800570e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695a      	ldr	r2, [r3, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800571e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800572e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b08a      	sub	sp, #40	; 0x28
 800575a:	af02      	add	r7, sp, #8
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b20      	cmp	r3, #32
 8005774:	d16d      	bne.n	8005852 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_UART_Transmit+0x2c>
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e066      	b.n	8005854 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005794:	f7fc fc60 	bl	8002058 <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d108      	bne.n	80057c2 <HAL_UART_Transmit+0x6c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	e003      	b.n	80057ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ca:	e02a      	b.n	8005822 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2200      	movs	r2, #0
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f840 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e036      	b.n	8005854 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	3302      	adds	r3, #2
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e007      	b.n	8005814 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1cf      	bne.n	80057cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	2140      	movs	r1, #64	; 0x40
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f810 	bl	800585c <UART_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e006      	b.n	8005854 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005852:	2302      	movs	r3, #2
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b090      	sub	sp, #64	; 0x40
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586c:	e050      	b.n	8005910 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d04c      	beq.n	8005910 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <UART_WaitOnFlagUntilTimeout+0x30>
 800587c:	f7fc fbec 	bl	8002058 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005888:	429a      	cmp	r2, r3
 800588a:	d241      	bcs.n	8005910 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ac:	637a      	str	r2, [r7, #52]	; 0x34
 80058ae:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3314      	adds	r3, #20
 80058c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	613b      	str	r3, [r7, #16]
   return(result);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3314      	adds	r3, #20
 80058de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058e0:	623a      	str	r2, [r7, #32]
 80058e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	69f9      	ldr	r1, [r7, #28]
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e00f      	b.n	8005930 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	d09f      	beq.n	800586e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3740      	adds	r7, #64	; 0x40
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005972:	f023 030c 	bic.w	r3, r3, #12
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	430b      	orrs	r3, r1
 800597e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <UART_SetConfig+0x114>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d103      	bne.n	80059a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059a0:	f7fe fa6a 	bl	8003e78 <HAL_RCC_GetPCLK2Freq>
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	e002      	b.n	80059ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059a8:	f7fe fa52 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80059ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009a      	lsls	r2, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <UART_SetConfig+0x118>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	0119      	lsls	r1, r3, #4
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009a      	lsls	r2, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <UART_SetConfig+0x118>)
 80059e6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2064      	movs	r0, #100	; 0x64
 80059ee:	fb00 f303 	mul.w	r3, r0, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	; 0x32
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <UART_SetConfig+0x118>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a04:	4419      	add	r1, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009a      	lsls	r2, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <UART_SetConfig+0x118>)
 8005a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	2064      	movs	r0, #100	; 0x64
 8005a26:	fb00 f303 	mul.w	r3, r0, r3
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	3332      	adds	r3, #50	; 0x32
 8005a30:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <UART_SetConfig+0x118>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	440a      	add	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	51eb851f 	.word	0x51eb851f
 8005a54:	00000000 	.word	0x00000000

08005a58 <Self_test_mpu6050>:
#include "mpu6050_driver.h"
#define DEBUG_mpu 0
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim3;

void Self_test_mpu6050(I2C_HandleTypeDef *hi2c) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b092      	sub	sp, #72	; 0x48
 8005a5c:	af04      	add	r7, sp, #16
 8005a5e:	6078      	str	r0, [r7, #4]

	 uint8_t data[4] = {0} ;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	 uint8_t  Gyro_ST[3] = {0};
 8005a64:	4bc8      	ldr	r3, [pc, #800]	; (8005d88 <Self_test_mpu6050+0x330>)
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 uint8_t  ACCL_ST[3] = {0} ;
 8005a70:	4bc5      	ldr	r3, [pc, #788]	; (8005d88 <Self_test_mpu6050+0x330>)
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 float Gyro_FT[3] = {0} ;
 8005a7c:	f107 0318 	add.w	r3, r7, #24
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	609a      	str	r2, [r3, #8]
	 float Accl_FT[3] = {0} ;
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	609a      	str	r2, [r3, #8]

	 // begin test
	 data[0] = 0xE0;
 8005a94:	23e0      	movs	r3, #224	; 0xe0
 8005a96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable gyro self test
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	9302      	str	r3, [sp, #8]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	221b      	movs	r2, #27
 8005aae:	21d0      	movs	r1, #208	; 0xd0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fc feed 	bl	8002890 <HAL_I2C_Mem_Write>
	 data[0] = 0xF0 ;
 8005ab6:	23f0      	movs	r3, #240	; 0xf0
 8005ab8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1,&data[0] , 1, HAL_MAX_DELAY); // enable accel self test
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2301      	movs	r3, #1
 8005ace:	221c      	movs	r2, #28
 8005ad0:	21d0      	movs	r1, #208	; 0xd0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc fedc 	bl	8002890 <HAL_I2C_Mem_Write>
	 HAL_Delay(150) ;
 8005ad8:	2096      	movs	r0, #150	; 0x96
 8005ada:	f7fc fac7 	bl	800206c <HAL_Delay>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_X, 1, &data[0], 1, HAL_MAX_DELAY) ;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	9302      	str	r3, [sp, #8]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	2301      	movs	r3, #1
 8005af0:	220d      	movs	r2, #13
 8005af2:	21d0      	movs	r1, #208	; 0xd0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fc ffc5 	bl	8002a84 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Y, 1, &data[1], 1, HAL_MAX_DELAY) ;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	2301      	movs	r3, #1
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b08:	3301      	adds	r3, #1
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	220e      	movs	r2, #14
 8005b10:	21d0      	movs	r1, #208	; 0xd0
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc ffb6 	bl	8002a84 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_Z, 1, &data[2], 1, HAL_MAX_DELAY) ;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	2301      	movs	r3, #1
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b26:	3302      	adds	r3, #2
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	21d0      	movs	r1, #208	; 0xd0
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fc ffa7 	bl	8002a84 <HAL_I2C_Mem_Read>
	 HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SELF_TEST_A, 1, &data[3], 1, HAL_MAX_DELAY) ;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	9302      	str	r3, [sp, #8]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b44:	3303      	adds	r3, #3
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	2210      	movs	r2, #16
 8005b4c:	21d0      	movs	r1, #208	; 0xd0
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fc ff98 	bl	8002a84 <HAL_I2C_Mem_Read>

	 Gyro_ST[0] = (data[0] & 0x1F) ;	// X
 8005b54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 Gyro_ST[1] = (data[1] & 0x1F) ;	// Y
 8005b62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 Gyro_ST[2] = (data[2] & 0x1F) ;	// Z
 8005b70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	 ACCL_ST[0] = (((data[0] &  0xE0 ) >> 3) | ((data[3] & 0x30 ) >> 4));	//X
 8005b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b82:	10db      	asrs	r3, r3, #3
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	f003 031c 	and.w	r3, r3, #28
 8005b8a:	b25a      	sxtb	r2, r3
 8005b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b90:	111b      	asrs	r3, r3, #4
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	b25b      	sxtb	r3, r3
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 ACCL_ST[1] = (((data[1] &  0xE0 ) >> 3) | ((data[3] & 0x0C ) >> 2));	//Y
 8005ba4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ba8:	10db      	asrs	r3, r3, #3
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	f003 031c 	and.w	r3, r3, #28
 8005bb0:	b25a      	sxtb	r2, r3
 8005bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bb6:	109b      	asrs	r3, r3, #2
 8005bb8:	b25b      	sxtb	r3, r3
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b25b      	sxtb	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 ACCL_ST[2] = (((data[2] &  0xE0 ) >> 3) | ((data[3] & 0x03 ) >> 0)); //Z
 8005bca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005bce:	10db      	asrs	r3, r3, #3
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f003 031c 	and.w	r3, r3, #28
 8005bd6:	b25a      	sxtb	r2, r3
 8005bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bdc:	b25b      	sxtb	r3, r3
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	4313      	orrs	r3, r2
 8005be6:	b25b      	sxtb	r3, r3
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printf("ACC_ST[0] %u \n" , ACCL_ST[0]) ;
	printf("ACC_ST[1] %u \n" , ACCL_ST[1]) ;
	printf("ACC_ST[2] %u \n" , ACCL_ST[3]) ;
#endif

	Gyro_FT[0] = 25.0*131.0*(powf(1.406,Gyro_ST[0]) - 1.0) ;
 8005bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb f84e 	bl	8000c94 <__aeabi_ui2f>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4863      	ldr	r0, [pc, #396]	; (8005d8c <Self_test_mpu6050+0x334>)
 8005bfe:	f003 fb5d 	bl	80092bc <powf>
 8005c02:	4603      	mov	r3, r0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fa fc0f 	bl	8000428 <__aeabi_f2d>
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	4b60      	ldr	r3, [pc, #384]	; (8005d90 <Self_test_mpu6050+0x338>)
 8005c10:	f7fa faaa 	bl	8000168 <__aeabi_dsub>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	a354      	add	r3, pc, #336	; (adr r3, 8005d70 <Self_test_mpu6050+0x318>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fc59 	bl	80004d8 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f7fa ff2b 	bl	8000a88 <__aeabi_d2f>
 8005c32:	4603      	mov	r3, r0
 8005c34:	61bb      	str	r3, [r7, #24]
	Gyro_FT[1] = -25.0*131.0*(powf(1.406,Gyro_ST[1]) - 1.0) ;
 8005c36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fb f82a 	bl	8000c94 <__aeabi_ui2f>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4619      	mov	r1, r3
 8005c44:	4851      	ldr	r0, [pc, #324]	; (8005d8c <Self_test_mpu6050+0x334>)
 8005c46:	f003 fb39 	bl	80092bc <powf>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fbeb 	bl	8000428 <__aeabi_f2d>
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	4b4e      	ldr	r3, [pc, #312]	; (8005d90 <Self_test_mpu6050+0x338>)
 8005c58:	f7fa fa86 	bl	8000168 <__aeabi_dsub>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	a344      	add	r3, pc, #272	; (adr r3, 8005d78 <Self_test_mpu6050+0x320>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	f7fa ff07 	bl	8000a88 <__aeabi_d2f>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	61fb      	str	r3, [r7, #28]
	Gyro_FT[2] = 25.0*131.0*(powf(1.406,Gyro_ST[2]) - 1.0) ;
 8005c7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fb f806 	bl	8000c94 <__aeabi_ui2f>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	483f      	ldr	r0, [pc, #252]	; (8005d8c <Self_test_mpu6050+0x334>)
 8005c8e:	f003 fb15 	bl	80092bc <powf>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fa fbc7 	bl	8000428 <__aeabi_f2d>
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	4b3c      	ldr	r3, [pc, #240]	; (8005d90 <Self_test_mpu6050+0x338>)
 8005ca0:	f7fa fa62 	bl	8000168 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	a330      	add	r3, pc, #192	; (adr r3, 8005d70 <Self_test_mpu6050+0x318>)
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f7fa fc11 	bl	80004d8 <__aeabi_dmul>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fa fee3 	bl	8000a88 <__aeabi_d2f>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	623b      	str	r3, [r7, #32]

	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[0] - 1.0)/(30)))); ;
 8005cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fa fb9a 	bl	8000404 <__aeabi_i2d>
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <Self_test_mpu6050+0x338>)
 8005cd6:	f7fa fa47 	bl	8000168 <__aeabi_dsub>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <Self_test_mpu6050+0x33c>)
 8005ce8:	f7fa fd20 	bl	800072c <__aeabi_ddiv>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
	Accl_FT[0] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7fa fec8 	bl	8000a88 <__aeabi_d2f>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4826      	ldr	r0, [pc, #152]	; (8005d98 <Self_test_mpu6050+0x340>)
 8005cfe:	f003 fadd 	bl	80092bc <powf>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fa fb8f 	bl	8000428 <__aeabi_f2d>
 8005d0a:	a31d      	add	r3, pc, #116	; (adr r3, 8005d80 <Self_test_mpu6050+0x328>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fbe2 	bl	80004d8 <__aeabi_dmul>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f7fa feb4 	bl	8000a88 <__aeabi_d2f>
 8005d20:	4603      	mov	r3, r0
 8005d22:	60fb      	str	r3, [r7, #12]
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
							  ((ACCL_ST[1] - 1.0)/(30))));
 8005d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fa fb6b 	bl	8000404 <__aeabi_i2d>
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <Self_test_mpu6050+0x338>)
 8005d34:	f7fa fa18 	bl	8000168 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <Self_test_mpu6050+0x33c>)
 8005d46:	f7fa fcf1 	bl	800072c <__aeabi_ddiv>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
	Accl_FT[1] = 4096.0*0.34*(powf((0.92/0.34 ),
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	f7fa fe99 	bl	8000a88 <__aeabi_d2f>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4619      	mov	r1, r3
 8005d5a:	480f      	ldr	r0, [pc, #60]	; (8005d98 <Self_test_mpu6050+0x340>)
 8005d5c:	f003 faae 	bl	80092bc <powf>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fa fb60 	bl	8000428 <__aeabi_f2d>
 8005d68:	e018      	b.n	8005d9c <Self_test_mpu6050+0x344>
 8005d6a:	bf00      	nop
 8005d6c:	f3af 8000 	nop.w
 8005d70:	00000000 	.word	0x00000000
 8005d74:	40a99600 	.word	0x40a99600
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	c0a99600 	.word	0xc0a99600
 8005d80:	5c28f5c3 	.word	0x5c28f5c3
 8005d84:	4095c28f 	.word	0x4095c28f
 8005d88:	08009c28 	.word	0x08009c28
 8005d8c:	3fb3f7cf 	.word	0x3fb3f7cf
 8005d90:	3ff00000 	.word	0x3ff00000
 8005d94:	403e0000 	.word	0x403e0000
 8005d98:	402d2d2d 	.word	0x402d2d2d
 8005d9c:	a366      	add	r3, pc, #408	; (adr r3, 8005f38 <Self_test_mpu6050+0x4e0>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fb99 	bl	80004d8 <__aeabi_dmul>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	f7fa fe6b 	bl	8000a88 <__aeabi_d2f>
 8005db2:	4603      	mov	r3, r0
 8005db4:	613b      	str	r3, [r7, #16]
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
							  ((ACCL_ST[2] - 1.0)/(30)))) ;
 8005db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fa fb22 	bl	8000404 <__aeabi_i2d>
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	4b5e      	ldr	r3, [pc, #376]	; (8005f40 <Self_test_mpu6050+0x4e8>)
 8005dc6:	f7fa f9cf 	bl	8000168 <__aeabi_dsub>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	4b5b      	ldr	r3, [pc, #364]	; (8005f44 <Self_test_mpu6050+0x4ec>)
 8005dd8:	f7fa fca8 	bl	800072c <__aeabi_ddiv>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
	Accl_FT[2] = 4096.0*0.34*(powf((0.92/0.34) ,
 8005de0:	4610      	mov	r0, r2
 8005de2:	4619      	mov	r1, r3
 8005de4:	f7fa fe50 	bl	8000a88 <__aeabi_d2f>
 8005de8:	4603      	mov	r3, r0
 8005dea:	4619      	mov	r1, r3
 8005dec:	4856      	ldr	r0, [pc, #344]	; (8005f48 <Self_test_mpu6050+0x4f0>)
 8005dee:	f003 fa65 	bl	80092bc <powf>
 8005df2:	4603      	mov	r3, r0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa fb17 	bl	8000428 <__aeabi_f2d>
 8005dfa:	a34f      	add	r3, pc, #316	; (adr r3, 8005f38 <Self_test_mpu6050+0x4e0>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa fb6a 	bl	80004d8 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f7fa fe3c 	bl	8000a88 <__aeabi_d2f>
 8005e10:	4603      	mov	r3, r0
 8005e12:	617b      	str	r3, [r7, #20]
	printf("ACC_FT[0] %f \n" , Accl_FT[0]) ;
	printf("ACC_FT[1] %f \n" , Accl_FT[1]) ;
	printf("ACC_FT[2] %f \n" , Accl_FT[3]) ;
#endif

	float temp = 0 ;
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005e20:	e03a      	b.n	8005e98 <Self_test_mpu6050+0x440>
	temp = (100 + ((( Gyro_ST[i]- Gyro_FT[i] )/ Gyro_FT[i] )*100 ));
 8005e22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e26:	3338      	adds	r3, #56	; 0x38
 8005e28:	443b      	add	r3, r7
 8005e2a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa ff34 	bl	8000c9c <__aeabi_i2f>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	3338      	adds	r3, #56	; 0x38
 8005e3e:	443b      	add	r3, r7
 8005e40:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fa fe72 	bl	8000b30 <__aeabi_fsub>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3338      	adds	r3, #56	; 0x38
 8005e58:	443b      	add	r3, r7
 8005e5a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7fb f823 	bl	8000eac <__aeabi_fdiv>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4938      	ldr	r1, [pc, #224]	; (8005f4c <Self_test_mpu6050+0x4f4>)
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fa ff6a 	bl	8000d44 <__aeabi_fmul>
 8005e70:	4603      	mov	r3, r0
 8005e72:	4936      	ldr	r1, [pc, #216]	; (8005f4c <Self_test_mpu6050+0x4f4>)
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa fe5d 	bl	8000b34 <__addsf3>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Gyro %f \n", temp) ;
 8005e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e80:	f7fa fad2 	bl	8000428 <__aeabi_f2d>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4831      	ldr	r0, [pc, #196]	; (8005f50 <Self_test_mpu6050+0x4f8>)
 8005e8a:	f001 f8df 	bl	800704c <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 8005e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e92:	3301      	adds	r3, #1
 8005e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d9c0      	bls.n	8005e22 <Self_test_mpu6050+0x3ca>
	}
temp = 0 ;
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
	for (uint8_t i = 0; i < 3; i++ ) {
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005eac:	e03a      	b.n	8005f24 <Self_test_mpu6050+0x4cc>

	temp = (100 + ((( ACCL_ST[i]- Accl_FT[i] )/ Accl_FT[i] )*100 ));
 8005eae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005eb2:	3338      	adds	r3, #56	; 0x38
 8005eb4:	443b      	add	r3, r7
 8005eb6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa feee 	bl	8000c9c <__aeabi_i2f>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	3338      	adds	r3, #56	; 0x38
 8005eca:	443b      	add	r3, r7
 8005ecc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f7fa fe2c 	bl	8000b30 <__aeabi_fsub>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	3338      	adds	r3, #56	; 0x38
 8005ee4:	443b      	add	r3, r7
 8005ee6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fa ffdd 	bl	8000eac <__aeabi_fdiv>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4915      	ldr	r1, [pc, #84]	; (8005f4c <Self_test_mpu6050+0x4f4>)
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa ff24 	bl	8000d44 <__aeabi_fmul>
 8005efc:	4603      	mov	r3, r0
 8005efe:	4913      	ldr	r1, [pc, #76]	; (8005f4c <Self_test_mpu6050+0x4f4>)
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fe17 	bl	8000b34 <__addsf3>
 8005f06:	4603      	mov	r3, r0
 8005f08:	633b      	str	r3, [r7, #48]	; 0x30
	printf("testing result Accl %f \n", temp) ;
 8005f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0c:	f7fa fa8c 	bl	8000428 <__aeabi_f2d>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	480f      	ldr	r0, [pc, #60]	; (8005f54 <Self_test_mpu6050+0x4fc>)
 8005f16:	f001 f899 	bl	800704c <iprintf>
	for (uint8_t i = 0; i < 3; i++ ) {
 8005f1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005f24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d9c0      	bls.n	8005eae <Self_test_mpu6050+0x456>
	}
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3738      	adds	r7, #56	; 0x38
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	5c28f5c3 	.word	0x5c28f5c3
 8005f3c:	4095c28f 	.word	0x4095c28f
 8005f40:	3ff00000 	.word	0x3ff00000
 8005f44:	403e0000 	.word	0x403e0000
 8005f48:	402d2d2d 	.word	0x402d2d2d
 8005f4c:	42c80000 	.word	0x42c80000
 8005f50:	08009bf0 	.word	0x08009bf0
 8005f54:	08009c0c 	.word	0x08009c0c

08005f58 <Mpu6050_Init>:

void Mpu6050_Init(I2C_HandleTypeDef *hi2c ){
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	6078      	str	r0, [r7, #4]
uint8_t data = 0x00;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]

//who am I
data = MPU_DATASHEET_ADDR ;
 8005f64:	2368      	movs	r3, #104	; 0x68
 8005f66:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, WHO_AM_I, 1, &data, 1, HAL_MAX_DELAY) ;
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	f107 030f 	add.w	r3, r7, #15
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	2275      	movs	r2, #117	; 0x75
 8005f7c:	21d0      	movs	r1, #208	; 0xd0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fd80 	bl	8002a84 <HAL_I2C_Mem_Read>
if (data != MPU_DATASHEET_ADDR) {
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2b68      	cmp	r3, #104	; 0x68
 8005f88:	d003      	beq.n	8005f92 <Mpu6050_Init+0x3a>
	printf("who am i error \n");
 8005f8a:	488f      	ldr	r0, [pc, #572]	; (80061c8 <Mpu6050_Init+0x270>)
 8005f8c:	f001 f8e4 	bl	8007158 <puts>
 8005f90:	e007      	b.n	8005fa2 <Mpu6050_Init+0x4a>
}else if (data == MPU_DATASHEET_ADDR ) {
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b68      	cmp	r3, #104	; 0x68
 8005f96:	d104      	bne.n	8005fa2 <Mpu6050_Init+0x4a>
	printf("who am I value : %x \n", data) ;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	488b      	ldr	r0, [pc, #556]	; (80061cc <Mpu6050_Init+0x274>)
 8005f9e:	f001 f855 	bl	800704c <iprintf>
}

// power mannagment 1
data = 0x01 ;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	9302      	str	r3, [sp, #8]
 8005fac:	2301      	movs	r3, #1
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	f107 030f 	add.w	r3, r7, #15
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	226b      	movs	r2, #107	; 0x6b
 8005fba:	21d0      	movs	r1, #208	; 0xd0
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fc fc67 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY) ;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	9302      	str	r3, [sp, #8]
 8005fc8:	2301      	movs	r3, #1
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	f107 030f 	add.w	r3, r7, #15
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	226b      	movs	r2, #107	; 0x6b
 8005fd6:	21d0      	movs	r1, #208	; 0xd0
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fc fd53 	bl	8002a84 <HAL_I2C_Mem_Read>
if (data != 0x01) {
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d003      	beq.n	8005fec <Mpu6050_Init+0x94>
	printf("pwr_mgmt1 error \n");
 8005fe4:	487a      	ldr	r0, [pc, #488]	; (80061d0 <Mpu6050_Init+0x278>)
 8005fe6:	f001 f8b7 	bl	8007158 <puts>
 8005fea:	e007      	b.n	8005ffc <Mpu6050_Init+0xa4>
}else if (data == 0x01 ) {
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d104      	bne.n	8005ffc <Mpu6050_Init+0xa4>
	printf("pwr_mgmt1 value : %d \n", data) ;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4877      	ldr	r0, [pc, #476]	; (80061d4 <Mpu6050_Init+0x27c>)
 8005ff8:	f001 f828 	bl	800704c <iprintf>
}


// Configuration CONFIG 0x1A 26
data = 0x01;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	2301      	movs	r3, #1
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	f107 030f 	add.w	r3, r7, #15
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2301      	movs	r3, #1
 8006012:	221a      	movs	r2, #26
 8006014:	21d0      	movs	r1, #208	; 0xd0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fc fc3a 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	9302      	str	r3, [sp, #8]
 8006022:	2301      	movs	r3, #1
 8006024:	9301      	str	r3, [sp, #4]
 8006026:	f107 030f 	add.w	r3, r7, #15
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2301      	movs	r3, #1
 800602e:	221a      	movs	r2, #26
 8006030:	21d0      	movs	r1, #208	; 0xd0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fc fd26 	bl	8002a84 <HAL_I2C_Mem_Read>

if (data != 0x01) {
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d003      	beq.n	8006046 <Mpu6050_Init+0xee>
	printf("config error \n");
 800603e:	4866      	ldr	r0, [pc, #408]	; (80061d8 <Mpu6050_Init+0x280>)
 8006040:	f001 f88a 	bl	8007158 <puts>
 8006044:	e007      	b.n	8006056 <Mpu6050_Init+0xfe>
}else if (data == 0x01 ) {
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d104      	bne.n	8006056 <Mpu6050_Init+0xfe>
	printf("config value : %d \n", data) ;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	4619      	mov	r1, r3
 8006050:	4862      	ldr	r0, [pc, #392]	; (80061dc <Mpu6050_Init+0x284>)
 8006052:	f000 fffb 	bl	800704c <iprintf>
}

// Sample rate divider
data = 0x04;
 8006056:	2304      	movs	r3, #4
 8006058:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	2301      	movs	r3, #1
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	f107 030f 	add.w	r3, r7, #15
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	2301      	movs	r3, #1
 800606c:	2219      	movs	r2, #25
 800606e:	21d0      	movs	r1, #208	; 0xd0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fc fc0d 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SMPLRT_DIV, 1, &data, 1, HAL_MAX_DELAY) ;
 8006076:	f04f 33ff 	mov.w	r3, #4294967295
 800607a:	9302      	str	r3, [sp, #8]
 800607c:	2301      	movs	r3, #1
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	f107 030f 	add.w	r3, r7, #15
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2301      	movs	r3, #1
 8006088:	2219      	movs	r2, #25
 800608a:	21d0      	movs	r1, #208	; 0xd0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fc fcf9 	bl	8002a84 <HAL_I2C_Mem_Read>

if (data != 0x04) {
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d003      	beq.n	80060a0 <Mpu6050_Init+0x148>
	printf("sample rate divider error \n");
 8006098:	4851      	ldr	r0, [pc, #324]	; (80061e0 <Mpu6050_Init+0x288>)
 800609a:	f001 f85d 	bl	8007158 <puts>
 800609e:	e007      	b.n	80060b0 <Mpu6050_Init+0x158>
}else if (data == 0x04 ) {
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d104      	bne.n	80060b0 <Mpu6050_Init+0x158>
	printf("sample rate divider value : %d \n", data) ;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	4619      	mov	r1, r3
 80060aa:	484e      	ldr	r0, [pc, #312]	; (80061e4 <Mpu6050_Init+0x28c>)
 80060ac:	f000 ffce 	bl	800704c <iprintf>
}


// Gyro Config
data = 0x08;
 80060b0:	2308      	movs	r3, #8
 80060b2:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	9302      	str	r3, [sp, #8]
 80060ba:	2301      	movs	r3, #1
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f107 030f 	add.w	r3, r7, #15
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2301      	movs	r3, #1
 80060c6:	221b      	movs	r2, #27
 80060c8:	21d0      	movs	r1, #208	; 0xd0
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fc fbe0 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, GYRO_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 80060d0:	f04f 33ff 	mov.w	r3, #4294967295
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	2301      	movs	r3, #1
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	f107 030f 	add.w	r3, r7, #15
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2301      	movs	r3, #1
 80060e2:	221b      	movs	r2, #27
 80060e4:	21d0      	movs	r1, #208	; 0xd0
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc fccc 	bl	8002a84 <HAL_I2C_Mem_Read>

if (data != 0x08) {
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d003      	beq.n	80060fa <Mpu6050_Init+0x1a2>
	printf("Gyro config error \n ");
 80060f2:	483d      	ldr	r0, [pc, #244]	; (80061e8 <Mpu6050_Init+0x290>)
 80060f4:	f000 ffaa 	bl	800704c <iprintf>
 80060f8:	e007      	b.n	800610a <Mpu6050_Init+0x1b2>
}else if (data == 0x08 ) {
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d104      	bne.n	800610a <Mpu6050_Init+0x1b2>
	printf("gyro config value : %d \n", data) ;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4619      	mov	r1, r3
 8006104:	4839      	ldr	r0, [pc, #228]	; (80061ec <Mpu6050_Init+0x294>)
 8006106:	f000 ffa1 	bl	800704c <iprintf>
}

// Accl Config
data = 0x00;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295
 8006112:	9302      	str	r3, [sp, #8]
 8006114:	2301      	movs	r3, #1
 8006116:	9301      	str	r3, [sp, #4]
 8006118:	f107 030f 	add.w	r3, r7, #15
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2301      	movs	r3, #1
 8006120:	221c      	movs	r2, #28
 8006122:	21d0      	movs	r1, #208	; 0xd0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fc fbb3 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &data, 1, HAL_MAX_DELAY) ;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	2301      	movs	r3, #1
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	f107 030f 	add.w	r3, r7, #15
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2301      	movs	r3, #1
 800613c:	221c      	movs	r2, #28
 800613e:	21d0      	movs	r1, #208	; 0xd0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc fc9f 	bl	8002a84 <HAL_I2C_Mem_Read>

if (data != 0x00) {
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <Mpu6050_Init+0x1fc>
	printf("Accl config error \n");
 800614c:	4828      	ldr	r0, [pc, #160]	; (80061f0 <Mpu6050_Init+0x298>)
 800614e:	f001 f803 	bl	8007158 <puts>
 8006152:	e007      	b.n	8006164 <Mpu6050_Init+0x20c>
}else if (data == 0x00 ) {
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <Mpu6050_Init+0x20c>
	printf("Accl config value : %d \n", data) ;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	4619      	mov	r1, r3
 800615e:	4825      	ldr	r0, [pc, #148]	; (80061f4 <Mpu6050_Init+0x29c>)
 8006160:	f000 ff74 	bl	800704c <iprintf>
}

// signal path reset
data = 0x07 ;
 8006164:	2307      	movs	r3, #7
 8006166:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Mem_Write(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	9302      	str	r3, [sp, #8]
 800616e:	2301      	movs	r3, #1
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	f107 030f 	add.w	r3, r7, #15
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	2301      	movs	r3, #1
 800617a:	2268      	movs	r2, #104	; 0x68
 800617c:	21d0      	movs	r1, #208	; 0xd0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc fb86 	bl	8002890 <HAL_I2C_Mem_Write>
HAL_I2C_Mem_Read(hi2c, MPU_ADDR, SIGNAL_PATH_RESET, 1, &data, 1, HAL_MAX_DELAY) ;
 8006184:	f04f 33ff 	mov.w	r3, #4294967295
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	2301      	movs	r3, #1
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	f107 030f 	add.w	r3, r7, #15
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2301      	movs	r3, #1
 8006196:	2268      	movs	r2, #104	; 0x68
 8006198:	21d0      	movs	r1, #208	; 0xd0
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fc fc72 	bl	8002a84 <HAL_I2C_Mem_Read>
if (data != 0x07) {
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b07      	cmp	r3, #7
 80061a4:	d003      	beq.n	80061ae <Mpu6050_Init+0x256>
	printf("(ignore) signal path reset error cannot read write only \n");
 80061a6:	4814      	ldr	r0, [pc, #80]	; (80061f8 <Mpu6050_Init+0x2a0>)
 80061a8:	f000 ffd6 	bl	8007158 <puts>
}else if (data == 0x07 ) {
	printf("signal path reset value : %d \n", data) ;
}

}
 80061ac:	e007      	b.n	80061be <Mpu6050_Init+0x266>
}else if (data == 0x07 ) {
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	d104      	bne.n	80061be <Mpu6050_Init+0x266>
	printf("signal path reset value : %d \n", data) ;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	4619      	mov	r1, r3
 80061b8:	4810      	ldr	r0, [pc, #64]	; (80061fc <Mpu6050_Init+0x2a4>)
 80061ba:	f000 ff47 	bl	800704c <iprintf>
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	08009c2c 	.word	0x08009c2c
 80061cc:	08009c3c 	.word	0x08009c3c
 80061d0:	08009c54 	.word	0x08009c54
 80061d4:	08009c68 	.word	0x08009c68
 80061d8:	08009c80 	.word	0x08009c80
 80061dc:	08009c90 	.word	0x08009c90
 80061e0:	08009ca4 	.word	0x08009ca4
 80061e4:	08009cc0 	.word	0x08009cc0
 80061e8:	08009ce4 	.word	0x08009ce4
 80061ec:	08009cfc 	.word	0x08009cfc
 80061f0:	08009d18 	.word	0x08009d18
 80061f4:	08009d2c 	.word	0x08009d2c
 80061f8:	08009d48 	.word	0x08009d48
 80061fc:	08009d84 	.word	0x08009d84

08006200 <gyro_calibrate>:
	printf("[DEBUG] pitch: %0.1lf ,roll=  %0.1lf ,yaw=  %0.1lf \n" , Gyro_Data->pitch , Gyro_Data->roll, Gyro_Data->yaw);
#endif

}

void gyro_calibrate (I2C_HandleTypeDef *hi2c , MPU_Gyro_calib_t * Calib_Data){
 8006200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006204:	b094      	sub	sp, #80	; 0x50
 8006206:	af04      	add	r7, sp, #16
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
	uint8_t data [6];
	int16_t gyro_x = 0 ;
 800620c:	2300      	movs	r3, #0
 800620e:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyro_y = 0 ;
 8006210:	2300      	movs	r3, #0
 8006212:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t gyro_z = 0 ;
 8006214:	2300      	movs	r3, #0
 8006216:	843b      	strh	r3, [r7, #32]

	float pitch , yaw , roll ;
	double pitch_cal =  0, yaw_cal =  0, roll_cal = 0;
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,16000  );
 800623c:	4b8a      	ldr	r3, [pc, #552]	; (8006468 <gyro_calibrate+0x268>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) ;
 8006246:	210c      	movs	r1, #12
 8006248:	4887      	ldr	r0, [pc, #540]	; (8006468 <gyro_calibrate+0x268>)
 800624a:	f7fe fc79 	bl	8004b40 <HAL_TIM_PWM_Start>
	printf("/////////// CALIBRATING GYRO \\\\\\\\\\\\\\\\\\\\ \n") ;
 800624e:	4887      	ldr	r0, [pc, #540]	; (800646c <gyro_calibrate+0x26c>)
 8006250:	f000 ff82 	bl	8007158 <puts>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8006254:	2300      	movs	r3, #0
 8006256:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006258:	e085      	b.n	8006366 <gyro_calibrate+0x166>

		// needed to communicate with i2c based devices like gyroscope mpu6050
	   HAL_I2C_Mem_Read(hi2c, MPU_ADDR,GYRO_XOUT_H , 1, data, 6, HAL_MAX_DELAY) ;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	9302      	str	r3, [sp, #8]
 8006260:	2306      	movs	r3, #6
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	f107 030c 	add.w	r3, r7, #12
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2301      	movs	r3, #1
 800626c:	2243      	movs	r2, #67	; 0x43
 800626e:	21d0      	movs	r1, #208	; 0xd0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fc fc07 	bl	8002a84 <HAL_I2C_Mem_Read>

	   gyro_x = data[0] << 8 | data[1] ;
 8006276:	7b3b      	ldrb	r3, [r7, #12]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	b21a      	sxth	r2, r3
 800627c:	7b7b      	ldrb	r3, [r7, #13]
 800627e:	b21b      	sxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	84bb      	strh	r3, [r7, #36]	; 0x24
	   gyro_y = data[2] << 8 | data[3] ;
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	b21a      	sxth	r2, r3
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	b21b      	sxth	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	847b      	strh	r3, [r7, #34]	; 0x22
	   gyro_z = data[4] << 8 | data[5] ;
 8006292:	7c3b      	ldrb	r3, [r7, #16]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	b21a      	sxth	r2, r3
 8006298:	7c7b      	ldrb	r3, [r7, #17]
 800629a:	b21b      	sxth	r3, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	843b      	strh	r3, [r7, #32]

	   pitch = gyro_x  / 65.5 ; // change in x
 80062a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fa f8ad 	bl	8000404 <__aeabi_i2d>
 80062aa:	a36d      	add	r3, pc, #436	; (adr r3, 8006460 <gyro_calibrate+0x260>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa fa3c 	bl	800072c <__aeabi_ddiv>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4610      	mov	r0, r2
 80062ba:	4619      	mov	r1, r3
 80062bc:	f7fa fbe4 	bl	8000a88 <__aeabi_d2f>
 80062c0:	4603      	mov	r3, r0
 80062c2:	61fb      	str	r3, [r7, #28]
	   roll  = gyro_y  / 65.5 ;	// change in y
 80062c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fa f89b 	bl	8000404 <__aeabi_i2d>
 80062ce:	a364      	add	r3, pc, #400	; (adr r3, 8006460 <gyro_calibrate+0x260>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa fa2a 	bl	800072c <__aeabi_ddiv>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	f7fa fbd2 	bl	8000a88 <__aeabi_d2f>
 80062e4:	4603      	mov	r3, r0
 80062e6:	61bb      	str	r3, [r7, #24]
	   yaw   = gyro_z  / 65.5 ;	// change in z
 80062e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fa f889 	bl	8000404 <__aeabi_i2d>
 80062f2:	a35b      	add	r3, pc, #364	; (adr r3, 8006460 <gyro_calibrate+0x260>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7fa fa18 	bl	800072c <__aeabi_ddiv>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	f7fa fbc0 	bl	8000a88 <__aeabi_d2f>
 8006308:	4603      	mov	r3, r0
 800630a:	617b      	str	r3, [r7, #20]

	   pitch_cal += pitch ;  // this means pitch_cal = pitch + pitch_cal
 800630c:	69f8      	ldr	r0, [r7, #28]
 800630e:	f7fa f88b 	bl	8000428 <__aeabi_f2d>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800631a:	f7f9 ff27 	bl	800016c <__adddf3>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	   roll_cal += roll ;
 8006326:	69b8      	ldr	r0, [r7, #24]
 8006328:	f7fa f87e 	bl	8000428 <__aeabi_f2d>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006334:	f7f9 ff1a 	bl	800016c <__adddf3>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	   yaw_cal += yaw ;
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f7fa f871 	bl	8000428 <__aeabi_f2d>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800634e:	f7f9 ff0d 	bl	800016c <__adddf3>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	   HAL_Delay(1) ;
 800635a:	2001      	movs	r0, #1
 800635c:	f7fb fe86 	bl	800206c <HAL_Delay>
	for (uint16_t i = 0; i  < 4000 ; i++) {
 8006360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006362:	3301      	adds	r3, #1
 8006364:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006368:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800636c:	f4ff af75 	bcc.w	800625a <gyro_calibrate+0x5a>
	}

	// taking average
	pitch_cal = pitch_cal/ 4000  ;
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <gyro_calibrate+0x270>)
 8006376:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800637a:	f7fa f9d7 	bl	800072c <__aeabi_ddiv>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	roll_cal  = roll_cal / 4000  ;
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <gyro_calibrate+0x270>)
 800638c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006390:	f7fa f9cc 	bl	800072c <__aeabi_ddiv>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	yaw_cal   = yaw_cal  / 4000  ;
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	4b33      	ldr	r3, [pc, #204]	; (8006470 <gyro_calibrate+0x270>)
 80063a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80063a6:	f7fa f9c1 	bl	800072c <__aeabi_ddiv>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	printf("cal values are  %lf , %lf , %lf \n" , pitch_cal , roll_cal , yaw_cal);
 80063b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063be:	e9cd 2300 	strd	r2, r3, [sp]
 80063c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063c6:	482b      	ldr	r0, [pc, #172]	; (8006474 <gyro_calibrate+0x274>)
 80063c8:	f000 fe40 	bl	800704c <iprintf>

	Calib_Data->pitch = pitch_cal ;
 80063cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80063d0:	f7fa fb5a 	bl	8000a88 <__aeabi_d2f>
 80063d4:	4602      	mov	r2, r0
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	601a      	str	r2, [r3, #0]
	Calib_Data->roll  = roll_cal;
 80063da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063de:	f7fa fb53 	bl	8000a88 <__aeabi_d2f>
 80063e2:	4602      	mov	r2, r0
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	605a      	str	r2, [r3, #4]
	Calib_Data->yaw   = yaw_cal;
 80063e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80063ec:	f7fa fb4c 	bl	8000a88 <__aeabi_d2f>
 80063f0:	4602      	mov	r2, r0
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	609a      	str	r2, [r3, #8]

	printf("cal values are =  pitch : %lf ,roll: %lf ,yaw: %lf \n" , Calib_Data->pitch ,Calib_Data->roll , Calib_Data->yaw);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fa f814 	bl	8000428 <__aeabi_f2d>
 8006400:	4680      	mov	r8, r0
 8006402:	4689      	mov	r9, r1
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	f7fa f80d 	bl	8000428 <__aeabi_f2d>
 800640e:	4604      	mov	r4, r0
 8006410:	460d      	mov	r5, r1
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fa f806 	bl	8000428 <__aeabi_f2d>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006424:	e9cd 4500 	strd	r4, r5, [sp]
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	4812      	ldr	r0, [pc, #72]	; (8006478 <gyro_calibrate+0x278>)
 800642e:	f000 fe0d 	bl	800704c <iprintf>

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_4 ,0);
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <gyro_calibrate+0x268>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	641a      	str	r2, [r3, #64]	; 0x40

	__HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_3 ,32000);
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <gyro_calibrate+0x268>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8006442:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) ;
 8006444:	2108      	movs	r1, #8
 8006446:	4808      	ldr	r0, [pc, #32]	; (8006468 <gyro_calibrate+0x268>)
 8006448:	f7fe fb7a 	bl	8004b40 <HAL_TIM_PWM_Start>
printf("/////////////// DONE GYRO CALIBRATION \\\\\\\\\\\\\\\\\\\\ \n") ;
 800644c:	480b      	ldr	r0, [pc, #44]	; (800647c <gyro_calibrate+0x27c>)
 800644e:	f000 fe83 	bl	8007158 <puts>

	}
	printf("[DEBUG] ///////// SAMPLE DATA END \\\\\\\\\\\ \n") ;
#endif

}
 8006452:	bf00      	nop
 8006454:	3740      	adds	r7, #64	; 0x40
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800645c:	f3af 8000 	nop.w
 8006460:	00000000 	.word	0x00000000
 8006464:	40506000 	.word	0x40506000
 8006468:	20000334 	.word	0x20000334
 800646c:	08009da4 	.word	0x08009da4
 8006470:	40af4000 	.word	0x40af4000
 8006474:	08009dd0 	.word	0x08009dd0
 8006478:	08009df4 	.word	0x08009df4
 800647c:	08009e2c 	.word	0x08009e2c

08006480 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006492:	b2db      	uxtb	r3, r3
 8006494:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8006496:	2300      	movs	r3, #0
 8006498:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6958      	ldr	r0, [r3, #20]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2200      	movs	r2, #0
 80064aa:	4619      	mov	r1, r3
 80064ac:	f7fc f894 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6998      	ldr	r0, [r3, #24]
 80064b6:	f107 010f 	add.w	r1, r7, #15
 80064ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064be:	2201      	movs	r2, #1
 80064c0:	f7fd fd90 	bl	8003fe4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80064c4:	bf00      	nop
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe f994 	bl	80047fa <HAL_SPI_GetState>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d1f6      	bne.n	80064c6 <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6998      	ldr	r0, [r3, #24]
 80064de:	f107 010e 	add.w	r1, r7, #14
 80064e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064e6:	2201      	movs	r2, #1
 80064e8:	f7fd febf 	bl	800426a <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80064ec:	bf00      	nop
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe f980 	bl	80047fa <HAL_SPI_GetState>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d1f6      	bne.n	80064ee <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6958      	ldr	r0, [r3, #20]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	b29b      	uxth	r3, r3
 800650e:	2201      	movs	r2, #1
 8006510:	4619      	mov	r1, r3
 8006512:	f7fc f861 	bl	80025d8 <HAL_GPIO_WritePin>
	return rxByte;
 8006516:	7bbb      	ldrb	r3, [r7, #14]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
 800652c:	4613      	mov	r3, r2
 800652e:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006536:	b2db      	uxtb	r3, r3
 8006538:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6958      	ldr	r0, [r3, #20]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	b29b      	uxth	r3, r3
 8006548:	2200      	movs	r2, #0
 800654a:	4619      	mov	r1, r3
 800654c:	f7fc f844 	bl	80025d8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6998      	ldr	r0, [r3, #24]
 8006556:	f107 010f 	add.w	r1, r7, #15
 800655a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800655e:	2201      	movs	r2, #1
 8006560:	f7fd fd40 	bl	8003fe4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8006564:	bf00      	nop
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe f944 	bl	80047fa <HAL_SPI_GetState>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	d1f6      	bne.n	8006566 <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6998      	ldr	r0, [r3, #24]
 800657e:	1cb9      	adds	r1, r7, #2
 8006580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006584:	2201      	movs	r2, #1
 8006586:	f7fd fd2d 	bl	8003fe4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800658a:	bf00      	nop
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe f931 	bl	80047fa <HAL_SPI_GetState>
 8006598:	4603      	mov	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d1f6      	bne.n	800658c <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6958      	ldr	r0, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2201      	movs	r2, #1
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7fc f812 	bl	80025d8 <HAL_GPIO_WritePin>
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <lora_init>:

uint8_t lora_init(lora_t * module){
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_RESET);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6858      	ldr	r0, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2200      	movs	r2, #0
 80065d4:	4619      	mov	r1, r3
 80065d6:	f7fb ffff 	bl	80025d8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80065da:	200a      	movs	r0, #10
 80065dc:	f7fb fd46 	bl	800206c <HAL_Delay>
  HAL_GPIO_WritePin(module->pin->reset.port, module->pin->reset.pin, GPIO_PIN_SET);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6858      	ldr	r0, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2201      	movs	r2, #1
 80065f0:	4619      	mov	r1, r3
 80065f2:	f7fb fff1 	bl	80025d8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80065f6:	200a      	movs	r0, #10
 80065f8:	f7fb fd38 	bl	800206c <HAL_Delay>
	
	ret = lora_read_reg(module, REG_VERSION);
 80065fc:	2142      	movs	r1, #66	; 0x42
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7ff ff3e 	bl	8006480 <lora_read_reg>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
	if(ret != 0x12){
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b12      	cmp	r3, #18
 800660c:	d006      	beq.n	800661c <lora_init+0x60>
		printf("%d \n" ,ret );
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	4619      	mov	r1, r3
 8006612:	4820      	ldr	r0, [pc, #128]	; (8006694 <lora_init+0xd8>)
 8006614:	f000 fd1a 	bl	800704c <iprintf>
		return 1;
 8006618:	2301      	movs	r3, #1
 800661a:	e037      	b.n	800668c <lora_init+0xd0>
	}
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_SLEEP));
 800661c:	2280      	movs	r2, #128	; 0x80
 800661e:	2101      	movs	r1, #1
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff7d 	bl	8006520 <lora_write_reg>
	//lora_write_reg(module, REG_FRF_MSB, 0x6C);
	//lora_write_reg(module, REG_FRF_MID, 0x40);
	//lora_write_reg(module, REG_FRF_LSB, 0x00);
	lora_set_frequency(module, FREQUENCY[module->frequency]);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	4a1b      	ldr	r2, [pc, #108]	; (8006698 <lora_init+0xdc>)
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	4413      	add	r3, r2
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f831 	bl	800669c <lora_set_frequency>
	lora_write_reg(module, REG_FIFO_TX_BASE_ADDR, 0);
 800663a:	2200      	movs	r2, #0
 800663c:	210e      	movs	r1, #14
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff6e 	bl	8006520 <lora_write_reg>
	lora_write_reg(module, REG_FIFO_RX_BASE_ADDR, 0);
 8006644:	2200      	movs	r2, #0
 8006646:	210f      	movs	r1, #15
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ff69 	bl	8006520 <lora_write_reg>
	ret = lora_read_reg(module, REG_LNA);
 800664e:	210c      	movs	r1, #12
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ff15 	bl	8006480 <lora_read_reg>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
	lora_write_reg(module, REG_LNA, ret | 0x03);
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	f043 0303 	orr.w	r3, r3, #3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	210c      	movs	r1, #12
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff5a 	bl	8006520 <lora_write_reg>
	lora_write_reg(module, REG_MODEM_CONFIG_3, 0x04);
 800666c:	2204      	movs	r2, #4
 800666e:	2126      	movs	r1, #38	; 0x26
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ff55 	bl	8006520 <lora_write_reg>
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
 8006676:	228f      	movs	r2, #143	; 0x8f
 8006678:	2109      	movs	r1, #9
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ff50 	bl	8006520 <lora_write_reg>
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
 8006680:	2281      	movs	r2, #129	; 0x81
 8006682:	2101      	movs	r1, #1
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff4b 	bl	8006520 <lora_write_reg>
	return 0;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	08009e60 	.word	0x08009e60
 8006698:	08009e98 	.word	0x08009e98

0800669c <lora_set_frequency>:
  }
  lora_write_reg(module, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	return 0;
}

void lora_set_frequency(lora_t * module, uint64_t freq){
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 80066a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ac:	f04f 0000 	mov.w	r0, #0
 80066b0:	f04f 0100 	mov.w	r1, #0
 80066b4:	04d9      	lsls	r1, r3, #19
 80066b6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80066ba:	04d0      	lsls	r0, r2, #19
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <lora_set_frequency+0x88>)
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	f7fa fd1b 	bl	80010fc <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
  lora_write_reg(module, REG_FRF_MSB, (uint8_t)(frf >> 16));
 80066ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	0c02      	lsrs	r2, r0, #16
 80066dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066e0:	0c0b      	lsrs	r3, r1, #16
 80066e2:	b2d3      	uxtb	r3, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	2106      	movs	r1, #6
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff ff19 	bl	8006520 <lora_write_reg>
  lora_write_reg(module,REG_FRF_MID, (uint8_t)(frf >> 8));
 80066ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	0a02      	lsrs	r2, r0, #8
 80066fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8006700:	0a0b      	lsrs	r3, r1, #8
 8006702:	b2d3      	uxtb	r3, r2
 8006704:	461a      	mov	r2, r3
 8006706:	2107      	movs	r1, #7
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ff09 	bl	8006520 <lora_write_reg>
  lora_write_reg(module,REG_FRF_LSB, (uint8_t)(frf >> 0));
 800670e:	7c3b      	ldrb	r3, [r7, #16]
 8006710:	461a      	mov	r2, r3
 8006712:	2108      	movs	r1, #8
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ff03 	bl	8006520 <lora_write_reg>
}
 800671a:	bf00      	nop
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	01e84800 	.word	0x01e84800

08006728 <__errno>:
 8006728:	4b01      	ldr	r3, [pc, #4]	; (8006730 <__errno+0x8>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	2000000c 	.word	0x2000000c

08006734 <__libc_init_array>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	2600      	movs	r6, #0
 8006738:	4d0c      	ldr	r5, [pc, #48]	; (800676c <__libc_init_array+0x38>)
 800673a:	4c0d      	ldr	r4, [pc, #52]	; (8006770 <__libc_init_array+0x3c>)
 800673c:	1b64      	subs	r4, r4, r5
 800673e:	10a4      	asrs	r4, r4, #2
 8006740:	42a6      	cmp	r6, r4
 8006742:	d109      	bne.n	8006758 <__libc_init_array+0x24>
 8006744:	f003 fa36 	bl	8009bb4 <_init>
 8006748:	2600      	movs	r6, #0
 800674a:	4d0a      	ldr	r5, [pc, #40]	; (8006774 <__libc_init_array+0x40>)
 800674c:	4c0a      	ldr	r4, [pc, #40]	; (8006778 <__libc_init_array+0x44>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	42a6      	cmp	r6, r4
 8006754:	d105      	bne.n	8006762 <__libc_init_array+0x2e>
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	f855 3b04 	ldr.w	r3, [r5], #4
 800675c:	4798      	blx	r3
 800675e:	3601      	adds	r6, #1
 8006760:	e7ee      	b.n	8006740 <__libc_init_array+0xc>
 8006762:	f855 3b04 	ldr.w	r3, [r5], #4
 8006766:	4798      	blx	r3
 8006768:	3601      	adds	r6, #1
 800676a:	e7f2      	b.n	8006752 <__libc_init_array+0x1e>
 800676c:	0800a2b4 	.word	0x0800a2b4
 8006770:	0800a2b4 	.word	0x0800a2b4
 8006774:	0800a2b4 	.word	0x0800a2b4
 8006778:	0800a2b8 	.word	0x0800a2b8

0800677c <memset>:
 800677c:	4603      	mov	r3, r0
 800677e:	4402      	add	r2, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <__cvt>:
 800678c:	2b00      	cmp	r3, #0
 800678e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006792:	461f      	mov	r7, r3
 8006794:	bfbb      	ittet	lt
 8006796:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800679a:	461f      	movlt	r7, r3
 800679c:	2300      	movge	r3, #0
 800679e:	232d      	movlt	r3, #45	; 0x2d
 80067a0:	b088      	sub	sp, #32
 80067a2:	4614      	mov	r4, r2
 80067a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80067b0:	f023 0820 	bic.w	r8, r3, #32
 80067b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b8:	d005      	beq.n	80067c6 <__cvt+0x3a>
 80067ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067be:	d100      	bne.n	80067c2 <__cvt+0x36>
 80067c0:	3501      	adds	r5, #1
 80067c2:	2302      	movs	r3, #2
 80067c4:	e000      	b.n	80067c8 <__cvt+0x3c>
 80067c6:	2303      	movs	r3, #3
 80067c8:	aa07      	add	r2, sp, #28
 80067ca:	9204      	str	r2, [sp, #16]
 80067cc:	aa06      	add	r2, sp, #24
 80067ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80067d2:	e9cd 3500 	strd	r3, r5, [sp]
 80067d6:	4622      	mov	r2, r4
 80067d8:	463b      	mov	r3, r7
 80067da:	f000 fe11 	bl	8007400 <_dtoa_r>
 80067de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067e2:	4606      	mov	r6, r0
 80067e4:	d102      	bne.n	80067ec <__cvt+0x60>
 80067e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067e8:	07db      	lsls	r3, r3, #31
 80067ea:	d522      	bpl.n	8006832 <__cvt+0xa6>
 80067ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067f0:	eb06 0905 	add.w	r9, r6, r5
 80067f4:	d110      	bne.n	8006818 <__cvt+0x8c>
 80067f6:	7833      	ldrb	r3, [r6, #0]
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d10a      	bne.n	8006812 <__cvt+0x86>
 80067fc:	2200      	movs	r2, #0
 80067fe:	2300      	movs	r3, #0
 8006800:	4620      	mov	r0, r4
 8006802:	4639      	mov	r1, r7
 8006804:	f7fa f8d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006808:	b918      	cbnz	r0, 8006812 <__cvt+0x86>
 800680a:	f1c5 0501 	rsb	r5, r5, #1
 800680e:	f8ca 5000 	str.w	r5, [sl]
 8006812:	f8da 3000 	ldr.w	r3, [sl]
 8006816:	4499      	add	r9, r3
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	4620      	mov	r0, r4
 800681e:	4639      	mov	r1, r7
 8006820:	f7fa f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8006824:	b108      	cbz	r0, 800682a <__cvt+0x9e>
 8006826:	f8cd 901c 	str.w	r9, [sp, #28]
 800682a:	2230      	movs	r2, #48	; 0x30
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	454b      	cmp	r3, r9
 8006830:	d307      	bcc.n	8006842 <__cvt+0xb6>
 8006832:	4630      	mov	r0, r6
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006838:	1b9b      	subs	r3, r3, r6
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	b008      	add	sp, #32
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	1c59      	adds	r1, r3, #1
 8006844:	9107      	str	r1, [sp, #28]
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	e7f0      	b.n	800682c <__cvt+0xa0>

0800684a <__exponent>:
 800684a:	4603      	mov	r3, r0
 800684c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684e:	2900      	cmp	r1, #0
 8006850:	f803 2b02 	strb.w	r2, [r3], #2
 8006854:	bfb6      	itet	lt
 8006856:	222d      	movlt	r2, #45	; 0x2d
 8006858:	222b      	movge	r2, #43	; 0x2b
 800685a:	4249      	neglt	r1, r1
 800685c:	2909      	cmp	r1, #9
 800685e:	7042      	strb	r2, [r0, #1]
 8006860:	dd2b      	ble.n	80068ba <__exponent+0x70>
 8006862:	f10d 0407 	add.w	r4, sp, #7
 8006866:	46a4      	mov	ip, r4
 8006868:	270a      	movs	r7, #10
 800686a:	fb91 f6f7 	sdiv	r6, r1, r7
 800686e:	460a      	mov	r2, r1
 8006870:	46a6      	mov	lr, r4
 8006872:	fb07 1516 	mls	r5, r7, r6, r1
 8006876:	2a63      	cmp	r2, #99	; 0x63
 8006878:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800687c:	4631      	mov	r1, r6
 800687e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006886:	dcf0      	bgt.n	800686a <__exponent+0x20>
 8006888:	3130      	adds	r1, #48	; 0x30
 800688a:	f1ae 0502 	sub.w	r5, lr, #2
 800688e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006892:	4629      	mov	r1, r5
 8006894:	1c44      	adds	r4, r0, #1
 8006896:	4561      	cmp	r1, ip
 8006898:	d30a      	bcc.n	80068b0 <__exponent+0x66>
 800689a:	f10d 0209 	add.w	r2, sp, #9
 800689e:	eba2 020e 	sub.w	r2, r2, lr
 80068a2:	4565      	cmp	r5, ip
 80068a4:	bf88      	it	hi
 80068a6:	2200      	movhi	r2, #0
 80068a8:	4413      	add	r3, r2
 80068aa:	1a18      	subs	r0, r3, r0
 80068ac:	b003      	add	sp, #12
 80068ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068b8:	e7ed      	b.n	8006896 <__exponent+0x4c>
 80068ba:	2330      	movs	r3, #48	; 0x30
 80068bc:	3130      	adds	r1, #48	; 0x30
 80068be:	7083      	strb	r3, [r0, #2]
 80068c0:	70c1      	strb	r1, [r0, #3]
 80068c2:	1d03      	adds	r3, r0, #4
 80068c4:	e7f1      	b.n	80068aa <__exponent+0x60>
	...

080068c8 <_printf_float>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b091      	sub	sp, #68	; 0x44
 80068ce:	460c      	mov	r4, r1
 80068d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80068d4:	4616      	mov	r6, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	4605      	mov	r5, r0
 80068da:	f001 fd33 	bl	8008344 <_localeconv_r>
 80068de:	6803      	ldr	r3, [r0, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	9309      	str	r3, [sp, #36]	; 0x24
 80068e4:	f7f9 fc34 	bl	8000150 <strlen>
 80068e8:	2300      	movs	r3, #0
 80068ea:	930e      	str	r3, [sp, #56]	; 0x38
 80068ec:	f8d8 3000 	ldr.w	r3, [r8]
 80068f0:	900a      	str	r0, [sp, #40]	; 0x28
 80068f2:	3307      	adds	r3, #7
 80068f4:	f023 0307 	bic.w	r3, r3, #7
 80068f8:	f103 0208 	add.w	r2, r3, #8
 80068fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006900:	f8d4 b000 	ldr.w	fp, [r4]
 8006904:	f8c8 2000 	str.w	r2, [r8]
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006910:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006914:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006918:	930b      	str	r3, [sp, #44]	; 0x2c
 800691a:	f04f 32ff 	mov.w	r2, #4294967295
 800691e:	4640      	mov	r0, r8
 8006920:	4b9c      	ldr	r3, [pc, #624]	; (8006b94 <_printf_float+0x2cc>)
 8006922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006924:	f7fa f872 	bl	8000a0c <__aeabi_dcmpun>
 8006928:	bb70      	cbnz	r0, 8006988 <_printf_float+0xc0>
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	4640      	mov	r0, r8
 8006930:	4b98      	ldr	r3, [pc, #608]	; (8006b94 <_printf_float+0x2cc>)
 8006932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006934:	f7fa f84c 	bl	80009d0 <__aeabi_dcmple>
 8006938:	bb30      	cbnz	r0, 8006988 <_printf_float+0xc0>
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	4640      	mov	r0, r8
 8006940:	4651      	mov	r1, sl
 8006942:	f7fa f83b 	bl	80009bc <__aeabi_dcmplt>
 8006946:	b110      	cbz	r0, 800694e <_printf_float+0x86>
 8006948:	232d      	movs	r3, #45	; 0x2d
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800694e:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <_printf_float+0x2d0>)
 8006950:	4892      	ldr	r0, [pc, #584]	; (8006b9c <_printf_float+0x2d4>)
 8006952:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006956:	bf94      	ite	ls
 8006958:	4698      	movls	r8, r3
 800695a:	4680      	movhi	r8, r0
 800695c:	2303      	movs	r3, #3
 800695e:	f04f 0a00 	mov.w	sl, #0
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	f02b 0304 	bic.w	r3, fp, #4
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	4633      	mov	r3, r6
 800696c:	4621      	mov	r1, r4
 800696e:	4628      	mov	r0, r5
 8006970:	9700      	str	r7, [sp, #0]
 8006972:	aa0f      	add	r2, sp, #60	; 0x3c
 8006974:	f000 f9d4 	bl	8006d20 <_printf_common>
 8006978:	3001      	adds	r0, #1
 800697a:	f040 8090 	bne.w	8006a9e <_printf_float+0x1d6>
 800697e:	f04f 30ff 	mov.w	r0, #4294967295
 8006982:	b011      	add	sp, #68	; 0x44
 8006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006988:	4642      	mov	r2, r8
 800698a:	4653      	mov	r3, sl
 800698c:	4640      	mov	r0, r8
 800698e:	4651      	mov	r1, sl
 8006990:	f7fa f83c 	bl	8000a0c <__aeabi_dcmpun>
 8006994:	b148      	cbz	r0, 80069aa <_printf_float+0xe2>
 8006996:	f1ba 0f00 	cmp.w	sl, #0
 800699a:	bfb8      	it	lt
 800699c:	232d      	movlt	r3, #45	; 0x2d
 800699e:	4880      	ldr	r0, [pc, #512]	; (8006ba0 <_printf_float+0x2d8>)
 80069a0:	bfb8      	it	lt
 80069a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069a6:	4b7f      	ldr	r3, [pc, #508]	; (8006ba4 <_printf_float+0x2dc>)
 80069a8:	e7d3      	b.n	8006952 <_printf_float+0x8a>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	d142      	bne.n	8006a3a <_printf_float+0x172>
 80069b4:	2306      	movs	r3, #6
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	9206      	str	r2, [sp, #24]
 80069bc:	aa0e      	add	r2, sp, #56	; 0x38
 80069be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80069c2:	aa0d      	add	r2, sp, #52	; 0x34
 80069c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80069c8:	9203      	str	r2, [sp, #12]
 80069ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80069ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	4642      	mov	r2, r8
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4628      	mov	r0, r5
 80069dc:	4653      	mov	r3, sl
 80069de:	910b      	str	r1, [sp, #44]	; 0x2c
 80069e0:	f7ff fed4 	bl	800678c <__cvt>
 80069e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069e6:	4680      	mov	r8, r0
 80069e8:	2947      	cmp	r1, #71	; 0x47
 80069ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069ec:	d108      	bne.n	8006a00 <_printf_float+0x138>
 80069ee:	1cc8      	adds	r0, r1, #3
 80069f0:	db02      	blt.n	80069f8 <_printf_float+0x130>
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	4299      	cmp	r1, r3
 80069f6:	dd40      	ble.n	8006a7a <_printf_float+0x1b2>
 80069f8:	f1a9 0902 	sub.w	r9, r9, #2
 80069fc:	fa5f f989 	uxtb.w	r9, r9
 8006a00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a04:	d81f      	bhi.n	8006a46 <_printf_float+0x17e>
 8006a06:	464a      	mov	r2, r9
 8006a08:	3901      	subs	r1, #1
 8006a0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a0e:	910d      	str	r1, [sp, #52]	; 0x34
 8006a10:	f7ff ff1b 	bl	800684a <__exponent>
 8006a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a16:	4682      	mov	sl, r0
 8006a18:	1813      	adds	r3, r2, r0
 8006a1a:	2a01      	cmp	r2, #1
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	dc02      	bgt.n	8006a26 <_printf_float+0x15e>
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	07d2      	lsls	r2, r2, #31
 8006a24:	d501      	bpl.n	8006a2a <_printf_float+0x162>
 8006a26:	3301      	adds	r3, #1
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d09b      	beq.n	800696a <_printf_float+0xa2>
 8006a32:	232d      	movs	r3, #45	; 0x2d
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a38:	e797      	b.n	800696a <_printf_float+0xa2>
 8006a3a:	2947      	cmp	r1, #71	; 0x47
 8006a3c:	d1bc      	bne.n	80069b8 <_printf_float+0xf0>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ba      	bne.n	80069b8 <_printf_float+0xf0>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7b7      	b.n	80069b6 <_printf_float+0xee>
 8006a46:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a4a:	d118      	bne.n	8006a7e <_printf_float+0x1b6>
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	dd0b      	ble.n	8006a6a <_printf_float+0x1a2>
 8006a52:	6121      	str	r1, [r4, #16]
 8006a54:	b913      	cbnz	r3, 8006a5c <_printf_float+0x194>
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	07d0      	lsls	r0, r2, #31
 8006a5a:	d502      	bpl.n	8006a62 <_printf_float+0x19a>
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	440b      	add	r3, r1
 8006a60:	6123      	str	r3, [r4, #16]
 8006a62:	f04f 0a00 	mov.w	sl, #0
 8006a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a68:	e7df      	b.n	8006a2a <_printf_float+0x162>
 8006a6a:	b913      	cbnz	r3, 8006a72 <_printf_float+0x1aa>
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	07d2      	lsls	r2, r2, #31
 8006a70:	d501      	bpl.n	8006a76 <_printf_float+0x1ae>
 8006a72:	3302      	adds	r3, #2
 8006a74:	e7f4      	b.n	8006a60 <_printf_float+0x198>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e7f2      	b.n	8006a60 <_printf_float+0x198>
 8006a7a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a80:	4299      	cmp	r1, r3
 8006a82:	db05      	blt.n	8006a90 <_printf_float+0x1c8>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	6121      	str	r1, [r4, #16]
 8006a88:	07d8      	lsls	r0, r3, #31
 8006a8a:	d5ea      	bpl.n	8006a62 <_printf_float+0x19a>
 8006a8c:	1c4b      	adds	r3, r1, #1
 8006a8e:	e7e7      	b.n	8006a60 <_printf_float+0x198>
 8006a90:	2900      	cmp	r1, #0
 8006a92:	bfcc      	ite	gt
 8006a94:	2201      	movgt	r2, #1
 8006a96:	f1c1 0202 	rsble	r2, r1, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	e7e0      	b.n	8006a60 <_printf_float+0x198>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	055a      	lsls	r2, r3, #21
 8006aa2:	d407      	bmi.n	8006ab4 <_printf_float+0x1ec>
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d12b      	bne.n	8006b0a <_printf_float+0x242>
 8006ab2:	e764      	b.n	800697e <_printf_float+0xb6>
 8006ab4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ab8:	f240 80dd 	bls.w	8006c76 <_printf_float+0x3ae>
 8006abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f7f9 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d033      	beq.n	8006b34 <_printf_float+0x26c>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	4a35      	ldr	r2, [pc, #212]	; (8006ba8 <_printf_float+0x2e0>)
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af51 	beq.w	800697e <_printf_float+0xb6>
 8006adc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	db02      	blt.n	8006aea <_printf_float+0x222>
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	07d8      	lsls	r0, r3, #31
 8006ae8:	d50f      	bpl.n	8006b0a <_printf_float+0x242>
 8006aea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	f43f af42 	beq.w	800697e <_printf_float+0xb6>
 8006afa:	f04f 0800 	mov.w	r8, #0
 8006afe:	f104 091a 	add.w	r9, r4, #26
 8006b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b04:	3b01      	subs	r3, #1
 8006b06:	4543      	cmp	r3, r8
 8006b08:	dc09      	bgt.n	8006b1e <_printf_float+0x256>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	079b      	lsls	r3, r3, #30
 8006b0e:	f100 8102 	bmi.w	8006d16 <_printf_float+0x44e>
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bfb8      	it	lt
 8006b1a:	4618      	movlt	r0, r3
 8006b1c:	e731      	b.n	8006982 <_printf_float+0xba>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	464a      	mov	r2, r9
 8006b22:	4631      	mov	r1, r6
 8006b24:	4628      	mov	r0, r5
 8006b26:	47b8      	blx	r7
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f43f af28 	beq.w	800697e <_printf_float+0xb6>
 8006b2e:	f108 0801 	add.w	r8, r8, #1
 8006b32:	e7e6      	b.n	8006b02 <_printf_float+0x23a>
 8006b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	dc38      	bgt.n	8006bac <_printf_float+0x2e4>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <_printf_float+0x2e0>)
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f af1a 	beq.w	800697e <_printf_float+0xb6>
 8006b4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	d102      	bne.n	8006b58 <_printf_float+0x290>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	d5d8      	bpl.n	8006b0a <_printf_float+0x242>
 8006b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	f43f af0b 	beq.w	800697e <_printf_float+0xb6>
 8006b68:	f04f 0900 	mov.w	r9, #0
 8006b6c:	f104 0a1a 	add.w	sl, r4, #26
 8006b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b72:	425b      	negs	r3, r3
 8006b74:	454b      	cmp	r3, r9
 8006b76:	dc01      	bgt.n	8006b7c <_printf_float+0x2b4>
 8006b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b7a:	e794      	b.n	8006aa6 <_printf_float+0x1de>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	47b8      	blx	r7
 8006b86:	3001      	adds	r0, #1
 8006b88:	f43f aef9 	beq.w	800697e <_printf_float+0xb6>
 8006b8c:	f109 0901 	add.w	r9, r9, #1
 8006b90:	e7ee      	b.n	8006b70 <_printf_float+0x2a8>
 8006b92:	bf00      	nop
 8006b94:	7fefffff 	.word	0x7fefffff
 8006b98:	08009ebc 	.word	0x08009ebc
 8006b9c:	08009ec0 	.word	0x08009ec0
 8006ba0:	08009ec8 	.word	0x08009ec8
 8006ba4:	08009ec4 	.word	0x08009ec4
 8006ba8:	08009ecc 	.word	0x08009ecc
 8006bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	bfa8      	it	ge
 8006bb4:	461a      	movge	r2, r3
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	4691      	mov	r9, r2
 8006bba:	dc37      	bgt.n	8006c2c <_printf_float+0x364>
 8006bbc:	f04f 0b00 	mov.w	fp, #0
 8006bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bc4:	f104 021a 	add.w	r2, r4, #26
 8006bc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006bcc:	ebaa 0309 	sub.w	r3, sl, r9
 8006bd0:	455b      	cmp	r3, fp
 8006bd2:	dc33      	bgt.n	8006c3c <_printf_float+0x374>
 8006bd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	db3b      	blt.n	8006c54 <_printf_float+0x38c>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	07da      	lsls	r2, r3, #31
 8006be0:	d438      	bmi.n	8006c54 <_printf_float+0x38c>
 8006be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006be4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006be6:	eba3 020a 	sub.w	r2, r3, sl
 8006bea:	eba3 0901 	sub.w	r9, r3, r1
 8006bee:	4591      	cmp	r9, r2
 8006bf0:	bfa8      	it	ge
 8006bf2:	4691      	movge	r9, r2
 8006bf4:	f1b9 0f00 	cmp.w	r9, #0
 8006bf8:	dc34      	bgt.n	8006c64 <_printf_float+0x39c>
 8006bfa:	f04f 0800 	mov.w	r8, #0
 8006bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c02:	f104 0a1a 	add.w	sl, r4, #26
 8006c06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	eba3 0309 	sub.w	r3, r3, r9
 8006c10:	4543      	cmp	r3, r8
 8006c12:	f77f af7a 	ble.w	8006b0a <_printf_float+0x242>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4652      	mov	r2, sl
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f aeac 	beq.w	800697e <_printf_float+0xb6>
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	e7ec      	b.n	8006c06 <_printf_float+0x33e>
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4642      	mov	r2, r8
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	d1c0      	bne.n	8006bbc <_printf_float+0x2f4>
 8006c3a:	e6a0      	b.n	800697e <_printf_float+0xb6>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	f43f ae99 	beq.w	800697e <_printf_float+0xb6>
 8006c4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c4e:	f10b 0b01 	add.w	fp, fp, #1
 8006c52:	e7b9      	b.n	8006bc8 <_printf_float+0x300>
 8006c54:	4631      	mov	r1, r6
 8006c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	47b8      	blx	r7
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d1bf      	bne.n	8006be2 <_printf_float+0x31a>
 8006c62:	e68c      	b.n	800697e <_printf_float+0xb6>
 8006c64:	464b      	mov	r3, r9
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	eb08 020a 	add.w	r2, r8, sl
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	d1c2      	bne.n	8006bfa <_printf_float+0x332>
 8006c74:	e683      	b.n	800697e <_printf_float+0xb6>
 8006c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c78:	2a01      	cmp	r2, #1
 8006c7a:	dc01      	bgt.n	8006c80 <_printf_float+0x3b8>
 8006c7c:	07db      	lsls	r3, r3, #31
 8006c7e:	d537      	bpl.n	8006cf0 <_printf_float+0x428>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4642      	mov	r2, r8
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f ae77 	beq.w	800697e <_printf_float+0xb6>
 8006c90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f ae6f 	beq.w	800697e <_printf_float+0xb6>
 8006ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f7f9 fe7e 	bl	80009a8 <__aeabi_dcmpeq>
 8006cac:	b9d8      	cbnz	r0, 8006ce6 <_printf_float+0x41e>
 8006cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb0:	f108 0201 	add.w	r2, r8, #1
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d10e      	bne.n	8006cde <_printf_float+0x416>
 8006cc0:	e65d      	b.n	800697e <_printf_float+0xb6>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f43f ae56 	beq.w	800697e <_printf_float+0xb6>
 8006cd2:	f108 0801 	add.w	r8, r8, #1
 8006cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	4543      	cmp	r3, r8
 8006cdc:	dcf1      	bgt.n	8006cc2 <_printf_float+0x3fa>
 8006cde:	4653      	mov	r3, sl
 8006ce0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ce4:	e6e0      	b.n	8006aa8 <_printf_float+0x1e0>
 8006ce6:	f04f 0800 	mov.w	r8, #0
 8006cea:	f104 091a 	add.w	r9, r4, #26
 8006cee:	e7f2      	b.n	8006cd6 <_printf_float+0x40e>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	4642      	mov	r2, r8
 8006cf4:	e7df      	b.n	8006cb6 <_printf_float+0x3ee>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	464a      	mov	r2, r9
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae3c 	beq.w	800697e <_printf_float+0xb6>
 8006d06:	f108 0801 	add.w	r8, r8, #1
 8006d0a:	68e3      	ldr	r3, [r4, #12]
 8006d0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006d0e:	1a5b      	subs	r3, r3, r1
 8006d10:	4543      	cmp	r3, r8
 8006d12:	dcf0      	bgt.n	8006cf6 <_printf_float+0x42e>
 8006d14:	e6fd      	b.n	8006b12 <_printf_float+0x24a>
 8006d16:	f04f 0800 	mov.w	r8, #0
 8006d1a:	f104 0919 	add.w	r9, r4, #25
 8006d1e:	e7f4      	b.n	8006d0a <_printf_float+0x442>

08006d20 <_printf_common>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	4616      	mov	r6, r2
 8006d26:	4699      	mov	r9, r3
 8006d28:	688a      	ldr	r2, [r1, #8]
 8006d2a:	690b      	ldr	r3, [r1, #16]
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bfb8      	it	lt
 8006d32:	4613      	movlt	r3, r2
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d40:	b10a      	cbz	r2, 8006d46 <_printf_common+0x26>
 8006d42:	3301      	adds	r3, #1
 8006d44:	6033      	str	r3, [r6, #0]
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	0699      	lsls	r1, r3, #26
 8006d4a:	bf42      	ittt	mi
 8006d4c:	6833      	ldrmi	r3, [r6, #0]
 8006d4e:	3302      	addmi	r3, #2
 8006d50:	6033      	strmi	r3, [r6, #0]
 8006d52:	6825      	ldr	r5, [r4, #0]
 8006d54:	f015 0506 	ands.w	r5, r5, #6
 8006d58:	d106      	bne.n	8006d68 <_printf_common+0x48>
 8006d5a:	f104 0a19 	add.w	sl, r4, #25
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	6832      	ldr	r2, [r6, #0]
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dc28      	bgt.n	8006dba <_printf_common+0x9a>
 8006d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d6c:	1e13      	subs	r3, r2, #0
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	bf18      	it	ne
 8006d72:	2301      	movne	r3, #1
 8006d74:	0692      	lsls	r2, r2, #26
 8006d76:	d42d      	bmi.n	8006dd4 <_printf_common+0xb4>
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d80:	47c0      	blx	r8
 8006d82:	3001      	adds	r0, #1
 8006d84:	d020      	beq.n	8006dc8 <_printf_common+0xa8>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	68e5      	ldr	r5, [r4, #12]
 8006d8a:	f003 0306 	and.w	r3, r3, #6
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	bf18      	it	ne
 8006d92:	2500      	movne	r5, #0
 8006d94:	6832      	ldr	r2, [r6, #0]
 8006d96:	f04f 0600 	mov.w	r6, #0
 8006d9a:	68a3      	ldr	r3, [r4, #8]
 8006d9c:	bf08      	it	eq
 8006d9e:	1aad      	subeq	r5, r5, r2
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	bf08      	it	eq
 8006da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da8:	4293      	cmp	r3, r2
 8006daa:	bfc4      	itt	gt
 8006dac:	1a9b      	subgt	r3, r3, r2
 8006dae:	18ed      	addgt	r5, r5, r3
 8006db0:	341a      	adds	r4, #26
 8006db2:	42b5      	cmp	r5, r6
 8006db4:	d11a      	bne.n	8006dec <_printf_common+0xcc>
 8006db6:	2000      	movs	r0, #0
 8006db8:	e008      	b.n	8006dcc <_printf_common+0xac>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	47c0      	blx	r8
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d103      	bne.n	8006dd0 <_printf_common+0xb0>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	e7c4      	b.n	8006d5e <_printf_common+0x3e>
 8006dd4:	2030      	movs	r0, #48	; 0x30
 8006dd6:	18e1      	adds	r1, r4, r3
 8006dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006de2:	4422      	add	r2, r4
 8006de4:	3302      	adds	r3, #2
 8006de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dea:	e7c5      	b.n	8006d78 <_printf_common+0x58>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4622      	mov	r2, r4
 8006df0:	4649      	mov	r1, r9
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c0      	blx	r8
 8006df6:	3001      	adds	r0, #1
 8006df8:	d0e6      	beq.n	8006dc8 <_printf_common+0xa8>
 8006dfa:	3601      	adds	r6, #1
 8006dfc:	e7d9      	b.n	8006db2 <_printf_common+0x92>
	...

08006e00 <_printf_i>:
 8006e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e04:	7e0f      	ldrb	r7, [r1, #24]
 8006e06:	4691      	mov	r9, r2
 8006e08:	2f78      	cmp	r7, #120	; 0x78
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	469a      	mov	sl, r3
 8006e10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e16:	d807      	bhi.n	8006e28 <_printf_i+0x28>
 8006e18:	2f62      	cmp	r7, #98	; 0x62
 8006e1a:	d80a      	bhi.n	8006e32 <_printf_i+0x32>
 8006e1c:	2f00      	cmp	r7, #0
 8006e1e:	f000 80d9 	beq.w	8006fd4 <_printf_i+0x1d4>
 8006e22:	2f58      	cmp	r7, #88	; 0x58
 8006e24:	f000 80a4 	beq.w	8006f70 <_printf_i+0x170>
 8006e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e30:	e03a      	b.n	8006ea8 <_printf_i+0xa8>
 8006e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e36:	2b15      	cmp	r3, #21
 8006e38:	d8f6      	bhi.n	8006e28 <_printf_i+0x28>
 8006e3a:	a101      	add	r1, pc, #4	; (adr r1, 8006e40 <_printf_i+0x40>)
 8006e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006e29 	.word	0x08006e29
 8006e4c:	08006e29 	.word	0x08006e29
 8006e50:	08006e29 	.word	0x08006e29
 8006e54:	08006e29 	.word	0x08006e29
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006e29 	.word	0x08006e29
 8006e60:	08006e29 	.word	0x08006e29
 8006e64:	08006e29 	.word	0x08006e29
 8006e68:	08006e29 	.word	0x08006e29
 8006e6c:	08006fbb 	.word	0x08006fbb
 8006e70:	08006edd 	.word	0x08006edd
 8006e74:	08006f9d 	.word	0x08006f9d
 8006e78:	08006e29 	.word	0x08006e29
 8006e7c:	08006e29 	.word	0x08006e29
 8006e80:	08006fdd 	.word	0x08006fdd
 8006e84:	08006e29 	.word	0x08006e29
 8006e88:	08006edd 	.word	0x08006edd
 8006e8c:	08006e29 	.word	0x08006e29
 8006e90:	08006e29 	.word	0x08006e29
 8006e94:	08006fa5 	.word	0x08006fa5
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0a4      	b.n	8006ff6 <_printf_i+0x1f6>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	6829      	ldr	r1, [r5, #0]
 8006eb0:	0606      	lsls	r6, r0, #24
 8006eb2:	f101 0304 	add.w	r3, r1, #4
 8006eb6:	d50a      	bpl.n	8006ece <_printf_i+0xce>
 8006eb8:	680e      	ldr	r6, [r1, #0]
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	da03      	bge.n	8006ec8 <_printf_i+0xc8>
 8006ec0:	232d      	movs	r3, #45	; 0x2d
 8006ec2:	4276      	negs	r6, r6
 8006ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec8:	230a      	movs	r3, #10
 8006eca:	485e      	ldr	r0, [pc, #376]	; (8007044 <_printf_i+0x244>)
 8006ecc:	e019      	b.n	8006f02 <_printf_i+0x102>
 8006ece:	680e      	ldr	r6, [r1, #0]
 8006ed0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	bf18      	it	ne
 8006ed8:	b236      	sxthne	r6, r6
 8006eda:	e7ef      	b.n	8006ebc <_printf_i+0xbc>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	6820      	ldr	r0, [r4, #0]
 8006ee0:	1d19      	adds	r1, r3, #4
 8006ee2:	6029      	str	r1, [r5, #0]
 8006ee4:	0601      	lsls	r1, r0, #24
 8006ee6:	d501      	bpl.n	8006eec <_printf_i+0xec>
 8006ee8:	681e      	ldr	r6, [r3, #0]
 8006eea:	e002      	b.n	8006ef2 <_printf_i+0xf2>
 8006eec:	0646      	lsls	r6, r0, #25
 8006eee:	d5fb      	bpl.n	8006ee8 <_printf_i+0xe8>
 8006ef0:	881e      	ldrh	r6, [r3, #0]
 8006ef2:	2f6f      	cmp	r7, #111	; 0x6f
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2308      	moveq	r3, #8
 8006ef8:	230a      	movne	r3, #10
 8006efa:	4852      	ldr	r0, [pc, #328]	; (8007044 <_printf_i+0x244>)
 8006efc:	2100      	movs	r1, #0
 8006efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f02:	6865      	ldr	r5, [r4, #4]
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	bfa8      	it	ge
 8006f08:	6821      	ldrge	r1, [r4, #0]
 8006f0a:	60a5      	str	r5, [r4, #8]
 8006f0c:	bfa4      	itt	ge
 8006f0e:	f021 0104 	bicge.w	r1, r1, #4
 8006f12:	6021      	strge	r1, [r4, #0]
 8006f14:	b90e      	cbnz	r6, 8006f1a <_printf_i+0x11a>
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	d04d      	beq.n	8006fb6 <_printf_i+0x1b6>
 8006f1a:	4615      	mov	r5, r2
 8006f1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f20:	fb03 6711 	mls	r7, r3, r1, r6
 8006f24:	5dc7      	ldrb	r7, [r0, r7]
 8006f26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f2a:	4637      	mov	r7, r6
 8006f2c:	42bb      	cmp	r3, r7
 8006f2e:	460e      	mov	r6, r1
 8006f30:	d9f4      	bls.n	8006f1c <_printf_i+0x11c>
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d10b      	bne.n	8006f4e <_printf_i+0x14e>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	07de      	lsls	r6, r3, #31
 8006f3a:	d508      	bpl.n	8006f4e <_printf_i+0x14e>
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	6861      	ldr	r1, [r4, #4]
 8006f40:	4299      	cmp	r1, r3
 8006f42:	bfde      	ittt	le
 8006f44:	2330      	movle	r3, #48	; 0x30
 8006f46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f4e:	1b52      	subs	r2, r2, r5
 8006f50:	6122      	str	r2, [r4, #16]
 8006f52:	464b      	mov	r3, r9
 8006f54:	4621      	mov	r1, r4
 8006f56:	4640      	mov	r0, r8
 8006f58:	f8cd a000 	str.w	sl, [sp]
 8006f5c:	aa03      	add	r2, sp, #12
 8006f5e:	f7ff fedf 	bl	8006d20 <_printf_common>
 8006f62:	3001      	adds	r0, #1
 8006f64:	d14c      	bne.n	8007000 <_printf_i+0x200>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	b004      	add	sp, #16
 8006f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f70:	4834      	ldr	r0, [pc, #208]	; (8007044 <_printf_i+0x244>)
 8006f72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f76:	6829      	ldr	r1, [r5, #0]
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f7e:	6029      	str	r1, [r5, #0]
 8006f80:	061d      	lsls	r5, r3, #24
 8006f82:	d514      	bpl.n	8006fae <_printf_i+0x1ae>
 8006f84:	07df      	lsls	r7, r3, #31
 8006f86:	bf44      	itt	mi
 8006f88:	f043 0320 	orrmi.w	r3, r3, #32
 8006f8c:	6023      	strmi	r3, [r4, #0]
 8006f8e:	b91e      	cbnz	r6, 8006f98 <_printf_i+0x198>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	f023 0320 	bic.w	r3, r3, #32
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	2310      	movs	r3, #16
 8006f9a:	e7af      	b.n	8006efc <_printf_i+0xfc>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	f043 0320 	orr.w	r3, r3, #32
 8006fa2:	6023      	str	r3, [r4, #0]
 8006fa4:	2378      	movs	r3, #120	; 0x78
 8006fa6:	4828      	ldr	r0, [pc, #160]	; (8007048 <_printf_i+0x248>)
 8006fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fac:	e7e3      	b.n	8006f76 <_printf_i+0x176>
 8006fae:	0659      	lsls	r1, r3, #25
 8006fb0:	bf48      	it	mi
 8006fb2:	b2b6      	uxthmi	r6, r6
 8006fb4:	e7e6      	b.n	8006f84 <_printf_i+0x184>
 8006fb6:	4615      	mov	r5, r2
 8006fb8:	e7bb      	b.n	8006f32 <_printf_i+0x132>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	6826      	ldr	r6, [r4, #0]
 8006fbe:	1d18      	adds	r0, r3, #4
 8006fc0:	6961      	ldr	r1, [r4, #20]
 8006fc2:	6028      	str	r0, [r5, #0]
 8006fc4:	0635      	lsls	r5, r6, #24
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	d501      	bpl.n	8006fce <_printf_i+0x1ce>
 8006fca:	6019      	str	r1, [r3, #0]
 8006fcc:	e002      	b.n	8006fd4 <_printf_i+0x1d4>
 8006fce:	0670      	lsls	r0, r6, #25
 8006fd0:	d5fb      	bpl.n	8006fca <_printf_i+0x1ca>
 8006fd2:	8019      	strh	r1, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4615      	mov	r5, r2
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	e7ba      	b.n	8006f52 <_printf_i+0x152>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	1d1a      	adds	r2, r3, #4
 8006fe2:	602a      	str	r2, [r5, #0]
 8006fe4:	681d      	ldr	r5, [r3, #0]
 8006fe6:	6862      	ldr	r2, [r4, #4]
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f001 fa1f 	bl	800842c <memchr>
 8006fee:	b108      	cbz	r0, 8006ff4 <_printf_i+0x1f4>
 8006ff0:	1b40      	subs	r0, r0, r5
 8006ff2:	6060      	str	r0, [r4, #4]
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ffe:	e7a8      	b.n	8006f52 <_printf_i+0x152>
 8007000:	462a      	mov	r2, r5
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	47d0      	blx	sl
 800700a:	3001      	adds	r0, #1
 800700c:	d0ab      	beq.n	8006f66 <_printf_i+0x166>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	079b      	lsls	r3, r3, #30
 8007012:	d413      	bmi.n	800703c <_printf_i+0x23c>
 8007014:	68e0      	ldr	r0, [r4, #12]
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	4298      	cmp	r0, r3
 800701a:	bfb8      	it	lt
 800701c:	4618      	movlt	r0, r3
 800701e:	e7a4      	b.n	8006f6a <_printf_i+0x16a>
 8007020:	2301      	movs	r3, #1
 8007022:	4632      	mov	r2, r6
 8007024:	4649      	mov	r1, r9
 8007026:	4640      	mov	r0, r8
 8007028:	47d0      	blx	sl
 800702a:	3001      	adds	r0, #1
 800702c:	d09b      	beq.n	8006f66 <_printf_i+0x166>
 800702e:	3501      	adds	r5, #1
 8007030:	68e3      	ldr	r3, [r4, #12]
 8007032:	9903      	ldr	r1, [sp, #12]
 8007034:	1a5b      	subs	r3, r3, r1
 8007036:	42ab      	cmp	r3, r5
 8007038:	dcf2      	bgt.n	8007020 <_printf_i+0x220>
 800703a:	e7eb      	b.n	8007014 <_printf_i+0x214>
 800703c:	2500      	movs	r5, #0
 800703e:	f104 0619 	add.w	r6, r4, #25
 8007042:	e7f5      	b.n	8007030 <_printf_i+0x230>
 8007044:	08009ece 	.word	0x08009ece
 8007048:	08009edf 	.word	0x08009edf

0800704c <iprintf>:
 800704c:	b40f      	push	{r0, r1, r2, r3}
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <iprintf+0x2c>)
 8007050:	b513      	push	{r0, r1, r4, lr}
 8007052:	681c      	ldr	r4, [r3, #0]
 8007054:	b124      	cbz	r4, 8007060 <iprintf+0x14>
 8007056:	69a3      	ldr	r3, [r4, #24]
 8007058:	b913      	cbnz	r3, 8007060 <iprintf+0x14>
 800705a:	4620      	mov	r0, r4
 800705c:	f001 f8d4 	bl	8008208 <__sinit>
 8007060:	ab05      	add	r3, sp, #20
 8007062:	4620      	mov	r0, r4
 8007064:	9a04      	ldr	r2, [sp, #16]
 8007066:	68a1      	ldr	r1, [r4, #8]
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	f001 fe95 	bl	8008d98 <_vfiprintf_r>
 800706e:	b002      	add	sp, #8
 8007070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007074:	b004      	add	sp, #16
 8007076:	4770      	bx	lr
 8007078:	2000000c 	.word	0x2000000c

0800707c <_puts_r>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	460e      	mov	r6, r1
 8007080:	4605      	mov	r5, r0
 8007082:	b118      	cbz	r0, 800708c <_puts_r+0x10>
 8007084:	6983      	ldr	r3, [r0, #24]
 8007086:	b90b      	cbnz	r3, 800708c <_puts_r+0x10>
 8007088:	f001 f8be 	bl	8008208 <__sinit>
 800708c:	69ab      	ldr	r3, [r5, #24]
 800708e:	68ac      	ldr	r4, [r5, #8]
 8007090:	b913      	cbnz	r3, 8007098 <_puts_r+0x1c>
 8007092:	4628      	mov	r0, r5
 8007094:	f001 f8b8 	bl	8008208 <__sinit>
 8007098:	4b2c      	ldr	r3, [pc, #176]	; (800714c <_puts_r+0xd0>)
 800709a:	429c      	cmp	r4, r3
 800709c:	d120      	bne.n	80070e0 <_puts_r+0x64>
 800709e:	686c      	ldr	r4, [r5, #4]
 80070a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d405      	bmi.n	80070b2 <_puts_r+0x36>
 80070a6:	89a3      	ldrh	r3, [r4, #12]
 80070a8:	0598      	lsls	r0, r3, #22
 80070aa:	d402      	bmi.n	80070b2 <_puts_r+0x36>
 80070ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ae:	f001 f94e 	bl	800834e <__retarget_lock_acquire_recursive>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	0719      	lsls	r1, r3, #28
 80070b6:	d51d      	bpl.n	80070f4 <_puts_r+0x78>
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b1db      	cbz	r3, 80070f4 <_puts_r+0x78>
 80070bc:	3e01      	subs	r6, #1
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070c4:	3b01      	subs	r3, #1
 80070c6:	60a3      	str	r3, [r4, #8]
 80070c8:	bb39      	cbnz	r1, 800711a <_puts_r+0x9e>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da38      	bge.n	8007140 <_puts_r+0xc4>
 80070ce:	4622      	mov	r2, r4
 80070d0:	210a      	movs	r1, #10
 80070d2:	4628      	mov	r0, r5
 80070d4:	f000 f848 	bl	8007168 <__swbuf_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d011      	beq.n	8007100 <_puts_r+0x84>
 80070dc:	250a      	movs	r5, #10
 80070de:	e011      	b.n	8007104 <_puts_r+0x88>
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <_puts_r+0xd4>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d101      	bne.n	80070ea <_puts_r+0x6e>
 80070e6:	68ac      	ldr	r4, [r5, #8]
 80070e8:	e7da      	b.n	80070a0 <_puts_r+0x24>
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <_puts_r+0xd8>)
 80070ec:	429c      	cmp	r4, r3
 80070ee:	bf08      	it	eq
 80070f0:	68ec      	ldreq	r4, [r5, #12]
 80070f2:	e7d5      	b.n	80070a0 <_puts_r+0x24>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 f888 	bl	800720c <__swsetup_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d0dd      	beq.n	80070bc <_puts_r+0x40>
 8007100:	f04f 35ff 	mov.w	r5, #4294967295
 8007104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007106:	07da      	lsls	r2, r3, #31
 8007108:	d405      	bmi.n	8007116 <_puts_r+0x9a>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	059b      	lsls	r3, r3, #22
 800710e:	d402      	bmi.n	8007116 <_puts_r+0x9a>
 8007110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007112:	f001 f91d 	bl	8008350 <__retarget_lock_release_recursive>
 8007116:	4628      	mov	r0, r5
 8007118:	bd70      	pop	{r4, r5, r6, pc}
 800711a:	2b00      	cmp	r3, #0
 800711c:	da04      	bge.n	8007128 <_puts_r+0xac>
 800711e:	69a2      	ldr	r2, [r4, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	dc06      	bgt.n	8007132 <_puts_r+0xb6>
 8007124:	290a      	cmp	r1, #10
 8007126:	d004      	beq.n	8007132 <_puts_r+0xb6>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	6022      	str	r2, [r4, #0]
 800712e:	7019      	strb	r1, [r3, #0]
 8007130:	e7c5      	b.n	80070be <_puts_r+0x42>
 8007132:	4622      	mov	r2, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 f817 	bl	8007168 <__swbuf_r>
 800713a:	3001      	adds	r0, #1
 800713c:	d1bf      	bne.n	80070be <_puts_r+0x42>
 800713e:	e7df      	b.n	8007100 <_puts_r+0x84>
 8007140:	250a      	movs	r5, #10
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	6022      	str	r2, [r4, #0]
 8007148:	701d      	strb	r5, [r3, #0]
 800714a:	e7db      	b.n	8007104 <_puts_r+0x88>
 800714c:	08009fa0 	.word	0x08009fa0
 8007150:	08009fc0 	.word	0x08009fc0
 8007154:	08009f80 	.word	0x08009f80

08007158 <puts>:
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <puts+0xc>)
 800715a:	4601      	mov	r1, r0
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f7ff bf8d 	b.w	800707c <_puts_r>
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c

08007168 <__swbuf_r>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	460e      	mov	r6, r1
 800716c:	4614      	mov	r4, r2
 800716e:	4605      	mov	r5, r0
 8007170:	b118      	cbz	r0, 800717a <__swbuf_r+0x12>
 8007172:	6983      	ldr	r3, [r0, #24]
 8007174:	b90b      	cbnz	r3, 800717a <__swbuf_r+0x12>
 8007176:	f001 f847 	bl	8008208 <__sinit>
 800717a:	4b21      	ldr	r3, [pc, #132]	; (8007200 <__swbuf_r+0x98>)
 800717c:	429c      	cmp	r4, r3
 800717e:	d12b      	bne.n	80071d8 <__swbuf_r+0x70>
 8007180:	686c      	ldr	r4, [r5, #4]
 8007182:	69a3      	ldr	r3, [r4, #24]
 8007184:	60a3      	str	r3, [r4, #8]
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	071a      	lsls	r2, r3, #28
 800718a:	d52f      	bpl.n	80071ec <__swbuf_r+0x84>
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	b36b      	cbz	r3, 80071ec <__swbuf_r+0x84>
 8007190:	6923      	ldr	r3, [r4, #16]
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	b2f6      	uxtb	r6, r6
 8007196:	1ac0      	subs	r0, r0, r3
 8007198:	6963      	ldr	r3, [r4, #20]
 800719a:	4637      	mov	r7, r6
 800719c:	4283      	cmp	r3, r0
 800719e:	dc04      	bgt.n	80071aa <__swbuf_r+0x42>
 80071a0:	4621      	mov	r1, r4
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 ff9c 	bl	80080e0 <_fflush_r>
 80071a8:	bb30      	cbnz	r0, 80071f8 <__swbuf_r+0x90>
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	3001      	adds	r0, #1
 80071ae:	3b01      	subs	r3, #1
 80071b0:	60a3      	str	r3, [r4, #8]
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	701e      	strb	r6, [r3, #0]
 80071ba:	6963      	ldr	r3, [r4, #20]
 80071bc:	4283      	cmp	r3, r0
 80071be:	d004      	beq.n	80071ca <__swbuf_r+0x62>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	07db      	lsls	r3, r3, #31
 80071c4:	d506      	bpl.n	80071d4 <__swbuf_r+0x6c>
 80071c6:	2e0a      	cmp	r6, #10
 80071c8:	d104      	bne.n	80071d4 <__swbuf_r+0x6c>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 ff87 	bl	80080e0 <_fflush_r>
 80071d2:	b988      	cbnz	r0, 80071f8 <__swbuf_r+0x90>
 80071d4:	4638      	mov	r0, r7
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <__swbuf_r+0x9c>)
 80071da:	429c      	cmp	r4, r3
 80071dc:	d101      	bne.n	80071e2 <__swbuf_r+0x7a>
 80071de:	68ac      	ldr	r4, [r5, #8]
 80071e0:	e7cf      	b.n	8007182 <__swbuf_r+0x1a>
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <__swbuf_r+0xa0>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	bf08      	it	eq
 80071e8:	68ec      	ldreq	r4, [r5, #12]
 80071ea:	e7ca      	b.n	8007182 <__swbuf_r+0x1a>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f80c 	bl	800720c <__swsetup_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0cb      	beq.n	8007190 <__swbuf_r+0x28>
 80071f8:	f04f 37ff 	mov.w	r7, #4294967295
 80071fc:	e7ea      	b.n	80071d4 <__swbuf_r+0x6c>
 80071fe:	bf00      	nop
 8007200:	08009fa0 	.word	0x08009fa0
 8007204:	08009fc0 	.word	0x08009fc0
 8007208:	08009f80 	.word	0x08009f80

0800720c <__swsetup_r>:
 800720c:	4b32      	ldr	r3, [pc, #200]	; (80072d8 <__swsetup_r+0xcc>)
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	4606      	mov	r6, r0
 8007214:	460c      	mov	r4, r1
 8007216:	b125      	cbz	r5, 8007222 <__swsetup_r+0x16>
 8007218:	69ab      	ldr	r3, [r5, #24]
 800721a:	b913      	cbnz	r3, 8007222 <__swsetup_r+0x16>
 800721c:	4628      	mov	r0, r5
 800721e:	f000 fff3 	bl	8008208 <__sinit>
 8007222:	4b2e      	ldr	r3, [pc, #184]	; (80072dc <__swsetup_r+0xd0>)
 8007224:	429c      	cmp	r4, r3
 8007226:	d10f      	bne.n	8007248 <__swsetup_r+0x3c>
 8007228:	686c      	ldr	r4, [r5, #4]
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007230:	0719      	lsls	r1, r3, #28
 8007232:	d42c      	bmi.n	800728e <__swsetup_r+0x82>
 8007234:	06dd      	lsls	r5, r3, #27
 8007236:	d411      	bmi.n	800725c <__swsetup_r+0x50>
 8007238:	2309      	movs	r3, #9
 800723a:	6033      	str	r3, [r6, #0]
 800723c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	e03e      	b.n	80072c6 <__swsetup_r+0xba>
 8007248:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <__swsetup_r+0xd4>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d101      	bne.n	8007252 <__swsetup_r+0x46>
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	e7eb      	b.n	800722a <__swsetup_r+0x1e>
 8007252:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <__swsetup_r+0xd8>)
 8007254:	429c      	cmp	r4, r3
 8007256:	bf08      	it	eq
 8007258:	68ec      	ldreq	r4, [r5, #12]
 800725a:	e7e6      	b.n	800722a <__swsetup_r+0x1e>
 800725c:	0758      	lsls	r0, r3, #29
 800725e:	d512      	bpl.n	8007286 <__swsetup_r+0x7a>
 8007260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007262:	b141      	cbz	r1, 8007276 <__swsetup_r+0x6a>
 8007264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007268:	4299      	cmp	r1, r3
 800726a:	d002      	beq.n	8007272 <__swsetup_r+0x66>
 800726c:	4630      	mov	r0, r6
 800726e:	f001 fc8f 	bl	8008b90 <_free_r>
 8007272:	2300      	movs	r3, #0
 8007274:	6363      	str	r3, [r4, #52]	; 0x34
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	2300      	movs	r3, #0
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	f043 0308 	orr.w	r3, r3, #8
 800728c:	81a3      	strh	r3, [r4, #12]
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	b94b      	cbnz	r3, 80072a6 <__swsetup_r+0x9a>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800729c:	d003      	beq.n	80072a6 <__swsetup_r+0x9a>
 800729e:	4621      	mov	r1, r4
 80072a0:	4630      	mov	r0, r6
 80072a2:	f001 f87b 	bl	800839c <__smakebuf_r>
 80072a6:	89a0      	ldrh	r0, [r4, #12]
 80072a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072ac:	f010 0301 	ands.w	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <__swsetup_r+0xbc>
 80072b2:	2300      	movs	r3, #0
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	6963      	ldr	r3, [r4, #20]
 80072b8:	425b      	negs	r3, r3
 80072ba:	61a3      	str	r3, [r4, #24]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	b943      	cbnz	r3, 80072d2 <__swsetup_r+0xc6>
 80072c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072c4:	d1ba      	bne.n	800723c <__swsetup_r+0x30>
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	0781      	lsls	r1, r0, #30
 80072ca:	bf58      	it	pl
 80072cc:	6963      	ldrpl	r3, [r4, #20]
 80072ce:	60a3      	str	r3, [r4, #8]
 80072d0:	e7f4      	b.n	80072bc <__swsetup_r+0xb0>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e7f7      	b.n	80072c6 <__swsetup_r+0xba>
 80072d6:	bf00      	nop
 80072d8:	2000000c 	.word	0x2000000c
 80072dc:	08009fa0 	.word	0x08009fa0
 80072e0:	08009fc0 	.word	0x08009fc0
 80072e4:	08009f80 	.word	0x08009f80

080072e8 <quorem>:
 80072e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	6903      	ldr	r3, [r0, #16]
 80072ee:	690c      	ldr	r4, [r1, #16]
 80072f0:	4607      	mov	r7, r0
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	f2c0 8082 	blt.w	80073fc <quorem+0x114>
 80072f8:	3c01      	subs	r4, #1
 80072fa:	f100 0514 	add.w	r5, r0, #20
 80072fe:	f101 0814 	add.w	r8, r1, #20
 8007302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800730c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007310:	3301      	adds	r3, #1
 8007312:	429a      	cmp	r2, r3
 8007314:	fbb2 f6f3 	udiv	r6, r2, r3
 8007318:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800731c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007320:	d331      	bcc.n	8007386 <quorem+0x9e>
 8007322:	f04f 0e00 	mov.w	lr, #0
 8007326:	4640      	mov	r0, r8
 8007328:	46ac      	mov	ip, r5
 800732a:	46f2      	mov	sl, lr
 800732c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007330:	b293      	uxth	r3, r2
 8007332:	fb06 e303 	mla	r3, r6, r3, lr
 8007336:	0c12      	lsrs	r2, r2, #16
 8007338:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800733c:	b29b      	uxth	r3, r3
 800733e:	fb06 e202 	mla	r2, r6, r2, lr
 8007342:	ebaa 0303 	sub.w	r3, sl, r3
 8007346:	f8dc a000 	ldr.w	sl, [ip]
 800734a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800734e:	fa1f fa8a 	uxth.w	sl, sl
 8007352:	4453      	add	r3, sl
 8007354:	f8dc a000 	ldr.w	sl, [ip]
 8007358:	b292      	uxth	r2, r2
 800735a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800735e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007362:	b29b      	uxth	r3, r3
 8007364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007368:	4581      	cmp	r9, r0
 800736a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800736e:	f84c 3b04 	str.w	r3, [ip], #4
 8007372:	d2db      	bcs.n	800732c <quorem+0x44>
 8007374:	f855 300b 	ldr.w	r3, [r5, fp]
 8007378:	b92b      	cbnz	r3, 8007386 <quorem+0x9e>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	3b04      	subs	r3, #4
 800737e:	429d      	cmp	r5, r3
 8007380:	461a      	mov	r2, r3
 8007382:	d32f      	bcc.n	80073e4 <quorem+0xfc>
 8007384:	613c      	str	r4, [r7, #16]
 8007386:	4638      	mov	r0, r7
 8007388:	f001 faea 	bl	8008960 <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	db25      	blt.n	80073dc <quorem+0xf4>
 8007390:	4628      	mov	r0, r5
 8007392:	f04f 0c00 	mov.w	ip, #0
 8007396:	3601      	adds	r6, #1
 8007398:	f858 1b04 	ldr.w	r1, [r8], #4
 800739c:	f8d0 e000 	ldr.w	lr, [r0]
 80073a0:	b28b      	uxth	r3, r1
 80073a2:	ebac 0303 	sub.w	r3, ip, r3
 80073a6:	fa1f f28e 	uxth.w	r2, lr
 80073aa:	4413      	add	r3, r2
 80073ac:	0c0a      	lsrs	r2, r1, #16
 80073ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073bc:	45c1      	cmp	r9, r8
 80073be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073c2:	f840 3b04 	str.w	r3, [r0], #4
 80073c6:	d2e7      	bcs.n	8007398 <quorem+0xb0>
 80073c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073d0:	b922      	cbnz	r2, 80073dc <quorem+0xf4>
 80073d2:	3b04      	subs	r3, #4
 80073d4:	429d      	cmp	r5, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	d30a      	bcc.n	80073f0 <quorem+0x108>
 80073da:	613c      	str	r4, [r7, #16]
 80073dc:	4630      	mov	r0, r6
 80073de:	b003      	add	sp, #12
 80073e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	3b04      	subs	r3, #4
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d1cb      	bne.n	8007384 <quorem+0x9c>
 80073ec:	3c01      	subs	r4, #1
 80073ee:	e7c6      	b.n	800737e <quorem+0x96>
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	3b04      	subs	r3, #4
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d1f0      	bne.n	80073da <quorem+0xf2>
 80073f8:	3c01      	subs	r4, #1
 80073fa:	e7eb      	b.n	80073d4 <quorem+0xec>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e7ee      	b.n	80073de <quorem+0xf6>

08007400 <_dtoa_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	4616      	mov	r6, r2
 8007406:	461f      	mov	r7, r3
 8007408:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800740a:	b099      	sub	sp, #100	; 0x64
 800740c:	4605      	mov	r5, r0
 800740e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007412:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007416:	b974      	cbnz	r4, 8007436 <_dtoa_r+0x36>
 8007418:	2010      	movs	r0, #16
 800741a:	f000 ffff 	bl	800841c <malloc>
 800741e:	4602      	mov	r2, r0
 8007420:	6268      	str	r0, [r5, #36]	; 0x24
 8007422:	b920      	cbnz	r0, 800742e <_dtoa_r+0x2e>
 8007424:	21ea      	movs	r1, #234	; 0xea
 8007426:	4ba8      	ldr	r3, [pc, #672]	; (80076c8 <_dtoa_r+0x2c8>)
 8007428:	48a8      	ldr	r0, [pc, #672]	; (80076cc <_dtoa_r+0x2cc>)
 800742a:	f001 fe4b 	bl	80090c4 <__assert_func>
 800742e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007432:	6004      	str	r4, [r0, #0]
 8007434:	60c4      	str	r4, [r0, #12]
 8007436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	b151      	cbz	r1, 8007452 <_dtoa_r+0x52>
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	2301      	movs	r3, #1
 8007440:	4093      	lsls	r3, r2
 8007442:	604a      	str	r2, [r1, #4]
 8007444:	608b      	str	r3, [r1, #8]
 8007446:	4628      	mov	r0, r5
 8007448:	f001 f84c 	bl	80084e4 <_Bfree>
 800744c:	2200      	movs	r2, #0
 800744e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	1e3b      	subs	r3, r7, #0
 8007454:	bfaf      	iteee	ge
 8007456:	2300      	movge	r3, #0
 8007458:	2201      	movlt	r2, #1
 800745a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800745e:	9305      	strlt	r3, [sp, #20]
 8007460:	bfa8      	it	ge
 8007462:	f8c8 3000 	strge.w	r3, [r8]
 8007466:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800746a:	4b99      	ldr	r3, [pc, #612]	; (80076d0 <_dtoa_r+0x2d0>)
 800746c:	bfb8      	it	lt
 800746e:	f8c8 2000 	strlt.w	r2, [r8]
 8007472:	ea33 0309 	bics.w	r3, r3, r9
 8007476:	d119      	bne.n	80074ac <_dtoa_r+0xac>
 8007478:	f242 730f 	movw	r3, #9999	; 0x270f
 800747c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007484:	4333      	orrs	r3, r6
 8007486:	f000 857f 	beq.w	8007f88 <_dtoa_r+0xb88>
 800748a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800748c:	b953      	cbnz	r3, 80074a4 <_dtoa_r+0xa4>
 800748e:	4b91      	ldr	r3, [pc, #580]	; (80076d4 <_dtoa_r+0x2d4>)
 8007490:	e022      	b.n	80074d8 <_dtoa_r+0xd8>
 8007492:	4b91      	ldr	r3, [pc, #580]	; (80076d8 <_dtoa_r+0x2d8>)
 8007494:	9303      	str	r3, [sp, #12]
 8007496:	3308      	adds	r3, #8
 8007498:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	9803      	ldr	r0, [sp, #12]
 800749e:	b019      	add	sp, #100	; 0x64
 80074a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a4:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <_dtoa_r+0x2d4>)
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	3303      	adds	r3, #3
 80074aa:	e7f5      	b.n	8007498 <_dtoa_r+0x98>
 80074ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80074b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074b8:	2200      	movs	r2, #0
 80074ba:	2300      	movs	r3, #0
 80074bc:	f7f9 fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80074c0:	4680      	mov	r8, r0
 80074c2:	b158      	cbz	r0, 80074dc <_dtoa_r+0xdc>
 80074c4:	2301      	movs	r3, #1
 80074c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8558 	beq.w	8007f82 <_dtoa_r+0xb82>
 80074d2:	4882      	ldr	r0, [pc, #520]	; (80076dc <_dtoa_r+0x2dc>)
 80074d4:	6018      	str	r0, [r3, #0]
 80074d6:	1e43      	subs	r3, r0, #1
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	e7df      	b.n	800749c <_dtoa_r+0x9c>
 80074dc:	ab16      	add	r3, sp, #88	; 0x58
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	ab17      	add	r3, sp, #92	; 0x5c
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4628      	mov	r0, r5
 80074e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074ea:	f001 fae1 	bl	8008ab0 <__d2b>
 80074ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074f2:	4683      	mov	fp, r0
 80074f4:	2c00      	cmp	r4, #0
 80074f6:	d07f      	beq.n	80075f8 <_dtoa_r+0x1f8>
 80074f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007506:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800750a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800750e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007512:	2200      	movs	r2, #0
 8007514:	4b72      	ldr	r3, [pc, #456]	; (80076e0 <_dtoa_r+0x2e0>)
 8007516:	f7f8 fe27 	bl	8000168 <__aeabi_dsub>
 800751a:	a365      	add	r3, pc, #404	; (adr r3, 80076b0 <_dtoa_r+0x2b0>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f8 ffda 	bl	80004d8 <__aeabi_dmul>
 8007524:	a364      	add	r3, pc, #400	; (adr r3, 80076b8 <_dtoa_r+0x2b8>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f8 fe1f 	bl	800016c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	4620      	mov	r0, r4
 8007532:	460f      	mov	r7, r1
 8007534:	f7f8 ff66 	bl	8000404 <__aeabi_i2d>
 8007538:	a361      	add	r3, pc, #388	; (adr r3, 80076c0 <_dtoa_r+0x2c0>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f8 ffcb 	bl	80004d8 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f8 fe0f 	bl	800016c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	f7f9 fa71 	bl	8000a38 <__aeabi_d2iz>
 8007556:	2200      	movs	r2, #0
 8007558:	4682      	mov	sl, r0
 800755a:	2300      	movs	r3, #0
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fa2c 	bl	80009bc <__aeabi_dcmplt>
 8007564:	b148      	cbz	r0, 800757a <_dtoa_r+0x17a>
 8007566:	4650      	mov	r0, sl
 8007568:	f7f8 ff4c 	bl	8000404 <__aeabi_i2d>
 800756c:	4632      	mov	r2, r6
 800756e:	463b      	mov	r3, r7
 8007570:	f7f9 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8007574:	b908      	cbnz	r0, 800757a <_dtoa_r+0x17a>
 8007576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800757a:	f1ba 0f16 	cmp.w	sl, #22
 800757e:	d858      	bhi.n	8007632 <_dtoa_r+0x232>
 8007580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007584:	4b57      	ldr	r3, [pc, #348]	; (80076e4 <_dtoa_r+0x2e4>)
 8007586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f9 fa15 	bl	80009bc <__aeabi_dcmplt>
 8007592:	2800      	cmp	r0, #0
 8007594:	d04f      	beq.n	8007636 <_dtoa_r+0x236>
 8007596:	2300      	movs	r3, #0
 8007598:	f10a 3aff 	add.w	sl, sl, #4294967295
 800759c:	930f      	str	r3, [sp, #60]	; 0x3c
 800759e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80075a0:	1b1c      	subs	r4, r3, r4
 80075a2:	1e63      	subs	r3, r4, #1
 80075a4:	9309      	str	r3, [sp, #36]	; 0x24
 80075a6:	bf49      	itett	mi
 80075a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80075ac:	2300      	movpl	r3, #0
 80075ae:	9306      	strmi	r3, [sp, #24]
 80075b0:	2300      	movmi	r3, #0
 80075b2:	bf54      	ite	pl
 80075b4:	9306      	strpl	r3, [sp, #24]
 80075b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80075b8:	f1ba 0f00 	cmp.w	sl, #0
 80075bc:	db3d      	blt.n	800763a <_dtoa_r+0x23a>
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80075c4:	4453      	add	r3, sl
 80075c6:	9309      	str	r3, [sp, #36]	; 0x24
 80075c8:	2300      	movs	r3, #0
 80075ca:	930a      	str	r3, [sp, #40]	; 0x28
 80075cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	f200 808c 	bhi.w	80076ec <_dtoa_r+0x2ec>
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	bfc4      	itt	gt
 80075d8:	3b04      	subgt	r3, #4
 80075da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80075dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075de:	bfc8      	it	gt
 80075e0:	2400      	movgt	r4, #0
 80075e2:	f1a3 0302 	sub.w	r3, r3, #2
 80075e6:	bfd8      	it	le
 80075e8:	2401      	movle	r4, #1
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	f200 808a 	bhi.w	8007704 <_dtoa_r+0x304>
 80075f0:	e8df f003 	tbb	[pc, r3]
 80075f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80075f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80075fc:	441c      	add	r4, r3
 80075fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007602:	2b20      	cmp	r3, #32
 8007604:	bfc3      	ittte	gt
 8007606:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800760a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800760e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007612:	f1c3 0320 	rsble	r3, r3, #32
 8007616:	bfc6      	itte	gt
 8007618:	fa26 f000 	lsrgt.w	r0, r6, r0
 800761c:	4318      	orrgt	r0, r3
 800761e:	fa06 f003 	lslle.w	r0, r6, r3
 8007622:	f7f8 fedf 	bl	80003e4 <__aeabi_ui2d>
 8007626:	2301      	movs	r3, #1
 8007628:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800762c:	3c01      	subs	r4, #1
 800762e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007630:	e76f      	b.n	8007512 <_dtoa_r+0x112>
 8007632:	2301      	movs	r3, #1
 8007634:	e7b2      	b.n	800759c <_dtoa_r+0x19c>
 8007636:	900f      	str	r0, [sp, #60]	; 0x3c
 8007638:	e7b1      	b.n	800759e <_dtoa_r+0x19e>
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	eba3 030a 	sub.w	r3, r3, sl
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	f1ca 0300 	rsb	r3, sl, #0
 8007646:	930a      	str	r3, [sp, #40]	; 0x28
 8007648:	2300      	movs	r3, #0
 800764a:	930e      	str	r3, [sp, #56]	; 0x38
 800764c:	e7be      	b.n	80075cc <_dtoa_r+0x1cc>
 800764e:	2300      	movs	r3, #0
 8007650:	930b      	str	r3, [sp, #44]	; 0x2c
 8007652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007654:	2b00      	cmp	r3, #0
 8007656:	dc58      	bgt.n	800770a <_dtoa_r+0x30a>
 8007658:	f04f 0901 	mov.w	r9, #1
 800765c:	464b      	mov	r3, r9
 800765e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007662:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007666:	2200      	movs	r2, #0
 8007668:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800766a:	6042      	str	r2, [r0, #4]
 800766c:	2204      	movs	r2, #4
 800766e:	f102 0614 	add.w	r6, r2, #20
 8007672:	429e      	cmp	r6, r3
 8007674:	6841      	ldr	r1, [r0, #4]
 8007676:	d94e      	bls.n	8007716 <_dtoa_r+0x316>
 8007678:	4628      	mov	r0, r5
 800767a:	f000 fef3 	bl	8008464 <_Balloc>
 800767e:	9003      	str	r0, [sp, #12]
 8007680:	2800      	cmp	r0, #0
 8007682:	d14c      	bne.n	800771e <_dtoa_r+0x31e>
 8007684:	4602      	mov	r2, r0
 8007686:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800768a:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <_dtoa_r+0x2e8>)
 800768c:	e6cc      	b.n	8007428 <_dtoa_r+0x28>
 800768e:	2301      	movs	r3, #1
 8007690:	e7de      	b.n	8007650 <_dtoa_r+0x250>
 8007692:	2300      	movs	r3, #0
 8007694:	930b      	str	r3, [sp, #44]	; 0x2c
 8007696:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007698:	eb0a 0903 	add.w	r9, sl, r3
 800769c:	f109 0301 	add.w	r3, r9, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	9308      	str	r3, [sp, #32]
 80076a4:	bfb8      	it	lt
 80076a6:	2301      	movlt	r3, #1
 80076a8:	e7dd      	b.n	8007666 <_dtoa_r+0x266>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7f2      	b.n	8007694 <_dtoa_r+0x294>
 80076ae:	bf00      	nop
 80076b0:	636f4361 	.word	0x636f4361
 80076b4:	3fd287a7 	.word	0x3fd287a7
 80076b8:	8b60c8b3 	.word	0x8b60c8b3
 80076bc:	3fc68a28 	.word	0x3fc68a28
 80076c0:	509f79fb 	.word	0x509f79fb
 80076c4:	3fd34413 	.word	0x3fd34413
 80076c8:	08009efd 	.word	0x08009efd
 80076cc:	08009f14 	.word	0x08009f14
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	08009ef9 	.word	0x08009ef9
 80076d8:	08009ef0 	.word	0x08009ef0
 80076dc:	08009ecd 	.word	0x08009ecd
 80076e0:	3ff80000 	.word	0x3ff80000
 80076e4:	0800a068 	.word	0x0800a068
 80076e8:	08009f6f 	.word	0x08009f6f
 80076ec:	2401      	movs	r4, #1
 80076ee:	2300      	movs	r3, #0
 80076f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80076f2:	9322      	str	r3, [sp, #136]	; 0x88
 80076f4:	f04f 39ff 	mov.w	r9, #4294967295
 80076f8:	2200      	movs	r2, #0
 80076fa:	2312      	movs	r3, #18
 80076fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007700:	9223      	str	r2, [sp, #140]	; 0x8c
 8007702:	e7b0      	b.n	8007666 <_dtoa_r+0x266>
 8007704:	2301      	movs	r3, #1
 8007706:	930b      	str	r3, [sp, #44]	; 0x2c
 8007708:	e7f4      	b.n	80076f4 <_dtoa_r+0x2f4>
 800770a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800770e:	464b      	mov	r3, r9
 8007710:	f8cd 9020 	str.w	r9, [sp, #32]
 8007714:	e7a7      	b.n	8007666 <_dtoa_r+0x266>
 8007716:	3101      	adds	r1, #1
 8007718:	6041      	str	r1, [r0, #4]
 800771a:	0052      	lsls	r2, r2, #1
 800771c:	e7a7      	b.n	800766e <_dtoa_r+0x26e>
 800771e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007720:	9a03      	ldr	r2, [sp, #12]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	2b0e      	cmp	r3, #14
 8007728:	f200 80a8 	bhi.w	800787c <_dtoa_r+0x47c>
 800772c:	2c00      	cmp	r4, #0
 800772e:	f000 80a5 	beq.w	800787c <_dtoa_r+0x47c>
 8007732:	f1ba 0f00 	cmp.w	sl, #0
 8007736:	dd34      	ble.n	80077a2 <_dtoa_r+0x3a2>
 8007738:	4a9a      	ldr	r2, [pc, #616]	; (80079a4 <_dtoa_r+0x5a4>)
 800773a:	f00a 030f 	and.w	r3, sl, #15
 800773e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007742:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800774a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800774e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007752:	d016      	beq.n	8007782 <_dtoa_r+0x382>
 8007754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007758:	4b93      	ldr	r3, [pc, #588]	; (80079a8 <_dtoa_r+0x5a8>)
 800775a:	2703      	movs	r7, #3
 800775c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007760:	f7f8 ffe4 	bl	800072c <__aeabi_ddiv>
 8007764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007768:	f004 040f 	and.w	r4, r4, #15
 800776c:	4e8e      	ldr	r6, [pc, #568]	; (80079a8 <_dtoa_r+0x5a8>)
 800776e:	b954      	cbnz	r4, 8007786 <_dtoa_r+0x386>
 8007770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007778:	f7f8 ffd8 	bl	800072c <__aeabi_ddiv>
 800777c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007780:	e029      	b.n	80077d6 <_dtoa_r+0x3d6>
 8007782:	2702      	movs	r7, #2
 8007784:	e7f2      	b.n	800776c <_dtoa_r+0x36c>
 8007786:	07e1      	lsls	r1, r4, #31
 8007788:	d508      	bpl.n	800779c <_dtoa_r+0x39c>
 800778a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800778e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800779a:	3701      	adds	r7, #1
 800779c:	1064      	asrs	r4, r4, #1
 800779e:	3608      	adds	r6, #8
 80077a0:	e7e5      	b.n	800776e <_dtoa_r+0x36e>
 80077a2:	f000 80a5 	beq.w	80078f0 <_dtoa_r+0x4f0>
 80077a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077aa:	f1ca 0400 	rsb	r4, sl, #0
 80077ae:	4b7d      	ldr	r3, [pc, #500]	; (80079a4 <_dtoa_r+0x5a4>)
 80077b0:	f004 020f 	and.w	r2, r4, #15
 80077b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fe8c 	bl	80004d8 <__aeabi_dmul>
 80077c0:	2702      	movs	r7, #2
 80077c2:	2300      	movs	r3, #0
 80077c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077c8:	4e77      	ldr	r6, [pc, #476]	; (80079a8 <_dtoa_r+0x5a8>)
 80077ca:	1124      	asrs	r4, r4, #4
 80077cc:	2c00      	cmp	r4, #0
 80077ce:	f040 8084 	bne.w	80078da <_dtoa_r+0x4da>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1d2      	bne.n	800777c <_dtoa_r+0x37c>
 80077d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 808b 	beq.w	80078f4 <_dtoa_r+0x4f4>
 80077de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077ea:	2200      	movs	r2, #0
 80077ec:	4b6f      	ldr	r3, [pc, #444]	; (80079ac <_dtoa_r+0x5ac>)
 80077ee:	f7f9 f8e5 	bl	80009bc <__aeabi_dcmplt>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d07e      	beq.n	80078f4 <_dtoa_r+0x4f4>
 80077f6:	9b08      	ldr	r3, [sp, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d07b      	beq.n	80078f4 <_dtoa_r+0x4f4>
 80077fc:	f1b9 0f00 	cmp.w	r9, #0
 8007800:	dd38      	ble.n	8007874 <_dtoa_r+0x474>
 8007802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007806:	2200      	movs	r2, #0
 8007808:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <_dtoa_r+0x5b0>)
 800780a:	f7f8 fe65 	bl	80004d8 <__aeabi_dmul>
 800780e:	464c      	mov	r4, r9
 8007810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007814:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007818:	3701      	adds	r7, #1
 800781a:	4638      	mov	r0, r7
 800781c:	f7f8 fdf2 	bl	8000404 <__aeabi_i2d>
 8007820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007824:	f7f8 fe58 	bl	80004d8 <__aeabi_dmul>
 8007828:	2200      	movs	r2, #0
 800782a:	4b62      	ldr	r3, [pc, #392]	; (80079b4 <_dtoa_r+0x5b4>)
 800782c:	f7f8 fc9e 	bl	800016c <__adddf3>
 8007830:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007834:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007838:	9611      	str	r6, [sp, #68]	; 0x44
 800783a:	2c00      	cmp	r4, #0
 800783c:	d15d      	bne.n	80078fa <_dtoa_r+0x4fa>
 800783e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007842:	2200      	movs	r2, #0
 8007844:	4b5c      	ldr	r3, [pc, #368]	; (80079b8 <_dtoa_r+0x5b8>)
 8007846:	f7f8 fc8f 	bl	8000168 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007852:	4633      	mov	r3, r6
 8007854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007856:	f7f9 f8cf 	bl	80009f8 <__aeabi_dcmpgt>
 800785a:	2800      	cmp	r0, #0
 800785c:	f040 829c 	bne.w	8007d98 <_dtoa_r+0x998>
 8007860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007866:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800786a:	f7f9 f8a7 	bl	80009bc <__aeabi_dcmplt>
 800786e:	2800      	cmp	r0, #0
 8007870:	f040 8290 	bne.w	8007d94 <_dtoa_r+0x994>
 8007874:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007878:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800787c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800787e:	2b00      	cmp	r3, #0
 8007880:	f2c0 8152 	blt.w	8007b28 <_dtoa_r+0x728>
 8007884:	f1ba 0f0e 	cmp.w	sl, #14
 8007888:	f300 814e 	bgt.w	8007b28 <_dtoa_r+0x728>
 800788c:	4b45      	ldr	r3, [pc, #276]	; (80079a4 <_dtoa_r+0x5a4>)
 800788e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007892:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007896:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800789a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800789c:	2b00      	cmp	r3, #0
 800789e:	f280 80db 	bge.w	8007a58 <_dtoa_r+0x658>
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f300 80d7 	bgt.w	8007a58 <_dtoa_r+0x658>
 80078aa:	f040 8272 	bne.w	8007d92 <_dtoa_r+0x992>
 80078ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078b2:	2200      	movs	r2, #0
 80078b4:	4b40      	ldr	r3, [pc, #256]	; (80079b8 <_dtoa_r+0x5b8>)
 80078b6:	f7f8 fe0f 	bl	80004d8 <__aeabi_dmul>
 80078ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078be:	f7f9 f891 	bl	80009e4 <__aeabi_dcmpge>
 80078c2:	9c08      	ldr	r4, [sp, #32]
 80078c4:	4626      	mov	r6, r4
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f040 8248 	bne.w	8007d5c <_dtoa_r+0x95c>
 80078cc:	2331      	movs	r3, #49	; 0x31
 80078ce:	9f03      	ldr	r7, [sp, #12]
 80078d0:	f10a 0a01 	add.w	sl, sl, #1
 80078d4:	f807 3b01 	strb.w	r3, [r7], #1
 80078d8:	e244      	b.n	8007d64 <_dtoa_r+0x964>
 80078da:	07e2      	lsls	r2, r4, #31
 80078dc:	d505      	bpl.n	80078ea <_dtoa_r+0x4ea>
 80078de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078e2:	f7f8 fdf9 	bl	80004d8 <__aeabi_dmul>
 80078e6:	2301      	movs	r3, #1
 80078e8:	3701      	adds	r7, #1
 80078ea:	1064      	asrs	r4, r4, #1
 80078ec:	3608      	adds	r6, #8
 80078ee:	e76d      	b.n	80077cc <_dtoa_r+0x3cc>
 80078f0:	2702      	movs	r7, #2
 80078f2:	e770      	b.n	80077d6 <_dtoa_r+0x3d6>
 80078f4:	46d0      	mov	r8, sl
 80078f6:	9c08      	ldr	r4, [sp, #32]
 80078f8:	e78f      	b.n	800781a <_dtoa_r+0x41a>
 80078fa:	9903      	ldr	r1, [sp, #12]
 80078fc:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <_dtoa_r+0x5a4>)
 80078fe:	4421      	add	r1, r4
 8007900:	9112      	str	r1, [sp, #72]	; 0x48
 8007902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007908:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800790c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007910:	2900      	cmp	r1, #0
 8007912:	d055      	beq.n	80079c0 <_dtoa_r+0x5c0>
 8007914:	2000      	movs	r0, #0
 8007916:	4929      	ldr	r1, [pc, #164]	; (80079bc <_dtoa_r+0x5bc>)
 8007918:	f7f8 ff08 	bl	800072c <__aeabi_ddiv>
 800791c:	463b      	mov	r3, r7
 800791e:	4632      	mov	r2, r6
 8007920:	f7f8 fc22 	bl	8000168 <__aeabi_dsub>
 8007924:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007928:	9f03      	ldr	r7, [sp, #12]
 800792a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800792e:	f7f9 f883 	bl	8000a38 <__aeabi_d2iz>
 8007932:	4604      	mov	r4, r0
 8007934:	f7f8 fd66 	bl	8000404 <__aeabi_i2d>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007940:	f7f8 fc12 	bl	8000168 <__aeabi_dsub>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	3430      	adds	r4, #48	; 0x30
 800794a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800794e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007952:	f807 4b01 	strb.w	r4, [r7], #1
 8007956:	f7f9 f831 	bl	80009bc <__aeabi_dcmplt>
 800795a:	2800      	cmp	r0, #0
 800795c:	d174      	bne.n	8007a48 <_dtoa_r+0x648>
 800795e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007962:	2000      	movs	r0, #0
 8007964:	4911      	ldr	r1, [pc, #68]	; (80079ac <_dtoa_r+0x5ac>)
 8007966:	f7f8 fbff 	bl	8000168 <__aeabi_dsub>
 800796a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800796e:	f7f9 f825 	bl	80009bc <__aeabi_dcmplt>
 8007972:	2800      	cmp	r0, #0
 8007974:	f040 80b7 	bne.w	8007ae6 <_dtoa_r+0x6e6>
 8007978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800797a:	429f      	cmp	r7, r3
 800797c:	f43f af7a 	beq.w	8007874 <_dtoa_r+0x474>
 8007980:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007984:	2200      	movs	r2, #0
 8007986:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <_dtoa_r+0x5b0>)
 8007988:	f7f8 fda6 	bl	80004d8 <__aeabi_dmul>
 800798c:	2200      	movs	r2, #0
 800798e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <_dtoa_r+0x5b0>)
 8007998:	f7f8 fd9e 	bl	80004d8 <__aeabi_dmul>
 800799c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079a0:	e7c3      	b.n	800792a <_dtoa_r+0x52a>
 80079a2:	bf00      	nop
 80079a4:	0800a068 	.word	0x0800a068
 80079a8:	0800a040 	.word	0x0800a040
 80079ac:	3ff00000 	.word	0x3ff00000
 80079b0:	40240000 	.word	0x40240000
 80079b4:	401c0000 	.word	0x401c0000
 80079b8:	40140000 	.word	0x40140000
 80079bc:	3fe00000 	.word	0x3fe00000
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f8 fd88 	bl	80004d8 <__aeabi_dmul>
 80079c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ce:	9c03      	ldr	r4, [sp, #12]
 80079d0:	9314      	str	r3, [sp, #80]	; 0x50
 80079d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079d6:	f7f9 f82f 	bl	8000a38 <__aeabi_d2iz>
 80079da:	9015      	str	r0, [sp, #84]	; 0x54
 80079dc:	f7f8 fd12 	bl	8000404 <__aeabi_i2d>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e8:	f7f8 fbbe 	bl	8000168 <__aeabi_dsub>
 80079ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ee:	4606      	mov	r6, r0
 80079f0:	3330      	adds	r3, #48	; 0x30
 80079f2:	f804 3b01 	strb.w	r3, [r4], #1
 80079f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079f8:	460f      	mov	r7, r1
 80079fa:	429c      	cmp	r4, r3
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	d124      	bne.n	8007a4c <_dtoa_r+0x64c>
 8007a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a06:	4bb0      	ldr	r3, [pc, #704]	; (8007cc8 <_dtoa_r+0x8c8>)
 8007a08:	f7f8 fbb0 	bl	800016c <__adddf3>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4630      	mov	r0, r6
 8007a12:	4639      	mov	r1, r7
 8007a14:	f7f8 fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d163      	bne.n	8007ae4 <_dtoa_r+0x6e4>
 8007a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a20:	2000      	movs	r0, #0
 8007a22:	49a9      	ldr	r1, [pc, #676]	; (8007cc8 <_dtoa_r+0x8c8>)
 8007a24:	f7f8 fba0 	bl	8000168 <__aeabi_dsub>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f7f8 ffc4 	bl	80009bc <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f43f af1d 	beq.w	8007874 <_dtoa_r+0x474>
 8007a3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a3c:	1e7b      	subs	r3, r7, #1
 8007a3e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a44:	2b30      	cmp	r3, #48	; 0x30
 8007a46:	d0f8      	beq.n	8007a3a <_dtoa_r+0x63a>
 8007a48:	46c2      	mov	sl, r8
 8007a4a:	e03b      	b.n	8007ac4 <_dtoa_r+0x6c4>
 8007a4c:	4b9f      	ldr	r3, [pc, #636]	; (8007ccc <_dtoa_r+0x8cc>)
 8007a4e:	f7f8 fd43 	bl	80004d8 <__aeabi_dmul>
 8007a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a56:	e7bc      	b.n	80079d2 <_dtoa_r+0x5d2>
 8007a58:	9f03      	ldr	r7, [sp, #12]
 8007a5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	f7f8 fe61 	bl	800072c <__aeabi_ddiv>
 8007a6a:	f7f8 ffe5 	bl	8000a38 <__aeabi_d2iz>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f7f8 fcc8 	bl	8000404 <__aeabi_i2d>
 8007a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a78:	f7f8 fd2e 	bl	80004d8 <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f8 fb70 	bl	8000168 <__aeabi_dsub>
 8007a88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007a8c:	f807 6b01 	strb.w	r6, [r7], #1
 8007a90:	9e03      	ldr	r6, [sp, #12]
 8007a92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007a96:	1bbe      	subs	r6, r7, r6
 8007a98:	45b4      	cmp	ip, r6
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	d136      	bne.n	8007b0e <_dtoa_r+0x70e>
 8007aa0:	f7f8 fb64 	bl	800016c <__adddf3>
 8007aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	4689      	mov	r9, r1
 8007aac:	f7f8 ffa4 	bl	80009f8 <__aeabi_dcmpgt>
 8007ab0:	bb58      	cbnz	r0, 8007b0a <_dtoa_r+0x70a>
 8007ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f8 ff75 	bl	80009a8 <__aeabi_dcmpeq>
 8007abe:	b108      	cbz	r0, 8007ac4 <_dtoa_r+0x6c4>
 8007ac0:	07e1      	lsls	r1, r4, #31
 8007ac2:	d422      	bmi.n	8007b0a <_dtoa_r+0x70a>
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	f000 fd0c 	bl	80084e4 <_Bfree>
 8007acc:	2300      	movs	r3, #0
 8007ace:	703b      	strb	r3, [r7, #0]
 8007ad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007ad2:	f10a 0001 	add.w	r0, sl, #1
 8007ad6:	6018      	str	r0, [r3, #0]
 8007ad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f43f acde 	beq.w	800749c <_dtoa_r+0x9c>
 8007ae0:	601f      	str	r7, [r3, #0]
 8007ae2:	e4db      	b.n	800749c <_dtoa_r+0x9c>
 8007ae4:	4627      	mov	r7, r4
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	461f      	mov	r7, r3
 8007aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aee:	2a39      	cmp	r2, #57	; 0x39
 8007af0:	d107      	bne.n	8007b02 <_dtoa_r+0x702>
 8007af2:	9a03      	ldr	r2, [sp, #12]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d1f7      	bne.n	8007ae8 <_dtoa_r+0x6e8>
 8007af8:	2230      	movs	r2, #48	; 0x30
 8007afa:	9903      	ldr	r1, [sp, #12]
 8007afc:	f108 0801 	add.w	r8, r8, #1
 8007b00:	700a      	strb	r2, [r1, #0]
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	3201      	adds	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	e79e      	b.n	8007a48 <_dtoa_r+0x648>
 8007b0a:	46d0      	mov	r8, sl
 8007b0c:	e7eb      	b.n	8007ae6 <_dtoa_r+0x6e6>
 8007b0e:	2200      	movs	r2, #0
 8007b10:	4b6e      	ldr	r3, [pc, #440]	; (8007ccc <_dtoa_r+0x8cc>)
 8007b12:	f7f8 fce1 	bl	80004d8 <__aeabi_dmul>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	f7f8 ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d09b      	beq.n	8007a5e <_dtoa_r+0x65e>
 8007b26:	e7cd      	b.n	8007ac4 <_dtoa_r+0x6c4>
 8007b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	f000 80d0 	beq.w	8007cd0 <_dtoa_r+0x8d0>
 8007b30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	f300 80ae 	bgt.w	8007c94 <_dtoa_r+0x894>
 8007b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	f000 80a6 	beq.w	8007c8c <_dtoa_r+0x88c>
 8007b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b46:	9f06      	ldr	r7, [sp, #24]
 8007b48:	9a06      	ldr	r2, [sp, #24]
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	441a      	add	r2, r3
 8007b4e:	9206      	str	r2, [sp, #24]
 8007b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b52:	4628      	mov	r0, r5
 8007b54:	441a      	add	r2, r3
 8007b56:	9209      	str	r2, [sp, #36]	; 0x24
 8007b58:	f000 fd7a 	bl	8008650 <__i2b>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	dd0c      	ble.n	8007b7c <_dtoa_r+0x77c>
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd09      	ble.n	8007b7c <_dtoa_r+0x77c>
 8007b68:	42bb      	cmp	r3, r7
 8007b6a:	bfa8      	it	ge
 8007b6c:	463b      	movge	r3, r7
 8007b6e:	9a06      	ldr	r2, [sp, #24]
 8007b70:	1aff      	subs	r7, r7, r3
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	9206      	str	r2, [sp, #24]
 8007b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	b1f3      	cbz	r3, 8007bbe <_dtoa_r+0x7be>
 8007b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80a8 	beq.w	8007cd8 <_dtoa_r+0x8d8>
 8007b88:	2c00      	cmp	r4, #0
 8007b8a:	dd10      	ble.n	8007bae <_dtoa_r+0x7ae>
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 fe1b 	bl	80087cc <__pow5mult>
 8007b96:	465a      	mov	r2, fp
 8007b98:	4601      	mov	r1, r0
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 fd6d 	bl	800867c <__multiply>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fc9c 	bl	80084e4 <_Bfree>
 8007bac:	46c3      	mov	fp, r8
 8007bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb0:	1b1a      	subs	r2, r3, r4
 8007bb2:	d004      	beq.n	8007bbe <_dtoa_r+0x7be>
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 fe08 	bl	80087cc <__pow5mult>
 8007bbc:	4683      	mov	fp, r0
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fd45 	bl	8008650 <__i2b>
 8007bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc8:	4604      	mov	r4, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f340 8086 	ble.w	8007cdc <_dtoa_r+0x8dc>
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fdf9 	bl	80087cc <__pow5mult>
 8007bda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bdc:	4604      	mov	r4, r0
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	dd7f      	ble.n	8007ce2 <_dtoa_r+0x8e2>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bec:	6918      	ldr	r0, [r3, #16]
 8007bee:	f000 fce1 	bl	80085b4 <__hi0bits>
 8007bf2:	f1c0 0020 	rsb	r0, r0, #32
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	4418      	add	r0, r3
 8007bfa:	f010 001f 	ands.w	r0, r0, #31
 8007bfe:	f000 8092 	beq.w	8007d26 <_dtoa_r+0x926>
 8007c02:	f1c0 0320 	rsb	r3, r0, #32
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	f340 808a 	ble.w	8007d20 <_dtoa_r+0x920>
 8007c0c:	f1c0 001c 	rsb	r0, r0, #28
 8007c10:	9b06      	ldr	r3, [sp, #24]
 8007c12:	4407      	add	r7, r0
 8007c14:	4403      	add	r3, r0
 8007c16:	9306      	str	r3, [sp, #24]
 8007c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1a:	4403      	add	r3, r0
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd05      	ble.n	8007c30 <_dtoa_r+0x830>
 8007c24:	4659      	mov	r1, fp
 8007c26:	461a      	mov	r2, r3
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fe29 	bl	8008880 <__lshift>
 8007c2e:	4683      	mov	fp, r0
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd05      	ble.n	8007c42 <_dtoa_r+0x842>
 8007c36:	4621      	mov	r1, r4
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 fe20 	bl	8008880 <__lshift>
 8007c40:	4604      	mov	r4, r0
 8007c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d070      	beq.n	8007d2a <_dtoa_r+0x92a>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4658      	mov	r0, fp
 8007c4c:	f000 fe88 	bl	8008960 <__mcmp>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	da6a      	bge.n	8007d2a <_dtoa_r+0x92a>
 8007c54:	2300      	movs	r3, #0
 8007c56:	4659      	mov	r1, fp
 8007c58:	220a      	movs	r2, #10
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 fc64 	bl	8008528 <__multadd>
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	4683      	mov	fp, r0
 8007c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8194 	beq.w	8007f96 <_dtoa_r+0xb96>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	2300      	movs	r3, #0
 8007c72:	220a      	movs	r2, #10
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 fc57 	bl	8008528 <__multadd>
 8007c7a:	f1b9 0f00 	cmp.w	r9, #0
 8007c7e:	4606      	mov	r6, r0
 8007c80:	f300 8093 	bgt.w	8007daa <_dtoa_r+0x9aa>
 8007c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	dc57      	bgt.n	8007d3a <_dtoa_r+0x93a>
 8007c8a:	e08e      	b.n	8007daa <_dtoa_r+0x9aa>
 8007c8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c92:	e757      	b.n	8007b44 <_dtoa_r+0x744>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	1e5c      	subs	r4, r3, #1
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	42a3      	cmp	r3, r4
 8007c9c:	bfb7      	itett	lt
 8007c9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ca0:	1b1c      	subge	r4, r3, r4
 8007ca2:	1ae2      	sublt	r2, r4, r3
 8007ca4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007ca6:	bfbe      	ittt	lt
 8007ca8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007caa:	189b      	addlt	r3, r3, r2
 8007cac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007cae:	9b08      	ldr	r3, [sp, #32]
 8007cb0:	bfb8      	it	lt
 8007cb2:	2400      	movlt	r4, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bfbb      	ittet	lt
 8007cb8:	9b06      	ldrlt	r3, [sp, #24]
 8007cba:	9a08      	ldrlt	r2, [sp, #32]
 8007cbc:	9f06      	ldrge	r7, [sp, #24]
 8007cbe:	1a9f      	sublt	r7, r3, r2
 8007cc0:	bfac      	ite	ge
 8007cc2:	9b08      	ldrge	r3, [sp, #32]
 8007cc4:	2300      	movlt	r3, #0
 8007cc6:	e73f      	b.n	8007b48 <_dtoa_r+0x748>
 8007cc8:	3fe00000 	.word	0x3fe00000
 8007ccc:	40240000 	.word	0x40240000
 8007cd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007cd2:	9f06      	ldr	r7, [sp, #24]
 8007cd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007cd6:	e742      	b.n	8007b5e <_dtoa_r+0x75e>
 8007cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cda:	e76b      	b.n	8007bb4 <_dtoa_r+0x7b4>
 8007cdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	dc19      	bgt.n	8007d16 <_dtoa_r+0x916>
 8007ce2:	9b04      	ldr	r3, [sp, #16]
 8007ce4:	b9bb      	cbnz	r3, 8007d16 <_dtoa_r+0x916>
 8007ce6:	9b05      	ldr	r3, [sp, #20]
 8007ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cec:	b99b      	cbnz	r3, 8007d16 <_dtoa_r+0x916>
 8007cee:	9b05      	ldr	r3, [sp, #20]
 8007cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cf4:	0d1b      	lsrs	r3, r3, #20
 8007cf6:	051b      	lsls	r3, r3, #20
 8007cf8:	b183      	cbz	r3, 8007d1c <_dtoa_r+0x91c>
 8007cfa:	f04f 0801 	mov.w	r8, #1
 8007cfe:	9b06      	ldr	r3, [sp, #24]
 8007d00:	3301      	adds	r3, #1
 8007d02:	9306      	str	r3, [sp, #24]
 8007d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f47f af6a 	bne.w	8007be6 <_dtoa_r+0x7e6>
 8007d12:	2001      	movs	r0, #1
 8007d14:	e76f      	b.n	8007bf6 <_dtoa_r+0x7f6>
 8007d16:	f04f 0800 	mov.w	r8, #0
 8007d1a:	e7f6      	b.n	8007d0a <_dtoa_r+0x90a>
 8007d1c:	4698      	mov	r8, r3
 8007d1e:	e7f4      	b.n	8007d0a <_dtoa_r+0x90a>
 8007d20:	f43f af7d 	beq.w	8007c1e <_dtoa_r+0x81e>
 8007d24:	4618      	mov	r0, r3
 8007d26:	301c      	adds	r0, #28
 8007d28:	e772      	b.n	8007c10 <_dtoa_r+0x810>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc36      	bgt.n	8007d9e <_dtoa_r+0x99e>
 8007d30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	dd33      	ble.n	8007d9e <_dtoa_r+0x99e>
 8007d36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	d10d      	bne.n	8007d5c <_dtoa_r+0x95c>
 8007d40:	4621      	mov	r1, r4
 8007d42:	464b      	mov	r3, r9
 8007d44:	2205      	movs	r2, #5
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 fbee 	bl	8008528 <__multadd>
 8007d4c:	4601      	mov	r1, r0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4658      	mov	r0, fp
 8007d52:	f000 fe05 	bl	8008960 <__mcmp>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f73f adb8 	bgt.w	80078cc <_dtoa_r+0x4cc>
 8007d5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d5e:	9f03      	ldr	r7, [sp, #12]
 8007d60:	ea6f 0a03 	mvn.w	sl, r3
 8007d64:	f04f 0800 	mov.w	r8, #0
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 fbba 	bl	80084e4 <_Bfree>
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	f43f aea7 	beq.w	8007ac4 <_dtoa_r+0x6c4>
 8007d76:	f1b8 0f00 	cmp.w	r8, #0
 8007d7a:	d005      	beq.n	8007d88 <_dtoa_r+0x988>
 8007d7c:	45b0      	cmp	r8, r6
 8007d7e:	d003      	beq.n	8007d88 <_dtoa_r+0x988>
 8007d80:	4641      	mov	r1, r8
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 fbae 	bl	80084e4 <_Bfree>
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 fbaa 	bl	80084e4 <_Bfree>
 8007d90:	e698      	b.n	8007ac4 <_dtoa_r+0x6c4>
 8007d92:	2400      	movs	r4, #0
 8007d94:	4626      	mov	r6, r4
 8007d96:	e7e1      	b.n	8007d5c <_dtoa_r+0x95c>
 8007d98:	46c2      	mov	sl, r8
 8007d9a:	4626      	mov	r6, r4
 8007d9c:	e596      	b.n	80078cc <_dtoa_r+0x4cc>
 8007d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80fd 	beq.w	8007fa4 <_dtoa_r+0xba4>
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	dd05      	ble.n	8007dba <_dtoa_r+0x9ba>
 8007dae:	4631      	mov	r1, r6
 8007db0:	463a      	mov	r2, r7
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 fd64 	bl	8008880 <__lshift>
 8007db8:	4606      	mov	r6, r0
 8007dba:	f1b8 0f00 	cmp.w	r8, #0
 8007dbe:	d05c      	beq.n	8007e7a <_dtoa_r+0xa7a>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	6871      	ldr	r1, [r6, #4]
 8007dc4:	f000 fb4e 	bl	8008464 <_Balloc>
 8007dc8:	4607      	mov	r7, r0
 8007dca:	b928      	cbnz	r0, 8007dd8 <_dtoa_r+0x9d8>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dd2:	4b7f      	ldr	r3, [pc, #508]	; (8007fd0 <_dtoa_r+0xbd0>)
 8007dd4:	f7ff bb28 	b.w	8007428 <_dtoa_r+0x28>
 8007dd8:	6932      	ldr	r2, [r6, #16]
 8007dda:	f106 010c 	add.w	r1, r6, #12
 8007dde:	3202      	adds	r2, #2
 8007de0:	0092      	lsls	r2, r2, #2
 8007de2:	300c      	adds	r0, #12
 8007de4:	f000 fb30 	bl	8008448 <memcpy>
 8007de8:	2201      	movs	r2, #1
 8007dea:	4639      	mov	r1, r7
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 fd47 	bl	8008880 <__lshift>
 8007df2:	46b0      	mov	r8, r6
 8007df4:	4606      	mov	r6, r0
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	9308      	str	r3, [sp, #32]
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	444b      	add	r3, r9
 8007e00:	930a      	str	r3, [sp, #40]	; 0x28
 8007e02:	9b04      	ldr	r3, [sp, #16]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0a:	9b08      	ldr	r3, [sp, #32]
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4658      	mov	r0, fp
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	f7ff fa68 	bl	80072e8 <quorem>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	3330      	adds	r3, #48	; 0x30
 8007e1e:	9006      	str	r0, [sp, #24]
 8007e20:	4658      	mov	r0, fp
 8007e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e24:	f000 fd9c 	bl	8008960 <__mcmp>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4681      	mov	r9, r0
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fdb2 	bl	8008998 <__mdiff>
 8007e34:	68c2      	ldr	r2, [r0, #12]
 8007e36:	4607      	mov	r7, r0
 8007e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3a:	bb02      	cbnz	r2, 8007e7e <_dtoa_r+0xa7e>
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f000 fd8e 	bl	8008960 <__mcmp>
 8007e44:	4602      	mov	r2, r0
 8007e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e48:	4639      	mov	r1, r7
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007e50:	f000 fb48 	bl	80084e4 <_Bfree>
 8007e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e58:	9f08      	ldr	r7, [sp, #32]
 8007e5a:	ea43 0102 	orr.w	r1, r3, r2
 8007e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e60:	430b      	orrs	r3, r1
 8007e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e64:	d10d      	bne.n	8007e82 <_dtoa_r+0xa82>
 8007e66:	2b39      	cmp	r3, #57	; 0x39
 8007e68:	d029      	beq.n	8007ebe <_dtoa_r+0xabe>
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	dd01      	ble.n	8007e74 <_dtoa_r+0xa74>
 8007e70:	9b06      	ldr	r3, [sp, #24]
 8007e72:	3331      	adds	r3, #49	; 0x31
 8007e74:	9a04      	ldr	r2, [sp, #16]
 8007e76:	7013      	strb	r3, [r2, #0]
 8007e78:	e776      	b.n	8007d68 <_dtoa_r+0x968>
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	e7b9      	b.n	8007df2 <_dtoa_r+0x9f2>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	e7e2      	b.n	8007e48 <_dtoa_r+0xa48>
 8007e82:	f1b9 0f00 	cmp.w	r9, #0
 8007e86:	db06      	blt.n	8007e96 <_dtoa_r+0xa96>
 8007e88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007e8a:	ea41 0909 	orr.w	r9, r1, r9
 8007e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e90:	ea59 0101 	orrs.w	r1, r9, r1
 8007e94:	d120      	bne.n	8007ed8 <_dtoa_r+0xad8>
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	ddec      	ble.n	8007e74 <_dtoa_r+0xa74>
 8007e9a:	4659      	mov	r1, fp
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	9308      	str	r3, [sp, #32]
 8007ea2:	f000 fced 	bl	8008880 <__lshift>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4683      	mov	fp, r0
 8007eaa:	f000 fd59 	bl	8008960 <__mcmp>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	dc02      	bgt.n	8007eba <_dtoa_r+0xaba>
 8007eb4:	d1de      	bne.n	8007e74 <_dtoa_r+0xa74>
 8007eb6:	07da      	lsls	r2, r3, #31
 8007eb8:	d5dc      	bpl.n	8007e74 <_dtoa_r+0xa74>
 8007eba:	2b39      	cmp	r3, #57	; 0x39
 8007ebc:	d1d8      	bne.n	8007e70 <_dtoa_r+0xa70>
 8007ebe:	2339      	movs	r3, #57	; 0x39
 8007ec0:	9a04      	ldr	r2, [sp, #16]
 8007ec2:	7013      	strb	r3, [r2, #0]
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	461f      	mov	r7, r3
 8007ec8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	2a39      	cmp	r2, #57	; 0x39
 8007ed0:	d050      	beq.n	8007f74 <_dtoa_r+0xb74>
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e747      	b.n	8007d68 <_dtoa_r+0x968>
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	dd03      	ble.n	8007ee4 <_dtoa_r+0xae4>
 8007edc:	2b39      	cmp	r3, #57	; 0x39
 8007ede:	d0ee      	beq.n	8007ebe <_dtoa_r+0xabe>
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	e7c7      	b.n	8007e74 <_dtoa_r+0xa74>
 8007ee4:	9a08      	ldr	r2, [sp, #32]
 8007ee6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ee8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007eec:	428a      	cmp	r2, r1
 8007eee:	d02a      	beq.n	8007f46 <_dtoa_r+0xb46>
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 fb16 	bl	8008528 <__multadd>
 8007efc:	45b0      	cmp	r8, r6
 8007efe:	4683      	mov	fp, r0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	f04f 020a 	mov.w	r2, #10
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	d107      	bne.n	8007f1e <_dtoa_r+0xb1e>
 8007f0e:	f000 fb0b 	bl	8008528 <__multadd>
 8007f12:	4680      	mov	r8, r0
 8007f14:	4606      	mov	r6, r0
 8007f16:	9b08      	ldr	r3, [sp, #32]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	9308      	str	r3, [sp, #32]
 8007f1c:	e775      	b.n	8007e0a <_dtoa_r+0xa0a>
 8007f1e:	f000 fb03 	bl	8008528 <__multadd>
 8007f22:	4631      	mov	r1, r6
 8007f24:	4680      	mov	r8, r0
 8007f26:	2300      	movs	r3, #0
 8007f28:	220a      	movs	r2, #10
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 fafc 	bl	8008528 <__multadd>
 8007f30:	4606      	mov	r6, r0
 8007f32:	e7f0      	b.n	8007f16 <_dtoa_r+0xb16>
 8007f34:	f1b9 0f00 	cmp.w	r9, #0
 8007f38:	bfcc      	ite	gt
 8007f3a:	464f      	movgt	r7, r9
 8007f3c:	2701      	movle	r7, #1
 8007f3e:	f04f 0800 	mov.w	r8, #0
 8007f42:	9a03      	ldr	r2, [sp, #12]
 8007f44:	4417      	add	r7, r2
 8007f46:	4659      	mov	r1, fp
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	9308      	str	r3, [sp, #32]
 8007f4e:	f000 fc97 	bl	8008880 <__lshift>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4683      	mov	fp, r0
 8007f56:	f000 fd03 	bl	8008960 <__mcmp>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	dcb2      	bgt.n	8007ec4 <_dtoa_r+0xac4>
 8007f5e:	d102      	bne.n	8007f66 <_dtoa_r+0xb66>
 8007f60:	9b08      	ldr	r3, [sp, #32]
 8007f62:	07db      	lsls	r3, r3, #31
 8007f64:	d4ae      	bmi.n	8007ec4 <_dtoa_r+0xac4>
 8007f66:	463b      	mov	r3, r7
 8007f68:	461f      	mov	r7, r3
 8007f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f6e:	2a30      	cmp	r2, #48	; 0x30
 8007f70:	d0fa      	beq.n	8007f68 <_dtoa_r+0xb68>
 8007f72:	e6f9      	b.n	8007d68 <_dtoa_r+0x968>
 8007f74:	9a03      	ldr	r2, [sp, #12]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d1a5      	bne.n	8007ec6 <_dtoa_r+0xac6>
 8007f7a:	2331      	movs	r3, #49	; 0x31
 8007f7c:	f10a 0a01 	add.w	sl, sl, #1
 8007f80:	e779      	b.n	8007e76 <_dtoa_r+0xa76>
 8007f82:	4b14      	ldr	r3, [pc, #80]	; (8007fd4 <_dtoa_r+0xbd4>)
 8007f84:	f7ff baa8 	b.w	80074d8 <_dtoa_r+0xd8>
 8007f88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f aa81 	bne.w	8007492 <_dtoa_r+0x92>
 8007f90:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <_dtoa_r+0xbd8>)
 8007f92:	f7ff baa1 	b.w	80074d8 <_dtoa_r+0xd8>
 8007f96:	f1b9 0f00 	cmp.w	r9, #0
 8007f9a:	dc03      	bgt.n	8007fa4 <_dtoa_r+0xba4>
 8007f9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	f73f aecb 	bgt.w	8007d3a <_dtoa_r+0x93a>
 8007fa4:	9f03      	ldr	r7, [sp, #12]
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4658      	mov	r0, fp
 8007faa:	f7ff f99d 	bl	80072e8 <quorem>
 8007fae:	9a03      	ldr	r2, [sp, #12]
 8007fb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007fb4:	f807 3b01 	strb.w	r3, [r7], #1
 8007fb8:	1aba      	subs	r2, r7, r2
 8007fba:	4591      	cmp	r9, r2
 8007fbc:	ddba      	ble.n	8007f34 <_dtoa_r+0xb34>
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	220a      	movs	r2, #10
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f000 faaf 	bl	8008528 <__multadd>
 8007fca:	4683      	mov	fp, r0
 8007fcc:	e7eb      	b.n	8007fa6 <_dtoa_r+0xba6>
 8007fce:	bf00      	nop
 8007fd0:	08009f6f 	.word	0x08009f6f
 8007fd4:	08009ecc 	.word	0x08009ecc
 8007fd8:	08009ef0 	.word	0x08009ef0

08007fdc <__sflush_r>:
 8007fdc:	898a      	ldrh	r2, [r1, #12]
 8007fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	0710      	lsls	r0, r2, #28
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	d457      	bmi.n	8008098 <__sflush_r+0xbc>
 8007fe8:	684b      	ldr	r3, [r1, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dc04      	bgt.n	8007ff8 <__sflush_r+0x1c>
 8007fee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dc01      	bgt.n	8007ff8 <__sflush_r+0x1c>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d0fa      	beq.n	8007ff4 <__sflush_r+0x18>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008004:	682f      	ldr	r7, [r5, #0]
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	d032      	beq.n	8008070 <__sflush_r+0x94>
 800800a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	075a      	lsls	r2, r3, #29
 8008010:	d505      	bpl.n	800801e <__sflush_r+0x42>
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	1ac0      	subs	r0, r0, r3
 8008016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008018:	b10b      	cbz	r3, 800801e <__sflush_r+0x42>
 800801a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800801c:	1ac0      	subs	r0, r0, r3
 800801e:	2300      	movs	r3, #0
 8008020:	4602      	mov	r2, r0
 8008022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008024:	4628      	mov	r0, r5
 8008026:	6a21      	ldr	r1, [r4, #32]
 8008028:	47b0      	blx	r6
 800802a:	1c43      	adds	r3, r0, #1
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	d106      	bne.n	800803e <__sflush_r+0x62>
 8008030:	6829      	ldr	r1, [r5, #0]
 8008032:	291d      	cmp	r1, #29
 8008034:	d82c      	bhi.n	8008090 <__sflush_r+0xb4>
 8008036:	4a29      	ldr	r2, [pc, #164]	; (80080dc <__sflush_r+0x100>)
 8008038:	40ca      	lsrs	r2, r1
 800803a:	07d6      	lsls	r6, r2, #31
 800803c:	d528      	bpl.n	8008090 <__sflush_r+0xb4>
 800803e:	2200      	movs	r2, #0
 8008040:	6062      	str	r2, [r4, #4]
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	04d9      	lsls	r1, r3, #19
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	d504      	bpl.n	8008054 <__sflush_r+0x78>
 800804a:	1c42      	adds	r2, r0, #1
 800804c:	d101      	bne.n	8008052 <__sflush_r+0x76>
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	b903      	cbnz	r3, 8008054 <__sflush_r+0x78>
 8008052:	6560      	str	r0, [r4, #84]	; 0x54
 8008054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008056:	602f      	str	r7, [r5, #0]
 8008058:	2900      	cmp	r1, #0
 800805a:	d0cb      	beq.n	8007ff4 <__sflush_r+0x18>
 800805c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008060:	4299      	cmp	r1, r3
 8008062:	d002      	beq.n	800806a <__sflush_r+0x8e>
 8008064:	4628      	mov	r0, r5
 8008066:	f000 fd93 	bl	8008b90 <_free_r>
 800806a:	2000      	movs	r0, #0
 800806c:	6360      	str	r0, [r4, #52]	; 0x34
 800806e:	e7c2      	b.n	8007ff6 <__sflush_r+0x1a>
 8008070:	6a21      	ldr	r1, [r4, #32]
 8008072:	2301      	movs	r3, #1
 8008074:	4628      	mov	r0, r5
 8008076:	47b0      	blx	r6
 8008078:	1c41      	adds	r1, r0, #1
 800807a:	d1c7      	bne.n	800800c <__sflush_r+0x30>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0c4      	beq.n	800800c <__sflush_r+0x30>
 8008082:	2b1d      	cmp	r3, #29
 8008084:	d001      	beq.n	800808a <__sflush_r+0xae>
 8008086:	2b16      	cmp	r3, #22
 8008088:	d101      	bne.n	800808e <__sflush_r+0xb2>
 800808a:	602f      	str	r7, [r5, #0]
 800808c:	e7b2      	b.n	8007ff4 <__sflush_r+0x18>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	e7ae      	b.n	8007ff6 <__sflush_r+0x1a>
 8008098:	690f      	ldr	r7, [r1, #16]
 800809a:	2f00      	cmp	r7, #0
 800809c:	d0aa      	beq.n	8007ff4 <__sflush_r+0x18>
 800809e:	0793      	lsls	r3, r2, #30
 80080a0:	bf18      	it	ne
 80080a2:	2300      	movne	r3, #0
 80080a4:	680e      	ldr	r6, [r1, #0]
 80080a6:	bf08      	it	eq
 80080a8:	694b      	ldreq	r3, [r1, #20]
 80080aa:	1bf6      	subs	r6, r6, r7
 80080ac:	600f      	str	r7, [r1, #0]
 80080ae:	608b      	str	r3, [r1, #8]
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	dd9f      	ble.n	8007ff4 <__sflush_r+0x18>
 80080b4:	4633      	mov	r3, r6
 80080b6:	463a      	mov	r2, r7
 80080b8:	4628      	mov	r0, r5
 80080ba:	6a21      	ldr	r1, [r4, #32]
 80080bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80080c0:	47e0      	blx	ip
 80080c2:	2800      	cmp	r0, #0
 80080c4:	dc06      	bgt.n	80080d4 <__sflush_r+0xf8>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	e790      	b.n	8007ff6 <__sflush_r+0x1a>
 80080d4:	4407      	add	r7, r0
 80080d6:	1a36      	subs	r6, r6, r0
 80080d8:	e7ea      	b.n	80080b0 <__sflush_r+0xd4>
 80080da:	bf00      	nop
 80080dc:	20400001 	.word	0x20400001

080080e0 <_fflush_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	690b      	ldr	r3, [r1, #16]
 80080e4:	4605      	mov	r5, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b913      	cbnz	r3, 80080f0 <_fflush_r+0x10>
 80080ea:	2500      	movs	r5, #0
 80080ec:	4628      	mov	r0, r5
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	b118      	cbz	r0, 80080fa <_fflush_r+0x1a>
 80080f2:	6983      	ldr	r3, [r0, #24]
 80080f4:	b90b      	cbnz	r3, 80080fa <_fflush_r+0x1a>
 80080f6:	f000 f887 	bl	8008208 <__sinit>
 80080fa:	4b14      	ldr	r3, [pc, #80]	; (800814c <_fflush_r+0x6c>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	d11b      	bne.n	8008138 <_fflush_r+0x58>
 8008100:	686c      	ldr	r4, [r5, #4]
 8008102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0ef      	beq.n	80080ea <_fflush_r+0xa>
 800810a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800810c:	07d0      	lsls	r0, r2, #31
 800810e:	d404      	bmi.n	800811a <_fflush_r+0x3a>
 8008110:	0599      	lsls	r1, r3, #22
 8008112:	d402      	bmi.n	800811a <_fflush_r+0x3a>
 8008114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008116:	f000 f91a 	bl	800834e <__retarget_lock_acquire_recursive>
 800811a:	4628      	mov	r0, r5
 800811c:	4621      	mov	r1, r4
 800811e:	f7ff ff5d 	bl	8007fdc <__sflush_r>
 8008122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008124:	4605      	mov	r5, r0
 8008126:	07da      	lsls	r2, r3, #31
 8008128:	d4e0      	bmi.n	80080ec <_fflush_r+0xc>
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	059b      	lsls	r3, r3, #22
 800812e:	d4dd      	bmi.n	80080ec <_fflush_r+0xc>
 8008130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008132:	f000 f90d 	bl	8008350 <__retarget_lock_release_recursive>
 8008136:	e7d9      	b.n	80080ec <_fflush_r+0xc>
 8008138:	4b05      	ldr	r3, [pc, #20]	; (8008150 <_fflush_r+0x70>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d101      	bne.n	8008142 <_fflush_r+0x62>
 800813e:	68ac      	ldr	r4, [r5, #8]
 8008140:	e7df      	b.n	8008102 <_fflush_r+0x22>
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <_fflush_r+0x74>)
 8008144:	429c      	cmp	r4, r3
 8008146:	bf08      	it	eq
 8008148:	68ec      	ldreq	r4, [r5, #12]
 800814a:	e7da      	b.n	8008102 <_fflush_r+0x22>
 800814c:	08009fa0 	.word	0x08009fa0
 8008150:	08009fc0 	.word	0x08009fc0
 8008154:	08009f80 	.word	0x08009f80

08008158 <std>:
 8008158:	2300      	movs	r3, #0
 800815a:	b510      	push	{r4, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	e9c0 3300 	strd	r3, r3, [r0]
 8008162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008166:	6083      	str	r3, [r0, #8]
 8008168:	8181      	strh	r1, [r0, #12]
 800816a:	6643      	str	r3, [r0, #100]	; 0x64
 800816c:	81c2      	strh	r2, [r0, #14]
 800816e:	6183      	str	r3, [r0, #24]
 8008170:	4619      	mov	r1, r3
 8008172:	2208      	movs	r2, #8
 8008174:	305c      	adds	r0, #92	; 0x5c
 8008176:	f7fe fb01 	bl	800677c <memset>
 800817a:	4b05      	ldr	r3, [pc, #20]	; (8008190 <std+0x38>)
 800817c:	6224      	str	r4, [r4, #32]
 800817e:	6263      	str	r3, [r4, #36]	; 0x24
 8008180:	4b04      	ldr	r3, [pc, #16]	; (8008194 <std+0x3c>)
 8008182:	62a3      	str	r3, [r4, #40]	; 0x28
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <std+0x40>)
 8008186:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008188:	4b04      	ldr	r3, [pc, #16]	; (800819c <std+0x44>)
 800818a:	6323      	str	r3, [r4, #48]	; 0x30
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	08009019 	.word	0x08009019
 8008194:	0800903b 	.word	0x0800903b
 8008198:	08009073 	.word	0x08009073
 800819c:	08009097 	.word	0x08009097

080081a0 <_cleanup_r>:
 80081a0:	4901      	ldr	r1, [pc, #4]	; (80081a8 <_cleanup_r+0x8>)
 80081a2:	f000 b8af 	b.w	8008304 <_fwalk_reent>
 80081a6:	bf00      	nop
 80081a8:	080080e1 	.word	0x080080e1

080081ac <__sfmoreglue>:
 80081ac:	2268      	movs	r2, #104	; 0x68
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	1e4d      	subs	r5, r1, #1
 80081b2:	4355      	muls	r5, r2
 80081b4:	460e      	mov	r6, r1
 80081b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ba:	f000 fd51 	bl	8008c60 <_malloc_r>
 80081be:	4604      	mov	r4, r0
 80081c0:	b140      	cbz	r0, 80081d4 <__sfmoreglue+0x28>
 80081c2:	2100      	movs	r1, #0
 80081c4:	e9c0 1600 	strd	r1, r6, [r0]
 80081c8:	300c      	adds	r0, #12
 80081ca:	60a0      	str	r0, [r4, #8]
 80081cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081d0:	f7fe fad4 	bl	800677c <memset>
 80081d4:	4620      	mov	r0, r4
 80081d6:	bd70      	pop	{r4, r5, r6, pc}

080081d8 <__sfp_lock_acquire>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_acquire+0x8>)
 80081da:	f000 b8b8 	b.w	800834e <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	200003fd 	.word	0x200003fd

080081e4 <__sfp_lock_release>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sfp_lock_release+0x8>)
 80081e6:	f000 b8b3 	b.w	8008350 <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	200003fd 	.word	0x200003fd

080081f0 <__sinit_lock_acquire>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__sinit_lock_acquire+0x8>)
 80081f2:	f000 b8ac 	b.w	800834e <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	200003fe 	.word	0x200003fe

080081fc <__sinit_lock_release>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__sinit_lock_release+0x8>)
 80081fe:	f000 b8a7 	b.w	8008350 <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	200003fe 	.word	0x200003fe

08008208 <__sinit>:
 8008208:	b510      	push	{r4, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	f7ff fff0 	bl	80081f0 <__sinit_lock_acquire>
 8008210:	69a3      	ldr	r3, [r4, #24]
 8008212:	b11b      	cbz	r3, 800821c <__sinit+0x14>
 8008214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008218:	f7ff bff0 	b.w	80081fc <__sinit_lock_release>
 800821c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008220:	6523      	str	r3, [r4, #80]	; 0x50
 8008222:	4b13      	ldr	r3, [pc, #76]	; (8008270 <__sinit+0x68>)
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <__sinit+0x6c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	62a2      	str	r2, [r4, #40]	; 0x28
 800822a:	42a3      	cmp	r3, r4
 800822c:	bf08      	it	eq
 800822e:	2301      	moveq	r3, #1
 8008230:	4620      	mov	r0, r4
 8008232:	bf08      	it	eq
 8008234:	61a3      	streq	r3, [r4, #24]
 8008236:	f000 f81f 	bl	8008278 <__sfp>
 800823a:	6060      	str	r0, [r4, #4]
 800823c:	4620      	mov	r0, r4
 800823e:	f000 f81b 	bl	8008278 <__sfp>
 8008242:	60a0      	str	r0, [r4, #8]
 8008244:	4620      	mov	r0, r4
 8008246:	f000 f817 	bl	8008278 <__sfp>
 800824a:	2200      	movs	r2, #0
 800824c:	2104      	movs	r1, #4
 800824e:	60e0      	str	r0, [r4, #12]
 8008250:	6860      	ldr	r0, [r4, #4]
 8008252:	f7ff ff81 	bl	8008158 <std>
 8008256:	2201      	movs	r2, #1
 8008258:	2109      	movs	r1, #9
 800825a:	68a0      	ldr	r0, [r4, #8]
 800825c:	f7ff ff7c 	bl	8008158 <std>
 8008260:	2202      	movs	r2, #2
 8008262:	2112      	movs	r1, #18
 8008264:	68e0      	ldr	r0, [r4, #12]
 8008266:	f7ff ff77 	bl	8008158 <std>
 800826a:	2301      	movs	r3, #1
 800826c:	61a3      	str	r3, [r4, #24]
 800826e:	e7d1      	b.n	8008214 <__sinit+0xc>
 8008270:	08009eb8 	.word	0x08009eb8
 8008274:	080081a1 	.word	0x080081a1

08008278 <__sfp>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	4607      	mov	r7, r0
 800827c:	f7ff ffac 	bl	80081d8 <__sfp_lock_acquire>
 8008280:	4b1e      	ldr	r3, [pc, #120]	; (80082fc <__sfp+0x84>)
 8008282:	681e      	ldr	r6, [r3, #0]
 8008284:	69b3      	ldr	r3, [r6, #24]
 8008286:	b913      	cbnz	r3, 800828e <__sfp+0x16>
 8008288:	4630      	mov	r0, r6
 800828a:	f7ff ffbd 	bl	8008208 <__sinit>
 800828e:	3648      	adds	r6, #72	; 0x48
 8008290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008294:	3b01      	subs	r3, #1
 8008296:	d503      	bpl.n	80082a0 <__sfp+0x28>
 8008298:	6833      	ldr	r3, [r6, #0]
 800829a:	b30b      	cbz	r3, 80082e0 <__sfp+0x68>
 800829c:	6836      	ldr	r6, [r6, #0]
 800829e:	e7f7      	b.n	8008290 <__sfp+0x18>
 80082a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082a4:	b9d5      	cbnz	r5, 80082dc <__sfp+0x64>
 80082a6:	4b16      	ldr	r3, [pc, #88]	; (8008300 <__sfp+0x88>)
 80082a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082ac:	60e3      	str	r3, [r4, #12]
 80082ae:	6665      	str	r5, [r4, #100]	; 0x64
 80082b0:	f000 f84c 	bl	800834c <__retarget_lock_init_recursive>
 80082b4:	f7ff ff96 	bl	80081e4 <__sfp_lock_release>
 80082b8:	2208      	movs	r2, #8
 80082ba:	4629      	mov	r1, r5
 80082bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082c4:	6025      	str	r5, [r4, #0]
 80082c6:	61a5      	str	r5, [r4, #24]
 80082c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082cc:	f7fe fa56 	bl	800677c <memset>
 80082d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082d8:	4620      	mov	r0, r4
 80082da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082dc:	3468      	adds	r4, #104	; 0x68
 80082de:	e7d9      	b.n	8008294 <__sfp+0x1c>
 80082e0:	2104      	movs	r1, #4
 80082e2:	4638      	mov	r0, r7
 80082e4:	f7ff ff62 	bl	80081ac <__sfmoreglue>
 80082e8:	4604      	mov	r4, r0
 80082ea:	6030      	str	r0, [r6, #0]
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d1d5      	bne.n	800829c <__sfp+0x24>
 80082f0:	f7ff ff78 	bl	80081e4 <__sfp_lock_release>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	e7ee      	b.n	80082d8 <__sfp+0x60>
 80082fa:	bf00      	nop
 80082fc:	08009eb8 	.word	0x08009eb8
 8008300:	ffff0001 	.word	0xffff0001

08008304 <_fwalk_reent>:
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008308:	4606      	mov	r6, r0
 800830a:	4688      	mov	r8, r1
 800830c:	2700      	movs	r7, #0
 800830e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008316:	f1b9 0901 	subs.w	r9, r9, #1
 800831a:	d505      	bpl.n	8008328 <_fwalk_reent+0x24>
 800831c:	6824      	ldr	r4, [r4, #0]
 800831e:	2c00      	cmp	r4, #0
 8008320:	d1f7      	bne.n	8008312 <_fwalk_reent+0xe>
 8008322:	4638      	mov	r0, r7
 8008324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008328:	89ab      	ldrh	r3, [r5, #12]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d907      	bls.n	800833e <_fwalk_reent+0x3a>
 800832e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008332:	3301      	adds	r3, #1
 8008334:	d003      	beq.n	800833e <_fwalk_reent+0x3a>
 8008336:	4629      	mov	r1, r5
 8008338:	4630      	mov	r0, r6
 800833a:	47c0      	blx	r8
 800833c:	4307      	orrs	r7, r0
 800833e:	3568      	adds	r5, #104	; 0x68
 8008340:	e7e9      	b.n	8008316 <_fwalk_reent+0x12>
	...

08008344 <_localeconv_r>:
 8008344:	4800      	ldr	r0, [pc, #0]	; (8008348 <_localeconv_r+0x4>)
 8008346:	4770      	bx	lr
 8008348:	20000160 	.word	0x20000160

0800834c <__retarget_lock_init_recursive>:
 800834c:	4770      	bx	lr

0800834e <__retarget_lock_acquire_recursive>:
 800834e:	4770      	bx	lr

08008350 <__retarget_lock_release_recursive>:
 8008350:	4770      	bx	lr

08008352 <__swhatbuf_r>:
 8008352:	b570      	push	{r4, r5, r6, lr}
 8008354:	460e      	mov	r6, r1
 8008356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835a:	4614      	mov	r4, r2
 800835c:	2900      	cmp	r1, #0
 800835e:	461d      	mov	r5, r3
 8008360:	b096      	sub	sp, #88	; 0x58
 8008362:	da08      	bge.n	8008376 <__swhatbuf_r+0x24>
 8008364:	2200      	movs	r2, #0
 8008366:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800836a:	602a      	str	r2, [r5, #0]
 800836c:	061a      	lsls	r2, r3, #24
 800836e:	d410      	bmi.n	8008392 <__swhatbuf_r+0x40>
 8008370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008374:	e00e      	b.n	8008394 <__swhatbuf_r+0x42>
 8008376:	466a      	mov	r2, sp
 8008378:	f000 fee4 	bl	8009144 <_fstat_r>
 800837c:	2800      	cmp	r0, #0
 800837e:	dbf1      	blt.n	8008364 <__swhatbuf_r+0x12>
 8008380:	9a01      	ldr	r2, [sp, #4]
 8008382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800838a:	425a      	negs	r2, r3
 800838c:	415a      	adcs	r2, r3
 800838e:	602a      	str	r2, [r5, #0]
 8008390:	e7ee      	b.n	8008370 <__swhatbuf_r+0x1e>
 8008392:	2340      	movs	r3, #64	; 0x40
 8008394:	2000      	movs	r0, #0
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	b016      	add	sp, #88	; 0x58
 800839a:	bd70      	pop	{r4, r5, r6, pc}

0800839c <__smakebuf_r>:
 800839c:	898b      	ldrh	r3, [r1, #12]
 800839e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083a0:	079d      	lsls	r5, r3, #30
 80083a2:	4606      	mov	r6, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	d507      	bpl.n	80083b8 <__smakebuf_r+0x1c>
 80083a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	2301      	movs	r3, #1
 80083b2:	6163      	str	r3, [r4, #20]
 80083b4:	b002      	add	sp, #8
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	466a      	mov	r2, sp
 80083ba:	ab01      	add	r3, sp, #4
 80083bc:	f7ff ffc9 	bl	8008352 <__swhatbuf_r>
 80083c0:	9900      	ldr	r1, [sp, #0]
 80083c2:	4605      	mov	r5, r0
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 fc4b 	bl	8008c60 <_malloc_r>
 80083ca:	b948      	cbnz	r0, 80083e0 <__smakebuf_r+0x44>
 80083cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d0:	059a      	lsls	r2, r3, #22
 80083d2:	d4ef      	bmi.n	80083b4 <__smakebuf_r+0x18>
 80083d4:	f023 0303 	bic.w	r3, r3, #3
 80083d8:	f043 0302 	orr.w	r3, r3, #2
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	e7e3      	b.n	80083a8 <__smakebuf_r+0xc>
 80083e0:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <__smakebuf_r+0x7c>)
 80083e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	6020      	str	r0, [r4, #0]
 80083e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	6120      	str	r0, [r4, #16]
 80083f2:	6163      	str	r3, [r4, #20]
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	b15b      	cbz	r3, 8008410 <__smakebuf_r+0x74>
 80083f8:	4630      	mov	r0, r6
 80083fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fe:	f000 feb3 	bl	8009168 <_isatty_r>
 8008402:	b128      	cbz	r0, 8008410 <__smakebuf_r+0x74>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f023 0303 	bic.w	r3, r3, #3
 800840a:	f043 0301 	orr.w	r3, r3, #1
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	89a0      	ldrh	r0, [r4, #12]
 8008412:	4305      	orrs	r5, r0
 8008414:	81a5      	strh	r5, [r4, #12]
 8008416:	e7cd      	b.n	80083b4 <__smakebuf_r+0x18>
 8008418:	080081a1 	.word	0x080081a1

0800841c <malloc>:
 800841c:	4b02      	ldr	r3, [pc, #8]	; (8008428 <malloc+0xc>)
 800841e:	4601      	mov	r1, r0
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	f000 bc1d 	b.w	8008c60 <_malloc_r>
 8008426:	bf00      	nop
 8008428:	2000000c 	.word	0x2000000c

0800842c <memchr>:
 800842c:	4603      	mov	r3, r0
 800842e:	b510      	push	{r4, lr}
 8008430:	b2c9      	uxtb	r1, r1
 8008432:	4402      	add	r2, r0
 8008434:	4293      	cmp	r3, r2
 8008436:	4618      	mov	r0, r3
 8008438:	d101      	bne.n	800843e <memchr+0x12>
 800843a:	2000      	movs	r0, #0
 800843c:	e003      	b.n	8008446 <memchr+0x1a>
 800843e:	7804      	ldrb	r4, [r0, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	428c      	cmp	r4, r1
 8008444:	d1f6      	bne.n	8008434 <memchr+0x8>
 8008446:	bd10      	pop	{r4, pc}

08008448 <memcpy>:
 8008448:	440a      	add	r2, r1
 800844a:	4291      	cmp	r1, r2
 800844c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008450:	d100      	bne.n	8008454 <memcpy+0xc>
 8008452:	4770      	bx	lr
 8008454:	b510      	push	{r4, lr}
 8008456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800845a:	4291      	cmp	r1, r2
 800845c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008460:	d1f9      	bne.n	8008456 <memcpy+0xe>
 8008462:	bd10      	pop	{r4, pc}

08008464 <_Balloc>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008468:	4604      	mov	r4, r0
 800846a:	460d      	mov	r5, r1
 800846c:	b976      	cbnz	r6, 800848c <_Balloc+0x28>
 800846e:	2010      	movs	r0, #16
 8008470:	f7ff ffd4 	bl	800841c <malloc>
 8008474:	4602      	mov	r2, r0
 8008476:	6260      	str	r0, [r4, #36]	; 0x24
 8008478:	b920      	cbnz	r0, 8008484 <_Balloc+0x20>
 800847a:	2166      	movs	r1, #102	; 0x66
 800847c:	4b17      	ldr	r3, [pc, #92]	; (80084dc <_Balloc+0x78>)
 800847e:	4818      	ldr	r0, [pc, #96]	; (80084e0 <_Balloc+0x7c>)
 8008480:	f000 fe20 	bl	80090c4 <__assert_func>
 8008484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008488:	6006      	str	r6, [r0, #0]
 800848a:	60c6      	str	r6, [r0, #12]
 800848c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800848e:	68f3      	ldr	r3, [r6, #12]
 8008490:	b183      	cbz	r3, 80084b4 <_Balloc+0x50>
 8008492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800849a:	b9b8      	cbnz	r0, 80084cc <_Balloc+0x68>
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f605 	lsl.w	r6, r1, r5
 80084a2:	1d72      	adds	r2, r6, #5
 80084a4:	4620      	mov	r0, r4
 80084a6:	0092      	lsls	r2, r2, #2
 80084a8:	f000 fb5e 	bl	8008b68 <_calloc_r>
 80084ac:	b160      	cbz	r0, 80084c8 <_Balloc+0x64>
 80084ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084b2:	e00e      	b.n	80084d2 <_Balloc+0x6e>
 80084b4:	2221      	movs	r2, #33	; 0x21
 80084b6:	2104      	movs	r1, #4
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fb55 	bl	8008b68 <_calloc_r>
 80084be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c0:	60f0      	str	r0, [r6, #12]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e4      	bne.n	8008492 <_Balloc+0x2e>
 80084c8:	2000      	movs	r0, #0
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	6802      	ldr	r2, [r0, #0]
 80084ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084d2:	2300      	movs	r3, #0
 80084d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084d8:	e7f7      	b.n	80084ca <_Balloc+0x66>
 80084da:	bf00      	nop
 80084dc:	08009efd 	.word	0x08009efd
 80084e0:	08009fe0 	.word	0x08009fe0

080084e4 <_Bfree>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b976      	cbnz	r6, 800850c <_Bfree+0x28>
 80084ee:	2010      	movs	r0, #16
 80084f0:	f7ff ff94 	bl	800841c <malloc>
 80084f4:	4602      	mov	r2, r0
 80084f6:	6268      	str	r0, [r5, #36]	; 0x24
 80084f8:	b920      	cbnz	r0, 8008504 <_Bfree+0x20>
 80084fa:	218a      	movs	r1, #138	; 0x8a
 80084fc:	4b08      	ldr	r3, [pc, #32]	; (8008520 <_Bfree+0x3c>)
 80084fe:	4809      	ldr	r0, [pc, #36]	; (8008524 <_Bfree+0x40>)
 8008500:	f000 fde0 	bl	80090c4 <__assert_func>
 8008504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008508:	6006      	str	r6, [r0, #0]
 800850a:	60c6      	str	r6, [r0, #12]
 800850c:	b13c      	cbz	r4, 800851e <_Bfree+0x3a>
 800850e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008510:	6862      	ldr	r2, [r4, #4]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008518:	6021      	str	r1, [r4, #0]
 800851a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800851e:	bd70      	pop	{r4, r5, r6, pc}
 8008520:	08009efd 	.word	0x08009efd
 8008524:	08009fe0 	.word	0x08009fe0

08008528 <__multadd>:
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	4607      	mov	r7, r0
 800852e:	460c      	mov	r4, r1
 8008530:	461e      	mov	r6, r3
 8008532:	2000      	movs	r0, #0
 8008534:	690d      	ldr	r5, [r1, #16]
 8008536:	f101 0c14 	add.w	ip, r1, #20
 800853a:	f8dc 3000 	ldr.w	r3, [ip]
 800853e:	3001      	adds	r0, #1
 8008540:	b299      	uxth	r1, r3
 8008542:	fb02 6101 	mla	r1, r2, r1, r6
 8008546:	0c1e      	lsrs	r6, r3, #16
 8008548:	0c0b      	lsrs	r3, r1, #16
 800854a:	fb02 3306 	mla	r3, r2, r6, r3
 800854e:	b289      	uxth	r1, r1
 8008550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008554:	4285      	cmp	r5, r0
 8008556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800855a:	f84c 1b04 	str.w	r1, [ip], #4
 800855e:	dcec      	bgt.n	800853a <__multadd+0x12>
 8008560:	b30e      	cbz	r6, 80085a6 <__multadd+0x7e>
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	42ab      	cmp	r3, r5
 8008566:	dc19      	bgt.n	800859c <__multadd+0x74>
 8008568:	6861      	ldr	r1, [r4, #4]
 800856a:	4638      	mov	r0, r7
 800856c:	3101      	adds	r1, #1
 800856e:	f7ff ff79 	bl	8008464 <_Balloc>
 8008572:	4680      	mov	r8, r0
 8008574:	b928      	cbnz	r0, 8008582 <__multadd+0x5a>
 8008576:	4602      	mov	r2, r0
 8008578:	21b5      	movs	r1, #181	; 0xb5
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <__multadd+0x84>)
 800857c:	480c      	ldr	r0, [pc, #48]	; (80085b0 <__multadd+0x88>)
 800857e:	f000 fda1 	bl	80090c4 <__assert_func>
 8008582:	6922      	ldr	r2, [r4, #16]
 8008584:	f104 010c 	add.w	r1, r4, #12
 8008588:	3202      	adds	r2, #2
 800858a:	0092      	lsls	r2, r2, #2
 800858c:	300c      	adds	r0, #12
 800858e:	f7ff ff5b 	bl	8008448 <memcpy>
 8008592:	4621      	mov	r1, r4
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff ffa5 	bl	80084e4 <_Bfree>
 800859a:	4644      	mov	r4, r8
 800859c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085a0:	3501      	adds	r5, #1
 80085a2:	615e      	str	r6, [r3, #20]
 80085a4:	6125      	str	r5, [r4, #16]
 80085a6:	4620      	mov	r0, r4
 80085a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ac:	08009f6f 	.word	0x08009f6f
 80085b0:	08009fe0 	.word	0x08009fe0

080085b4 <__hi0bits>:
 80085b4:	0c02      	lsrs	r2, r0, #16
 80085b6:	0412      	lsls	r2, r2, #16
 80085b8:	4603      	mov	r3, r0
 80085ba:	b9ca      	cbnz	r2, 80085f0 <__hi0bits+0x3c>
 80085bc:	0403      	lsls	r3, r0, #16
 80085be:	2010      	movs	r0, #16
 80085c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085c4:	bf04      	itt	eq
 80085c6:	021b      	lsleq	r3, r3, #8
 80085c8:	3008      	addeq	r0, #8
 80085ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085ce:	bf04      	itt	eq
 80085d0:	011b      	lsleq	r3, r3, #4
 80085d2:	3004      	addeq	r0, #4
 80085d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80085d8:	bf04      	itt	eq
 80085da:	009b      	lsleq	r3, r3, #2
 80085dc:	3002      	addeq	r0, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db05      	blt.n	80085ee <__hi0bits+0x3a>
 80085e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085e6:	f100 0001 	add.w	r0, r0, #1
 80085ea:	bf08      	it	eq
 80085ec:	2020      	moveq	r0, #32
 80085ee:	4770      	bx	lr
 80085f0:	2000      	movs	r0, #0
 80085f2:	e7e5      	b.n	80085c0 <__hi0bits+0xc>

080085f4 <__lo0bits>:
 80085f4:	6803      	ldr	r3, [r0, #0]
 80085f6:	4602      	mov	r2, r0
 80085f8:	f013 0007 	ands.w	r0, r3, #7
 80085fc:	d00b      	beq.n	8008616 <__lo0bits+0x22>
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d421      	bmi.n	8008646 <__lo0bits+0x52>
 8008602:	0798      	lsls	r0, r3, #30
 8008604:	bf49      	itett	mi
 8008606:	085b      	lsrmi	r3, r3, #1
 8008608:	089b      	lsrpl	r3, r3, #2
 800860a:	2001      	movmi	r0, #1
 800860c:	6013      	strmi	r3, [r2, #0]
 800860e:	bf5c      	itt	pl
 8008610:	2002      	movpl	r0, #2
 8008612:	6013      	strpl	r3, [r2, #0]
 8008614:	4770      	bx	lr
 8008616:	b299      	uxth	r1, r3
 8008618:	b909      	cbnz	r1, 800861e <__lo0bits+0x2a>
 800861a:	2010      	movs	r0, #16
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	b2d9      	uxtb	r1, r3
 8008620:	b909      	cbnz	r1, 8008626 <__lo0bits+0x32>
 8008622:	3008      	adds	r0, #8
 8008624:	0a1b      	lsrs	r3, r3, #8
 8008626:	0719      	lsls	r1, r3, #28
 8008628:	bf04      	itt	eq
 800862a:	091b      	lsreq	r3, r3, #4
 800862c:	3004      	addeq	r0, #4
 800862e:	0799      	lsls	r1, r3, #30
 8008630:	bf04      	itt	eq
 8008632:	089b      	lsreq	r3, r3, #2
 8008634:	3002      	addeq	r0, #2
 8008636:	07d9      	lsls	r1, r3, #31
 8008638:	d403      	bmi.n	8008642 <__lo0bits+0x4e>
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	f100 0001 	add.w	r0, r0, #1
 8008640:	d003      	beq.n	800864a <__lo0bits+0x56>
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4770      	bx	lr
 8008646:	2000      	movs	r0, #0
 8008648:	4770      	bx	lr
 800864a:	2020      	movs	r0, #32
 800864c:	4770      	bx	lr
	...

08008650 <__i2b>:
 8008650:	b510      	push	{r4, lr}
 8008652:	460c      	mov	r4, r1
 8008654:	2101      	movs	r1, #1
 8008656:	f7ff ff05 	bl	8008464 <_Balloc>
 800865a:	4602      	mov	r2, r0
 800865c:	b928      	cbnz	r0, 800866a <__i2b+0x1a>
 800865e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008662:	4b04      	ldr	r3, [pc, #16]	; (8008674 <__i2b+0x24>)
 8008664:	4804      	ldr	r0, [pc, #16]	; (8008678 <__i2b+0x28>)
 8008666:	f000 fd2d 	bl	80090c4 <__assert_func>
 800866a:	2301      	movs	r3, #1
 800866c:	6144      	str	r4, [r0, #20]
 800866e:	6103      	str	r3, [r0, #16]
 8008670:	bd10      	pop	{r4, pc}
 8008672:	bf00      	nop
 8008674:	08009f6f 	.word	0x08009f6f
 8008678:	08009fe0 	.word	0x08009fe0

0800867c <__multiply>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4691      	mov	r9, r2
 8008682:	690a      	ldr	r2, [r1, #16]
 8008684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008688:	460c      	mov	r4, r1
 800868a:	429a      	cmp	r2, r3
 800868c:	bfbe      	ittt	lt
 800868e:	460b      	movlt	r3, r1
 8008690:	464c      	movlt	r4, r9
 8008692:	4699      	movlt	r9, r3
 8008694:	6927      	ldr	r7, [r4, #16]
 8008696:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	eb07 060a 	add.w	r6, r7, sl
 80086a2:	42b3      	cmp	r3, r6
 80086a4:	b085      	sub	sp, #20
 80086a6:	bfb8      	it	lt
 80086a8:	3101      	addlt	r1, #1
 80086aa:	f7ff fedb 	bl	8008464 <_Balloc>
 80086ae:	b930      	cbnz	r0, 80086be <__multiply+0x42>
 80086b0:	4602      	mov	r2, r0
 80086b2:	f240 115d 	movw	r1, #349	; 0x15d
 80086b6:	4b43      	ldr	r3, [pc, #268]	; (80087c4 <__multiply+0x148>)
 80086b8:	4843      	ldr	r0, [pc, #268]	; (80087c8 <__multiply+0x14c>)
 80086ba:	f000 fd03 	bl	80090c4 <__assert_func>
 80086be:	f100 0514 	add.w	r5, r0, #20
 80086c2:	462b      	mov	r3, r5
 80086c4:	2200      	movs	r2, #0
 80086c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086ca:	4543      	cmp	r3, r8
 80086cc:	d321      	bcc.n	8008712 <__multiply+0x96>
 80086ce:	f104 0314 	add.w	r3, r4, #20
 80086d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086d6:	f109 0314 	add.w	r3, r9, #20
 80086da:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086de:	9202      	str	r2, [sp, #8]
 80086e0:	1b3a      	subs	r2, r7, r4
 80086e2:	3a15      	subs	r2, #21
 80086e4:	f022 0203 	bic.w	r2, r2, #3
 80086e8:	3204      	adds	r2, #4
 80086ea:	f104 0115 	add.w	r1, r4, #21
 80086ee:	428f      	cmp	r7, r1
 80086f0:	bf38      	it	cc
 80086f2:	2204      	movcc	r2, #4
 80086f4:	9201      	str	r2, [sp, #4]
 80086f6:	9a02      	ldr	r2, [sp, #8]
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d80c      	bhi.n	8008718 <__multiply+0x9c>
 80086fe:	2e00      	cmp	r6, #0
 8008700:	dd03      	ble.n	800870a <__multiply+0x8e>
 8008702:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008706:	2b00      	cmp	r3, #0
 8008708:	d059      	beq.n	80087be <__multiply+0x142>
 800870a:	6106      	str	r6, [r0, #16]
 800870c:	b005      	add	sp, #20
 800870e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	f843 2b04 	str.w	r2, [r3], #4
 8008716:	e7d8      	b.n	80086ca <__multiply+0x4e>
 8008718:	f8b3 a000 	ldrh.w	sl, [r3]
 800871c:	f1ba 0f00 	cmp.w	sl, #0
 8008720:	d023      	beq.n	800876a <__multiply+0xee>
 8008722:	46a9      	mov	r9, r5
 8008724:	f04f 0c00 	mov.w	ip, #0
 8008728:	f104 0e14 	add.w	lr, r4, #20
 800872c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008730:	f8d9 1000 	ldr.w	r1, [r9]
 8008734:	fa1f fb82 	uxth.w	fp, r2
 8008738:	b289      	uxth	r1, r1
 800873a:	fb0a 110b 	mla	r1, sl, fp, r1
 800873e:	4461      	add	r1, ip
 8008740:	f8d9 c000 	ldr.w	ip, [r9]
 8008744:	0c12      	lsrs	r2, r2, #16
 8008746:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800874a:	fb0a c202 	mla	r2, sl, r2, ip
 800874e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008752:	b289      	uxth	r1, r1
 8008754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008758:	4577      	cmp	r7, lr
 800875a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800875e:	f849 1b04 	str.w	r1, [r9], #4
 8008762:	d8e3      	bhi.n	800872c <__multiply+0xb0>
 8008764:	9a01      	ldr	r2, [sp, #4]
 8008766:	f845 c002 	str.w	ip, [r5, r2]
 800876a:	9a03      	ldr	r2, [sp, #12]
 800876c:	3304      	adds	r3, #4
 800876e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	d020      	beq.n	80087ba <__multiply+0x13e>
 8008778:	46ae      	mov	lr, r5
 800877a:	f04f 0a00 	mov.w	sl, #0
 800877e:	6829      	ldr	r1, [r5, #0]
 8008780:	f104 0c14 	add.w	ip, r4, #20
 8008784:	f8bc b000 	ldrh.w	fp, [ip]
 8008788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800878c:	b289      	uxth	r1, r1
 800878e:	fb09 220b 	mla	r2, r9, fp, r2
 8008792:	4492      	add	sl, r2
 8008794:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008798:	f84e 1b04 	str.w	r1, [lr], #4
 800879c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087a0:	f8be 1000 	ldrh.w	r1, [lr]
 80087a4:	0c12      	lsrs	r2, r2, #16
 80087a6:	fb09 1102 	mla	r1, r9, r2, r1
 80087aa:	4567      	cmp	r7, ip
 80087ac:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087b4:	d8e6      	bhi.n	8008784 <__multiply+0x108>
 80087b6:	9a01      	ldr	r2, [sp, #4]
 80087b8:	50a9      	str	r1, [r5, r2]
 80087ba:	3504      	adds	r5, #4
 80087bc:	e79b      	b.n	80086f6 <__multiply+0x7a>
 80087be:	3e01      	subs	r6, #1
 80087c0:	e79d      	b.n	80086fe <__multiply+0x82>
 80087c2:	bf00      	nop
 80087c4:	08009f6f 	.word	0x08009f6f
 80087c8:	08009fe0 	.word	0x08009fe0

080087cc <__pow5mult>:
 80087cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d0:	4615      	mov	r5, r2
 80087d2:	f012 0203 	ands.w	r2, r2, #3
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	d007      	beq.n	80087ec <__pow5mult+0x20>
 80087dc:	4c25      	ldr	r4, [pc, #148]	; (8008874 <__pow5mult+0xa8>)
 80087de:	3a01      	subs	r2, #1
 80087e0:	2300      	movs	r3, #0
 80087e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087e6:	f7ff fe9f 	bl	8008528 <__multadd>
 80087ea:	4607      	mov	r7, r0
 80087ec:	10ad      	asrs	r5, r5, #2
 80087ee:	d03d      	beq.n	800886c <__pow5mult+0xa0>
 80087f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087f2:	b97c      	cbnz	r4, 8008814 <__pow5mult+0x48>
 80087f4:	2010      	movs	r0, #16
 80087f6:	f7ff fe11 	bl	800841c <malloc>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6270      	str	r0, [r6, #36]	; 0x24
 80087fe:	b928      	cbnz	r0, 800880c <__pow5mult+0x40>
 8008800:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008804:	4b1c      	ldr	r3, [pc, #112]	; (8008878 <__pow5mult+0xac>)
 8008806:	481d      	ldr	r0, [pc, #116]	; (800887c <__pow5mult+0xb0>)
 8008808:	f000 fc5c 	bl	80090c4 <__assert_func>
 800880c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008810:	6004      	str	r4, [r0, #0]
 8008812:	60c4      	str	r4, [r0, #12]
 8008814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800881c:	b94c      	cbnz	r4, 8008832 <__pow5mult+0x66>
 800881e:	f240 2171 	movw	r1, #625	; 0x271
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff ff14 	bl	8008650 <__i2b>
 8008828:	2300      	movs	r3, #0
 800882a:	4604      	mov	r4, r0
 800882c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	07eb      	lsls	r3, r5, #31
 8008838:	d50a      	bpl.n	8008850 <__pow5mult+0x84>
 800883a:	4639      	mov	r1, r7
 800883c:	4622      	mov	r2, r4
 800883e:	4630      	mov	r0, r6
 8008840:	f7ff ff1c 	bl	800867c <__multiply>
 8008844:	4680      	mov	r8, r0
 8008846:	4639      	mov	r1, r7
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff fe4b 	bl	80084e4 <_Bfree>
 800884e:	4647      	mov	r7, r8
 8008850:	106d      	asrs	r5, r5, #1
 8008852:	d00b      	beq.n	800886c <__pow5mult+0xa0>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	b938      	cbnz	r0, 8008868 <__pow5mult+0x9c>
 8008858:	4622      	mov	r2, r4
 800885a:	4621      	mov	r1, r4
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ff0d 	bl	800867c <__multiply>
 8008862:	6020      	str	r0, [r4, #0]
 8008864:	f8c0 9000 	str.w	r9, [r0]
 8008868:	4604      	mov	r4, r0
 800886a:	e7e4      	b.n	8008836 <__pow5mult+0x6a>
 800886c:	4638      	mov	r0, r7
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008872:	bf00      	nop
 8008874:	0800a130 	.word	0x0800a130
 8008878:	08009efd 	.word	0x08009efd
 800887c:	08009fe0 	.word	0x08009fe0

08008880 <__lshift>:
 8008880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	4607      	mov	r7, r0
 8008888:	4691      	mov	r9, r2
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	6849      	ldr	r1, [r1, #4]
 800888e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008898:	f108 0601 	add.w	r6, r8, #1
 800889c:	42b3      	cmp	r3, r6
 800889e:	db0b      	blt.n	80088b8 <__lshift+0x38>
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff fddf 	bl	8008464 <_Balloc>
 80088a6:	4605      	mov	r5, r0
 80088a8:	b948      	cbnz	r0, 80088be <__lshift+0x3e>
 80088aa:	4602      	mov	r2, r0
 80088ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088b0:	4b29      	ldr	r3, [pc, #164]	; (8008958 <__lshift+0xd8>)
 80088b2:	482a      	ldr	r0, [pc, #168]	; (800895c <__lshift+0xdc>)
 80088b4:	f000 fc06 	bl	80090c4 <__assert_func>
 80088b8:	3101      	adds	r1, #1
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	e7ee      	b.n	800889c <__lshift+0x1c>
 80088be:	2300      	movs	r3, #0
 80088c0:	f100 0114 	add.w	r1, r0, #20
 80088c4:	f100 0210 	add.w	r2, r0, #16
 80088c8:	4618      	mov	r0, r3
 80088ca:	4553      	cmp	r3, sl
 80088cc:	db37      	blt.n	800893e <__lshift+0xbe>
 80088ce:	6920      	ldr	r0, [r4, #16]
 80088d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088d4:	f104 0314 	add.w	r3, r4, #20
 80088d8:	f019 091f 	ands.w	r9, r9, #31
 80088dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088e4:	d02f      	beq.n	8008946 <__lshift+0xc6>
 80088e6:	468a      	mov	sl, r1
 80088e8:	f04f 0c00 	mov.w	ip, #0
 80088ec:	f1c9 0e20 	rsb	lr, r9, #32
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	fa02 f209 	lsl.w	r2, r2, r9
 80088f6:	ea42 020c 	orr.w	r2, r2, ip
 80088fa:	f84a 2b04 	str.w	r2, [sl], #4
 80088fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008902:	4298      	cmp	r0, r3
 8008904:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008908:	d8f2      	bhi.n	80088f0 <__lshift+0x70>
 800890a:	1b03      	subs	r3, r0, r4
 800890c:	3b15      	subs	r3, #21
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	3304      	adds	r3, #4
 8008914:	f104 0215 	add.w	r2, r4, #21
 8008918:	4290      	cmp	r0, r2
 800891a:	bf38      	it	cc
 800891c:	2304      	movcc	r3, #4
 800891e:	f841 c003 	str.w	ip, [r1, r3]
 8008922:	f1bc 0f00 	cmp.w	ip, #0
 8008926:	d001      	beq.n	800892c <__lshift+0xac>
 8008928:	f108 0602 	add.w	r6, r8, #2
 800892c:	3e01      	subs	r6, #1
 800892e:	4638      	mov	r0, r7
 8008930:	4621      	mov	r1, r4
 8008932:	612e      	str	r6, [r5, #16]
 8008934:	f7ff fdd6 	bl	80084e4 <_Bfree>
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008942:	3301      	adds	r3, #1
 8008944:	e7c1      	b.n	80088ca <__lshift+0x4a>
 8008946:	3904      	subs	r1, #4
 8008948:	f853 2b04 	ldr.w	r2, [r3], #4
 800894c:	4298      	cmp	r0, r3
 800894e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008952:	d8f9      	bhi.n	8008948 <__lshift+0xc8>
 8008954:	e7ea      	b.n	800892c <__lshift+0xac>
 8008956:	bf00      	nop
 8008958:	08009f6f 	.word	0x08009f6f
 800895c:	08009fe0 	.word	0x08009fe0

08008960 <__mcmp>:
 8008960:	4603      	mov	r3, r0
 8008962:	690a      	ldr	r2, [r1, #16]
 8008964:	6900      	ldr	r0, [r0, #16]
 8008966:	b530      	push	{r4, r5, lr}
 8008968:	1a80      	subs	r0, r0, r2
 800896a:	d10d      	bne.n	8008988 <__mcmp+0x28>
 800896c:	3314      	adds	r3, #20
 800896e:	3114      	adds	r1, #20
 8008970:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008974:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008978:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800897c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008980:	4295      	cmp	r5, r2
 8008982:	d002      	beq.n	800898a <__mcmp+0x2a>
 8008984:	d304      	bcc.n	8008990 <__mcmp+0x30>
 8008986:	2001      	movs	r0, #1
 8008988:	bd30      	pop	{r4, r5, pc}
 800898a:	42a3      	cmp	r3, r4
 800898c:	d3f4      	bcc.n	8008978 <__mcmp+0x18>
 800898e:	e7fb      	b.n	8008988 <__mcmp+0x28>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	e7f8      	b.n	8008988 <__mcmp+0x28>
	...

08008998 <__mdiff>:
 8008998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	460d      	mov	r5, r1
 800899e:	4607      	mov	r7, r0
 80089a0:	4611      	mov	r1, r2
 80089a2:	4628      	mov	r0, r5
 80089a4:	4614      	mov	r4, r2
 80089a6:	f7ff ffdb 	bl	8008960 <__mcmp>
 80089aa:	1e06      	subs	r6, r0, #0
 80089ac:	d111      	bne.n	80089d2 <__mdiff+0x3a>
 80089ae:	4631      	mov	r1, r6
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff fd57 	bl	8008464 <_Balloc>
 80089b6:	4602      	mov	r2, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__mdiff+0x2e>
 80089ba:	f240 2132 	movw	r1, #562	; 0x232
 80089be:	4b3a      	ldr	r3, [pc, #232]	; (8008aa8 <__mdiff+0x110>)
 80089c0:	483a      	ldr	r0, [pc, #232]	; (8008aac <__mdiff+0x114>)
 80089c2:	f000 fb7f 	bl	80090c4 <__assert_func>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089cc:	4610      	mov	r0, r2
 80089ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	bfa4      	itt	ge
 80089d4:	4623      	movge	r3, r4
 80089d6:	462c      	movge	r4, r5
 80089d8:	4638      	mov	r0, r7
 80089da:	6861      	ldr	r1, [r4, #4]
 80089dc:	bfa6      	itte	ge
 80089de:	461d      	movge	r5, r3
 80089e0:	2600      	movge	r6, #0
 80089e2:	2601      	movlt	r6, #1
 80089e4:	f7ff fd3e 	bl	8008464 <_Balloc>
 80089e8:	4602      	mov	r2, r0
 80089ea:	b918      	cbnz	r0, 80089f4 <__mdiff+0x5c>
 80089ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089f0:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <__mdiff+0x110>)
 80089f2:	e7e5      	b.n	80089c0 <__mdiff+0x28>
 80089f4:	f102 0814 	add.w	r8, r2, #20
 80089f8:	46c2      	mov	sl, r8
 80089fa:	f04f 0c00 	mov.w	ip, #0
 80089fe:	6927      	ldr	r7, [r4, #16]
 8008a00:	60c6      	str	r6, [r0, #12]
 8008a02:	692e      	ldr	r6, [r5, #16]
 8008a04:	f104 0014 	add.w	r0, r4, #20
 8008a08:	f105 0914 	add.w	r9, r5, #20
 8008a0c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a14:	3410      	adds	r4, #16
 8008a16:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a1a:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a1e:	fa1f f18b 	uxth.w	r1, fp
 8008a22:	448c      	add	ip, r1
 8008a24:	b299      	uxth	r1, r3
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	ebac 0101 	sub.w	r1, ip, r1
 8008a2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a30:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a34:	b289      	uxth	r1, r1
 8008a36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a3a:	454e      	cmp	r6, r9
 8008a3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a40:	f84a 3b04 	str.w	r3, [sl], #4
 8008a44:	d8e7      	bhi.n	8008a16 <__mdiff+0x7e>
 8008a46:	1b73      	subs	r3, r6, r5
 8008a48:	3b15      	subs	r3, #21
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	3515      	adds	r5, #21
 8008a50:	3304      	adds	r3, #4
 8008a52:	42ae      	cmp	r6, r5
 8008a54:	bf38      	it	cc
 8008a56:	2304      	movcc	r3, #4
 8008a58:	4418      	add	r0, r3
 8008a5a:	4443      	add	r3, r8
 8008a5c:	461e      	mov	r6, r3
 8008a5e:	4605      	mov	r5, r0
 8008a60:	4575      	cmp	r5, lr
 8008a62:	d30e      	bcc.n	8008a82 <__mdiff+0xea>
 8008a64:	f10e 0103 	add.w	r1, lr, #3
 8008a68:	1a09      	subs	r1, r1, r0
 8008a6a:	f021 0103 	bic.w	r1, r1, #3
 8008a6e:	3803      	subs	r0, #3
 8008a70:	4586      	cmp	lr, r0
 8008a72:	bf38      	it	cc
 8008a74:	2100      	movcc	r1, #0
 8008a76:	4419      	add	r1, r3
 8008a78:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a7c:	b18b      	cbz	r3, 8008aa2 <__mdiff+0x10a>
 8008a7e:	6117      	str	r7, [r2, #16]
 8008a80:	e7a4      	b.n	80089cc <__mdiff+0x34>
 8008a82:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a86:	fa1f f188 	uxth.w	r1, r8
 8008a8a:	4461      	add	r1, ip
 8008a8c:	140c      	asrs	r4, r1, #16
 8008a8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a92:	b289      	uxth	r1, r1
 8008a94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a98:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008a9c:	f846 1b04 	str.w	r1, [r6], #4
 8008aa0:	e7de      	b.n	8008a60 <__mdiff+0xc8>
 8008aa2:	3f01      	subs	r7, #1
 8008aa4:	e7e8      	b.n	8008a78 <__mdiff+0xe0>
 8008aa6:	bf00      	nop
 8008aa8:	08009f6f 	.word	0x08009f6f
 8008aac:	08009fe0 	.word	0x08009fe0

08008ab0 <__d2b>:
 8008ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008aba:	4690      	mov	r8, r2
 8008abc:	461d      	mov	r5, r3
 8008abe:	f7ff fcd1 	bl	8008464 <_Balloc>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	b930      	cbnz	r0, 8008ad4 <__d2b+0x24>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	f240 310a 	movw	r1, #778	; 0x30a
 8008acc:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <__d2b+0xb0>)
 8008ace:	4825      	ldr	r0, [pc, #148]	; (8008b64 <__d2b+0xb4>)
 8008ad0:	f000 faf8 	bl	80090c4 <__assert_func>
 8008ad4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008ad8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008adc:	bb2d      	cbnz	r5, 8008b2a <__d2b+0x7a>
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8008ae4:	d026      	beq.n	8008b34 <__d2b+0x84>
 8008ae6:	4668      	mov	r0, sp
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	f7ff fd83 	bl	80085f4 <__lo0bits>
 8008aee:	9900      	ldr	r1, [sp, #0]
 8008af0:	b1f0      	cbz	r0, 8008b30 <__d2b+0x80>
 8008af2:	9a01      	ldr	r2, [sp, #4]
 8008af4:	f1c0 0320 	rsb	r3, r0, #32
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	430b      	orrs	r3, r1
 8008afe:	40c2      	lsrs	r2, r0
 8008b00:	6163      	str	r3, [r4, #20]
 8008b02:	9201      	str	r2, [sp, #4]
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bf14      	ite	ne
 8008b0a:	2102      	movne	r1, #2
 8008b0c:	2101      	moveq	r1, #1
 8008b0e:	61a3      	str	r3, [r4, #24]
 8008b10:	6121      	str	r1, [r4, #16]
 8008b12:	b1c5      	cbz	r5, 8008b46 <__d2b+0x96>
 8008b14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b18:	4405      	add	r5, r0
 8008b1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b1e:	603d      	str	r5, [r7, #0]
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	b002      	add	sp, #8
 8008b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2e:	e7d6      	b.n	8008ade <__d2b+0x2e>
 8008b30:	6161      	str	r1, [r4, #20]
 8008b32:	e7e7      	b.n	8008b04 <__d2b+0x54>
 8008b34:	a801      	add	r0, sp, #4
 8008b36:	f7ff fd5d 	bl	80085f4 <__lo0bits>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	6121      	str	r1, [r4, #16]
 8008b40:	6163      	str	r3, [r4, #20]
 8008b42:	3020      	adds	r0, #32
 8008b44:	e7e5      	b.n	8008b12 <__d2b+0x62>
 8008b46:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b4e:	6038      	str	r0, [r7, #0]
 8008b50:	6918      	ldr	r0, [r3, #16]
 8008b52:	f7ff fd2f 	bl	80085b4 <__hi0bits>
 8008b56:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b5a:	6031      	str	r1, [r6, #0]
 8008b5c:	e7e1      	b.n	8008b22 <__d2b+0x72>
 8008b5e:	bf00      	nop
 8008b60:	08009f6f 	.word	0x08009f6f
 8008b64:	08009fe0 	.word	0x08009fe0

08008b68 <_calloc_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b6e:	b934      	cbnz	r4, 8008b7e <_calloc_r+0x16>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f000 f875 	bl	8008c60 <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b928      	cbnz	r0, 8008b86 <_calloc_r+0x1e>
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	220c      	movs	r2, #12
 8008b80:	2600      	movs	r6, #0
 8008b82:	6002      	str	r2, [r0, #0]
 8008b84:	e7f9      	b.n	8008b7a <_calloc_r+0x12>
 8008b86:	462a      	mov	r2, r5
 8008b88:	4621      	mov	r1, r4
 8008b8a:	f7fd fdf7 	bl	800677c <memset>
 8008b8e:	e7f4      	b.n	8008b7a <_calloc_r+0x12>

08008b90 <_free_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d040      	beq.n	8008c1a <_free_r+0x8a>
 8008b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9c:	1f0c      	subs	r4, r1, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfb8      	it	lt
 8008ba2:	18e4      	addlt	r4, r4, r3
 8008ba4:	f000 fb14 	bl	80091d0 <__malloc_lock>
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <_free_r+0x8c>)
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	b933      	cbnz	r3, 8008bbc <_free_r+0x2c>
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	6014      	str	r4, [r2, #0]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb8:	f000 bb10 	b.w	80091dc <__malloc_unlock>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d908      	bls.n	8008bd2 <_free_r+0x42>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	1821      	adds	r1, r4, r0
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf01      	itttt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	1809      	addeq	r1, r1, r0
 8008bce:	6021      	streq	r1, [r4, #0]
 8008bd0:	e7ed      	b.n	8008bae <_free_r+0x1e>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x4c>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x42>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1850      	adds	r0, r2, r1
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x6c>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	4401      	add	r1, r0
 8008be8:	1850      	adds	r0, r2, r1
 8008bea:	4283      	cmp	r3, r0
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1e0      	bne.n	8008bb2 <_free_r+0x22>
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4401      	add	r1, r0
 8008bf6:	6011      	str	r1, [r2, #0]
 8008bf8:	6053      	str	r3, [r2, #4]
 8008bfa:	e7da      	b.n	8008bb2 <_free_r+0x22>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x74>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	e7d6      	b.n	8008bb2 <_free_r+0x22>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	1821      	adds	r1, r4, r0
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf01      	itttt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	1809      	addeq	r1, r1, r0
 8008c12:	6021      	streq	r1, [r4, #0]
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	6054      	str	r4, [r2, #4]
 8008c18:	e7cb      	b.n	8008bb2 <_free_r+0x22>
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000400 	.word	0x20000400

08008c20 <sbrk_aligned>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	4e0e      	ldr	r6, [pc, #56]	; (8008c5c <sbrk_aligned+0x3c>)
 8008c24:	460c      	mov	r4, r1
 8008c26:	6831      	ldr	r1, [r6, #0]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	b911      	cbnz	r1, 8008c32 <sbrk_aligned+0x12>
 8008c2c:	f000 f9e4 	bl	8008ff8 <_sbrk_r>
 8008c30:	6030      	str	r0, [r6, #0]
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f9df 	bl	8008ff8 <_sbrk_r>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d00a      	beq.n	8008c54 <sbrk_aligned+0x34>
 8008c3e:	1cc4      	adds	r4, r0, #3
 8008c40:	f024 0403 	bic.w	r4, r4, #3
 8008c44:	42a0      	cmp	r0, r4
 8008c46:	d007      	beq.n	8008c58 <sbrk_aligned+0x38>
 8008c48:	1a21      	subs	r1, r4, r0
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 f9d4 	bl	8008ff8 <_sbrk_r>
 8008c50:	3001      	adds	r0, #1
 8008c52:	d101      	bne.n	8008c58 <sbrk_aligned+0x38>
 8008c54:	f04f 34ff 	mov.w	r4, #4294967295
 8008c58:	4620      	mov	r0, r4
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	20000404 	.word	0x20000404

08008c60 <_malloc_r>:
 8008c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	1ccd      	adds	r5, r1, #3
 8008c66:	f025 0503 	bic.w	r5, r5, #3
 8008c6a:	3508      	adds	r5, #8
 8008c6c:	2d0c      	cmp	r5, #12
 8008c6e:	bf38      	it	cc
 8008c70:	250c      	movcc	r5, #12
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	4607      	mov	r7, r0
 8008c76:	db01      	blt.n	8008c7c <_malloc_r+0x1c>
 8008c78:	42a9      	cmp	r1, r5
 8008c7a:	d905      	bls.n	8008c88 <_malloc_r+0x28>
 8008c7c:	230c      	movs	r3, #12
 8008c7e:	2600      	movs	r6, #0
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4630      	mov	r0, r6
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	4e2e      	ldr	r6, [pc, #184]	; (8008d44 <_malloc_r+0xe4>)
 8008c8a:	f000 faa1 	bl	80091d0 <__malloc_lock>
 8008c8e:	6833      	ldr	r3, [r6, #0]
 8008c90:	461c      	mov	r4, r3
 8008c92:	bb34      	cbnz	r4, 8008ce2 <_malloc_r+0x82>
 8008c94:	4629      	mov	r1, r5
 8008c96:	4638      	mov	r0, r7
 8008c98:	f7ff ffc2 	bl	8008c20 <sbrk_aligned>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	d14d      	bne.n	8008d3e <_malloc_r+0xde>
 8008ca2:	6834      	ldr	r4, [r6, #0]
 8008ca4:	4626      	mov	r6, r4
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	d140      	bne.n	8008d2c <_malloc_r+0xcc>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	4631      	mov	r1, r6
 8008cae:	4638      	mov	r0, r7
 8008cb0:	eb04 0803 	add.w	r8, r4, r3
 8008cb4:	f000 f9a0 	bl	8008ff8 <_sbrk_r>
 8008cb8:	4580      	cmp	r8, r0
 8008cba:	d13a      	bne.n	8008d32 <_malloc_r+0xd2>
 8008cbc:	6821      	ldr	r1, [r4, #0]
 8008cbe:	3503      	adds	r5, #3
 8008cc0:	1a6d      	subs	r5, r5, r1
 8008cc2:	f025 0503 	bic.w	r5, r5, #3
 8008cc6:	3508      	adds	r5, #8
 8008cc8:	2d0c      	cmp	r5, #12
 8008cca:	bf38      	it	cc
 8008ccc:	250c      	movcc	r5, #12
 8008cce:	4638      	mov	r0, r7
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7ff ffa5 	bl	8008c20 <sbrk_aligned>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d02b      	beq.n	8008d32 <_malloc_r+0xd2>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	442b      	add	r3, r5
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	e00e      	b.n	8008d00 <_malloc_r+0xa0>
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	1b52      	subs	r2, r2, r5
 8008ce6:	d41e      	bmi.n	8008d26 <_malloc_r+0xc6>
 8008ce8:	2a0b      	cmp	r2, #11
 8008cea:	d916      	bls.n	8008d1a <_malloc_r+0xba>
 8008cec:	1961      	adds	r1, r4, r5
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	6025      	str	r5, [r4, #0]
 8008cf2:	bf18      	it	ne
 8008cf4:	6059      	strne	r1, [r3, #4]
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	bf08      	it	eq
 8008cfa:	6031      	streq	r1, [r6, #0]
 8008cfc:	5162      	str	r2, [r4, r5]
 8008cfe:	604b      	str	r3, [r1, #4]
 8008d00:	4638      	mov	r0, r7
 8008d02:	f104 060b 	add.w	r6, r4, #11
 8008d06:	f000 fa69 	bl	80091dc <__malloc_unlock>
 8008d0a:	f026 0607 	bic.w	r6, r6, #7
 8008d0e:	1d23      	adds	r3, r4, #4
 8008d10:	1af2      	subs	r2, r6, r3
 8008d12:	d0b6      	beq.n	8008c82 <_malloc_r+0x22>
 8008d14:	1b9b      	subs	r3, r3, r6
 8008d16:	50a3      	str	r3, [r4, r2]
 8008d18:	e7b3      	b.n	8008c82 <_malloc_r+0x22>
 8008d1a:	6862      	ldr	r2, [r4, #4]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	bf0c      	ite	eq
 8008d20:	6032      	streq	r2, [r6, #0]
 8008d22:	605a      	strne	r2, [r3, #4]
 8008d24:	e7ec      	b.n	8008d00 <_malloc_r+0xa0>
 8008d26:	4623      	mov	r3, r4
 8008d28:	6864      	ldr	r4, [r4, #4]
 8008d2a:	e7b2      	b.n	8008c92 <_malloc_r+0x32>
 8008d2c:	4634      	mov	r4, r6
 8008d2e:	6876      	ldr	r6, [r6, #4]
 8008d30:	e7b9      	b.n	8008ca6 <_malloc_r+0x46>
 8008d32:	230c      	movs	r3, #12
 8008d34:	4638      	mov	r0, r7
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	f000 fa50 	bl	80091dc <__malloc_unlock>
 8008d3c:	e7a1      	b.n	8008c82 <_malloc_r+0x22>
 8008d3e:	6025      	str	r5, [r4, #0]
 8008d40:	e7de      	b.n	8008d00 <_malloc_r+0xa0>
 8008d42:	bf00      	nop
 8008d44:	20000400 	.word	0x20000400

08008d48 <__sfputc_r>:
 8008d48:	6893      	ldr	r3, [r2, #8]
 8008d4a:	b410      	push	{r4}
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	6093      	str	r3, [r2, #8]
 8008d52:	da07      	bge.n	8008d64 <__sfputc_r+0x1c>
 8008d54:	6994      	ldr	r4, [r2, #24]
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	db01      	blt.n	8008d5e <__sfputc_r+0x16>
 8008d5a:	290a      	cmp	r1, #10
 8008d5c:	d102      	bne.n	8008d64 <__sfputc_r+0x1c>
 8008d5e:	bc10      	pop	{r4}
 8008d60:	f7fe ba02 	b.w	8007168 <__swbuf_r>
 8008d64:	6813      	ldr	r3, [r2, #0]
 8008d66:	1c58      	adds	r0, r3, #1
 8008d68:	6010      	str	r0, [r2, #0]
 8008d6a:	7019      	strb	r1, [r3, #0]
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	bc10      	pop	{r4}
 8008d70:	4770      	bx	lr

08008d72 <__sfputs_r>:
 8008d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	4614      	mov	r4, r2
 8008d7a:	18d5      	adds	r5, r2, r3
 8008d7c:	42ac      	cmp	r4, r5
 8008d7e:	d101      	bne.n	8008d84 <__sfputs_r+0x12>
 8008d80:	2000      	movs	r0, #0
 8008d82:	e007      	b.n	8008d94 <__sfputs_r+0x22>
 8008d84:	463a      	mov	r2, r7
 8008d86:	4630      	mov	r0, r6
 8008d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8c:	f7ff ffdc 	bl	8008d48 <__sfputc_r>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d1f3      	bne.n	8008d7c <__sfputs_r+0xa>
 8008d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d98 <_vfiprintf_r>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	4614      	mov	r4, r2
 8008da0:	4698      	mov	r8, r3
 8008da2:	4606      	mov	r6, r0
 8008da4:	b09d      	sub	sp, #116	; 0x74
 8008da6:	b118      	cbz	r0, 8008db0 <_vfiprintf_r+0x18>
 8008da8:	6983      	ldr	r3, [r0, #24]
 8008daa:	b90b      	cbnz	r3, 8008db0 <_vfiprintf_r+0x18>
 8008dac:	f7ff fa2c 	bl	8008208 <__sinit>
 8008db0:	4b89      	ldr	r3, [pc, #548]	; (8008fd8 <_vfiprintf_r+0x240>)
 8008db2:	429d      	cmp	r5, r3
 8008db4:	d11b      	bne.n	8008dee <_vfiprintf_r+0x56>
 8008db6:	6875      	ldr	r5, [r6, #4]
 8008db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dba:	07d9      	lsls	r1, r3, #31
 8008dbc:	d405      	bmi.n	8008dca <_vfiprintf_r+0x32>
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	059a      	lsls	r2, r3, #22
 8008dc2:	d402      	bmi.n	8008dca <_vfiprintf_r+0x32>
 8008dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dc6:	f7ff fac2 	bl	800834e <__retarget_lock_acquire_recursive>
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	071b      	lsls	r3, r3, #28
 8008dce:	d501      	bpl.n	8008dd4 <_vfiprintf_r+0x3c>
 8008dd0:	692b      	ldr	r3, [r5, #16]
 8008dd2:	b9eb      	cbnz	r3, 8008e10 <_vfiprintf_r+0x78>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7fe fa18 	bl	800720c <__swsetup_r>
 8008ddc:	b1c0      	cbz	r0, 8008e10 <_vfiprintf_r+0x78>
 8008dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de0:	07dc      	lsls	r4, r3, #31
 8008de2:	d50e      	bpl.n	8008e02 <_vfiprintf_r+0x6a>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295
 8008de8:	b01d      	add	sp, #116	; 0x74
 8008dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dee:	4b7b      	ldr	r3, [pc, #492]	; (8008fdc <_vfiprintf_r+0x244>)
 8008df0:	429d      	cmp	r5, r3
 8008df2:	d101      	bne.n	8008df8 <_vfiprintf_r+0x60>
 8008df4:	68b5      	ldr	r5, [r6, #8]
 8008df6:	e7df      	b.n	8008db8 <_vfiprintf_r+0x20>
 8008df8:	4b79      	ldr	r3, [pc, #484]	; (8008fe0 <_vfiprintf_r+0x248>)
 8008dfa:	429d      	cmp	r5, r3
 8008dfc:	bf08      	it	eq
 8008dfe:	68f5      	ldreq	r5, [r6, #12]
 8008e00:	e7da      	b.n	8008db8 <_vfiprintf_r+0x20>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	0598      	lsls	r0, r3, #22
 8008e06:	d4ed      	bmi.n	8008de4 <_vfiprintf_r+0x4c>
 8008e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e0a:	f7ff faa1 	bl	8008350 <__retarget_lock_release_recursive>
 8008e0e:	e7e9      	b.n	8008de4 <_vfiprintf_r+0x4c>
 8008e10:	2300      	movs	r3, #0
 8008e12:	9309      	str	r3, [sp, #36]	; 0x24
 8008e14:	2320      	movs	r3, #32
 8008e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e1a:	2330      	movs	r3, #48	; 0x30
 8008e1c:	f04f 0901 	mov.w	r9, #1
 8008e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008fe4 <_vfiprintf_r+0x24c>
 8008e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	469a      	mov	sl, r3
 8008e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e34:	b10a      	cbz	r2, 8008e3a <_vfiprintf_r+0xa2>
 8008e36:	2a25      	cmp	r2, #37	; 0x25
 8008e38:	d1f9      	bne.n	8008e2e <_vfiprintf_r+0x96>
 8008e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e3e:	d00b      	beq.n	8008e58 <_vfiprintf_r+0xc0>
 8008e40:	465b      	mov	r3, fp
 8008e42:	4622      	mov	r2, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ff93 	bl	8008d72 <__sfputs_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	f000 80aa 	beq.w	8008fa6 <_vfiprintf_r+0x20e>
 8008e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e54:	445a      	add	r2, fp
 8008e56:	9209      	str	r2, [sp, #36]	; 0x24
 8008e58:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80a2 	beq.w	8008fa6 <_vfiprintf_r+0x20e>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6c:	f10a 0a01 	add.w	sl, sl, #1
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9307      	str	r3, [sp, #28]
 8008e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e78:	931a      	str	r3, [sp, #104]	; 0x68
 8008e7a:	4654      	mov	r4, sl
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e82:	4858      	ldr	r0, [pc, #352]	; (8008fe4 <_vfiprintf_r+0x24c>)
 8008e84:	f7ff fad2 	bl	800842c <memchr>
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	b9d8      	cbnz	r0, 8008ec4 <_vfiprintf_r+0x12c>
 8008e8c:	06d1      	lsls	r1, r2, #27
 8008e8e:	bf44      	itt	mi
 8008e90:	2320      	movmi	r3, #32
 8008e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e96:	0713      	lsls	r3, r2, #28
 8008e98:	bf44      	itt	mi
 8008e9a:	232b      	movmi	r3, #43	; 0x2b
 8008e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea6:	d015      	beq.n	8008ed4 <_vfiprintf_r+0x13c>
 8008ea8:	4654      	mov	r4, sl
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f04f 0c0a 	mov.w	ip, #10
 8008eb0:	9a07      	ldr	r2, [sp, #28]
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb8:	3b30      	subs	r3, #48	; 0x30
 8008eba:	2b09      	cmp	r3, #9
 8008ebc:	d94e      	bls.n	8008f5c <_vfiprintf_r+0x1c4>
 8008ebe:	b1b0      	cbz	r0, 8008eee <_vfiprintf_r+0x156>
 8008ec0:	9207      	str	r2, [sp, #28]
 8008ec2:	e014      	b.n	8008eee <_vfiprintf_r+0x156>
 8008ec4:	eba0 0308 	sub.w	r3, r0, r8
 8008ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	46a2      	mov	sl, r4
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	e7d2      	b.n	8008e7a <_vfiprintf_r+0xe2>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1d19      	adds	r1, r3, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	9103      	str	r1, [sp, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfbb      	ittet	lt
 8008ee0:	425b      	neglt	r3, r3
 8008ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee6:	9307      	strge	r3, [sp, #28]
 8008ee8:	9307      	strlt	r3, [sp, #28]
 8008eea:	bfb8      	it	lt
 8008eec:	9204      	strlt	r2, [sp, #16]
 8008eee:	7823      	ldrb	r3, [r4, #0]
 8008ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef2:	d10c      	bne.n	8008f0e <_vfiprintf_r+0x176>
 8008ef4:	7863      	ldrb	r3, [r4, #1]
 8008ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ef8:	d135      	bne.n	8008f66 <_vfiprintf_r+0x1ce>
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	3402      	adds	r4, #2
 8008efe:	1d1a      	adds	r2, r3, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	9203      	str	r2, [sp, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	bfb8      	it	lt
 8008f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008fe8 <_vfiprintf_r+0x250>
 8008f12:	2203      	movs	r2, #3
 8008f14:	4650      	mov	r0, sl
 8008f16:	7821      	ldrb	r1, [r4, #0]
 8008f18:	f7ff fa88 	bl	800842c <memchr>
 8008f1c:	b140      	cbz	r0, 8008f30 <_vfiprintf_r+0x198>
 8008f1e:	2340      	movs	r3, #64	; 0x40
 8008f20:	eba0 000a 	sub.w	r0, r0, sl
 8008f24:	fa03 f000 	lsl.w	r0, r3, r0
 8008f28:	9b04      	ldr	r3, [sp, #16]
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f34:	2206      	movs	r2, #6
 8008f36:	482d      	ldr	r0, [pc, #180]	; (8008fec <_vfiprintf_r+0x254>)
 8008f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f3c:	f7ff fa76 	bl	800842c <memchr>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d03f      	beq.n	8008fc4 <_vfiprintf_r+0x22c>
 8008f44:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <_vfiprintf_r+0x258>)
 8008f46:	bb1b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x1f8>
 8008f48:	9b03      	ldr	r3, [sp, #12]
 8008f4a:	3307      	adds	r3, #7
 8008f4c:	f023 0307 	bic.w	r3, r3, #7
 8008f50:	3308      	adds	r3, #8
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f56:	443b      	add	r3, r7
 8008f58:	9309      	str	r3, [sp, #36]	; 0x24
 8008f5a:	e767      	b.n	8008e2c <_vfiprintf_r+0x94>
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	2001      	movs	r0, #1
 8008f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f64:	e7a5      	b.n	8008eb2 <_vfiprintf_r+0x11a>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f04f 0c0a 	mov.w	ip, #10
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f78:	3a30      	subs	r2, #48	; 0x30
 8008f7a:	2a09      	cmp	r2, #9
 8008f7c:	d903      	bls.n	8008f86 <_vfiprintf_r+0x1ee>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0c5      	beq.n	8008f0e <_vfiprintf_r+0x176>
 8008f82:	9105      	str	r1, [sp, #20]
 8008f84:	e7c3      	b.n	8008f0e <_vfiprintf_r+0x176>
 8008f86:	4604      	mov	r4, r0
 8008f88:	2301      	movs	r3, #1
 8008f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f8e:	e7f0      	b.n	8008f72 <_vfiprintf_r+0x1da>
 8008f90:	ab03      	add	r3, sp, #12
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	462a      	mov	r2, r5
 8008f96:	4630      	mov	r0, r6
 8008f98:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <_vfiprintf_r+0x25c>)
 8008f9a:	a904      	add	r1, sp, #16
 8008f9c:	f7fd fc94 	bl	80068c8 <_printf_float>
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	1c78      	adds	r0, r7, #1
 8008fa4:	d1d6      	bne.n	8008f54 <_vfiprintf_r+0x1bc>
 8008fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa8:	07d9      	lsls	r1, r3, #31
 8008faa:	d405      	bmi.n	8008fb8 <_vfiprintf_r+0x220>
 8008fac:	89ab      	ldrh	r3, [r5, #12]
 8008fae:	059a      	lsls	r2, r3, #22
 8008fb0:	d402      	bmi.n	8008fb8 <_vfiprintf_r+0x220>
 8008fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fb4:	f7ff f9cc 	bl	8008350 <__retarget_lock_release_recursive>
 8008fb8:	89ab      	ldrh	r3, [r5, #12]
 8008fba:	065b      	lsls	r3, r3, #25
 8008fbc:	f53f af12 	bmi.w	8008de4 <_vfiprintf_r+0x4c>
 8008fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc2:	e711      	b.n	8008de8 <_vfiprintf_r+0x50>
 8008fc4:	ab03      	add	r3, sp, #12
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	462a      	mov	r2, r5
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <_vfiprintf_r+0x25c>)
 8008fce:	a904      	add	r1, sp, #16
 8008fd0:	f7fd ff16 	bl	8006e00 <_printf_i>
 8008fd4:	e7e4      	b.n	8008fa0 <_vfiprintf_r+0x208>
 8008fd6:	bf00      	nop
 8008fd8:	08009fa0 	.word	0x08009fa0
 8008fdc:	08009fc0 	.word	0x08009fc0
 8008fe0:	08009f80 	.word	0x08009f80
 8008fe4:	0800a13c 	.word	0x0800a13c
 8008fe8:	0800a142 	.word	0x0800a142
 8008fec:	0800a146 	.word	0x0800a146
 8008ff0:	080068c9 	.word	0x080068c9
 8008ff4:	08008d73 	.word	0x08008d73

08008ff8 <_sbrk_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4d05      	ldr	r5, [pc, #20]	; (8009014 <_sbrk_r+0x1c>)
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7f8 ff6e 	bl	8001ee4 <_sbrk>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_sbrk_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_sbrk_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	20000408 	.word	0x20000408

08009018 <__sread>:
 8009018:	b510      	push	{r4, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	f000 f8e2 	bl	80091e8 <_read_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	bfab      	itete	ge
 8009028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800902a:	89a3      	ldrhlt	r3, [r4, #12]
 800902c:	181b      	addge	r3, r3, r0
 800902e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009032:	bfac      	ite	ge
 8009034:	6563      	strge	r3, [r4, #84]	; 0x54
 8009036:	81a3      	strhlt	r3, [r4, #12]
 8009038:	bd10      	pop	{r4, pc}

0800903a <__swrite>:
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	461f      	mov	r7, r3
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	4605      	mov	r5, r0
 8009044:	05db      	lsls	r3, r3, #23
 8009046:	460c      	mov	r4, r1
 8009048:	4616      	mov	r6, r2
 800904a:	d505      	bpl.n	8009058 <__swrite+0x1e>
 800904c:	2302      	movs	r3, #2
 800904e:	2200      	movs	r2, #0
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f898 	bl	8009188 <_lseek_r>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	4632      	mov	r2, r6
 800905c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	4628      	mov	r0, r5
 8009064:	463b      	mov	r3, r7
 8009066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	f000 b817 	b.w	80090a0 <_write_r>

08009072 <__sseek>:
 8009072:	b510      	push	{r4, lr}
 8009074:	460c      	mov	r4, r1
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 f885 	bl	8009188 <_lseek_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	bf15      	itete	ne
 8009084:	6560      	strne	r0, [r4, #84]	; 0x54
 8009086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800908a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800908e:	81a3      	strheq	r3, [r4, #12]
 8009090:	bf18      	it	ne
 8009092:	81a3      	strhne	r3, [r4, #12]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__sclose>:
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 b831 	b.w	8009100 <_close_r>
	...

080090a0 <_write_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	2200      	movs	r2, #0
 80090aa:	4d05      	ldr	r5, [pc, #20]	; (80090c0 <_write_r+0x20>)
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 fecc 	bl	8001e4c <_write>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_write_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_write_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20000408 	.word	0x20000408

080090c4 <__assert_func>:
 80090c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__assert_func+0x2c>)
 80090cc:	4605      	mov	r5, r0
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	b14c      	cbz	r4, 80090e8 <__assert_func+0x24>
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <__assert_func+0x30>)
 80090d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090da:	9100      	str	r1, [sp, #0]
 80090dc:	462b      	mov	r3, r5
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <__assert_func+0x34>)
 80090e0:	f000 f81e 	bl	8009120 <fiprintf>
 80090e4:	f000 f89f 	bl	8009226 <abort>
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__assert_func+0x38>)
 80090ea:	461c      	mov	r4, r3
 80090ec:	e7f3      	b.n	80090d6 <__assert_func+0x12>
 80090ee:	bf00      	nop
 80090f0:	2000000c 	.word	0x2000000c
 80090f4:	0800a14d 	.word	0x0800a14d
 80090f8:	0800a15a 	.word	0x0800a15a
 80090fc:	0800a188 	.word	0x0800a188

08009100 <_close_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	2300      	movs	r3, #0
 8009104:	4d05      	ldr	r5, [pc, #20]	; (800911c <_close_r+0x1c>)
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	f7f8 feba 	bl	8001e84 <_close>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_close_r+0x1a>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_close_r+0x1a>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000408 	.word	0x20000408

08009120 <fiprintf>:
 8009120:	b40e      	push	{r1, r2, r3}
 8009122:	b503      	push	{r0, r1, lr}
 8009124:	4601      	mov	r1, r0
 8009126:	ab03      	add	r3, sp, #12
 8009128:	4805      	ldr	r0, [pc, #20]	; (8009140 <fiprintf+0x20>)
 800912a:	f853 2b04 	ldr.w	r2, [r3], #4
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	f7ff fe31 	bl	8008d98 <_vfiprintf_r>
 8009136:	b002      	add	sp, #8
 8009138:	f85d eb04 	ldr.w	lr, [sp], #4
 800913c:	b003      	add	sp, #12
 800913e:	4770      	bx	lr
 8009140:	2000000c 	.word	0x2000000c

08009144 <_fstat_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	2300      	movs	r3, #0
 8009148:	4d06      	ldr	r5, [pc, #24]	; (8009164 <_fstat_r+0x20>)
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7f8 fea2 	bl	8001e9a <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_fstat_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_fstat_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	20000408 	.word	0x20000408

08009168 <_isatty_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	2300      	movs	r3, #0
 800916c:	4d05      	ldr	r5, [pc, #20]	; (8009184 <_isatty_r+0x1c>)
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f8 fea0 	bl	8001eb8 <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_isatty_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_isatty_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000408 	.word	0x20000408

08009188 <_lseek_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	4611      	mov	r1, r2
 8009190:	2200      	movs	r2, #0
 8009192:	4d05      	ldr	r5, [pc, #20]	; (80091a8 <_lseek_r+0x20>)
 8009194:	602a      	str	r2, [r5, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f7f8 fe98 	bl	8001ecc <_lseek>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_lseek_r+0x1e>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_lseek_r+0x1e>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000408 	.word	0x20000408

080091ac <__ascii_mbtowc>:
 80091ac:	b082      	sub	sp, #8
 80091ae:	b901      	cbnz	r1, 80091b2 <__ascii_mbtowc+0x6>
 80091b0:	a901      	add	r1, sp, #4
 80091b2:	b142      	cbz	r2, 80091c6 <__ascii_mbtowc+0x1a>
 80091b4:	b14b      	cbz	r3, 80091ca <__ascii_mbtowc+0x1e>
 80091b6:	7813      	ldrb	r3, [r2, #0]
 80091b8:	600b      	str	r3, [r1, #0]
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	1e10      	subs	r0, r2, #0
 80091be:	bf18      	it	ne
 80091c0:	2001      	movne	r0, #1
 80091c2:	b002      	add	sp, #8
 80091c4:	4770      	bx	lr
 80091c6:	4610      	mov	r0, r2
 80091c8:	e7fb      	b.n	80091c2 <__ascii_mbtowc+0x16>
 80091ca:	f06f 0001 	mvn.w	r0, #1
 80091ce:	e7f8      	b.n	80091c2 <__ascii_mbtowc+0x16>

080091d0 <__malloc_lock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_lock+0x8>)
 80091d2:	f7ff b8bc 	b.w	800834e <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	200003fc 	.word	0x200003fc

080091dc <__malloc_unlock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_unlock+0x8>)
 80091de:	f7ff b8b7 	b.w	8008350 <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	200003fc 	.word	0x200003fc

080091e8 <_read_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4604      	mov	r4, r0
 80091ec:	4608      	mov	r0, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	2200      	movs	r2, #0
 80091f2:	4d05      	ldr	r5, [pc, #20]	; (8009208 <_read_r+0x20>)
 80091f4:	602a      	str	r2, [r5, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f7f8 fe0b 	bl	8001e12 <_read>
 80091fc:	1c43      	adds	r3, r0, #1
 80091fe:	d102      	bne.n	8009206 <_read_r+0x1e>
 8009200:	682b      	ldr	r3, [r5, #0]
 8009202:	b103      	cbz	r3, 8009206 <_read_r+0x1e>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	bd38      	pop	{r3, r4, r5, pc}
 8009208:	20000408 	.word	0x20000408

0800920c <__ascii_wctomb>:
 800920c:	4603      	mov	r3, r0
 800920e:	4608      	mov	r0, r1
 8009210:	b141      	cbz	r1, 8009224 <__ascii_wctomb+0x18>
 8009212:	2aff      	cmp	r2, #255	; 0xff
 8009214:	d904      	bls.n	8009220 <__ascii_wctomb+0x14>
 8009216:	228a      	movs	r2, #138	; 0x8a
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	601a      	str	r2, [r3, #0]
 800921e:	4770      	bx	lr
 8009220:	2001      	movs	r0, #1
 8009222:	700a      	strb	r2, [r1, #0]
 8009224:	4770      	bx	lr

08009226 <abort>:
 8009226:	2006      	movs	r0, #6
 8009228:	b508      	push	{r3, lr}
 800922a:	f000 f82b 	bl	8009284 <raise>
 800922e:	2001      	movs	r0, #1
 8009230:	f7f8 fde5 	bl	8001dfe <_exit>

08009234 <_raise_r>:
 8009234:	291f      	cmp	r1, #31
 8009236:	b538      	push	{r3, r4, r5, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	460d      	mov	r5, r1
 800923c:	d904      	bls.n	8009248 <_raise_r+0x14>
 800923e:	2316      	movs	r3, #22
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	f04f 30ff 	mov.w	r0, #4294967295
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800924a:	b112      	cbz	r2, 8009252 <_raise_r+0x1e>
 800924c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009250:	b94b      	cbnz	r3, 8009266 <_raise_r+0x32>
 8009252:	4620      	mov	r0, r4
 8009254:	f000 f830 	bl	80092b8 <_getpid_r>
 8009258:	462a      	mov	r2, r5
 800925a:	4601      	mov	r1, r0
 800925c:	4620      	mov	r0, r4
 800925e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009262:	f000 b817 	b.w	8009294 <_kill_r>
 8009266:	2b01      	cmp	r3, #1
 8009268:	d00a      	beq.n	8009280 <_raise_r+0x4c>
 800926a:	1c59      	adds	r1, r3, #1
 800926c:	d103      	bne.n	8009276 <_raise_r+0x42>
 800926e:	2316      	movs	r3, #22
 8009270:	6003      	str	r3, [r0, #0]
 8009272:	2001      	movs	r0, #1
 8009274:	e7e7      	b.n	8009246 <_raise_r+0x12>
 8009276:	2400      	movs	r4, #0
 8009278:	4628      	mov	r0, r5
 800927a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800927e:	4798      	blx	r3
 8009280:	2000      	movs	r0, #0
 8009282:	e7e0      	b.n	8009246 <_raise_r+0x12>

08009284 <raise>:
 8009284:	4b02      	ldr	r3, [pc, #8]	; (8009290 <raise+0xc>)
 8009286:	4601      	mov	r1, r0
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f7ff bfd3 	b.w	8009234 <_raise_r>
 800928e:	bf00      	nop
 8009290:	2000000c 	.word	0x2000000c

08009294 <_kill_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	2300      	movs	r3, #0
 8009298:	4d06      	ldr	r5, [pc, #24]	; (80092b4 <_kill_r+0x20>)
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	4611      	mov	r1, r2
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	f7f8 fd9c 	bl	8001dde <_kill>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d102      	bne.n	80092b0 <_kill_r+0x1c>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	b103      	cbz	r3, 80092b0 <_kill_r+0x1c>
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	bd38      	pop	{r3, r4, r5, pc}
 80092b2:	bf00      	nop
 80092b4:	20000408 	.word	0x20000408

080092b8 <_getpid_r>:
 80092b8:	f7f8 bd8a 	b.w	8001dd0 <_getpid>

080092bc <powf>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	460c      	mov	r4, r1
 80092c0:	4606      	mov	r6, r0
 80092c2:	f000 f849 	bl	8009358 <__ieee754_powf>
 80092c6:	4621      	mov	r1, r4
 80092c8:	4605      	mov	r5, r0
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7f7 ff00 	bl	80010d0 <__aeabi_fcmpun>
 80092d0:	bb68      	cbnz	r0, 800932e <powf+0x72>
 80092d2:	2100      	movs	r1, #0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7f7 fec9 	bl	800106c <__aeabi_fcmpeq>
 80092da:	b190      	cbz	r0, 8009302 <powf+0x46>
 80092dc:	2100      	movs	r1, #0
 80092de:	4620      	mov	r0, r4
 80092e0:	f7f7 fec4 	bl	800106c <__aeabi_fcmpeq>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d133      	bne.n	8009350 <powf+0x94>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f000 fc0e 	bl	8009b0a <finitef>
 80092ee:	b1f0      	cbz	r0, 800932e <powf+0x72>
 80092f0:	2100      	movs	r1, #0
 80092f2:	4620      	mov	r0, r4
 80092f4:	f7f7 fec4 	bl	8001080 <__aeabi_fcmplt>
 80092f8:	b1c8      	cbz	r0, 800932e <powf+0x72>
 80092fa:	f7fd fa15 	bl	8006728 <__errno>
 80092fe:	2322      	movs	r3, #34	; 0x22
 8009300:	e014      	b.n	800932c <powf+0x70>
 8009302:	4628      	mov	r0, r5
 8009304:	f000 fc01 	bl	8009b0a <finitef>
 8009308:	b998      	cbnz	r0, 8009332 <powf+0x76>
 800930a:	4630      	mov	r0, r6
 800930c:	f000 fbfd 	bl	8009b0a <finitef>
 8009310:	b178      	cbz	r0, 8009332 <powf+0x76>
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fbf9 	bl	8009b0a <finitef>
 8009318:	b158      	cbz	r0, 8009332 <powf+0x76>
 800931a:	4629      	mov	r1, r5
 800931c:	4628      	mov	r0, r5
 800931e:	f7f7 fed7 	bl	80010d0 <__aeabi_fcmpun>
 8009322:	2800      	cmp	r0, #0
 8009324:	d0e9      	beq.n	80092fa <powf+0x3e>
 8009326:	f7fd f9ff 	bl	8006728 <__errno>
 800932a:	2321      	movs	r3, #33	; 0x21
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	4628      	mov	r0, r5
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	2100      	movs	r1, #0
 8009334:	4628      	mov	r0, r5
 8009336:	f7f7 fe99 	bl	800106c <__aeabi_fcmpeq>
 800933a:	2800      	cmp	r0, #0
 800933c:	d0f7      	beq.n	800932e <powf+0x72>
 800933e:	4630      	mov	r0, r6
 8009340:	f000 fbe3 	bl	8009b0a <finitef>
 8009344:	2800      	cmp	r0, #0
 8009346:	d0f2      	beq.n	800932e <powf+0x72>
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fbde 	bl	8009b0a <finitef>
 800934e:	e7d3      	b.n	80092f8 <powf+0x3c>
 8009350:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8009354:	e7eb      	b.n	800932e <powf+0x72>
	...

08009358 <__ieee754_powf>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8009360:	4681      	mov	r9, r0
 8009362:	460f      	mov	r7, r1
 8009364:	4680      	mov	r8, r0
 8009366:	460c      	mov	r4, r1
 8009368:	b087      	sub	sp, #28
 800936a:	d10d      	bne.n	8009388 <__ieee754_powf+0x30>
 800936c:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8009370:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009374:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8009378:	f240 8338 	bls.w	80099ec <__ieee754_powf+0x694>
 800937c:	4639      	mov	r1, r7
 800937e:	4648      	mov	r0, r9
 8009380:	f7f7 fbd8 	bl	8000b34 <__addsf3>
 8009384:	4601      	mov	r1, r0
 8009386:	e040      	b.n	800940a <__ieee754_powf+0xb2>
 8009388:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800938c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009390:	dcf4      	bgt.n	800937c <__ieee754_powf+0x24>
 8009392:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8009396:	dd08      	ble.n	80093aa <__ieee754_powf+0x52>
 8009398:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 800939c:	d1ee      	bne.n	800937c <__ieee754_powf+0x24>
 800939e:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 80093a2:	0064      	lsls	r4, r4, #1
 80093a4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80093a8:	e7e6      	b.n	8009378 <__ieee754_powf+0x20>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	da20      	bge.n	80093f0 <__ieee754_powf+0x98>
 80093ae:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 80093b2:	da2e      	bge.n	8009412 <__ieee754_powf+0xba>
 80093b4:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80093b8:	f2c0 831d 	blt.w	80099f6 <__ieee754_powf+0x69e>
 80093bc:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80093c0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80093c4:	fa4a f503 	asr.w	r5, sl, r3
 80093c8:	fa05 f303 	lsl.w	r3, r5, r3
 80093cc:	4553      	cmp	r3, sl
 80093ce:	f040 8312 	bne.w	80099f6 <__ieee754_powf+0x69e>
 80093d2:	f005 0501 	and.w	r5, r5, #1
 80093d6:	f1c5 0502 	rsb	r5, r5, #2
 80093da:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80093de:	d120      	bne.n	8009422 <__ieee754_powf+0xca>
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	4649      	mov	r1, r9
 80093e4:	da11      	bge.n	800940a <__ieee754_powf+0xb2>
 80093e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80093ea:	f7f7 fd5f 	bl	8000eac <__aeabi_fdiv>
 80093ee:	e7c9      	b.n	8009384 <__ieee754_powf+0x2c>
 80093f0:	2500      	movs	r5, #0
 80093f2:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80093f6:	d1f0      	bne.n	80093da <__ieee754_powf+0x82>
 80093f8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80093fc:	f000 82f6 	beq.w	80099ec <__ieee754_powf+0x694>
 8009400:	dd09      	ble.n	8009416 <__ieee754_powf+0xbe>
 8009402:	2c00      	cmp	r4, #0
 8009404:	f2c0 82f5 	blt.w	80099f2 <__ieee754_powf+0x69a>
 8009408:	4639      	mov	r1, r7
 800940a:	4608      	mov	r0, r1
 800940c:	b007      	add	sp, #28
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	2502      	movs	r5, #2
 8009414:	e7ed      	b.n	80093f2 <__ieee754_powf+0x9a>
 8009416:	2c00      	cmp	r4, #0
 8009418:	f280 82eb 	bge.w	80099f2 <__ieee754_powf+0x69a>
 800941c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8009420:	e7f3      	b.n	800940a <__ieee754_powf+0xb2>
 8009422:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009426:	d104      	bne.n	8009432 <__ieee754_powf+0xda>
 8009428:	4649      	mov	r1, r9
 800942a:	4648      	mov	r0, r9
 800942c:	f7f7 fc8a 	bl	8000d44 <__aeabi_fmul>
 8009430:	e7a8      	b.n	8009384 <__ieee754_powf+0x2c>
 8009432:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8009436:	4648      	mov	r0, r9
 8009438:	d107      	bne.n	800944a <__ieee754_powf+0xf2>
 800943a:	f1b8 0f00 	cmp.w	r8, #0
 800943e:	db04      	blt.n	800944a <__ieee754_powf+0xf2>
 8009440:	b007      	add	sp, #28
 8009442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009446:	f000 baef 	b.w	8009a28 <__ieee754_sqrtf>
 800944a:	f000 fb5b 	bl	8009b04 <fabsf>
 800944e:	4601      	mov	r1, r0
 8009450:	b126      	cbz	r6, 800945c <__ieee754_powf+0x104>
 8009452:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8009456:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800945a:	d118      	bne.n	800948e <__ieee754_powf+0x136>
 800945c:	2c00      	cmp	r4, #0
 800945e:	da04      	bge.n	800946a <__ieee754_powf+0x112>
 8009460:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009464:	f7f7 fd22 	bl	8000eac <__aeabi_fdiv>
 8009468:	4601      	mov	r1, r0
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	dacc      	bge.n	800940a <__ieee754_powf+0xb2>
 8009470:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8009474:	ea56 0305 	orrs.w	r3, r6, r5
 8009478:	d104      	bne.n	8009484 <__ieee754_powf+0x12c>
 800947a:	4608      	mov	r0, r1
 800947c:	f7f7 fb58 	bl	8000b30 <__aeabi_fsub>
 8009480:	4601      	mov	r1, r0
 8009482:	e7b2      	b.n	80093ea <__ieee754_powf+0x92>
 8009484:	2d01      	cmp	r5, #1
 8009486:	d1c0      	bne.n	800940a <__ieee754_powf+0xb2>
 8009488:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800948c:	e77a      	b.n	8009384 <__ieee754_powf+0x2c>
 800948e:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009492:	3b01      	subs	r3, #1
 8009494:	9302      	str	r3, [sp, #8]
 8009496:	432b      	orrs	r3, r5
 8009498:	d101      	bne.n	800949e <__ieee754_powf+0x146>
 800949a:	4649      	mov	r1, r9
 800949c:	e7ed      	b.n	800947a <__ieee754_powf+0x122>
 800949e:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 80094a2:	f340 809f 	ble.w	80095e4 <__ieee754_powf+0x28c>
 80094a6:	4b48      	ldr	r3, [pc, #288]	; (80095c8 <__ieee754_powf+0x270>)
 80094a8:	429e      	cmp	r6, r3
 80094aa:	dc07      	bgt.n	80094bc <__ieee754_powf+0x164>
 80094ac:	2c00      	cmp	r4, #0
 80094ae:	da0a      	bge.n	80094c6 <__ieee754_powf+0x16e>
 80094b0:	2000      	movs	r0, #0
 80094b2:	b007      	add	sp, #28
 80094b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	f000 bb20 	b.w	8009afc <__math_oflowf>
 80094bc:	4b43      	ldr	r3, [pc, #268]	; (80095cc <__ieee754_powf+0x274>)
 80094be:	429e      	cmp	r6, r3
 80094c0:	dd07      	ble.n	80094d2 <__ieee754_powf+0x17a>
 80094c2:	2c00      	cmp	r4, #0
 80094c4:	dcf4      	bgt.n	80094b0 <__ieee754_powf+0x158>
 80094c6:	2000      	movs	r0, #0
 80094c8:	b007      	add	sp, #28
 80094ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ce:	f000 bb11 	b.w	8009af4 <__math_uflowf>
 80094d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80094d6:	f7f7 fb2b 	bl	8000b30 <__aeabi_fsub>
 80094da:	493d      	ldr	r1, [pc, #244]	; (80095d0 <__ieee754_powf+0x278>)
 80094dc:	4606      	mov	r6, r0
 80094de:	f7f7 fc31 	bl	8000d44 <__aeabi_fmul>
 80094e2:	493c      	ldr	r1, [pc, #240]	; (80095d4 <__ieee754_powf+0x27c>)
 80094e4:	4680      	mov	r8, r0
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7f7 fc2c 	bl	8000d44 <__aeabi_fmul>
 80094ec:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80094f0:	4681      	mov	r9, r0
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7f7 fc26 	bl	8000d44 <__aeabi_fmul>
 80094f8:	4601      	mov	r1, r0
 80094fa:	4837      	ldr	r0, [pc, #220]	; (80095d8 <__ieee754_powf+0x280>)
 80094fc:	f7f7 fb18 	bl	8000b30 <__aeabi_fsub>
 8009500:	4631      	mov	r1, r6
 8009502:	f7f7 fc1f 	bl	8000d44 <__aeabi_fmul>
 8009506:	4601      	mov	r1, r0
 8009508:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800950c:	f7f7 fb10 	bl	8000b30 <__aeabi_fsub>
 8009510:	4631      	mov	r1, r6
 8009512:	4682      	mov	sl, r0
 8009514:	4630      	mov	r0, r6
 8009516:	f7f7 fc15 	bl	8000d44 <__aeabi_fmul>
 800951a:	4601      	mov	r1, r0
 800951c:	4650      	mov	r0, sl
 800951e:	f7f7 fc11 	bl	8000d44 <__aeabi_fmul>
 8009522:	492e      	ldr	r1, [pc, #184]	; (80095dc <__ieee754_powf+0x284>)
 8009524:	f7f7 fc0e 	bl	8000d44 <__aeabi_fmul>
 8009528:	4601      	mov	r1, r0
 800952a:	4648      	mov	r0, r9
 800952c:	f7f7 fb00 	bl	8000b30 <__aeabi_fsub>
 8009530:	4601      	mov	r1, r0
 8009532:	4606      	mov	r6, r0
 8009534:	4640      	mov	r0, r8
 8009536:	f7f7 fafd 	bl	8000b34 <__addsf3>
 800953a:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800953e:	f029 090f 	bic.w	r9, r9, #15
 8009542:	4641      	mov	r1, r8
 8009544:	4648      	mov	r0, r9
 8009546:	f7f7 faf3 	bl	8000b30 <__aeabi_fsub>
 800954a:	4601      	mov	r1, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7f7 faef 	bl	8000b30 <__aeabi_fsub>
 8009552:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	3d01      	subs	r5, #1
 800955a:	f024 040f 	bic.w	r4, r4, #15
 800955e:	432b      	orrs	r3, r5
 8009560:	4606      	mov	r6, r0
 8009562:	4621      	mov	r1, r4
 8009564:	4638      	mov	r0, r7
 8009566:	bf14      	ite	ne
 8009568:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800956c:	4d1c      	ldreq	r5, [pc, #112]	; (80095e0 <__ieee754_powf+0x288>)
 800956e:	f7f7 fadf 	bl	8000b30 <__aeabi_fsub>
 8009572:	4649      	mov	r1, r9
 8009574:	f7f7 fbe6 	bl	8000d44 <__aeabi_fmul>
 8009578:	4639      	mov	r1, r7
 800957a:	4680      	mov	r8, r0
 800957c:	4630      	mov	r0, r6
 800957e:	f7f7 fbe1 	bl	8000d44 <__aeabi_fmul>
 8009582:	4601      	mov	r1, r0
 8009584:	4640      	mov	r0, r8
 8009586:	f7f7 fad5 	bl	8000b34 <__addsf3>
 800958a:	4621      	mov	r1, r4
 800958c:	4606      	mov	r6, r0
 800958e:	4648      	mov	r0, r9
 8009590:	f7f7 fbd8 	bl	8000d44 <__aeabi_fmul>
 8009594:	4601      	mov	r1, r0
 8009596:	4607      	mov	r7, r0
 8009598:	4681      	mov	r9, r0
 800959a:	4630      	mov	r0, r6
 800959c:	f7f7 faca 	bl	8000b34 <__addsf3>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	4682      	mov	sl, r0
 80095a4:	4680      	mov	r8, r0
 80095a6:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80095aa:	f340 8201 	ble.w	80099b0 <__ieee754_powf+0x658>
 80095ae:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 80095b2:	f340 814f 	ble.w	8009854 <__ieee754_powf+0x4fc>
 80095b6:	2100      	movs	r1, #0
 80095b8:	4628      	mov	r0, r5
 80095ba:	f7f7 fd61 	bl	8001080 <__aeabi_fcmplt>
 80095be:	3800      	subs	r0, #0
 80095c0:	bf18      	it	ne
 80095c2:	2001      	movne	r0, #1
 80095c4:	e775      	b.n	80094b2 <__ieee754_powf+0x15a>
 80095c6:	bf00      	nop
 80095c8:	3f7ffff3 	.word	0x3f7ffff3
 80095cc:	3f800007 	.word	0x3f800007
 80095d0:	3fb8aa00 	.word	0x3fb8aa00
 80095d4:	36eca570 	.word	0x36eca570
 80095d8:	3eaaaaab 	.word	0x3eaaaaab
 80095dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80095e0:	bf800000 	.word	0xbf800000
 80095e4:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80095e8:	f040 8111 	bne.w	800980e <__ieee754_powf+0x4b6>
 80095ec:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80095f0:	f7f7 fba8 	bl	8000d44 <__aeabi_fmul>
 80095f4:	f06f 0217 	mvn.w	r2, #23
 80095f8:	4606      	mov	r6, r0
 80095fa:	15f3      	asrs	r3, r6, #23
 80095fc:	3b7f      	subs	r3, #127	; 0x7f
 80095fe:	4413      	add	r3, r2
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	4b85      	ldr	r3, [pc, #532]	; (8009818 <__ieee754_powf+0x4c0>)
 8009604:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8009608:	4298      	cmp	r0, r3
 800960a:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800960e:	dd08      	ble.n	8009622 <__ieee754_powf+0x2ca>
 8009610:	4b82      	ldr	r3, [pc, #520]	; (800981c <__ieee754_powf+0x4c4>)
 8009612:	4298      	cmp	r0, r3
 8009614:	f340 80fd 	ble.w	8009812 <__ieee754_powf+0x4ba>
 8009618:	9b01      	ldr	r3, [sp, #4]
 800961a:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800961e:	3301      	adds	r3, #1
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	2300      	movs	r3, #0
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	9900      	ldr	r1, [sp, #0]
 8009628:	4a7d      	ldr	r2, [pc, #500]	; (8009820 <__ieee754_powf+0x4c8>)
 800962a:	4630      	mov	r0, r6
 800962c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009630:	9603      	str	r6, [sp, #12]
 8009632:	4611      	mov	r1, r2
 8009634:	9205      	str	r2, [sp, #20]
 8009636:	f7f7 fa7b 	bl	8000b30 <__aeabi_fsub>
 800963a:	9a05      	ldr	r2, [sp, #20]
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	4683      	mov	fp, r0
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	9203      	str	r2, [sp, #12]
 8009646:	9304      	str	r3, [sp, #16]
 8009648:	f7f7 fa74 	bl	8000b34 <__addsf3>
 800964c:	4601      	mov	r1, r0
 800964e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009652:	f7f7 fc2b 	bl	8000eac <__aeabi_fdiv>
 8009656:	4682      	mov	sl, r0
 8009658:	4601      	mov	r1, r0
 800965a:	4658      	mov	r0, fp
 800965c:	f7f7 fb72 	bl	8000d44 <__aeabi_fmul>
 8009660:	1076      	asrs	r6, r6, #1
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8009668:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800966c:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8009670:	f029 090f 	bic.w	r9, r9, #15
 8009674:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8009678:	4680      	mov	r8, r0
 800967a:	4631      	mov	r1, r6
 800967c:	4648      	mov	r0, r9
 800967e:	f7f7 fb61 	bl	8000d44 <__aeabi_fmul>
 8009682:	4601      	mov	r1, r0
 8009684:	4658      	mov	r0, fp
 8009686:	f7f7 fa53 	bl	8000b30 <__aeabi_fsub>
 800968a:	9a03      	ldr	r2, [sp, #12]
 800968c:	4683      	mov	fp, r0
 800968e:	4611      	mov	r1, r2
 8009690:	4630      	mov	r0, r6
 8009692:	f7f7 fa4d 	bl	8000b30 <__aeabi_fsub>
 8009696:	9b04      	ldr	r3, [sp, #16]
 8009698:	4601      	mov	r1, r0
 800969a:	4618      	mov	r0, r3
 800969c:	f7f7 fa48 	bl	8000b30 <__aeabi_fsub>
 80096a0:	4649      	mov	r1, r9
 80096a2:	f7f7 fb4f 	bl	8000d44 <__aeabi_fmul>
 80096a6:	4601      	mov	r1, r0
 80096a8:	4658      	mov	r0, fp
 80096aa:	f7f7 fa41 	bl	8000b30 <__aeabi_fsub>
 80096ae:	4651      	mov	r1, sl
 80096b0:	f7f7 fb48 	bl	8000d44 <__aeabi_fmul>
 80096b4:	4641      	mov	r1, r8
 80096b6:	4682      	mov	sl, r0
 80096b8:	4640      	mov	r0, r8
 80096ba:	f7f7 fb43 	bl	8000d44 <__aeabi_fmul>
 80096be:	4606      	mov	r6, r0
 80096c0:	4958      	ldr	r1, [pc, #352]	; (8009824 <__ieee754_powf+0x4cc>)
 80096c2:	f7f7 fb3f 	bl	8000d44 <__aeabi_fmul>
 80096c6:	4958      	ldr	r1, [pc, #352]	; (8009828 <__ieee754_powf+0x4d0>)
 80096c8:	f7f7 fa34 	bl	8000b34 <__addsf3>
 80096cc:	4631      	mov	r1, r6
 80096ce:	f7f7 fb39 	bl	8000d44 <__aeabi_fmul>
 80096d2:	4956      	ldr	r1, [pc, #344]	; (800982c <__ieee754_powf+0x4d4>)
 80096d4:	f7f7 fa2e 	bl	8000b34 <__addsf3>
 80096d8:	4631      	mov	r1, r6
 80096da:	f7f7 fb33 	bl	8000d44 <__aeabi_fmul>
 80096de:	4954      	ldr	r1, [pc, #336]	; (8009830 <__ieee754_powf+0x4d8>)
 80096e0:	f7f7 fa28 	bl	8000b34 <__addsf3>
 80096e4:	4631      	mov	r1, r6
 80096e6:	f7f7 fb2d 	bl	8000d44 <__aeabi_fmul>
 80096ea:	4952      	ldr	r1, [pc, #328]	; (8009834 <__ieee754_powf+0x4dc>)
 80096ec:	f7f7 fa22 	bl	8000b34 <__addsf3>
 80096f0:	4631      	mov	r1, r6
 80096f2:	f7f7 fb27 	bl	8000d44 <__aeabi_fmul>
 80096f6:	4950      	ldr	r1, [pc, #320]	; (8009838 <__ieee754_powf+0x4e0>)
 80096f8:	f7f7 fa1c 	bl	8000b34 <__addsf3>
 80096fc:	4631      	mov	r1, r6
 80096fe:	4683      	mov	fp, r0
 8009700:	4630      	mov	r0, r6
 8009702:	f7f7 fb1f 	bl	8000d44 <__aeabi_fmul>
 8009706:	4601      	mov	r1, r0
 8009708:	4658      	mov	r0, fp
 800970a:	f7f7 fb1b 	bl	8000d44 <__aeabi_fmul>
 800970e:	4606      	mov	r6, r0
 8009710:	4649      	mov	r1, r9
 8009712:	4640      	mov	r0, r8
 8009714:	f7f7 fa0e 	bl	8000b34 <__addsf3>
 8009718:	4651      	mov	r1, sl
 800971a:	f7f7 fb13 	bl	8000d44 <__aeabi_fmul>
 800971e:	4631      	mov	r1, r6
 8009720:	f7f7 fa08 	bl	8000b34 <__addsf3>
 8009724:	4649      	mov	r1, r9
 8009726:	4683      	mov	fp, r0
 8009728:	4648      	mov	r0, r9
 800972a:	f7f7 fb0b 	bl	8000d44 <__aeabi_fmul>
 800972e:	4943      	ldr	r1, [pc, #268]	; (800983c <__ieee754_powf+0x4e4>)
 8009730:	9003      	str	r0, [sp, #12]
 8009732:	f7f7 f9ff 	bl	8000b34 <__addsf3>
 8009736:	4659      	mov	r1, fp
 8009738:	f7f7 f9fc 	bl	8000b34 <__addsf3>
 800973c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8009740:	f026 060f 	bic.w	r6, r6, #15
 8009744:	4631      	mov	r1, r6
 8009746:	4648      	mov	r0, r9
 8009748:	f7f7 fafc 	bl	8000d44 <__aeabi_fmul>
 800974c:	493b      	ldr	r1, [pc, #236]	; (800983c <__ieee754_powf+0x4e4>)
 800974e:	4681      	mov	r9, r0
 8009750:	4630      	mov	r0, r6
 8009752:	f7f7 f9ed 	bl	8000b30 <__aeabi_fsub>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	4619      	mov	r1, r3
 800975a:	f7f7 f9e9 	bl	8000b30 <__aeabi_fsub>
 800975e:	4601      	mov	r1, r0
 8009760:	4658      	mov	r0, fp
 8009762:	f7f7 f9e5 	bl	8000b30 <__aeabi_fsub>
 8009766:	4641      	mov	r1, r8
 8009768:	f7f7 faec 	bl	8000d44 <__aeabi_fmul>
 800976c:	4631      	mov	r1, r6
 800976e:	4680      	mov	r8, r0
 8009770:	4650      	mov	r0, sl
 8009772:	f7f7 fae7 	bl	8000d44 <__aeabi_fmul>
 8009776:	4601      	mov	r1, r0
 8009778:	4640      	mov	r0, r8
 800977a:	f7f7 f9db 	bl	8000b34 <__addsf3>
 800977e:	4682      	mov	sl, r0
 8009780:	4601      	mov	r1, r0
 8009782:	4648      	mov	r0, r9
 8009784:	f7f7 f9d6 	bl	8000b34 <__addsf3>
 8009788:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800978c:	f026 060f 	bic.w	r6, r6, #15
 8009790:	4630      	mov	r0, r6
 8009792:	492b      	ldr	r1, [pc, #172]	; (8009840 <__ieee754_powf+0x4e8>)
 8009794:	f7f7 fad6 	bl	8000d44 <__aeabi_fmul>
 8009798:	4649      	mov	r1, r9
 800979a:	4680      	mov	r8, r0
 800979c:	4630      	mov	r0, r6
 800979e:	f7f7 f9c7 	bl	8000b30 <__aeabi_fsub>
 80097a2:	4601      	mov	r1, r0
 80097a4:	4650      	mov	r0, sl
 80097a6:	f7f7 f9c3 	bl	8000b30 <__aeabi_fsub>
 80097aa:	4926      	ldr	r1, [pc, #152]	; (8009844 <__ieee754_powf+0x4ec>)
 80097ac:	f7f7 faca 	bl	8000d44 <__aeabi_fmul>
 80097b0:	4925      	ldr	r1, [pc, #148]	; (8009848 <__ieee754_powf+0x4f0>)
 80097b2:	4681      	mov	r9, r0
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7f7 fac5 	bl	8000d44 <__aeabi_fmul>
 80097ba:	4601      	mov	r1, r0
 80097bc:	4648      	mov	r0, r9
 80097be:	f7f7 f9b9 	bl	8000b34 <__addsf3>
 80097c2:	4b22      	ldr	r3, [pc, #136]	; (800984c <__ieee754_powf+0x4f4>)
 80097c4:	9a00      	ldr	r2, [sp, #0]
 80097c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097ca:	f7f7 f9b3 	bl	8000b34 <__addsf3>
 80097ce:	4606      	mov	r6, r0
 80097d0:	9801      	ldr	r0, [sp, #4]
 80097d2:	f7f7 fa63 	bl	8000c9c <__aeabi_i2f>
 80097d6:	4682      	mov	sl, r0
 80097d8:	4b1d      	ldr	r3, [pc, #116]	; (8009850 <__ieee754_powf+0x4f8>)
 80097da:	9a00      	ldr	r2, [sp, #0]
 80097dc:	4631      	mov	r1, r6
 80097de:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80097e2:	4640      	mov	r0, r8
 80097e4:	f7f7 f9a6 	bl	8000b34 <__addsf3>
 80097e8:	4659      	mov	r1, fp
 80097ea:	f7f7 f9a3 	bl	8000b34 <__addsf3>
 80097ee:	4651      	mov	r1, sl
 80097f0:	f7f7 f9a0 	bl	8000b34 <__addsf3>
 80097f4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80097f8:	f029 090f 	bic.w	r9, r9, #15
 80097fc:	4651      	mov	r1, sl
 80097fe:	4648      	mov	r0, r9
 8009800:	f7f7 f996 	bl	8000b30 <__aeabi_fsub>
 8009804:	4659      	mov	r1, fp
 8009806:	f7f7 f993 	bl	8000b30 <__aeabi_fsub>
 800980a:	4641      	mov	r1, r8
 800980c:	e69b      	b.n	8009546 <__ieee754_powf+0x1ee>
 800980e:	2200      	movs	r2, #0
 8009810:	e6f3      	b.n	80095fa <__ieee754_powf+0x2a2>
 8009812:	2301      	movs	r3, #1
 8009814:	e706      	b.n	8009624 <__ieee754_powf+0x2cc>
 8009816:	bf00      	nop
 8009818:	001cc471 	.word	0x001cc471
 800981c:	005db3d6 	.word	0x005db3d6
 8009820:	0800a294 	.word	0x0800a294
 8009824:	3e53f142 	.word	0x3e53f142
 8009828:	3e6c3255 	.word	0x3e6c3255
 800982c:	3e8ba305 	.word	0x3e8ba305
 8009830:	3eaaaaab 	.word	0x3eaaaaab
 8009834:	3edb6db7 	.word	0x3edb6db7
 8009838:	3f19999a 	.word	0x3f19999a
 800983c:	40400000 	.word	0x40400000
 8009840:	3f763800 	.word	0x3f763800
 8009844:	3f76384f 	.word	0x3f76384f
 8009848:	369dc3a0 	.word	0x369dc3a0
 800984c:	0800a2a4 	.word	0x0800a2a4
 8009850:	0800a29c 	.word	0x0800a29c
 8009854:	f040 80c2 	bne.w	80099dc <__ieee754_powf+0x684>
 8009858:	4968      	ldr	r1, [pc, #416]	; (80099fc <__ieee754_powf+0x6a4>)
 800985a:	4630      	mov	r0, r6
 800985c:	f7f7 f96a 	bl	8000b34 <__addsf3>
 8009860:	4639      	mov	r1, r7
 8009862:	4681      	mov	r9, r0
 8009864:	4650      	mov	r0, sl
 8009866:	f7f7 f963 	bl	8000b30 <__aeabi_fsub>
 800986a:	4601      	mov	r1, r0
 800986c:	4648      	mov	r0, r9
 800986e:	f7f7 fc25 	bl	80010bc <__aeabi_fcmpgt>
 8009872:	2800      	cmp	r0, #0
 8009874:	f47f ae9f 	bne.w	80095b6 <__ieee754_powf+0x25e>
 8009878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800987c:	15e4      	asrs	r4, r4, #23
 800987e:	3c7e      	subs	r4, #126	; 0x7e
 8009880:	4123      	asrs	r3, r4
 8009882:	4443      	add	r3, r8
 8009884:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009888:	495d      	ldr	r1, [pc, #372]	; (8009a00 <__ieee754_powf+0x6a8>)
 800988a:	3a7f      	subs	r2, #127	; 0x7f
 800988c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8009890:	4111      	asrs	r1, r2
 8009892:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8009896:	f1c2 0217 	rsb	r2, r2, #23
 800989a:	4114      	asrs	r4, r2
 800989c:	f1b8 0f00 	cmp.w	r8, #0
 80098a0:	4638      	mov	r0, r7
 80098a2:	ea23 0101 	bic.w	r1, r3, r1
 80098a6:	bfb8      	it	lt
 80098a8:	4264      	neglt	r4, r4
 80098aa:	f7f7 f941 	bl	8000b30 <__aeabi_fsub>
 80098ae:	4681      	mov	r9, r0
 80098b0:	4631      	mov	r1, r6
 80098b2:	4648      	mov	r0, r9
 80098b4:	f7f7 f93e 	bl	8000b34 <__addsf3>
 80098b8:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 80098bc:	f027 070f 	bic.w	r7, r7, #15
 80098c0:	4638      	mov	r0, r7
 80098c2:	4950      	ldr	r1, [pc, #320]	; (8009a04 <__ieee754_powf+0x6ac>)
 80098c4:	f7f7 fa3e 	bl	8000d44 <__aeabi_fmul>
 80098c8:	4649      	mov	r1, r9
 80098ca:	4680      	mov	r8, r0
 80098cc:	4638      	mov	r0, r7
 80098ce:	f7f7 f92f 	bl	8000b30 <__aeabi_fsub>
 80098d2:	4601      	mov	r1, r0
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7f7 f92b 	bl	8000b30 <__aeabi_fsub>
 80098da:	494b      	ldr	r1, [pc, #300]	; (8009a08 <__ieee754_powf+0x6b0>)
 80098dc:	f7f7 fa32 	bl	8000d44 <__aeabi_fmul>
 80098e0:	494a      	ldr	r1, [pc, #296]	; (8009a0c <__ieee754_powf+0x6b4>)
 80098e2:	4606      	mov	r6, r0
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7f7 fa2d 	bl	8000d44 <__aeabi_fmul>
 80098ea:	4601      	mov	r1, r0
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7f7 f921 	bl	8000b34 <__addsf3>
 80098f2:	4607      	mov	r7, r0
 80098f4:	4601      	mov	r1, r0
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7f7 f91c 	bl	8000b34 <__addsf3>
 80098fc:	4641      	mov	r1, r8
 80098fe:	4606      	mov	r6, r0
 8009900:	f7f7 f916 	bl	8000b30 <__aeabi_fsub>
 8009904:	4601      	mov	r1, r0
 8009906:	4638      	mov	r0, r7
 8009908:	f7f7 f912 	bl	8000b30 <__aeabi_fsub>
 800990c:	4631      	mov	r1, r6
 800990e:	4680      	mov	r8, r0
 8009910:	4630      	mov	r0, r6
 8009912:	f7f7 fa17 	bl	8000d44 <__aeabi_fmul>
 8009916:	4607      	mov	r7, r0
 8009918:	493d      	ldr	r1, [pc, #244]	; (8009a10 <__ieee754_powf+0x6b8>)
 800991a:	f7f7 fa13 	bl	8000d44 <__aeabi_fmul>
 800991e:	493d      	ldr	r1, [pc, #244]	; (8009a14 <__ieee754_powf+0x6bc>)
 8009920:	f7f7 f906 	bl	8000b30 <__aeabi_fsub>
 8009924:	4639      	mov	r1, r7
 8009926:	f7f7 fa0d 	bl	8000d44 <__aeabi_fmul>
 800992a:	493b      	ldr	r1, [pc, #236]	; (8009a18 <__ieee754_powf+0x6c0>)
 800992c:	f7f7 f902 	bl	8000b34 <__addsf3>
 8009930:	4639      	mov	r1, r7
 8009932:	f7f7 fa07 	bl	8000d44 <__aeabi_fmul>
 8009936:	4939      	ldr	r1, [pc, #228]	; (8009a1c <__ieee754_powf+0x6c4>)
 8009938:	f7f7 f8fa 	bl	8000b30 <__aeabi_fsub>
 800993c:	4639      	mov	r1, r7
 800993e:	f7f7 fa01 	bl	8000d44 <__aeabi_fmul>
 8009942:	4937      	ldr	r1, [pc, #220]	; (8009a20 <__ieee754_powf+0x6c8>)
 8009944:	f7f7 f8f6 	bl	8000b34 <__addsf3>
 8009948:	4639      	mov	r1, r7
 800994a:	f7f7 f9fb 	bl	8000d44 <__aeabi_fmul>
 800994e:	4601      	mov	r1, r0
 8009950:	4630      	mov	r0, r6
 8009952:	f7f7 f8ed 	bl	8000b30 <__aeabi_fsub>
 8009956:	4607      	mov	r7, r0
 8009958:	4601      	mov	r1, r0
 800995a:	4630      	mov	r0, r6
 800995c:	f7f7 f9f2 	bl	8000d44 <__aeabi_fmul>
 8009960:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009964:	4681      	mov	r9, r0
 8009966:	4638      	mov	r0, r7
 8009968:	f7f7 f8e2 	bl	8000b30 <__aeabi_fsub>
 800996c:	4601      	mov	r1, r0
 800996e:	4648      	mov	r0, r9
 8009970:	f7f7 fa9c 	bl	8000eac <__aeabi_fdiv>
 8009974:	4641      	mov	r1, r8
 8009976:	4607      	mov	r7, r0
 8009978:	4630      	mov	r0, r6
 800997a:	f7f7 f9e3 	bl	8000d44 <__aeabi_fmul>
 800997e:	4641      	mov	r1, r8
 8009980:	f7f7 f8d8 	bl	8000b34 <__addsf3>
 8009984:	4601      	mov	r1, r0
 8009986:	4638      	mov	r0, r7
 8009988:	f7f7 f8d2 	bl	8000b30 <__aeabi_fsub>
 800998c:	4631      	mov	r1, r6
 800998e:	f7f7 f8cf 	bl	8000b30 <__aeabi_fsub>
 8009992:	4601      	mov	r1, r0
 8009994:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009998:	f7f7 f8ca 	bl	8000b30 <__aeabi_fsub>
 800999c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80099a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099a4:	da20      	bge.n	80099e8 <__ieee754_powf+0x690>
 80099a6:	4621      	mov	r1, r4
 80099a8:	f000 f8b8 	bl	8009b1c <scalbnf>
 80099ac:	4629      	mov	r1, r5
 80099ae:	e53d      	b.n	800942c <__ieee754_powf+0xd4>
 80099b0:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <__ieee754_powf+0x6cc>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	dd07      	ble.n	80099c6 <__ieee754_powf+0x66e>
 80099b6:	2100      	movs	r1, #0
 80099b8:	4628      	mov	r0, r5
 80099ba:	f7f7 fb61 	bl	8001080 <__aeabi_fcmplt>
 80099be:	3800      	subs	r0, #0
 80099c0:	bf18      	it	ne
 80099c2:	2001      	movne	r0, #1
 80099c4:	e580      	b.n	80094c8 <__ieee754_powf+0x170>
 80099c6:	d109      	bne.n	80099dc <__ieee754_powf+0x684>
 80099c8:	4639      	mov	r1, r7
 80099ca:	f7f7 f8b1 	bl	8000b30 <__aeabi_fsub>
 80099ce:	4631      	mov	r1, r6
 80099d0:	f7f7 fb6a 	bl	80010a8 <__aeabi_fcmpge>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	f43f af4f 	beq.w	8009878 <__ieee754_powf+0x520>
 80099da:	e7ec      	b.n	80099b6 <__ieee754_powf+0x65e>
 80099dc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80099e0:	f73f af4a 	bgt.w	8009878 <__ieee754_powf+0x520>
 80099e4:	2400      	movs	r4, #0
 80099e6:	e763      	b.n	80098b0 <__ieee754_powf+0x558>
 80099e8:	4618      	mov	r0, r3
 80099ea:	e7df      	b.n	80099ac <__ieee754_powf+0x654>
 80099ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80099f0:	e50b      	b.n	800940a <__ieee754_powf+0xb2>
 80099f2:	2100      	movs	r1, #0
 80099f4:	e509      	b.n	800940a <__ieee754_powf+0xb2>
 80099f6:	2500      	movs	r5, #0
 80099f8:	e4ef      	b.n	80093da <__ieee754_powf+0x82>
 80099fa:	bf00      	nop
 80099fc:	3338aa3c 	.word	0x3338aa3c
 8009a00:	007fffff 	.word	0x007fffff
 8009a04:	3f317200 	.word	0x3f317200
 8009a08:	3f317218 	.word	0x3f317218
 8009a0c:	35bfbe8c 	.word	0x35bfbe8c
 8009a10:	3331bb4c 	.word	0x3331bb4c
 8009a14:	35ddea0e 	.word	0x35ddea0e
 8009a18:	388ab355 	.word	0x388ab355
 8009a1c:	3b360b61 	.word	0x3b360b61
 8009a20:	3e2aaaab 	.word	0x3e2aaaab
 8009a24:	43160000 	.word	0x43160000

08009a28 <__ieee754_sqrtf>:
 8009a28:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009a2c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	4603      	mov	r3, r0
 8009a34:	4604      	mov	r4, r0
 8009a36:	d309      	bcc.n	8009a4c <__ieee754_sqrtf+0x24>
 8009a38:	4601      	mov	r1, r0
 8009a3a:	f7f7 f983 	bl	8000d44 <__aeabi_fmul>
 8009a3e:	4601      	mov	r1, r0
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7f7 f877 	bl	8000b34 <__addsf3>
 8009a46:	4604      	mov	r4, r0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	d0fb      	beq.n	8009a48 <__ieee754_sqrtf+0x20>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	da06      	bge.n	8009a62 <__ieee754_sqrtf+0x3a>
 8009a54:	4601      	mov	r1, r0
 8009a56:	f7f7 f86b 	bl	8000b30 <__aeabi_fsub>
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	f7f7 fa26 	bl	8000eac <__aeabi_fdiv>
 8009a60:	e7f1      	b.n	8009a46 <__ieee754_sqrtf+0x1e>
 8009a62:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8009a66:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009a6a:	d029      	beq.n	8009ac0 <__ieee754_sqrtf+0x98>
 8009a6c:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8009a70:	07cb      	lsls	r3, r1, #31
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8009a7a:	f04f 0419 	mov.w	r4, #25
 8009a7e:	461e      	mov	r6, r3
 8009a80:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009a84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009a88:	bf58      	it	pl
 8009a8a:	0052      	lslpl	r2, r2, #1
 8009a8c:	1040      	asrs	r0, r0, #1
 8009a8e:	0052      	lsls	r2, r2, #1
 8009a90:	1875      	adds	r5, r6, r1
 8009a92:	4295      	cmp	r5, r2
 8009a94:	bfde      	ittt	le
 8009a96:	186e      	addle	r6, r5, r1
 8009a98:	1b52      	suble	r2, r2, r5
 8009a9a:	185b      	addle	r3, r3, r1
 8009a9c:	3c01      	subs	r4, #1
 8009a9e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009aa2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009aa6:	d1f3      	bne.n	8009a90 <__ieee754_sqrtf+0x68>
 8009aa8:	b112      	cbz	r2, 8009ab0 <__ieee754_sqrtf+0x88>
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	105c      	asrs	r4, r3, #1
 8009ab2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8009ab6:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8009aba:	e7c5      	b.n	8009a48 <__ieee754_sqrtf+0x20>
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	3201      	adds	r2, #1
 8009ac0:	0218      	lsls	r0, r3, #8
 8009ac2:	d5fb      	bpl.n	8009abc <__ieee754_sqrtf+0x94>
 8009ac4:	3a01      	subs	r2, #1
 8009ac6:	1a89      	subs	r1, r1, r2
 8009ac8:	e7d0      	b.n	8009a6c <__ieee754_sqrtf+0x44>

08009aca <with_errnof>:
 8009aca:	b538      	push	{r3, r4, r5, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	f7fc fe2a 	bl	8006728 <__errno>
 8009ad4:	6005      	str	r5, [r0, #0]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	bd38      	pop	{r3, r4, r5, pc}

08009ada <xflowf>:
 8009ada:	b508      	push	{r3, lr}
 8009adc:	b140      	cbz	r0, 8009af0 <xflowf+0x16>
 8009ade:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8009ae2:	f7f7 f92f 	bl	8000d44 <__aeabi_fmul>
 8009ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009aea:	2122      	movs	r1, #34	; 0x22
 8009aec:	f7ff bfed 	b.w	8009aca <with_errnof>
 8009af0:	4608      	mov	r0, r1
 8009af2:	e7f6      	b.n	8009ae2 <xflowf+0x8>

08009af4 <__math_uflowf>:
 8009af4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8009af8:	f7ff bfef 	b.w	8009ada <xflowf>

08009afc <__math_oflowf>:
 8009afc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8009b00:	f7ff bfeb 	b.w	8009ada <xflowf>

08009b04 <fabsf>:
 8009b04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b08:	4770      	bx	lr

08009b0a <finitef>:
 8009b0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009b0e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009b12:	bfac      	ite	ge
 8009b14:	2000      	movge	r0, #0
 8009b16:	2001      	movlt	r0, #1
 8009b18:	4770      	bx	lr
	...

08009b1c <scalbnf>:
 8009b1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4603      	mov	r3, r0
 8009b24:	460d      	mov	r5, r1
 8009b26:	4604      	mov	r4, r0
 8009b28:	d02a      	beq.n	8009b80 <scalbnf+0x64>
 8009b2a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009b2e:	d304      	bcc.n	8009b3a <scalbnf+0x1e>
 8009b30:	4601      	mov	r1, r0
 8009b32:	f7f6 ffff 	bl	8000b34 <__addsf3>
 8009b36:	4603      	mov	r3, r0
 8009b38:	e022      	b.n	8009b80 <scalbnf+0x64>
 8009b3a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009b3e:	d117      	bne.n	8009b70 <scalbnf+0x54>
 8009b40:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009b44:	f7f7 f8fe 	bl	8000d44 <__aeabi_fmul>
 8009b48:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <scalbnf+0x8c>)
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4295      	cmp	r5, r2
 8009b4e:	db0b      	blt.n	8009b68 <scalbnf+0x4c>
 8009b50:	4604      	mov	r4, r0
 8009b52:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009b56:	3a19      	subs	r2, #25
 8009b58:	442a      	add	r2, r5
 8009b5a:	2afe      	cmp	r2, #254	; 0xfe
 8009b5c:	dd0a      	ble.n	8009b74 <scalbnf+0x58>
 8009b5e:	4913      	ldr	r1, [pc, #76]	; (8009bac <scalbnf+0x90>)
 8009b60:	4618      	mov	r0, r3
 8009b62:	f361 001e 	bfi	r0, r1, #0, #31
 8009b66:	e000      	b.n	8009b6a <scalbnf+0x4e>
 8009b68:	4911      	ldr	r1, [pc, #68]	; (8009bb0 <scalbnf+0x94>)
 8009b6a:	f7f7 f8eb 	bl	8000d44 <__aeabi_fmul>
 8009b6e:	e7e2      	b.n	8009b36 <scalbnf+0x1a>
 8009b70:	0dd2      	lsrs	r2, r2, #23
 8009b72:	e7f1      	b.n	8009b58 <scalbnf+0x3c>
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	dd05      	ble.n	8009b84 <scalbnf+0x68>
 8009b78:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8009b7c:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8009b80:	4618      	mov	r0, r3
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	f112 0f16 	cmn.w	r2, #22
 8009b88:	da05      	bge.n	8009b96 <scalbnf+0x7a>
 8009b8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009b8e:	4295      	cmp	r5, r2
 8009b90:	dce5      	bgt.n	8009b5e <scalbnf+0x42>
 8009b92:	4907      	ldr	r1, [pc, #28]	; (8009bb0 <scalbnf+0x94>)
 8009b94:	e7e4      	b.n	8009b60 <scalbnf+0x44>
 8009b96:	3219      	adds	r2, #25
 8009b98:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009b9c:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009ba0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8009ba4:	e7e1      	b.n	8009b6a <scalbnf+0x4e>
 8009ba6:	bf00      	nop
 8009ba8:	ffff3cb0 	.word	0xffff3cb0
 8009bac:	7149f2ca 	.word	0x7149f2ca
 8009bb0:	0da24260 	.word	0x0da24260

08009bb4 <_init>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	bf00      	nop
 8009bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bba:	bc08      	pop	{r3}
 8009bbc:	469e      	mov	lr, r3
 8009bbe:	4770      	bx	lr

08009bc0 <_fini>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr
