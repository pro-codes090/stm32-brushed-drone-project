
drone_swarn_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006d28  08006d28  00016d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800711c  0800711c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800711c  0800711c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800711c  0800711c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800711c  0800711c  0001711c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001d4  080072f8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080072f8  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f26  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d7  00000000  00000000  00031166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00033540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de3  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019763  00000000  00000000  000354b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013da1  00000000  00000000  0004ec16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091435  00000000  00000000  000629b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b60  00000000  00000000  000f3dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f994c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d0c 	.word	0x08006d0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006d0c 	.word	0x08006d0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fe05 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f85b 	bl	8000b4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Init();
 8000a96:	f000 fe01 	bl	800169c <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9a:	f000 fa93 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a9e:	f000 f897 	bl	8000bd0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000aa2:	f000 fa65 	bl	8000f70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000aa6:	f000 f8f9 	bl	8000c9c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aaa:	f000 f9f9 	bl	8000ea0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000aae:	f000 f9a1 	bl	8000df4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ab2:	f000 f8bd 	bl	8000c30 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rcv_channel();
 8000ab6:	f000 fae7 	bl	8001088 <rcv_channel>
	  check_if_under_range() ;
 8000aba:	f000 fadf 	bl	800107c <check_if_under_range>

	recived_channels.Roll    = buff[1] << 8 | buff[0] ;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <main+0xb8>)
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <main+0xb8>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <main+0xbc>)
 8000ad2:	801a      	strh	r2, [r3, #0]
	recived_channels.Pitch   = buff[3] << 8 | buff[2] ;
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0xb8>)
 8000ad6:	78db      	ldrb	r3, [r3, #3]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <main+0xb8>)
 8000ade:	789b      	ldrb	r3, [r3, #2]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <main+0xbc>)
 8000ae8:	805a      	strh	r2, [r3, #2]
	recived_channels.Throtle = buff[5] << 8 | buff[4] ;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <main+0xb8>)
 8000aec:	795b      	ldrb	r3, [r3, #5]
 8000aee:	021b      	lsls	r3, r3, #8
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <main+0xb8>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <main+0xbc>)
 8000b00:	809a      	strh	r2, [r3, #4]
	recived_channels.Yaw     = buff[7] << 8 | buff[6] ;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <main+0xb8>)
 8000b04:	79db      	ldrb	r3, [r3, #7]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <main+0xb8>)
 8000b0c:	799b      	ldrb	r3, [r3, #6]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <main+0xbc>)
 8000b16:	80da      	strh	r2, [r3, #6]

	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <main+0xbc>)
 8000b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <main+0xbc>)
 8000b22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b26:	461a      	mov	r2, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <main+0xbc>)
 8000b2a:	889b      	ldrh	r3, [r3, #4]
	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000b2c:	4618      	mov	r0, r3
																		  recived_channels.Throtle ,recived_channels.Yaw) ;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <main+0xbc>)
 8000b30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	printf("data1 : %hi  ,data2 : %hi  ,data3 : %hi   ,data4 : %hi  \n" , recived_channels.Roll , recived_channels.Pitch,
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	4603      	mov	r3, r0
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <main+0xc0>)
 8000b3a:	f004 f951 	bl	8004de0 <iprintf>
	  rcv_channel();
 8000b3e:	e7ba      	b.n	8000ab6 <main+0x2e>
 8000b40:	200003c8 	.word	0x200003c8
 8000b44:	200003d8 	.word	0x200003d8
 8000b48:	08006d28 	.word	0x08006d28

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fa2a 	bl	8004fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b76:	2310      	movs	r3, #16
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b82:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f9d5 	bl	8001f3c <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b98:	f000 fabc 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fc42 	bl	8002440 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bc2:	f000 faa7 	bl	8001114 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3740      	adds	r7, #64	; 0x40
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <MX_I2C1_Init+0x58>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <MX_I2C1_Init+0x5c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_I2C1_Init+0x54>)
 8000c10:	f001 f850 	bl	8001cb4 <HAL_I2C_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c1a:	f000 fa7b 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001f0 	.word	0x200001f0
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	00061a80 	.word	0x00061a80

08000c30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <MX_SPI1_Init+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c64:	2210      	movs	r2, #16
 8000c66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_SPI1_Init+0x64>)
 8000c82:	f001 fd6b 	bl	800275c <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c8c:	f000 fa42 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000244 	.word	0x20000244
 8000c98:	40013000 	.word	0x40013000

08000c9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b092      	sub	sp, #72	; 0x48
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 f974 	bl	8004fb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cce:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <MX_TIM1_Init+0x154>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8000cd2:	4b46      	ldr	r3, [pc, #280]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cd4:	2264      	movs	r2, #100	; 0x64
 8000cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b44      	ldr	r3, [pc, #272]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400;
 8000cde:	4b43      	ldr	r3, [pc, #268]	; (8000dec <MX_TIM1_Init+0x150>)
 8000ce0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b41      	ldr	r3, [pc, #260]	; (8000dec <MX_TIM1_Init+0x150>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cec:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf8:	483c      	ldr	r0, [pc, #240]	; (8000dec <MX_TIM1_Init+0x150>)
 8000cfa:	f002 fb12 	bl	8003322 <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000d04:	f000 fa06 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d14:	4619      	mov	r1, r3
 8000d16:	4835      	ldr	r0, [pc, #212]	; (8000dec <MX_TIM1_Init+0x150>)
 8000d18:	f002 ff86 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000d22:	f000 f9f7 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	; 0x60
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4828      	ldr	r0, [pc, #160]	; (8000dec <MX_TIM1_Init+0x150>)
 8000d4c:	f002 fc9c 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000d56:	f000 f9dd 	bl	8001114 <Error_Handler>
  }
  sConfigOC.Pulse = 6400;
 8000d5a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2204      	movs	r2, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4820      	ldr	r0, [pc, #128]	; (8000dec <MX_TIM1_Init+0x150>)
 8000d6a:	f002 fc8d 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d74:	f000 f9ce 	bl	8001114 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	2208      	movs	r2, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	4819      	ldr	r0, [pc, #100]	; (8000dec <MX_TIM1_Init+0x150>)
 8000d86:	f002 fc7f 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d90:	f000 f9c0 	bl	8001114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	220c      	movs	r2, #12
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4813      	ldr	r0, [pc, #76]	; (8000dec <MX_TIM1_Init+0x150>)
 8000d9e:	f002 fc73 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000da8:	f000 f9b4 	bl	8001114 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_TIM1_Init+0x150>)
 8000dd0:	f002 ff88 	bl	8003ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000dda:	f000 f99b 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dde:	4803      	ldr	r0, [pc, #12]	; (8000dec <MX_TIM1_Init+0x150>)
 8000de0:	f000 fa9e 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000de4:	bf00      	nop
 8000de6:	3748      	adds	r7, #72	; 0x48
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	2000029c 	.word	0x2000029c
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e2e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e40:	4816      	ldr	r0, [pc, #88]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e42:	f002 fa1f 	bl	8003284 <HAL_TIM_OC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e4c:	f000 f962 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e60:	f002 fee2 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e6a:	f000 f953 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM2_Init+0xa8>)
 8000e86:	f002 fba3 	bl	80035d0 <HAL_TIM_OC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e90:	f000 f940 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200002e4 	.word	0x200002e4

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <MX_TIM3_Init+0xcc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ece:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000ed8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000edc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eea:	481f      	ldr	r0, [pc, #124]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000eec:	f002 fa19 	bl	8003322 <HAL_TIM_PWM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ef6:	f000 f90d 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4619      	mov	r1, r3
 8000f08:	4817      	ldr	r0, [pc, #92]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000f0a:	f002 fe8d 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f14:	f000 f8fe 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f18:	2360      	movs	r3, #96	; 0x60
 8000f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 16000;
 8000f1c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000f32:	f002 fba9 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000f3c:	f000 f8ea 	bl	8001114 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	220c      	movs	r2, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000f4c:	f002 fb9c 	bl	8003688 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000f56:	f000 f8dd 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM3_Init+0xc8>)
 8000f5c:	f000 f9e0 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000032c 	.word	0x2000032c
 8000f6c:	40000400 	.word	0x40000400

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f002 feff 	bl	8003daa <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8af 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000374 	.word	0x20000374
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_GPIO_Init+0xac>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0xac>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0xac>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_GPIO_Init+0xac>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_GPIO_Init+0xac>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_GPIO_Init+0xac>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <MX_GPIO_Init+0xb0>)
 800100e:	f000 fe39 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <MX_GPIO_Init+0xb4>)
 800101a:	f000 fe33 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800101e:	2310      	movs	r3, #16
 8001020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4619      	mov	r1, r3
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <MX_GPIO_Init+0xb0>)
 8001036:	f000 fca1 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800103a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4619      	mov	r1, r3
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001054:	f000 fc92 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001064:	f000 fc8a 	bl	800197c <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00

0800107c <check_if_under_range>:
// keep receiving data
// look for a special value of 32 bits
// send the ack back to the transmitter
// show the indication
}
void check_if_under_range() {
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <rcv_channel>:
	}
	printf("init success \n");

}

void rcv_channel(){
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0

	  ret = lora_prasePacket(&lora);
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <rcv_channel+0x48>)
 8001090:	f003 f8f8 	bl	8004284 <lora_prasePacket>
 8001094:	4603      	mov	r3, r0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <rcv_channel+0x4c>)
 800109a:	701a      	strb	r2, [r3, #0]
	  if(ret){
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <rcv_channel+0x4c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <rcv_channel+0x3e>
		uint8_t i=0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 80010a8:	e00a      	b.n	80010c0 <rcv_channel+0x38>
		buff[i] = lora_read(&lora);
 80010aa:	79fc      	ldrb	r4, [r7, #7]
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <rcv_channel+0x48>)
 80010ae:	f003 f959 	bl	8004364 <lora_read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <rcv_channel+0x50>)
 80010b8:	551a      	strb	r2, [r3, r4]
		i++;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	3301      	adds	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
		while( i <  sizeof(recived_channels)){
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d9f1      	bls.n	80010aa <rcv_channel+0x22>
	     }
	  }

}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003bc 	.word	0x200003bc
 80010d4:	200003c4 	.word	0x200003c4
 80010d8:	200003c8 	.word	0x200003c8

080010dc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

// for pid calculations
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <__io_putchar>:

void __io_putchar(int ch) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
//	ITM_SendChar(ch) ;
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80010f8:	1d39      	adds	r1, r7, #4
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	2201      	movs	r2, #1
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <__io_putchar+0x20>)
 8001102:	f002 fea2 	bl	8003e4a <HAL_UART_Transmit>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000374 	.word	0x20000374

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_MspInit+0x40>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_MspInit+0x40>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_MspInit+0x40>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_MspInit+0x40>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_MspInit+0x40>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_MspInit+0x40>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_I2C_MspInit+0x70>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d123      	bne.n	80011cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2312      	movs	r3, #18
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <HAL_I2C_MspInit+0x78>)
 80011b0:	f000 fbe4 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 80011ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011be:	61d3      	str	r3, [r2, #28]
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_I2C_MspInit+0x74>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_SPI_MspInit+0x88>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d12f      	bne.n	8001260 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a19      	ldr	r2, [pc, #100]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_SPI_MspInit+0x8c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_SPI_MspInit+0x8c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_SPI_MspInit+0x8c>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_SPI_MspInit+0x90>)
 8001244:	f000 fb9a 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_SPI_MspInit+0x90>)
 800125c:	f000 fb8e 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013000 	.word	0x40013000
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800

08001274 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_TIM_PWM_MspInit+0x58>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d10c      	bne.n	80012a0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 800128c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001290:	6193      	str	r3, [r2, #24]
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800129e:	e010      	b.n	80012c2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_TIM_PWM_MspInit+0x60>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10b      	bne.n	80012c2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_TIM_PWM_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40000400 	.word	0x40000400

080012d8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d113      	bne.n	8001312 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_TIM_OC_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_OC_MspInit+0x44>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_TIM_OC_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	201c      	movs	r0, #28
 8001308:	f000 fb01 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800130c:	201c      	movs	r0, #28
 800130e:	f000 fb1a 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <HAL_TIM_MspPostInit+0x98>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d119      	bne.n	8001374 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001358:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800135c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <HAL_TIM_MspPostInit+0xa0>)
 800136e:	f000 fb05 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001372:	e01c      	b.n	80013ae <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <HAL_TIM_MspPostInit+0xa4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d117      	bne.n	80013ae <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_TIM_MspPostInit+0x9c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001396:	2303      	movs	r3, #3
 8001398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <HAL_TIM_MspPostInit+0xa8>)
 80013aa:	f000 fae7 	bl	800197c <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40012c00 	.word	0x40012c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40010c00 	.word	0x40010c00

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <HAL_UART_MspInit+0x88>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d12f      	bne.n	800144c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_UART_MspInit+0x8c>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_UART_MspInit+0x8c>)
 80013f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_UART_MspInit+0x8c>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_UART_MspInit+0x8c>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_UART_MspInit+0x8c>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0x8c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800141c:	2304      	movs	r3, #4
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_UART_MspInit+0x90>)
 8001430:	f000 faa4 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001434:	2308      	movs	r3, #8
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_UART_MspInit+0x90>)
 8001448:	f000 fa98 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40004400 	.word	0x40004400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010800 	.word	0x40010800

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f93f 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM2_IRQHandler+0x10>)
 80014b6:	f001 ff83 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200002e4 	.word	0x200002e4

080014c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return 1;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <_kill>:

int _kill(int pid, int sig)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014dc:	f003 fdbc 	bl	8005058 <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2216      	movs	r2, #22
 80014e4:	601a      	str	r2, [r3, #0]
  return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_exit>:

void _exit (int status)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014fa:	f04f 31ff 	mov.w	r1, #4294967295
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffe7 	bl	80014d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001504:	e7fe      	b.n	8001504 <_exit+0x12>

08001506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e00a      	b.n	800152e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001518:	f3af 8000 	nop.w
 800151c:	4601      	mov	r1, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	b2ca      	uxtb	r2, r1
 8001526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbf0      	blt.n	8001518 <_read+0x12>
  }

  return len;
 8001536:	687b      	ldr	r3, [r7, #4]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e009      	b.n	8001566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fdc8 	bl	80010f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf1      	blt.n	8001552 <_write+0x12>
  }
  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_close>:

int _close(int file)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159e:	605a      	str	r2, [r3, #4]
  return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <_isatty>:

int _isatty(int file)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f003 fd26 	bl	8005058 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20005000 	.word	0x20005000
 8001638:	00000400 	.word	0x00000400
 800163c:	200003e0 	.word	0x200003e0
 8001640:	20000538 	.word	0x20000538

08001644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff fff8 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001656:	490c      	ldr	r1, [pc, #48]	; (8001688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <LoopFillZerobss+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800166c:	4c09      	ldr	r4, [pc, #36]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f003 fcf3 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7ff fa03 	bl	8000a88 <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800168c:	08007124 	.word	0x08007124
  ldr r2, =_sbss
 8001690:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001694:	20000538 	.word	0x20000538

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f923 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fd32 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f93b 	bl	8001962 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f903 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000008 	.word	0x20000008
 8001748:	200003e4 	.word	0x200003e4

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	200003e4 	.word	0x200003e4

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	e169      	b.n	8001c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001990:	2201      	movs	r2, #1
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8158 	bne.w	8001c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a9a      	ldr	r2, [pc, #616]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d05e      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019b8:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <HAL_GPIO_Init+0x2a0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d875      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019be:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d058      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019c4:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_GPIO_Init+0x2a4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d86f      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ca:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d052      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019d0:	4a94      	ldr	r2, [pc, #592]	; (8001c24 <HAL_GPIO_Init+0x2a8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d869      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019d6:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d04c      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019dc:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_GPIO_Init+0x2ac>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d863      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019e2:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d046      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
 80019e8:	4a90      	ldr	r2, [pc, #576]	; (8001c2c <HAL_GPIO_Init+0x2b0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d85d      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d82a      	bhi.n	8001a48 <HAL_GPIO_Init+0xcc>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d859      	bhi.n	8001aaa <HAL_GPIO_Init+0x12e>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_GPIO_Init+0x80>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a51 	.word	0x08001a51
 8001a04:	08001a63 	.word	0x08001a63
 8001a08:	08001aa5 	.word	0x08001aa5
 8001a0c:	08001aab 	.word	0x08001aab
 8001a10:	08001aab 	.word	0x08001aab
 8001a14:	08001aab 	.word	0x08001aab
 8001a18:	08001aab 	.word	0x08001aab
 8001a1c:	08001aab 	.word	0x08001aab
 8001a20:	08001aab 	.word	0x08001aab
 8001a24:	08001aab 	.word	0x08001aab
 8001a28:	08001aab 	.word	0x08001aab
 8001a2c:	08001aab 	.word	0x08001aab
 8001a30:	08001aab 	.word	0x08001aab
 8001a34:	08001aab 	.word	0x08001aab
 8001a38:	08001aab 	.word	0x08001aab
 8001a3c:	08001aab 	.word	0x08001aab
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <HAL_GPIO_Init+0x2b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4e:	e02c      	b.n	8001aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e029      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e024      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	3308      	adds	r3, #8
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e01f      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	330c      	adds	r3, #12
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e01a      	b.n	8001aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e013      	b.n	8001aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	611a      	str	r2, [r3, #16]
          break;
 8001a96:	e009      	b.n	8001aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	615a      	str	r2, [r3, #20]
          break;
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x130>
          break;
 8001aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d801      	bhi.n	8001ab6 <HAL_GPIO_Init+0x13a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_Init+0x13e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2bff      	cmp	r3, #255	; 0xff
 8001ac0:	d802      	bhi.n	8001ac8 <HAL_GPIO_Init+0x14c>
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x152>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3b08      	subs	r3, #8
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80b1 	beq.w	8001c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001afc:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a4c      	ldr	r2, [pc, #304]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_GPIO_Init+0x2b8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_GPIO_Init+0x2bc>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <HAL_GPIO_Init+0x2c0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d013      	beq.n	8001b68 <HAL_GPIO_Init+0x1ec>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_GPIO_Init+0x2c4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00d      	beq.n	8001b64 <HAL_GPIO_Init+0x1e8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <HAL_GPIO_Init+0x2c8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_GPIO_Init+0x2cc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_GPIO_Init+0x1e0>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_Init+0x1ee>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7a:	492f      	ldr	r1, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x2bc>)
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	492c      	ldr	r1, [pc, #176]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4928      	ldr	r1, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bbc:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4922      	ldr	r1, [pc, #136]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	491e      	ldr	r1, [pc, #120]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4918      	ldr	r1, [pc, #96]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4914      	ldr	r1, [pc, #80]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d021      	beq.n	8001c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e021      	b.n	8001c5e <HAL_GPIO_Init+0x2e2>
 8001c1a:	bf00      	nop
 8001c1c:	10320000 	.word	0x10320000
 8001c20:	10310000 	.word	0x10310000
 8001c24:	10220000 	.word	0x10220000
 8001c28:	10210000 	.word	0x10210000
 8001c2c:	10120000 	.word	0x10120000
 8001c30:	10110000 	.word	0x10110000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	40011000 	.word	0x40011000
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4909      	ldr	r1, [pc, #36]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f47f ae8e 	bne.w	8001990 <HAL_GPIO_Init+0x14>
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	372c      	adds	r7, #44	; 0x2c
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c94:	787b      	ldrb	r3, [r7, #1]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	041a      	lsls	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e12b      	b.n	8001f1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fa42 	bl	8001164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2224      	movs	r2, #36	; 0x24
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0201 	bic.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d18:	f000 fcda 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4a81      	ldr	r2, [pc, #516]	; (8001f28 <HAL_I2C_Init+0x274>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d807      	bhi.n	8001d38 <HAL_I2C_Init+0x84>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a80      	ldr	r2, [pc, #512]	; (8001f2c <HAL_I2C_Init+0x278>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	e006      	b.n	8001d46 <HAL_I2C_Init+0x92>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4a7d      	ldr	r2, [pc, #500]	; (8001f30 <HAL_I2C_Init+0x27c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	bf94      	ite	ls
 8001d40:	2301      	movls	r3, #1
 8001d42:	2300      	movhi	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0e7      	b.n	8001f1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a78      	ldr	r2, [pc, #480]	; (8001f34 <HAL_I2C_Init+0x280>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9b      	lsrs	r3, r3, #18
 8001d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a6a      	ldr	r2, [pc, #424]	; (8001f28 <HAL_I2C_Init+0x274>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d802      	bhi.n	8001d88 <HAL_I2C_Init+0xd4>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	e009      	b.n	8001d9c <HAL_I2C_Init+0xe8>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_I2C_Init+0x284>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	495c      	ldr	r1, [pc, #368]	; (8001f28 <HAL_I2C_Init+0x274>)
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d819      	bhi.n	8001df0 <HAL_I2C_Init+0x13c>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e59      	subs	r1, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dca:	1c59      	adds	r1, r3, #1
 8001dcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dd0:	400b      	ands	r3, r1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_I2C_Init+0x138>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1e59      	subs	r1, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de4:	3301      	adds	r3, #1
 8001de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dea:	e051      	b.n	8001e90 <HAL_I2C_Init+0x1dc>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e04f      	b.n	8001e90 <HAL_I2C_Init+0x1dc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d111      	bne.n	8001e1c <HAL_I2C_Init+0x168>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	440b      	add	r3, r1
 8001e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e012      	b.n	8001e42 <HAL_I2C_Init+0x18e>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e58      	subs	r0, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	0099      	lsls	r1, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Init+0x196>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e022      	b.n	8001e90 <HAL_I2C_Init+0x1dc>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10e      	bne.n	8001e70 <HAL_I2C_Init+0x1bc>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1e58      	subs	r0, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	440b      	add	r3, r1
 8001e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6e:	e00f      	b.n	8001e90 <HAL_I2C_Init+0x1dc>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	0099      	lsls	r1, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	6809      	ldr	r1, [r1, #0]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6911      	ldr	r1, [r2, #16]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68d2      	ldr	r2, [r2, #12]
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	000186a0 	.word	0x000186a0
 8001f2c:	001e847f 	.word	0x001e847f
 8001f30:	003d08ff 	.word	0x003d08ff
 8001f34:	431bde83 	.word	0x431bde83
 8001f38:	10624dd3 	.word	0x10624dd3

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e272      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f68:	4b8f      	ldr	r3, [pc, #572]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x12c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e24c      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x76>
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a7f      	ldr	r2, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7a      	ldr	r2, [pc, #488]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b78      	ldr	r3, [pc, #480]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a77      	ldr	r2, [pc, #476]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xbc>
 8001fde:	4b72      	ldr	r3, [pc, #456]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a71      	ldr	r2, [pc, #452]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd4>
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fb98 	bl	800174c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fb94 	bl	800174c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e200      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5d      	ldr	r3, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe4>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fb84 	bl	800174c <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fb80 	bl	800174c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ec      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x10c>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c0      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4939      	ldr	r1, [pc, #228]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCC_OscConfig+0x270>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fb39 	bl	800174c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7ff fb35 	bl	800174c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4927      	ldr	r1, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x270>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fb18 	bl	800174c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002120:	f7ff fb14 	bl	800174c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e180      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03a      	beq.n	80021c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d019      	beq.n	8002186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7ff faf8 	bl	800174c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002160:	f7ff faf4 	bl	800174c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e160      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 face 	bl	8002720 <RCC_Delay>
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x274>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7ff fade 	bl	800174c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff fada 	bl	800174c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d908      	bls.n	80021b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e146      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	42420000 	.word	0x42420000
 80021b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b92      	ldr	r3, [pc, #584]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a6 	beq.w	800231a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b8b      	ldr	r3, [pc, #556]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a87      	ldr	r2, [pc, #540]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b82      	ldr	r3, [pc, #520]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7e      	ldr	r2, [pc, #504]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7ff fa9b 	bl	800174c <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7ff fa97 	bl	800174c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e103      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b75      	ldr	r3, [pc, #468]	; (8002404 <HAL_RCC_OscConfig+0x4c8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x312>
 8002240:	4b6f      	ldr	r3, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a6e      	ldr	r2, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e02d      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002256:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a69      	ldr	r2, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	e01c      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x356>
 8002278:	4b61      	ldr	r3, [pc, #388]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a60      	ldr	r2, [pc, #384]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4b5e      	ldr	r3, [pc, #376]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e00b      	b.n	80022aa <HAL_RCC_OscConfig+0x36e>
 8002292:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0304 	bic.w	r3, r3, #4
 80022a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d015      	beq.n	80022de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fa4b 	bl	800174c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7ff fa47 	bl	800174c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ee      	beq.n	80022ba <HAL_RCC_OscConfig+0x37e>
 80022dc:	e014      	b.n	8002308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7ff fa35 	bl	800174c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff fa31 	bl	800174c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e09b      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ee      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	d061      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d146      	bne.n	80023c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fa05 	bl	800174c <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff fa01 	bl	800174c <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e06d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4921      	ldr	r1, [pc, #132]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a19      	ldr	r1, [r3, #32]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	430b      	orrs	r3, r1
 8002392:	491b      	ldr	r1, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff f9d5 	bl	800174c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff f9d1 	bl	800174c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e03d      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46a>
 80023c4:	e035      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff f9be 	bl	800174c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7ff f9ba 	bl	800174c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e026      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x498>
 80023f2:	e01e      	b.n	8002432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e019      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x500>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d0      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d910      	bls.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4965      	ldr	r1, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d040      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e073      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4936      	ldr	r1, [pc, #216]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7ff f90c 	bl	800174c <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7ff f908 	bl	800174c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e053      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d210      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1cc>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f86a 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	08006d84 	.word	0x08006d84
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x30>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x36>
 8002642:	e027      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	e027      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d010      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002676:	fb03 f202 	mul.w	r2, r3, r2
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e004      	b.n	800268e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	613b      	str	r3, [r7, #16]
      break;
 8002692:	e002      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002696:	613b      	str	r3, [r7, #16]
      break;
 8002698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269a:	693b      	ldr	r3, [r7, #16]
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	007a1200 	.word	0x007a1200
 80026b0:	08006d9c 	.word	0x08006d9c
 80026b4:	08006dac 	.word	0x08006dac
 80026b8:	003d0900 	.word	0x003d0900

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_GetHCLKFreq+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08006d94 	.word	0x08006d94

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffde 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0adb      	lsrs	r3, r3, #11
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	08006d94 	.word	0x08006d94

08002720 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <RCC_Delay+0x34>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <RCC_Delay+0x38>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a5b      	lsrs	r3, r3, #9
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800273c:	bf00      	nop
  }
  while (Delay --);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	60fa      	str	r2, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <RCC_Delay+0x1c>
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000000 	.word	0x20000000
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e076      	b.n	800285c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277e:	d009      	beq.n	8002794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	e005      	b.n	8002794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fd16 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	ea42 0103 	orr.w	r1, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	0c1a      	lsrs	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f002 0204 	and.w	r2, r2, #4
 800283a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_SPI_Transmit+0x22>
 8002882:	2302      	movs	r3, #2
 8002884:	e12d      	b.n	8002ae2 <HAL_SPI_Transmit+0x27e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800288e:	f7fe ff5d 	bl	800174c <HAL_GetTick>
 8002892:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a8:	e116      	b.n	8002ad8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_SPI_Transmit+0x52>
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028ba:	e10d      	b.n	8002ad8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002902:	d10f      	bne.n	8002924 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d007      	beq.n	8002942 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294a:	d14f      	bne.n	80029ec <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_SPI_Transmit+0xf6>
 8002954:	8afb      	ldrh	r3, [r7, #22]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d142      	bne.n	80029e0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	1c9a      	adds	r2, r3, #2
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800297e:	e02f      	b.n	80029e0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d112      	bne.n	80029b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c9a      	adds	r2, r3, #2
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80029b2:	e015      	b.n	80029e0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b4:	f7fe feca 	bl	800174c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d803      	bhi.n	80029cc <HAL_SPI_Transmit+0x168>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d102      	bne.n	80029d2 <HAL_SPI_Transmit+0x16e>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80029de:	e07b      	b.n	8002ad8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ca      	bne.n	8002980 <HAL_SPI_Transmit+0x11c>
 80029ea:	e050      	b.n	8002a8e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Transmit+0x196>
 80029f4:	8afb      	ldrh	r3, [r7, #22]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d144      	bne.n	8002a84 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a20:	e030      	b.n	8002a84 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d113      	bne.n	8002a58 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a56:	e015      	b.n	8002a84 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a58:	f7fe fe78 	bl	800174c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d803      	bhi.n	8002a70 <HAL_SPI_Transmit+0x20c>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d102      	bne.n	8002a76 <HAL_SPI_Transmit+0x212>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a82:	e029      	b.n	8002ad8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1c9      	bne.n	8002a22 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fbd8 	bl	8003248 <SPI_EndRxTxTransaction>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	e003      	b.n	8002ad8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b088      	sub	sp, #32
 8002aee:	af02      	add	r7, sp, #8
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b0e:	e0fb      	b.n	8002d08 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b18:	d112      	bne.n	8002b40 <HAL_SPI_Receive+0x56>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10e      	bne.n	8002b40 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2204      	movs	r2, #4
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b2a:	88fa      	ldrh	r2, [r7, #6]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f8ef 	bl	8002d1a <HAL_SPI_TransmitReceive>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	e0e8      	b.n	8002d12 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_SPI_Receive+0x64>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0e1      	b.n	8002d12 <HAL_SPI_Receive+0x228>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b56:	f7fe fdf9 	bl	800174c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_SPI_Receive+0x7e>
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b6c:	e0cc      	b.n	8002d08 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2204      	movs	r2, #4
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d007      	beq.n	8002bf4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d16a      	bne.n	8002cd2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bfc:	e032      	b.n	8002c64 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d115      	bne.n	8002c38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f103 020c 	add.w	r2, r3, #12
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c36:	e015      	b.n	8002c64 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c38:	f7fe fd88 	bl	800174c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d803      	bhi.n	8002c50 <HAL_SPI_Receive+0x166>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d102      	bne.n	8002c56 <HAL_SPI_Receive+0x16c>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c62:	e051      	b.n	8002d08 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1c7      	bne.n	8002bfe <HAL_SPI_Receive+0x114>
 8002c6e:	e035      	b.n	8002cdc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d113      	bne.n	8002ca6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ca4:	e015      	b.n	8002cd2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca6:	f7fe fd51 	bl	800174c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d803      	bhi.n	8002cbe <HAL_SPI_Receive+0x1d4>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d102      	bne.n	8002cc4 <HAL_SPI_Receive+0x1da>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cd0:	e01a      	b.n	8002d08 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1c9      	bne.n	8002c70 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa5f 	bl	80031a4 <SPI_EndRxTransaction>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
 8002cfe:	e003      	b.n	8002d08 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08c      	sub	sp, #48	; 0x30
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x26>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e198      	b.n	8003072 <HAL_SPI_TransmitReceive+0x358>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d48:	f7fe fd00 	bl	800174c <HAL_GetTick>
 8002d4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00f      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x70>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d70:	d107      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_SPI_TransmitReceive+0x68>
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d003      	beq.n	8002d8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d88:	e16d      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_SPI_TransmitReceive+0x82>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_TransmitReceive+0x82>
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002da2:	e160      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d003      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	887a      	ldrh	r2, [r7, #2]
 8002dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e14:	d17c      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x10a>
 8002e1e:	8b7b      	ldrh	r3, [r7, #26]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d16a      	bne.n	8002efa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e48:	e057      	b.n	8002efa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d113      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x1b8>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d014      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ed2:	f7fe fc3b 	bl	800174c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d80b      	bhi.n	8002efa <HAL_SPI_TransmitReceive+0x1e0>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d007      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ef8:	e0b5      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1a2      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x130>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d19d      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x130>
 8002f0e:	e080      	b.n	8003012 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x204>
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d16f      	bne.n	8002ffe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f44:	e05b      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d11c      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x274>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d017      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x274>
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d114      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d119      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x2b6>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d014      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd0:	f7fe fbbc 	bl	800174c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d803      	bhi.n	8002fe8 <HAL_SPI_TransmitReceive+0x2ce>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_TransmitReceive+0x2d4>
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002ffc:	e033      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d19e      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x22c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d199      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f916 	bl	8003248 <SPI_EndRxTxTransaction>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800302e:	e01a      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305c:	e003      	b.n	8003066 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800306e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003072:	4618      	mov	r0, r3
 8003074:	3730      	adds	r7, #48	; 0x30
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	b2db      	uxtb	r3, r3
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a4:	f7fe fb52 	bl	800174c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b4:	f7fe fb4a 	bl	800174c <HAL_GetTick>
 80030b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ba:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	0d1b      	lsrs	r3, r3, #20
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ca:	e054      	b.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d050      	beq.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d4:	f7fe fb3a 	bl	800174c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d902      	bls.n	80030ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d13d      	bne.n	8003166 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003102:	d111      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310c:	d004      	beq.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d107      	bne.n	8003128 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003130:	d10f      	bne.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e017      	b.n	8003196 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3b01      	subs	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4013      	ands	r3, r2
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d19b      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b8:	d111      	bne.n	80031de <SPI_EndRxTransaction+0x3a>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c2:	d004      	beq.n	80031ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d107      	bne.n	80031de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e6:	d117      	bne.n	8003218 <SPI_EndRxTransaction+0x74>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d112      	bne.n	8003218 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2101      	movs	r1, #1
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff49 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01a      	beq.n	800323e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e013      	b.n	8003240 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ff36 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e000      	b.n	8003240 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff18 	bl	8003094 <SPI_WaitFlagStateUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e000      	b.n	800327c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e041      	b.n	800331a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe f814 	bl	80012d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fac6 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e041      	b.n	80033b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd ff93 	bl	8001274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 fa77 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa0b 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f9fe 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa0d 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0204 	mvn.w	r2, #4
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9e1 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9d4 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f9e3 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b08      	cmp	r3, #8
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0208 	mvn.w	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9b7 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9aa 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9b9 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f98d 	bl	800381e <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f980 	bl	800380c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f98f 	bl	8003830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0201 	mvn.w	r2, #1
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fdcc 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fc14 	bl	8003d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f953 	bl	8003842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0220 	mvn.w	r2, #32
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fbdf 	bl	8003d86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e048      	b.n	8003680 <HAL_TIM_OC_ConfigChannel+0xb0>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d839      	bhi.n	8003670 <HAL_TIM_OC_ConfigChannel+0xa0>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_TIM_OC_ConfigChannel+0x34>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003639 	.word	0x08003639
 8003608:	08003671 	.word	0x08003671
 800360c:	08003671 	.word	0x08003671
 8003610:	08003671 	.word	0x08003671
 8003614:	08003647 	.word	0x08003647
 8003618:	08003671 	.word	0x08003671
 800361c:	08003671 	.word	0x08003671
 8003620:	08003671 	.word	0x08003671
 8003624:	08003655 	.word	0x08003655
 8003628:	08003671 	.word	0x08003671
 800362c:	08003671 	.word	0x08003671
 8003630:	08003671 	.word	0x08003671
 8003634:	08003663 	.word	0x08003663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f96a 	bl	8003918 <TIM_OC1_SetConfig>
      break;
 8003644:	e017      	b.n	8003676 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f9c9 	bl	80039e4 <TIM_OC2_SetConfig>
      break;
 8003652:	e010      	b.n	8003676 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fa2c 	bl	8003ab8 <TIM_OC3_SetConfig>
      break;
 8003660:	e009      	b.n	8003676 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa8f 	bl	8003b8c <TIM_OC4_SetConfig>
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0ae      	b.n	8003804 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	f200 809f 	bhi.w	80037f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	080037f5 	.word	0x080037f5
 80036c4:	080037f5 	.word	0x080037f5
 80036c8:	080037f5 	.word	0x080037f5
 80036cc:	08003731 	.word	0x08003731
 80036d0:	080037f5 	.word	0x080037f5
 80036d4:	080037f5 	.word	0x080037f5
 80036d8:	080037f5 	.word	0x080037f5
 80036dc:	08003773 	.word	0x08003773
 80036e0:	080037f5 	.word	0x080037f5
 80036e4:	080037f5 	.word	0x080037f5
 80036e8:	080037f5 	.word	0x080037f5
 80036ec:	080037b3 	.word	0x080037b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f90e 	bl	8003918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0208 	orr.w	r2, r2, #8
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
      break;
 800372e:	e064      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f954 	bl	80039e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	619a      	str	r2, [r3, #24]
      break;
 8003770:	e043      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f99d 	bl	8003ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0208 	orr.w	r2, r2, #8
 800378c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0204 	bic.w	r2, r2, #4
 800379c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
      break;
 80037b0:	e023      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f9e7 	bl	8003b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	021a      	lsls	r2, r3, #8
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	61da      	str	r2, [r3, #28]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
      break;
 80037f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a29      	ldr	r2, [pc, #164]	; (800390c <TIM_Base_SetConfig+0xb8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a26      	ldr	r2, [pc, #152]	; (8003910 <TIM_Base_SetConfig+0xbc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a25      	ldr	r2, [pc, #148]	; (8003914 <TIM_Base_SetConfig+0xc0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <TIM_Base_SetConfig+0xb8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d007      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <TIM_Base_SetConfig+0xbc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <TIM_Base_SetConfig+0xc0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d108      	bne.n	80038c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a07      	ldr	r2, [pc, #28]	; (800390c <TIM_Base_SetConfig+0xb8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d103      	bne.n	80038fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	615a      	str	r2, [r3, #20]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800

08003918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 0201 	bic.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 0302 	bic.w	r3, r3, #2
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <TIM_OC1_SetConfig+0xc8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10c      	bne.n	800398e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0308 	bic.w	r3, r3, #8
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0304 	bic.w	r3, r3, #4
 800398c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <TIM_OC1_SetConfig+0xc8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	621a      	str	r2, [r3, #32]
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00

080039e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f023 0210 	bic.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0320 	bic.w	r3, r3, #32
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <TIM_OC2_SetConfig+0xd0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10d      	bne.n	8003a60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <TIM_OC2_SetConfig+0xd0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d113      	bne.n	8003a90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00

08003ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <TIM_OC3_SetConfig+0xd0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10d      	bne.n	8003b32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <TIM_OC3_SetConfig+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00

08003b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	031b      	lsls	r3, r3, #12
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <TIM_OC4_SetConfig+0x98>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d109      	bne.n	8003c00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e046      	b.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10c      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800

08003ce4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e03d      	b.n	8003d7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e042      	b.n	8003e42 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fafb 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2224      	movs	r2, #36	; 0x24
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f91c 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	; 0x28
 8003e4e:	af02      	add	r7, sp, #8
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d16d      	bne.n	8003f46 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Transmit+0x2c>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e066      	b.n	8003f48 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2221      	movs	r2, #33	; 0x21
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e88:	f7fd fc60 	bl	800174c <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d108      	bne.n	8003eb6 <HAL_UART_Transmit+0x6c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e003      	b.n	8003ebe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ebe:	e02a      	b.n	8003f16 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f840 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e036      	b.n	8003f48 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	e007      	b.n	8003f08 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1cf      	bne.n	8003ec0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2200      	movs	r2, #0
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f810 	bl	8003f50 <UART_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e006      	b.n	8003f48 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b090      	sub	sp, #64	; 0x40
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f60:	e050      	b.n	8004004 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d04c      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f70:	f7fd fbec 	bl	800174c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d241      	bcs.n	8004004 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa0:	637a      	str	r2, [r7, #52]	; 0x34
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd4:	623a      	str	r2, [r7, #32]
 8003fd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e00f      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d09f      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3740      	adds	r7, #64	; 0x40
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004066:	f023 030c 	bic.w	r3, r3, #12
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2c      	ldr	r2, [pc, #176]	; (8004140 <UART_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fb30 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	e002      	b.n	80040a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fb18 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80040a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <UART_SetConfig+0x118>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	4419      	add	r1, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	440a      	add	r2, r1
 8004136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013800 	.word	0x40013800
 8004144:	51eb851f 	.word	0x51eb851f

08004148 <lora_read_reg>:
#include "lora.h"
#include <string.h>

uint8_t packetIndex;

uint8_t lora_read_reg(lora_t * module, uint8_t addr) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
	uint8_t txByte = addr & 0x7f;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415a:	b2db      	uxtb	r3, r3
 800415c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800415e:	2300      	movs	r3, #0
 8004160:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6958      	ldr	r0, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	b29b      	uxth	r3, r3
 8004170:	2200      	movs	r2, #0
 8004172:	4619      	mov	r1, r3
 8004174:	f7fd fd86 	bl	8001c84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(module->pin->spi, &txByte, 1, 1000);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6998      	ldr	r0, [r3, #24]
 800417e:	f107 010f 	add.w	r1, r7, #15
 8004182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004186:	2201      	movs	r2, #1
 8004188:	f7fe fb6c 	bl	8002864 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800418c:	bf00      	nop
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe ff70 	bl	800307a <HAL_SPI_GetState>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d1f6      	bne.n	800418e <lora_read_reg+0x46>
	
	HAL_SPI_Receive(module->pin->spi,&rxByte, 1, 1000);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6998      	ldr	r0, [r3, #24]
 80041a6:	f107 010e 	add.w	r1, r7, #14
 80041aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ae:	2201      	movs	r2, #1
 80041b0:	f7fe fc9b 	bl	8002aea <HAL_SPI_Receive>
	while(HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 80041b4:	bf00      	nop
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe ff5c 	bl	800307a <HAL_SPI_GetState>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d1f6      	bne.n	80041b6 <lora_read_reg+0x6e>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6958      	ldr	r0, [r3, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2201      	movs	r2, #1
 80041d8:	4619      	mov	r1, r3
 80041da:	f7fd fd53 	bl	8001c84 <HAL_GPIO_WritePin>
	return rxByte;
 80041de:	7bbb      	ldrb	r3, [r7, #14]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <lora_write_reg>:

void lora_write_reg(lora_t * module, uint8_t addr, uint8_t cmd){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
 80041f4:	4613      	mov	r3, r2
 80041f6:	70bb      	strb	r3, [r7, #2]
	uint8_t add = addr | 0x80;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_RESET);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6958      	ldr	r0, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	b29b      	uxth	r3, r3
 8004210:	2200      	movs	r2, #0
 8004212:	4619      	mov	r1, r3
 8004214:	f7fd fd36 	bl	8001c84 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(module->pin->spi, &add, 1, 1000);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6998      	ldr	r0, [r3, #24]
 800421e:	f107 010f 	add.w	r1, r7, #15
 8004222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004226:	2201      	movs	r2, #1
 8004228:	f7fe fb1c 	bl	8002864 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 800422c:	bf00      	nop
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe ff20 	bl	800307a <HAL_SPI_GetState>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d1f6      	bne.n	800422e <lora_write_reg+0x46>
	HAL_SPI_Transmit(module->pin->spi, &cmd, 1, 1000);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6998      	ldr	r0, [r3, #24]
 8004246:	1cb9      	adds	r1, r7, #2
 8004248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424c:	2201      	movs	r2, #1
 800424e:	f7fe fb09 	bl	8002864 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->pin->spi) != HAL_SPI_STATE_READY);
 8004252:	bf00      	nop
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe ff0d 	bl	800307a <HAL_SPI_GetState>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d1f6      	bne.n	8004254 <lora_write_reg+0x6c>
	HAL_GPIO_WritePin(module->pin->nss.port, module->pin->nss.pin,GPIO_PIN_SET);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6958      	ldr	r0, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	b29b      	uxth	r3, r3
 8004274:	2201      	movs	r2, #1
 8004276:	4619      	mov	r1, r3
 8004278:	f7fd fd04 	bl	8001c84 <HAL_GPIO_WritePin>
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <lora_prasePacket>:
	lora_write_reg(module, REG_PA_CONFIG, 0x8f);
	lora_write_reg(module, REG_OP_MODE, (MODE_LONG_RANGE_MODE | MODE_STDBY));
	return 0;
}

int lora_prasePacket(lora_t * module){
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	int packetLength = 0, irqFlags; //,ret;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
	irqFlags = lora_read_reg(module, REG_IRQ_FLAGS);
 8004290:	2112      	movs	r1, #18
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff58 	bl	8004148 <lora_read_reg>
 8004298:	4603      	mov	r3, r0
 800429a:	60bb      	str	r3, [r7, #8]
	//ret = lora_read_reg(module, REG_MODEM_CONFIG_1);
	lora_write_reg(module, REG_MODEM_CONFIG_1, 0x92);
 800429c:	2292      	movs	r2, #146	; 0x92
 800429e:	211d      	movs	r1, #29
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ffa1 	bl	80041e8 <lora_write_reg>
	
	lora_write_reg(module, REG_IRQ_FLAGS, irqFlags);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	2112      	movs	r1, #18
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff9a 	bl	80041e8 <lora_write_reg>

	if((irqFlags & IRQ_RX_DONE_MASK) && ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)) {
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01d      	beq.n	80042fa <lora_prasePacket+0x76>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d118      	bne.n	80042fa <lora_prasePacket+0x76>
		packetLength = lora_read_reg(module, REG_RX_NB_BYTES);
 80042c8:	2113      	movs	r1, #19
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff3c 	bl	8004148 <lora_read_reg>
 80042d0:	4603      	mov	r3, r0
 80042d2:	60fb      	str	r3, [r7, #12]
		lora_write_reg(module, REG_FIFO_ADDR_PTR, lora_read_reg(module, REG_FIFO_RX_CURRENT_ADDR));
 80042d4:	2110      	movs	r1, #16
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff36 	bl	8004148 <lora_read_reg>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	210d      	movs	r1, #13
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ff80 	bl	80041e8 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, 0x81);
 80042e8:	2281      	movs	r2, #129	; 0x81
 80042ea:	2101      	movs	r1, #1
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff7b 	bl	80041e8 <lora_write_reg>
		packetIndex = 0;
 80042f2:	4b11      	ldr	r3, [pc, #68]	; (8004338 <lora_prasePacket+0xb4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e010      	b.n	800431c <lora_prasePacket+0x98>
	}
	else if((lora_read_reg(module, REG_OP_MODE)) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80042fa:	2101      	movs	r1, #1
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff23 	bl	8004148 <lora_read_reg>
 8004302:	4603      	mov	r3, r0
 8004304:	2b86      	cmp	r3, #134	; 0x86
 8004306:	d009      	beq.n	800431c <lora_prasePacket+0x98>
		lora_write_reg(module, REG_FIFO_ADDR_PTR, 0);
 8004308:	2200      	movs	r2, #0
 800430a:	210d      	movs	r1, #13
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff6b 	bl	80041e8 <lora_write_reg>
		lora_write_reg(module, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8004312:	2286      	movs	r2, #134	; 0x86
 8004314:	2101      	movs	r1, #1
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff66 	bl	80041e8 <lora_write_reg>
	}
	if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK)== IRQ_PAYLOAD_CRC_ERROR_MASK){
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <lora_prasePacket+0xa8>
		return -1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e000      	b.n	800432e <lora_prasePacket+0xaa>
	}
	return packetLength;
 800432c:	68fb      	ldr	r3, [r7, #12]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200003e8 	.word	0x200003e8

0800433c <lora_available>:

uint8_t lora_available(lora_t * module){
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	return (lora_read_reg(module, REG_RX_NB_BYTES) - packetIndex);
 8004344:	2113      	movs	r1, #19
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fefe 	bl	8004148 <lora_read_reg>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <lora_available+0x24>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200003e8 	.word	0x200003e8

08004364 <lora_read>:

uint8_t lora_read(lora_t * module){
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	if(!lora_available(module))
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ffe5 	bl	800433c <lora_available>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <lora_read+0x18>
		return 0;
 8004378:	2300      	movs	r3, #0
 800437a:	e00a      	b.n	8004392 <lora_read+0x2e>
	packetIndex++;
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <lora_read+0x38>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <lora_read+0x38>)
 8004386:	701a      	strb	r2, [r3, #0]
	return lora_read_reg(module, REG_FIFO);
 8004388:	2100      	movs	r1, #0
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fedc 	bl	8004148 <lora_read_reg>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200003e8 	.word	0x200003e8

080043a0 <__cvt>:
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a6:	461f      	mov	r7, r3
 80043a8:	bfbb      	ittet	lt
 80043aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043ae:	461f      	movlt	r7, r3
 80043b0:	2300      	movge	r3, #0
 80043b2:	232d      	movlt	r3, #45	; 0x2d
 80043b4:	b088      	sub	sp, #32
 80043b6:	4614      	mov	r4, r2
 80043b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043bc:	7013      	strb	r3, [r2, #0]
 80043be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043c4:	f023 0820 	bic.w	r8, r3, #32
 80043c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043cc:	d005      	beq.n	80043da <__cvt+0x3a>
 80043ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043d2:	d100      	bne.n	80043d6 <__cvt+0x36>
 80043d4:	3501      	adds	r5, #1
 80043d6:	2302      	movs	r3, #2
 80043d8:	e000      	b.n	80043dc <__cvt+0x3c>
 80043da:	2303      	movs	r3, #3
 80043dc:	aa07      	add	r2, sp, #28
 80043de:	9204      	str	r2, [sp, #16]
 80043e0:	aa06      	add	r2, sp, #24
 80043e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043e6:	e9cd 3500 	strd	r3, r5, [sp]
 80043ea:	4622      	mov	r2, r4
 80043ec:	463b      	mov	r3, r7
 80043ee:	f000 fef7 	bl	80051e0 <_dtoa_r>
 80043f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043f6:	4606      	mov	r6, r0
 80043f8:	d102      	bne.n	8004400 <__cvt+0x60>
 80043fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043fc:	07db      	lsls	r3, r3, #31
 80043fe:	d522      	bpl.n	8004446 <__cvt+0xa6>
 8004400:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004404:	eb06 0905 	add.w	r9, r6, r5
 8004408:	d110      	bne.n	800442c <__cvt+0x8c>
 800440a:	7833      	ldrb	r3, [r6, #0]
 800440c:	2b30      	cmp	r3, #48	; 0x30
 800440e:	d10a      	bne.n	8004426 <__cvt+0x86>
 8004410:	2200      	movs	r2, #0
 8004412:	2300      	movs	r3, #0
 8004414:	4620      	mov	r0, r4
 8004416:	4639      	mov	r1, r7
 8004418:	f7fc fac6 	bl	80009a8 <__aeabi_dcmpeq>
 800441c:	b918      	cbnz	r0, 8004426 <__cvt+0x86>
 800441e:	f1c5 0501 	rsb	r5, r5, #1
 8004422:	f8ca 5000 	str.w	r5, [sl]
 8004426:	f8da 3000 	ldr.w	r3, [sl]
 800442a:	4499      	add	r9, r3
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	4620      	mov	r0, r4
 8004432:	4639      	mov	r1, r7
 8004434:	f7fc fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8004438:	b108      	cbz	r0, 800443e <__cvt+0x9e>
 800443a:	f8cd 901c 	str.w	r9, [sp, #28]
 800443e:	2230      	movs	r2, #48	; 0x30
 8004440:	9b07      	ldr	r3, [sp, #28]
 8004442:	454b      	cmp	r3, r9
 8004444:	d307      	bcc.n	8004456 <__cvt+0xb6>
 8004446:	4630      	mov	r0, r6
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800444c:	1b9b      	subs	r3, r3, r6
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	b008      	add	sp, #32
 8004452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	9107      	str	r1, [sp, #28]
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e7f0      	b.n	8004440 <__cvt+0xa0>

0800445e <__exponent>:
 800445e:	4603      	mov	r3, r0
 8004460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004462:	2900      	cmp	r1, #0
 8004464:	f803 2b02 	strb.w	r2, [r3], #2
 8004468:	bfb6      	itet	lt
 800446a:	222d      	movlt	r2, #45	; 0x2d
 800446c:	222b      	movge	r2, #43	; 0x2b
 800446e:	4249      	neglt	r1, r1
 8004470:	2909      	cmp	r1, #9
 8004472:	7042      	strb	r2, [r0, #1]
 8004474:	dd2a      	ble.n	80044cc <__exponent+0x6e>
 8004476:	f10d 0207 	add.w	r2, sp, #7
 800447a:	4617      	mov	r7, r2
 800447c:	260a      	movs	r6, #10
 800447e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004482:	4694      	mov	ip, r2
 8004484:	fb06 1415 	mls	r4, r6, r5, r1
 8004488:	3430      	adds	r4, #48	; 0x30
 800448a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800448e:	460c      	mov	r4, r1
 8004490:	2c63      	cmp	r4, #99	; 0x63
 8004492:	4629      	mov	r1, r5
 8004494:	f102 32ff 	add.w	r2, r2, #4294967295
 8004498:	dcf1      	bgt.n	800447e <__exponent+0x20>
 800449a:	3130      	adds	r1, #48	; 0x30
 800449c:	f1ac 0402 	sub.w	r4, ip, #2
 80044a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80044a4:	4622      	mov	r2, r4
 80044a6:	1c41      	adds	r1, r0, #1
 80044a8:	42ba      	cmp	r2, r7
 80044aa:	d30a      	bcc.n	80044c2 <__exponent+0x64>
 80044ac:	f10d 0209 	add.w	r2, sp, #9
 80044b0:	eba2 020c 	sub.w	r2, r2, ip
 80044b4:	42bc      	cmp	r4, r7
 80044b6:	bf88      	it	hi
 80044b8:	2200      	movhi	r2, #0
 80044ba:	4413      	add	r3, r2
 80044bc:	1a18      	subs	r0, r3, r0
 80044be:	b003      	add	sp, #12
 80044c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80044c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80044ca:	e7ed      	b.n	80044a8 <__exponent+0x4a>
 80044cc:	2330      	movs	r3, #48	; 0x30
 80044ce:	3130      	adds	r1, #48	; 0x30
 80044d0:	7083      	strb	r3, [r0, #2]
 80044d2:	70c1      	strb	r1, [r0, #3]
 80044d4:	1d03      	adds	r3, r0, #4
 80044d6:	e7f1      	b.n	80044bc <__exponent+0x5e>

080044d8 <_printf_float>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	b091      	sub	sp, #68	; 0x44
 80044de:	460c      	mov	r4, r1
 80044e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80044e4:	4616      	mov	r6, r2
 80044e6:	461f      	mov	r7, r3
 80044e8:	4605      	mov	r5, r0
 80044ea:	f000 fd6b 	bl	8004fc4 <_localeconv_r>
 80044ee:	6803      	ldr	r3, [r0, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	9309      	str	r3, [sp, #36]	; 0x24
 80044f4:	f7fb fe2c 	bl	8000150 <strlen>
 80044f8:	2300      	movs	r3, #0
 80044fa:	930e      	str	r3, [sp, #56]	; 0x38
 80044fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004500:	900a      	str	r0, [sp, #40]	; 0x28
 8004502:	3307      	adds	r3, #7
 8004504:	f023 0307 	bic.w	r3, r3, #7
 8004508:	f103 0208 	add.w	r2, r3, #8
 800450c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004510:	f8d4 b000 	ldr.w	fp, [r4]
 8004514:	f8c8 2000 	str.w	r2, [r8]
 8004518:	e9d3 a800 	ldrd	sl, r8, [r3]
 800451c:	4652      	mov	r2, sl
 800451e:	4643      	mov	r3, r8
 8004520:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004524:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004528:	930b      	str	r3, [sp, #44]	; 0x2c
 800452a:	f04f 32ff 	mov.w	r2, #4294967295
 800452e:	4650      	mov	r0, sl
 8004530:	4b9c      	ldr	r3, [pc, #624]	; (80047a4 <_printf_float+0x2cc>)
 8004532:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004534:	f7fc fa6a 	bl	8000a0c <__aeabi_dcmpun>
 8004538:	bb70      	cbnz	r0, 8004598 <_printf_float+0xc0>
 800453a:	f04f 32ff 	mov.w	r2, #4294967295
 800453e:	4650      	mov	r0, sl
 8004540:	4b98      	ldr	r3, [pc, #608]	; (80047a4 <_printf_float+0x2cc>)
 8004542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004544:	f7fc fa44 	bl	80009d0 <__aeabi_dcmple>
 8004548:	bb30      	cbnz	r0, 8004598 <_printf_float+0xc0>
 800454a:	2200      	movs	r2, #0
 800454c:	2300      	movs	r3, #0
 800454e:	4650      	mov	r0, sl
 8004550:	4641      	mov	r1, r8
 8004552:	f7fc fa33 	bl	80009bc <__aeabi_dcmplt>
 8004556:	b110      	cbz	r0, 800455e <_printf_float+0x86>
 8004558:	232d      	movs	r3, #45	; 0x2d
 800455a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455e:	4a92      	ldr	r2, [pc, #584]	; (80047a8 <_printf_float+0x2d0>)
 8004560:	4b92      	ldr	r3, [pc, #584]	; (80047ac <_printf_float+0x2d4>)
 8004562:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004566:	bf94      	ite	ls
 8004568:	4690      	movls	r8, r2
 800456a:	4698      	movhi	r8, r3
 800456c:	2303      	movs	r3, #3
 800456e:	f04f 0a00 	mov.w	sl, #0
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	f02b 0304 	bic.w	r3, fp, #4
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	4633      	mov	r3, r6
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	9700      	str	r7, [sp, #0]
 8004582:	aa0f      	add	r2, sp, #60	; 0x3c
 8004584:	f000 f9d6 	bl	8004934 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	f040 8090 	bne.w	80046ae <_printf_float+0x1d6>
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	b011      	add	sp, #68	; 0x44
 8004594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004598:	4652      	mov	r2, sl
 800459a:	4643      	mov	r3, r8
 800459c:	4650      	mov	r0, sl
 800459e:	4641      	mov	r1, r8
 80045a0:	f7fc fa34 	bl	8000a0c <__aeabi_dcmpun>
 80045a4:	b148      	cbz	r0, 80045ba <_printf_float+0xe2>
 80045a6:	f1b8 0f00 	cmp.w	r8, #0
 80045aa:	bfb8      	it	lt
 80045ac:	232d      	movlt	r3, #45	; 0x2d
 80045ae:	4a80      	ldr	r2, [pc, #512]	; (80047b0 <_printf_float+0x2d8>)
 80045b0:	bfb8      	it	lt
 80045b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045b6:	4b7f      	ldr	r3, [pc, #508]	; (80047b4 <_printf_float+0x2dc>)
 80045b8:	e7d3      	b.n	8004562 <_printf_float+0x8a>
 80045ba:	6863      	ldr	r3, [r4, #4]
 80045bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	d142      	bne.n	800464a <_printf_float+0x172>
 80045c4:	2306      	movs	r3, #6
 80045c6:	6063      	str	r3, [r4, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	9206      	str	r2, [sp, #24]
 80045cc:	aa0e      	add	r2, sp, #56	; 0x38
 80045ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80045d2:	aa0d      	add	r2, sp, #52	; 0x34
 80045d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045d8:	9203      	str	r2, [sp, #12]
 80045da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	4652      	mov	r2, sl
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4628      	mov	r0, r5
 80045ec:	4643      	mov	r3, r8
 80045ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80045f0:	f7ff fed6 	bl	80043a0 <__cvt>
 80045f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045f6:	4680      	mov	r8, r0
 80045f8:	2947      	cmp	r1, #71	; 0x47
 80045fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045fc:	d108      	bne.n	8004610 <_printf_float+0x138>
 80045fe:	1cc8      	adds	r0, r1, #3
 8004600:	db02      	blt.n	8004608 <_printf_float+0x130>
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	4299      	cmp	r1, r3
 8004606:	dd40      	ble.n	800468a <_printf_float+0x1b2>
 8004608:	f1a9 0902 	sub.w	r9, r9, #2
 800460c:	fa5f f989 	uxtb.w	r9, r9
 8004610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004614:	d81f      	bhi.n	8004656 <_printf_float+0x17e>
 8004616:	464a      	mov	r2, r9
 8004618:	3901      	subs	r1, #1
 800461a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800461e:	910d      	str	r1, [sp, #52]	; 0x34
 8004620:	f7ff ff1d 	bl	800445e <__exponent>
 8004624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004626:	4682      	mov	sl, r0
 8004628:	1813      	adds	r3, r2, r0
 800462a:	2a01      	cmp	r2, #1
 800462c:	6123      	str	r3, [r4, #16]
 800462e:	dc02      	bgt.n	8004636 <_printf_float+0x15e>
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	07d2      	lsls	r2, r2, #31
 8004634:	d501      	bpl.n	800463a <_printf_float+0x162>
 8004636:	3301      	adds	r3, #1
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800463e:	2b00      	cmp	r3, #0
 8004640:	d09b      	beq.n	800457a <_printf_float+0xa2>
 8004642:	232d      	movs	r3, #45	; 0x2d
 8004644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004648:	e797      	b.n	800457a <_printf_float+0xa2>
 800464a:	2947      	cmp	r1, #71	; 0x47
 800464c:	d1bc      	bne.n	80045c8 <_printf_float+0xf0>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1ba      	bne.n	80045c8 <_printf_float+0xf0>
 8004652:	2301      	movs	r3, #1
 8004654:	e7b7      	b.n	80045c6 <_printf_float+0xee>
 8004656:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800465a:	d118      	bne.n	800468e <_printf_float+0x1b6>
 800465c:	2900      	cmp	r1, #0
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	dd0b      	ble.n	800467a <_printf_float+0x1a2>
 8004662:	6121      	str	r1, [r4, #16]
 8004664:	b913      	cbnz	r3, 800466c <_printf_float+0x194>
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	07d0      	lsls	r0, r2, #31
 800466a:	d502      	bpl.n	8004672 <_printf_float+0x19a>
 800466c:	3301      	adds	r3, #1
 800466e:	440b      	add	r3, r1
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	f04f 0a00 	mov.w	sl, #0
 8004676:	65a1      	str	r1, [r4, #88]	; 0x58
 8004678:	e7df      	b.n	800463a <_printf_float+0x162>
 800467a:	b913      	cbnz	r3, 8004682 <_printf_float+0x1aa>
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	07d2      	lsls	r2, r2, #31
 8004680:	d501      	bpl.n	8004686 <_printf_float+0x1ae>
 8004682:	3302      	adds	r3, #2
 8004684:	e7f4      	b.n	8004670 <_printf_float+0x198>
 8004686:	2301      	movs	r3, #1
 8004688:	e7f2      	b.n	8004670 <_printf_float+0x198>
 800468a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800468e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004690:	4299      	cmp	r1, r3
 8004692:	db05      	blt.n	80046a0 <_printf_float+0x1c8>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	6121      	str	r1, [r4, #16]
 8004698:	07d8      	lsls	r0, r3, #31
 800469a:	d5ea      	bpl.n	8004672 <_printf_float+0x19a>
 800469c:	1c4b      	adds	r3, r1, #1
 800469e:	e7e7      	b.n	8004670 <_printf_float+0x198>
 80046a0:	2900      	cmp	r1, #0
 80046a2:	bfcc      	ite	gt
 80046a4:	2201      	movgt	r2, #1
 80046a6:	f1c1 0202 	rsble	r2, r1, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	e7e0      	b.n	8004670 <_printf_float+0x198>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	055a      	lsls	r2, r3, #21
 80046b2:	d407      	bmi.n	80046c4 <_printf_float+0x1ec>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	4642      	mov	r2, r8
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	d12b      	bne.n	800471a <_printf_float+0x242>
 80046c2:	e764      	b.n	800458e <_printf_float+0xb6>
 80046c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046c8:	f240 80dd 	bls.w	8004886 <_printf_float+0x3ae>
 80046cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046d0:	2200      	movs	r2, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	f7fc f968 	bl	80009a8 <__aeabi_dcmpeq>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d033      	beq.n	8004744 <_printf_float+0x26c>
 80046dc:	2301      	movs	r3, #1
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	4a35      	ldr	r2, [pc, #212]	; (80047b8 <_printf_float+0x2e0>)
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f af51 	beq.w	800458e <_printf_float+0xb6>
 80046ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046f0:	429a      	cmp	r2, r3
 80046f2:	db02      	blt.n	80046fa <_printf_float+0x222>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	07d8      	lsls	r0, r3, #31
 80046f8:	d50f      	bpl.n	800471a <_printf_float+0x242>
 80046fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f af42 	beq.w	800458e <_printf_float+0xb6>
 800470a:	f04f 0800 	mov.w	r8, #0
 800470e:	f104 091a 	add.w	r9, r4, #26
 8004712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004714:	3b01      	subs	r3, #1
 8004716:	4543      	cmp	r3, r8
 8004718:	dc09      	bgt.n	800472e <_printf_float+0x256>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	079b      	lsls	r3, r3, #30
 800471e:	f100 8104 	bmi.w	800492a <_printf_float+0x452>
 8004722:	68e0      	ldr	r0, [r4, #12]
 8004724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004726:	4298      	cmp	r0, r3
 8004728:	bfb8      	it	lt
 800472a:	4618      	movlt	r0, r3
 800472c:	e731      	b.n	8004592 <_printf_float+0xba>
 800472e:	2301      	movs	r3, #1
 8004730:	464a      	mov	r2, r9
 8004732:	4631      	mov	r1, r6
 8004734:	4628      	mov	r0, r5
 8004736:	47b8      	blx	r7
 8004738:	3001      	adds	r0, #1
 800473a:	f43f af28 	beq.w	800458e <_printf_float+0xb6>
 800473e:	f108 0801 	add.w	r8, r8, #1
 8004742:	e7e6      	b.n	8004712 <_printf_float+0x23a>
 8004744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004746:	2b00      	cmp	r3, #0
 8004748:	dc38      	bgt.n	80047bc <_printf_float+0x2e4>
 800474a:	2301      	movs	r3, #1
 800474c:	4631      	mov	r1, r6
 800474e:	4628      	mov	r0, r5
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <_printf_float+0x2e0>)
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	f43f af1a 	beq.w	800458e <_printf_float+0xb6>
 800475a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800475e:	4313      	orrs	r3, r2
 8004760:	d102      	bne.n	8004768 <_printf_float+0x290>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	07d9      	lsls	r1, r3, #31
 8004766:	d5d8      	bpl.n	800471a <_printf_float+0x242>
 8004768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f af0b 	beq.w	800458e <_printf_float+0xb6>
 8004778:	f04f 0900 	mov.w	r9, #0
 800477c:	f104 0a1a 	add.w	sl, r4, #26
 8004780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004782:	425b      	negs	r3, r3
 8004784:	454b      	cmp	r3, r9
 8004786:	dc01      	bgt.n	800478c <_printf_float+0x2b4>
 8004788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478a:	e794      	b.n	80046b6 <_printf_float+0x1de>
 800478c:	2301      	movs	r3, #1
 800478e:	4652      	mov	r2, sl
 8004790:	4631      	mov	r1, r6
 8004792:	4628      	mov	r0, r5
 8004794:	47b8      	blx	r7
 8004796:	3001      	adds	r0, #1
 8004798:	f43f aef9 	beq.w	800458e <_printf_float+0xb6>
 800479c:	f109 0901 	add.w	r9, r9, #1
 80047a0:	e7ee      	b.n	8004780 <_printf_float+0x2a8>
 80047a2:	bf00      	nop
 80047a4:	7fefffff 	.word	0x7fefffff
 80047a8:	08006dae 	.word	0x08006dae
 80047ac:	08006db2 	.word	0x08006db2
 80047b0:	08006db6 	.word	0x08006db6
 80047b4:	08006dba 	.word	0x08006dba
 80047b8:	08006dbe 	.word	0x08006dbe
 80047bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047c0:	429a      	cmp	r2, r3
 80047c2:	bfa8      	it	ge
 80047c4:	461a      	movge	r2, r3
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	4691      	mov	r9, r2
 80047ca:	dc37      	bgt.n	800483c <_printf_float+0x364>
 80047cc:	f04f 0b00 	mov.w	fp, #0
 80047d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047d4:	f104 021a 	add.w	r2, r4, #26
 80047d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047dc:	ebaa 0309 	sub.w	r3, sl, r9
 80047e0:	455b      	cmp	r3, fp
 80047e2:	dc33      	bgt.n	800484c <_printf_float+0x374>
 80047e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047e8:	429a      	cmp	r2, r3
 80047ea:	db3b      	blt.n	8004864 <_printf_float+0x38c>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	07da      	lsls	r2, r3, #31
 80047f0:	d438      	bmi.n	8004864 <_printf_float+0x38c>
 80047f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047f6:	eba2 0903 	sub.w	r9, r2, r3
 80047fa:	eba2 020a 	sub.w	r2, r2, sl
 80047fe:	4591      	cmp	r9, r2
 8004800:	bfa8      	it	ge
 8004802:	4691      	movge	r9, r2
 8004804:	f1b9 0f00 	cmp.w	r9, #0
 8004808:	dc34      	bgt.n	8004874 <_printf_float+0x39c>
 800480a:	f04f 0800 	mov.w	r8, #0
 800480e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004812:	f104 0a1a 	add.w	sl, r4, #26
 8004816:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	eba3 0309 	sub.w	r3, r3, r9
 8004820:	4543      	cmp	r3, r8
 8004822:	f77f af7a 	ble.w	800471a <_printf_float+0x242>
 8004826:	2301      	movs	r3, #1
 8004828:	4652      	mov	r2, sl
 800482a:	4631      	mov	r1, r6
 800482c:	4628      	mov	r0, r5
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	f43f aeac 	beq.w	800458e <_printf_float+0xb6>
 8004836:	f108 0801 	add.w	r8, r8, #1
 800483a:	e7ec      	b.n	8004816 <_printf_float+0x33e>
 800483c:	4613      	mov	r3, r2
 800483e:	4631      	mov	r1, r6
 8004840:	4642      	mov	r2, r8
 8004842:	4628      	mov	r0, r5
 8004844:	47b8      	blx	r7
 8004846:	3001      	adds	r0, #1
 8004848:	d1c0      	bne.n	80047cc <_printf_float+0x2f4>
 800484a:	e6a0      	b.n	800458e <_printf_float+0xb6>
 800484c:	2301      	movs	r3, #1
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	920b      	str	r2, [sp, #44]	; 0x2c
 8004854:	47b8      	blx	r7
 8004856:	3001      	adds	r0, #1
 8004858:	f43f ae99 	beq.w	800458e <_printf_float+0xb6>
 800485c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800485e:	f10b 0b01 	add.w	fp, fp, #1
 8004862:	e7b9      	b.n	80047d8 <_printf_float+0x300>
 8004864:	4631      	mov	r1, r6
 8004866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	d1bf      	bne.n	80047f2 <_printf_float+0x31a>
 8004872:	e68c      	b.n	800458e <_printf_float+0xb6>
 8004874:	464b      	mov	r3, r9
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	eb08 020a 	add.w	r2, r8, sl
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	d1c2      	bne.n	800480a <_printf_float+0x332>
 8004884:	e683      	b.n	800458e <_printf_float+0xb6>
 8004886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004888:	2a01      	cmp	r2, #1
 800488a:	dc01      	bgt.n	8004890 <_printf_float+0x3b8>
 800488c:	07db      	lsls	r3, r3, #31
 800488e:	d539      	bpl.n	8004904 <_printf_float+0x42c>
 8004890:	2301      	movs	r3, #1
 8004892:	4642      	mov	r2, r8
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	f43f ae77 	beq.w	800458e <_printf_float+0xb6>
 80048a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a4:	4631      	mov	r1, r6
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	f43f ae6f 	beq.w	800458e <_printf_float+0xb6>
 80048b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
 80048b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80048bc:	f7fc f874 	bl	80009a8 <__aeabi_dcmpeq>
 80048c0:	b9d8      	cbnz	r0, 80048fa <_printf_float+0x422>
 80048c2:	f109 33ff 	add.w	r3, r9, #4294967295
 80048c6:	f108 0201 	add.w	r2, r8, #1
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	d10e      	bne.n	80048f2 <_printf_float+0x41a>
 80048d4:	e65b      	b.n	800458e <_printf_float+0xb6>
 80048d6:	2301      	movs	r3, #1
 80048d8:	464a      	mov	r2, r9
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	f43f ae54 	beq.w	800458e <_printf_float+0xb6>
 80048e6:	f108 0801 	add.w	r8, r8, #1
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	3b01      	subs	r3, #1
 80048ee:	4543      	cmp	r3, r8
 80048f0:	dcf1      	bgt.n	80048d6 <_printf_float+0x3fe>
 80048f2:	4653      	mov	r3, sl
 80048f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048f8:	e6de      	b.n	80046b8 <_printf_float+0x1e0>
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	f104 091a 	add.w	r9, r4, #26
 8004902:	e7f2      	b.n	80048ea <_printf_float+0x412>
 8004904:	2301      	movs	r3, #1
 8004906:	4642      	mov	r2, r8
 8004908:	e7df      	b.n	80048ca <_printf_float+0x3f2>
 800490a:	2301      	movs	r3, #1
 800490c:	464a      	mov	r2, r9
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f ae3a 	beq.w	800458e <_printf_float+0xb6>
 800491a:	f108 0801 	add.w	r8, r8, #1
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	4543      	cmp	r3, r8
 8004926:	dcf0      	bgt.n	800490a <_printf_float+0x432>
 8004928:	e6fb      	b.n	8004722 <_printf_float+0x24a>
 800492a:	f04f 0800 	mov.w	r8, #0
 800492e:	f104 0919 	add.w	r9, r4, #25
 8004932:	e7f4      	b.n	800491e <_printf_float+0x446>

08004934 <_printf_common>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	4616      	mov	r6, r2
 800493a:	4699      	mov	r9, r3
 800493c:	688a      	ldr	r2, [r1, #8]
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	4607      	mov	r7, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	bfb8      	it	lt
 8004946:	4613      	movlt	r3, r2
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800494e:	460c      	mov	r4, r1
 8004950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004954:	b10a      	cbz	r2, 800495a <_printf_common+0x26>
 8004956:	3301      	adds	r3, #1
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	0699      	lsls	r1, r3, #26
 800495e:	bf42      	ittt	mi
 8004960:	6833      	ldrmi	r3, [r6, #0]
 8004962:	3302      	addmi	r3, #2
 8004964:	6033      	strmi	r3, [r6, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	f015 0506 	ands.w	r5, r5, #6
 800496c:	d106      	bne.n	800497c <_printf_common+0x48>
 800496e:	f104 0a19 	add.w	sl, r4, #25
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	6832      	ldr	r2, [r6, #0]
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	42ab      	cmp	r3, r5
 800497a:	dc2b      	bgt.n	80049d4 <_printf_common+0xa0>
 800497c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004980:	1e13      	subs	r3, r2, #0
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	bf18      	it	ne
 8004986:	2301      	movne	r3, #1
 8004988:	0692      	lsls	r2, r2, #26
 800498a:	d430      	bmi.n	80049ee <_printf_common+0xba>
 800498c:	4649      	mov	r1, r9
 800498e:	4638      	mov	r0, r7
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d023      	beq.n	80049e2 <_printf_common+0xae>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	6922      	ldr	r2, [r4, #16]
 800499e:	f003 0306 	and.w	r3, r3, #6
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	bf14      	ite	ne
 80049a6:	2500      	movne	r5, #0
 80049a8:	6833      	ldreq	r3, [r6, #0]
 80049aa:	f04f 0600 	mov.w	r6, #0
 80049ae:	bf08      	it	eq
 80049b0:	68e5      	ldreq	r5, [r4, #12]
 80049b2:	f104 041a 	add.w	r4, r4, #26
 80049b6:	bf08      	it	eq
 80049b8:	1aed      	subeq	r5, r5, r3
 80049ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80049be:	bf08      	it	eq
 80049c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c4:	4293      	cmp	r3, r2
 80049c6:	bfc4      	itt	gt
 80049c8:	1a9b      	subgt	r3, r3, r2
 80049ca:	18ed      	addgt	r5, r5, r3
 80049cc:	42b5      	cmp	r5, r6
 80049ce:	d11a      	bne.n	8004a06 <_printf_common+0xd2>
 80049d0:	2000      	movs	r0, #0
 80049d2:	e008      	b.n	80049e6 <_printf_common+0xb2>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4652      	mov	r2, sl
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d103      	bne.n	80049ea <_printf_common+0xb6>
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ea:	3501      	adds	r5, #1
 80049ec:	e7c1      	b.n	8004972 <_printf_common+0x3e>
 80049ee:	2030      	movs	r0, #48	; 0x30
 80049f0:	18e1      	adds	r1, r4, r3
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fc:	4422      	add	r2, r4
 80049fe:	3302      	adds	r3, #2
 8004a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a04:	e7c2      	b.n	800498c <_printf_common+0x58>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4622      	mov	r2, r4
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	47c0      	blx	r8
 8004a10:	3001      	adds	r0, #1
 8004a12:	d0e6      	beq.n	80049e2 <_printf_common+0xae>
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7d9      	b.n	80049cc <_printf_common+0x98>

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	4691      	mov	r9, r2
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4680      	mov	r8, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	469a      	mov	sl, r3
 8004a28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	; 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d5 	beq.w	8004be4 <_printf_i+0x1cc>
 8004a3a:	2f58      	cmp	r7, #88	; 0x58
 8004a3c:	f000 80c1 	beq.w	8004bc2 <_printf_i+0x1aa>
 8004a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	; (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bcb 	.word	0x08004bcb
 8004a88:	08004af1 	.word	0x08004af1
 8004a8c:	08004b85 	.word	0x08004b85
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004bed 	.word	0x08004bed
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004af1 	.word	0x08004af1
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004b8d 	.word	0x08004b8d
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	602a      	str	r2, [r5, #0]
 8004ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a0      	b.n	8004c06 <_printf_i+0x1ee>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	0607      	lsls	r7, r0, #24
 8004aca:	f103 0104 	add.w	r1, r3, #4
 8004ace:	6029      	str	r1, [r5, #0]
 8004ad0:	d501      	bpl.n	8004ad6 <_printf_i+0xbe>
 8004ad2:	681e      	ldr	r6, [r3, #0]
 8004ad4:	e003      	b.n	8004ade <_printf_i+0xc6>
 8004ad6:	0646      	lsls	r6, r0, #25
 8004ad8:	d5fb      	bpl.n	8004ad2 <_printf_i+0xba>
 8004ada:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	da03      	bge.n	8004aea <_printf_i+0xd2>
 8004ae2:	232d      	movs	r3, #45	; 0x2d
 8004ae4:	4276      	negs	r6, r6
 8004ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aea:	230a      	movs	r3, #10
 8004aec:	4859      	ldr	r0, [pc, #356]	; (8004c54 <_printf_i+0x23c>)
 8004aee:	e012      	b.n	8004b16 <_printf_i+0xfe>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	6029      	str	r1, [r5, #0]
 8004af8:	0605      	lsls	r5, r0, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xe8>
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xee>
 8004b00:	0641      	lsls	r1, r0, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe4>
 8004b04:	881e      	ldrh	r6, [r3, #0]
 8004b06:	2f6f      	cmp	r7, #111	; 0x6f
 8004b08:	bf0c      	ite	eq
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	230a      	movne	r3, #10
 8004b0e:	4851      	ldr	r0, [pc, #324]	; (8004c54 <_printf_i+0x23c>)
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6865      	ldr	r5, [r4, #4]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	bfa8      	it	ge
 8004b1c:	6821      	ldrge	r1, [r4, #0]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	bfa4      	itt	ge
 8004b22:	f021 0104 	bicge.w	r1, r1, #4
 8004b26:	6021      	strge	r1, [r4, #0]
 8004b28:	b90e      	cbnz	r6, 8004b2e <_printf_i+0x116>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d04b      	beq.n	8004bc6 <_printf_i+0x1ae>
 8004b2e:	4615      	mov	r5, r2
 8004b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b34:	fb03 6711 	mls	r7, r3, r1, r6
 8004b38:	5dc7      	ldrb	r7, [r0, r7]
 8004b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b3e:	4637      	mov	r7, r6
 8004b40:	42bb      	cmp	r3, r7
 8004b42:	460e      	mov	r6, r1
 8004b44:	d9f4      	bls.n	8004b30 <_printf_i+0x118>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d10b      	bne.n	8004b62 <_printf_i+0x14a>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	07de      	lsls	r6, r3, #31
 8004b4e:	d508      	bpl.n	8004b62 <_printf_i+0x14a>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	6861      	ldr	r1, [r4, #4]
 8004b54:	4299      	cmp	r1, r3
 8004b56:	bfde      	ittt	le
 8004b58:	2330      	movle	r3, #48	; 0x30
 8004b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	6122      	str	r2, [r4, #16]
 8004b66:	464b      	mov	r3, r9
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f8cd a000 	str.w	sl, [sp]
 8004b70:	aa03      	add	r2, sp, #12
 8004b72:	f7ff fedf 	bl	8004934 <_printf_common>
 8004b76:	3001      	adds	r0, #1
 8004b78:	d14a      	bne.n	8004c10 <_printf_i+0x1f8>
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	b004      	add	sp, #16
 8004b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	f043 0320 	orr.w	r3, r3, #32
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	2778      	movs	r7, #120	; 0x78
 8004b8e:	4832      	ldr	r0, [pc, #200]	; (8004c58 <_printf_i+0x240>)
 8004b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	6829      	ldr	r1, [r5, #0]
 8004b98:	061f      	lsls	r7, r3, #24
 8004b9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b9e:	d402      	bmi.n	8004ba6 <_printf_i+0x18e>
 8004ba0:	065f      	lsls	r7, r3, #25
 8004ba2:	bf48      	it	mi
 8004ba4:	b2b6      	uxthmi	r6, r6
 8004ba6:	07df      	lsls	r7, r3, #31
 8004ba8:	bf48      	it	mi
 8004baa:	f043 0320 	orrmi.w	r3, r3, #32
 8004bae:	6029      	str	r1, [r5, #0]
 8004bb0:	bf48      	it	mi
 8004bb2:	6023      	strmi	r3, [r4, #0]
 8004bb4:	b91e      	cbnz	r6, 8004bbe <_printf_i+0x1a6>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f023 0320 	bic.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	e7a6      	b.n	8004b10 <_printf_i+0xf8>
 8004bc2:	4824      	ldr	r0, [pc, #144]	; (8004c54 <_printf_i+0x23c>)
 8004bc4:	e7e4      	b.n	8004b90 <_printf_i+0x178>
 8004bc6:	4615      	mov	r5, r2
 8004bc8:	e7bd      	b.n	8004b46 <_printf_i+0x12e>
 8004bca:	682b      	ldr	r3, [r5, #0]
 8004bcc:	6826      	ldr	r6, [r4, #0]
 8004bce:	1d18      	adds	r0, r3, #4
 8004bd0:	6961      	ldr	r1, [r4, #20]
 8004bd2:	6028      	str	r0, [r5, #0]
 8004bd4:	0635      	lsls	r5, r6, #24
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	d501      	bpl.n	8004bde <_printf_i+0x1c6>
 8004bda:	6019      	str	r1, [r3, #0]
 8004bdc:	e002      	b.n	8004be4 <_printf_i+0x1cc>
 8004bde:	0670      	lsls	r0, r6, #25
 8004be0:	d5fb      	bpl.n	8004bda <_printf_i+0x1c2>
 8004be2:	8019      	strh	r1, [r3, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	4615      	mov	r5, r2
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	e7bc      	b.n	8004b66 <_printf_i+0x14e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	1d1a      	adds	r2, r3, #4
 8004bf2:	602a      	str	r2, [r5, #0]
 8004bf4:	681d      	ldr	r5, [r3, #0]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 fa5a 	bl	80050b2 <memchr>
 8004bfe:	b108      	cbz	r0, 8004c04 <_printf_i+0x1ec>
 8004c00:	1b40      	subs	r0, r0, r5
 8004c02:	6060      	str	r0, [r4, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c0e:	e7aa      	b.n	8004b66 <_printf_i+0x14e>
 8004c10:	462a      	mov	r2, r5
 8004c12:	4649      	mov	r1, r9
 8004c14:	4640      	mov	r0, r8
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	47d0      	blx	sl
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0ad      	beq.n	8004b7a <_printf_i+0x162>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	079b      	lsls	r3, r3, #30
 8004c22:	d413      	bmi.n	8004c4c <_printf_i+0x234>
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	4298      	cmp	r0, r3
 8004c2a:	bfb8      	it	lt
 8004c2c:	4618      	movlt	r0, r3
 8004c2e:	e7a6      	b.n	8004b7e <_printf_i+0x166>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4632      	mov	r2, r6
 8004c34:	4649      	mov	r1, r9
 8004c36:	4640      	mov	r0, r8
 8004c38:	47d0      	blx	sl
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d09d      	beq.n	8004b7a <_printf_i+0x162>
 8004c3e:	3501      	adds	r5, #1
 8004c40:	68e3      	ldr	r3, [r4, #12]
 8004c42:	9903      	ldr	r1, [sp, #12]
 8004c44:	1a5b      	subs	r3, r3, r1
 8004c46:	42ab      	cmp	r3, r5
 8004c48:	dcf2      	bgt.n	8004c30 <_printf_i+0x218>
 8004c4a:	e7eb      	b.n	8004c24 <_printf_i+0x20c>
 8004c4c:	2500      	movs	r5, #0
 8004c4e:	f104 0619 	add.w	r6, r4, #25
 8004c52:	e7f5      	b.n	8004c40 <_printf_i+0x228>
 8004c54:	08006dc0 	.word	0x08006dc0
 8004c58:	08006dd1 	.word	0x08006dd1

08004c5c <std>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	e9c0 3300 	strd	r3, r3, [r0]
 8004c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c6a:	6083      	str	r3, [r0, #8]
 8004c6c:	8181      	strh	r1, [r0, #12]
 8004c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c70:	81c2      	strh	r2, [r0, #14]
 8004c72:	6183      	str	r3, [r0, #24]
 8004c74:	4619      	mov	r1, r3
 8004c76:	2208      	movs	r2, #8
 8004c78:	305c      	adds	r0, #92	; 0x5c
 8004c7a:	f000 f99b 	bl	8004fb4 <memset>
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <std+0x58>)
 8004c80:	6224      	str	r4, [r4, #32]
 8004c82:	6263      	str	r3, [r4, #36]	; 0x24
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <std+0x5c>)
 8004c86:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c88:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <std+0x60>)
 8004c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <std+0x64>)
 8004c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <std+0x68>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d006      	beq.n	8004ca4 <std+0x48>
 8004c96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c9a:	4294      	cmp	r4, r2
 8004c9c:	d002      	beq.n	8004ca4 <std+0x48>
 8004c9e:	33d0      	adds	r3, #208	; 0xd0
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d105      	bne.n	8004cb0 <std+0x54>
 8004ca4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cac:	f000 b9fe 	b.w	80050ac <__retarget_lock_init_recursive>
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08004e05 	.word	0x08004e05
 8004cb8:	08004e27 	.word	0x08004e27
 8004cbc:	08004e5f 	.word	0x08004e5f
 8004cc0:	08004e83 	.word	0x08004e83
 8004cc4:	200003ec 	.word	0x200003ec

08004cc8 <stdio_exit_handler>:
 8004cc8:	4a02      	ldr	r2, [pc, #8]	; (8004cd4 <stdio_exit_handler+0xc>)
 8004cca:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <stdio_exit_handler+0x10>)
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <stdio_exit_handler+0x14>)
 8004cce:	f000 b869 	b.w	8004da4 <_fwalk_sglue>
 8004cd2:	bf00      	nop
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	08006a19 	.word	0x08006a19
 8004cdc:	20000018 	.word	0x20000018

08004ce0 <cleanup_stdio>:
 8004ce0:	6841      	ldr	r1, [r0, #4]
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <cleanup_stdio+0x34>)
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4299      	cmp	r1, r3
 8004ce8:	4604      	mov	r4, r0
 8004cea:	d001      	beq.n	8004cf0 <cleanup_stdio+0x10>
 8004cec:	f001 fe94 	bl	8006a18 <_fflush_r>
 8004cf0:	68a1      	ldr	r1, [r4, #8]
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <cleanup_stdio+0x38>)
 8004cf4:	4299      	cmp	r1, r3
 8004cf6:	d002      	beq.n	8004cfe <cleanup_stdio+0x1e>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f001 fe8d 	bl	8006a18 <_fflush_r>
 8004cfe:	68e1      	ldr	r1, [r4, #12]
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <cleanup_stdio+0x3c>)
 8004d02:	4299      	cmp	r1, r3
 8004d04:	d004      	beq.n	8004d10 <cleanup_stdio+0x30>
 8004d06:	4620      	mov	r0, r4
 8004d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0c:	f001 be84 	b.w	8006a18 <_fflush_r>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	bf00      	nop
 8004d14:	200003ec 	.word	0x200003ec
 8004d18:	20000454 	.word	0x20000454
 8004d1c:	200004bc 	.word	0x200004bc

08004d20 <global_stdio_init.part.0>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <global_stdio_init.part.0+0x30>)
 8004d24:	4c0b      	ldr	r4, [pc, #44]	; (8004d54 <global_stdio_init.part.0+0x34>)
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <global_stdio_init.part.0+0x38>)
 8004d28:	4620      	mov	r0, r4
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f7ff ff94 	bl	8004c5c <std>
 8004d34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2109      	movs	r1, #9
 8004d3c:	f7ff ff8e 	bl	8004c5c <std>
 8004d40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d44:	2202      	movs	r2, #2
 8004d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	f7ff bf86 	b.w	8004c5c <std>
 8004d50:	20000524 	.word	0x20000524
 8004d54:	200003ec 	.word	0x200003ec
 8004d58:	08004cc9 	.word	0x08004cc9

08004d5c <__sfp_lock_acquire>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__sfp_lock_acquire+0x8>)
 8004d5e:	f000 b9a6 	b.w	80050ae <__retarget_lock_acquire_recursive>
 8004d62:	bf00      	nop
 8004d64:	2000052d 	.word	0x2000052d

08004d68 <__sfp_lock_release>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__sfp_lock_release+0x8>)
 8004d6a:	f000 b9a1 	b.w	80050b0 <__retarget_lock_release_recursive>
 8004d6e:	bf00      	nop
 8004d70:	2000052d 	.word	0x2000052d

08004d74 <__sinit>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	f7ff fff0 	bl	8004d5c <__sfp_lock_acquire>
 8004d7c:	6a23      	ldr	r3, [r4, #32]
 8004d7e:	b11b      	cbz	r3, 8004d88 <__sinit+0x14>
 8004d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d84:	f7ff bff0 	b.w	8004d68 <__sfp_lock_release>
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <__sinit+0x28>)
 8004d8a:	6223      	str	r3, [r4, #32]
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__sinit+0x2c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f5      	bne.n	8004d80 <__sinit+0xc>
 8004d94:	f7ff ffc4 	bl	8004d20 <global_stdio_init.part.0>
 8004d98:	e7f2      	b.n	8004d80 <__sinit+0xc>
 8004d9a:	bf00      	nop
 8004d9c:	08004ce1 	.word	0x08004ce1
 8004da0:	20000524 	.word	0x20000524

08004da4 <_fwalk_sglue>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4607      	mov	r7, r0
 8004daa:	4688      	mov	r8, r1
 8004dac:	4614      	mov	r4, r2
 8004dae:	2600      	movs	r6, #0
 8004db0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004db4:	f1b9 0901 	subs.w	r9, r9, #1
 8004db8:	d505      	bpl.n	8004dc6 <_fwalk_sglue+0x22>
 8004dba:	6824      	ldr	r4, [r4, #0]
 8004dbc:	2c00      	cmp	r4, #0
 8004dbe:	d1f7      	bne.n	8004db0 <_fwalk_sglue+0xc>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc6:	89ab      	ldrh	r3, [r5, #12]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d907      	bls.n	8004ddc <_fwalk_sglue+0x38>
 8004dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	d003      	beq.n	8004ddc <_fwalk_sglue+0x38>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	4306      	orrs	r6, r0
 8004ddc:	3568      	adds	r5, #104	; 0x68
 8004dde:	e7e9      	b.n	8004db4 <_fwalk_sglue+0x10>

08004de0 <iprintf>:
 8004de0:	b40f      	push	{r0, r1, r2, r3}
 8004de2:	b507      	push	{r0, r1, r2, lr}
 8004de4:	4906      	ldr	r1, [pc, #24]	; (8004e00 <iprintf+0x20>)
 8004de6:	ab04      	add	r3, sp, #16
 8004de8:	6808      	ldr	r0, [r1, #0]
 8004dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dee:	6881      	ldr	r1, [r0, #8]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	f001 fc75 	bl	80066e0 <_vfiprintf_r>
 8004df6:	b003      	add	sp, #12
 8004df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dfc:	b004      	add	sp, #16
 8004dfe:	4770      	bx	lr
 8004e00:	20000064 	.word	0x20000064

08004e04 <__sread>:
 8004e04:	b510      	push	{r4, lr}
 8004e06:	460c      	mov	r4, r1
 8004e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0c:	f000 f900 	bl	8005010 <_read_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	bfab      	itete	ge
 8004e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e16:	89a3      	ldrhlt	r3, [r4, #12]
 8004e18:	181b      	addge	r3, r3, r0
 8004e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e1e:	bfac      	ite	ge
 8004e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e22:	81a3      	strhlt	r3, [r4, #12]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <__swrite>:
 8004e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2a:	461f      	mov	r7, r3
 8004e2c:	898b      	ldrh	r3, [r1, #12]
 8004e2e:	4605      	mov	r5, r0
 8004e30:	05db      	lsls	r3, r3, #23
 8004e32:	460c      	mov	r4, r1
 8004e34:	4616      	mov	r6, r2
 8004e36:	d505      	bpl.n	8004e44 <__swrite+0x1e>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e40:	f000 f8d4 	bl	8004fec <_lseek_r>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	4632      	mov	r2, r6
 8004e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	463b      	mov	r3, r7
 8004e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	f000 b8eb 	b.w	8005034 <_write_r>

08004e5e <__sseek>:
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	460c      	mov	r4, r1
 8004e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e66:	f000 f8c1 	bl	8004fec <_lseek_r>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	bf15      	itete	ne
 8004e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e7a:	81a3      	strheq	r3, [r4, #12]
 8004e7c:	bf18      	it	ne
 8004e7e:	81a3      	strhne	r3, [r4, #12]
 8004e80:	bd10      	pop	{r4, pc}

08004e82 <__sclose>:
 8004e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e86:	f000 b8a1 	b.w	8004fcc <_close_r>

08004e8a <__swbuf_r>:
 8004e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	4614      	mov	r4, r2
 8004e90:	4605      	mov	r5, r0
 8004e92:	b118      	cbz	r0, 8004e9c <__swbuf_r+0x12>
 8004e94:	6a03      	ldr	r3, [r0, #32]
 8004e96:	b90b      	cbnz	r3, 8004e9c <__swbuf_r+0x12>
 8004e98:	f7ff ff6c 	bl	8004d74 <__sinit>
 8004e9c:	69a3      	ldr	r3, [r4, #24]
 8004e9e:	60a3      	str	r3, [r4, #8]
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	071a      	lsls	r2, r3, #28
 8004ea4:	d525      	bpl.n	8004ef2 <__swbuf_r+0x68>
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	b31b      	cbz	r3, 8004ef2 <__swbuf_r+0x68>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	6922      	ldr	r2, [r4, #16]
 8004eae:	b2f6      	uxtb	r6, r6
 8004eb0:	1a98      	subs	r0, r3, r2
 8004eb2:	6963      	ldr	r3, [r4, #20]
 8004eb4:	4637      	mov	r7, r6
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	dc04      	bgt.n	8004ec4 <__swbuf_r+0x3a>
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f001 fdab 	bl	8006a18 <_fflush_r>
 8004ec2:	b9e0      	cbnz	r0, 8004efe <__swbuf_r+0x74>
 8004ec4:	68a3      	ldr	r3, [r4, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	60a3      	str	r3, [r4, #8]
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	701e      	strb	r6, [r3, #0]
 8004ed2:	6962      	ldr	r2, [r4, #20]
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d004      	beq.n	8004ee4 <__swbuf_r+0x5a>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	07db      	lsls	r3, r3, #31
 8004ede:	d506      	bpl.n	8004eee <__swbuf_r+0x64>
 8004ee0:	2e0a      	cmp	r6, #10
 8004ee2:	d104      	bne.n	8004eee <__swbuf_r+0x64>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f001 fd96 	bl	8006a18 <_fflush_r>
 8004eec:	b938      	cbnz	r0, 8004efe <__swbuf_r+0x74>
 8004eee:	4638      	mov	r0, r7
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 f805 	bl	8004f04 <__swsetup_r>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0d5      	beq.n	8004eaa <__swbuf_r+0x20>
 8004efe:	f04f 37ff 	mov.w	r7, #4294967295
 8004f02:	e7f4      	b.n	8004eee <__swbuf_r+0x64>

08004f04 <__swsetup_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <__swsetup_r+0xac>)
 8004f08:	4605      	mov	r5, r0
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	b118      	cbz	r0, 8004f18 <__swsetup_r+0x14>
 8004f10:	6a03      	ldr	r3, [r0, #32]
 8004f12:	b90b      	cbnz	r3, 8004f18 <__swsetup_r+0x14>
 8004f14:	f7ff ff2e 	bl	8004d74 <__sinit>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f1e:	0718      	lsls	r0, r3, #28
 8004f20:	d422      	bmi.n	8004f68 <__swsetup_r+0x64>
 8004f22:	06d9      	lsls	r1, r3, #27
 8004f24:	d407      	bmi.n	8004f36 <__swsetup_r+0x32>
 8004f26:	2309      	movs	r3, #9
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	e034      	b.n	8004fa0 <__swsetup_r+0x9c>
 8004f36:	0758      	lsls	r0, r3, #29
 8004f38:	d512      	bpl.n	8004f60 <__swsetup_r+0x5c>
 8004f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f3c:	b141      	cbz	r1, 8004f50 <__swsetup_r+0x4c>
 8004f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f42:	4299      	cmp	r1, r3
 8004f44:	d002      	beq.n	8004f4c <__swsetup_r+0x48>
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 ff2e 	bl	8005da8 <_free_r>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	b94b      	cbnz	r3, 8004f80 <__swsetup_r+0x7c>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f76:	d003      	beq.n	8004f80 <__swsetup_r+0x7c>
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f001 fd99 	bl	8006ab2 <__smakebuf_r>
 8004f80:	89a0      	ldrh	r0, [r4, #12]
 8004f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f86:	f010 0301 	ands.w	r3, r0, #1
 8004f8a:	d00a      	beq.n	8004fa2 <__swsetup_r+0x9e>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6963      	ldr	r3, [r4, #20]
 8004f92:	425b      	negs	r3, r3
 8004f94:	61a3      	str	r3, [r4, #24]
 8004f96:	6923      	ldr	r3, [r4, #16]
 8004f98:	b943      	cbnz	r3, 8004fac <__swsetup_r+0xa8>
 8004f9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f9e:	d1c4      	bne.n	8004f2a <__swsetup_r+0x26>
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	0781      	lsls	r1, r0, #30
 8004fa4:	bf58      	it	pl
 8004fa6:	6963      	ldrpl	r3, [r4, #20]
 8004fa8:	60a3      	str	r3, [r4, #8]
 8004faa:	e7f4      	b.n	8004f96 <__swsetup_r+0x92>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7f7      	b.n	8004fa0 <__swsetup_r+0x9c>
 8004fb0:	20000064 	.word	0x20000064

08004fb4 <memset>:
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4402      	add	r2, r0
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d100      	bne.n	8004fbe <memset+0xa>
 8004fbc:	4770      	bx	lr
 8004fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc2:	e7f9      	b.n	8004fb8 <memset+0x4>

08004fc4 <_localeconv_r>:
 8004fc4:	4800      	ldr	r0, [pc, #0]	; (8004fc8 <_localeconv_r+0x4>)
 8004fc6:	4770      	bx	lr
 8004fc8:	20000158 	.word	0x20000158

08004fcc <_close_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4d05      	ldr	r5, [pc, #20]	; (8004fe8 <_close_r+0x1c>)
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7fc face 	bl	8001578 <_close>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_close_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_close_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20000528 	.word	0x20000528

08004fec <_lseek_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4d05      	ldr	r5, [pc, #20]	; (800500c <_lseek_r+0x20>)
 8004ff8:	602a      	str	r2, [r5, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f7fc fae0 	bl	80015c0 <_lseek>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_lseek_r+0x1e>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_lseek_r+0x1e>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	20000528 	.word	0x20000528

08005010 <_read_r>:
 8005010:	b538      	push	{r3, r4, r5, lr}
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	2200      	movs	r2, #0
 800501a:	4d05      	ldr	r5, [pc, #20]	; (8005030 <_read_r+0x20>)
 800501c:	602a      	str	r2, [r5, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	f7fc fa71 	bl	8001506 <_read>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_read_r+0x1e>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_read_r+0x1e>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000528 	.word	0x20000528

08005034 <_write_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	2200      	movs	r2, #0
 800503e:	4d05      	ldr	r5, [pc, #20]	; (8005054 <_write_r+0x20>)
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc fa7c 	bl	8001540 <_write>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_write_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_write_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000528 	.word	0x20000528

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000064 	.word	0x20000064

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	2600      	movs	r6, #0
 8005068:	4d0c      	ldr	r5, [pc, #48]	; (800509c <__libc_init_array+0x38>)
 800506a:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	f001 fe4a 	bl	8006d0c <_init>
 8005078:	2600      	movs	r6, #0
 800507a:	4d0a      	ldr	r5, [pc, #40]	; (80050a4 <__libc_init_array+0x40>)
 800507c:	4c0a      	ldr	r4, [pc, #40]	; (80050a8 <__libc_init_array+0x44>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	0800711c 	.word	0x0800711c
 80050a0:	0800711c 	.word	0x0800711c
 80050a4:	0800711c 	.word	0x0800711c
 80050a8:	08007120 	.word	0x08007120

080050ac <__retarget_lock_init_recursive>:
 80050ac:	4770      	bx	lr

080050ae <__retarget_lock_acquire_recursive>:
 80050ae:	4770      	bx	lr

080050b0 <__retarget_lock_release_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <memchr>:
 80050b2:	4603      	mov	r3, r0
 80050b4:	b510      	push	{r4, lr}
 80050b6:	b2c9      	uxtb	r1, r1
 80050b8:	4402      	add	r2, r0
 80050ba:	4293      	cmp	r3, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	d101      	bne.n	80050c4 <memchr+0x12>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e003      	b.n	80050cc <memchr+0x1a>
 80050c4:	7804      	ldrb	r4, [r0, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	428c      	cmp	r4, r1
 80050ca:	d1f6      	bne.n	80050ba <memchr+0x8>
 80050cc:	bd10      	pop	{r4, pc}

080050ce <quorem>:
 80050ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d2:	6903      	ldr	r3, [r0, #16]
 80050d4:	690c      	ldr	r4, [r1, #16]
 80050d6:	4607      	mov	r7, r0
 80050d8:	42a3      	cmp	r3, r4
 80050da:	db7f      	blt.n	80051dc <quorem+0x10e>
 80050dc:	3c01      	subs	r4, #1
 80050de:	f100 0514 	add.w	r5, r0, #20
 80050e2:	f101 0814 	add.w	r8, r1, #20
 80050e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80050f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050f4:	3301      	adds	r3, #1
 80050f6:	429a      	cmp	r2, r3
 80050f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80050fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005100:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005104:	d331      	bcc.n	800516a <quorem+0x9c>
 8005106:	f04f 0e00 	mov.w	lr, #0
 800510a:	4640      	mov	r0, r8
 800510c:	46ac      	mov	ip, r5
 800510e:	46f2      	mov	sl, lr
 8005110:	f850 2b04 	ldr.w	r2, [r0], #4
 8005114:	b293      	uxth	r3, r2
 8005116:	fb06 e303 	mla	r3, r6, r3, lr
 800511a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800511e:	0c1a      	lsrs	r2, r3, #16
 8005120:	b29b      	uxth	r3, r3
 8005122:	fb06 220e 	mla	r2, r6, lr, r2
 8005126:	ebaa 0303 	sub.w	r3, sl, r3
 800512a:	f8dc a000 	ldr.w	sl, [ip]
 800512e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005132:	fa1f fa8a 	uxth.w	sl, sl
 8005136:	4453      	add	r3, sl
 8005138:	f8dc a000 	ldr.w	sl, [ip]
 800513c:	b292      	uxth	r2, r2
 800513e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005142:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800514c:	4581      	cmp	r9, r0
 800514e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005152:	f84c 3b04 	str.w	r3, [ip], #4
 8005156:	d2db      	bcs.n	8005110 <quorem+0x42>
 8005158:	f855 300b 	ldr.w	r3, [r5, fp]
 800515c:	b92b      	cbnz	r3, 800516a <quorem+0x9c>
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	3b04      	subs	r3, #4
 8005162:	429d      	cmp	r5, r3
 8005164:	461a      	mov	r2, r3
 8005166:	d32d      	bcc.n	80051c4 <quorem+0xf6>
 8005168:	613c      	str	r4, [r7, #16]
 800516a:	4638      	mov	r0, r7
 800516c:	f001 f992 	bl	8006494 <__mcmp>
 8005170:	2800      	cmp	r0, #0
 8005172:	db23      	blt.n	80051bc <quorem+0xee>
 8005174:	4629      	mov	r1, r5
 8005176:	2000      	movs	r0, #0
 8005178:	3601      	adds	r6, #1
 800517a:	f858 2b04 	ldr.w	r2, [r8], #4
 800517e:	f8d1 c000 	ldr.w	ip, [r1]
 8005182:	b293      	uxth	r3, r2
 8005184:	1ac3      	subs	r3, r0, r3
 8005186:	0c12      	lsrs	r2, r2, #16
 8005188:	fa1f f08c 	uxth.w	r0, ip
 800518c:	4403      	add	r3, r0
 800518e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800519c:	45c1      	cmp	r9, r8
 800519e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051a2:	f841 3b04 	str.w	r3, [r1], #4
 80051a6:	d2e8      	bcs.n	800517a <quorem+0xac>
 80051a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051b0:	b922      	cbnz	r2, 80051bc <quorem+0xee>
 80051b2:	3b04      	subs	r3, #4
 80051b4:	429d      	cmp	r5, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	d30a      	bcc.n	80051d0 <quorem+0x102>
 80051ba:	613c      	str	r4, [r7, #16]
 80051bc:	4630      	mov	r0, r6
 80051be:	b003      	add	sp, #12
 80051c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	3b04      	subs	r3, #4
 80051c8:	2a00      	cmp	r2, #0
 80051ca:	d1cd      	bne.n	8005168 <quorem+0x9a>
 80051cc:	3c01      	subs	r4, #1
 80051ce:	e7c8      	b.n	8005162 <quorem+0x94>
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	3b04      	subs	r3, #4
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	d1f0      	bne.n	80051ba <quorem+0xec>
 80051d8:	3c01      	subs	r4, #1
 80051da:	e7eb      	b.n	80051b4 <quorem+0xe6>
 80051dc:	2000      	movs	r0, #0
 80051de:	e7ee      	b.n	80051be <quorem+0xf0>

080051e0 <_dtoa_r>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	4616      	mov	r6, r2
 80051e6:	461f      	mov	r7, r3
 80051e8:	69c4      	ldr	r4, [r0, #28]
 80051ea:	b099      	sub	sp, #100	; 0x64
 80051ec:	4605      	mov	r5, r0
 80051ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80051f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80051f6:	b974      	cbnz	r4, 8005216 <_dtoa_r+0x36>
 80051f8:	2010      	movs	r0, #16
 80051fa:	f000 fe1d 	bl	8005e38 <malloc>
 80051fe:	4602      	mov	r2, r0
 8005200:	61e8      	str	r0, [r5, #28]
 8005202:	b920      	cbnz	r0, 800520e <_dtoa_r+0x2e>
 8005204:	21ef      	movs	r1, #239	; 0xef
 8005206:	4bac      	ldr	r3, [pc, #688]	; (80054b8 <_dtoa_r+0x2d8>)
 8005208:	48ac      	ldr	r0, [pc, #688]	; (80054bc <_dtoa_r+0x2dc>)
 800520a:	f001 fccf 	bl	8006bac <__assert_func>
 800520e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005212:	6004      	str	r4, [r0, #0]
 8005214:	60c4      	str	r4, [r0, #12]
 8005216:	69eb      	ldr	r3, [r5, #28]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	b151      	cbz	r1, 8005232 <_dtoa_r+0x52>
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	2301      	movs	r3, #1
 8005220:	4093      	lsls	r3, r2
 8005222:	604a      	str	r2, [r1, #4]
 8005224:	608b      	str	r3, [r1, #8]
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fefa 	bl	8006020 <_Bfree>
 800522c:	2200      	movs	r2, #0
 800522e:	69eb      	ldr	r3, [r5, #28]
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	1e3b      	subs	r3, r7, #0
 8005234:	bfaf      	iteee	ge
 8005236:	2300      	movge	r3, #0
 8005238:	2201      	movlt	r2, #1
 800523a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800523e:	9305      	strlt	r3, [sp, #20]
 8005240:	bfa8      	it	ge
 8005242:	f8c8 3000 	strge.w	r3, [r8]
 8005246:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800524a:	4b9d      	ldr	r3, [pc, #628]	; (80054c0 <_dtoa_r+0x2e0>)
 800524c:	bfb8      	it	lt
 800524e:	f8c8 2000 	strlt.w	r2, [r8]
 8005252:	ea33 0309 	bics.w	r3, r3, r9
 8005256:	d119      	bne.n	800528c <_dtoa_r+0xac>
 8005258:	f242 730f 	movw	r3, #9999	; 0x270f
 800525c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005264:	4333      	orrs	r3, r6
 8005266:	f000 8589 	beq.w	8005d7c <_dtoa_r+0xb9c>
 800526a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800526c:	b953      	cbnz	r3, 8005284 <_dtoa_r+0xa4>
 800526e:	4b95      	ldr	r3, [pc, #596]	; (80054c4 <_dtoa_r+0x2e4>)
 8005270:	e023      	b.n	80052ba <_dtoa_r+0xda>
 8005272:	4b95      	ldr	r3, [pc, #596]	; (80054c8 <_dtoa_r+0x2e8>)
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	3308      	adds	r3, #8
 8005278:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	9803      	ldr	r0, [sp, #12]
 800527e:	b019      	add	sp, #100	; 0x64
 8005280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005284:	4b8f      	ldr	r3, [pc, #572]	; (80054c4 <_dtoa_r+0x2e4>)
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	3303      	adds	r3, #3
 800528a:	e7f5      	b.n	8005278 <_dtoa_r+0x98>
 800528c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005290:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	2300      	movs	r3, #0
 800529c:	f7fb fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80052a0:	4680      	mov	r8, r0
 80052a2:	b160      	cbz	r0, 80052be <_dtoa_r+0xde>
 80052a4:	2301      	movs	r3, #1
 80052a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8562 	beq.w	8005d76 <_dtoa_r+0xb96>
 80052b2:	4b86      	ldr	r3, [pc, #536]	; (80054cc <_dtoa_r+0x2ec>)
 80052b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	e7de      	b.n	800527c <_dtoa_r+0x9c>
 80052be:	ab16      	add	r3, sp, #88	; 0x58
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	ab17      	add	r3, sp, #92	; 0x5c
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4628      	mov	r0, r5
 80052c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80052cc:	f001 f98a 	bl	80065e4 <__d2b>
 80052d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80052d4:	4682      	mov	sl, r0
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d07e      	beq.n	80053d8 <_dtoa_r+0x1f8>
 80052da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80052e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052e8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80052ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80052f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80052f4:	4619      	mov	r1, r3
 80052f6:	2200      	movs	r2, #0
 80052f8:	4b75      	ldr	r3, [pc, #468]	; (80054d0 <_dtoa_r+0x2f0>)
 80052fa:	f7fa ff35 	bl	8000168 <__aeabi_dsub>
 80052fe:	a368      	add	r3, pc, #416	; (adr r3, 80054a0 <_dtoa_r+0x2c0>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f7fb f8e8 	bl	80004d8 <__aeabi_dmul>
 8005308:	a367      	add	r3, pc, #412	; (adr r3, 80054a8 <_dtoa_r+0x2c8>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fa ff2d 	bl	800016c <__adddf3>
 8005312:	4606      	mov	r6, r0
 8005314:	4620      	mov	r0, r4
 8005316:	460f      	mov	r7, r1
 8005318:	f7fb f874 	bl	8000404 <__aeabi_i2d>
 800531c:	a364      	add	r3, pc, #400	; (adr r3, 80054b0 <_dtoa_r+0x2d0>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f7fb f8d9 	bl	80004d8 <__aeabi_dmul>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fa ff1d 	bl	800016c <__adddf3>
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	f7fb fb7f 	bl	8000a38 <__aeabi_d2iz>
 800533a:	2200      	movs	r2, #0
 800533c:	4683      	mov	fp, r0
 800533e:	2300      	movs	r3, #0
 8005340:	4630      	mov	r0, r6
 8005342:	4639      	mov	r1, r7
 8005344:	f7fb fb3a 	bl	80009bc <__aeabi_dcmplt>
 8005348:	b148      	cbz	r0, 800535e <_dtoa_r+0x17e>
 800534a:	4658      	mov	r0, fp
 800534c:	f7fb f85a 	bl	8000404 <__aeabi_i2d>
 8005350:	4632      	mov	r2, r6
 8005352:	463b      	mov	r3, r7
 8005354:	f7fb fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8005358:	b908      	cbnz	r0, 800535e <_dtoa_r+0x17e>
 800535a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800535e:	f1bb 0f16 	cmp.w	fp, #22
 8005362:	d857      	bhi.n	8005414 <_dtoa_r+0x234>
 8005364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005368:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <_dtoa_r+0x2f4>)
 800536a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f7fb fb23 	bl	80009bc <__aeabi_dcmplt>
 8005376:	2800      	cmp	r0, #0
 8005378:	d04e      	beq.n	8005418 <_dtoa_r+0x238>
 800537a:	2300      	movs	r3, #0
 800537c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005380:	930f      	str	r3, [sp, #60]	; 0x3c
 8005382:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005384:	1b1b      	subs	r3, r3, r4
 8005386:	1e5a      	subs	r2, r3, #1
 8005388:	bf46      	itte	mi
 800538a:	f1c3 0901 	rsbmi	r9, r3, #1
 800538e:	2300      	movmi	r3, #0
 8005390:	f04f 0900 	movpl.w	r9, #0
 8005394:	9209      	str	r2, [sp, #36]	; 0x24
 8005396:	bf48      	it	mi
 8005398:	9309      	strmi	r3, [sp, #36]	; 0x24
 800539a:	f1bb 0f00 	cmp.w	fp, #0
 800539e:	db3d      	blt.n	800541c <_dtoa_r+0x23c>
 80053a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80053a6:	445b      	add	r3, fp
 80053a8:	9309      	str	r3, [sp, #36]	; 0x24
 80053aa:	2300      	movs	r3, #0
 80053ac:	930a      	str	r3, [sp, #40]	; 0x28
 80053ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d867      	bhi.n	8005484 <_dtoa_r+0x2a4>
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	bfc4      	itt	gt
 80053b8:	3b04      	subgt	r3, #4
 80053ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80053bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053be:	bfc8      	it	gt
 80053c0:	2400      	movgt	r4, #0
 80053c2:	f1a3 0302 	sub.w	r3, r3, #2
 80053c6:	bfd8      	it	le
 80053c8:	2401      	movle	r4, #1
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	f200 8086 	bhi.w	80054dc <_dtoa_r+0x2fc>
 80053d0:	e8df f003 	tbb	[pc, r3]
 80053d4:	5637392c 	.word	0x5637392c
 80053d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80053dc:	441c      	add	r4, r3
 80053de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	bfc1      	itttt	gt
 80053e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80053ea:	fa09 f903 	lslgt.w	r9, r9, r3
 80053ee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80053f2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80053f6:	bfd6      	itet	le
 80053f8:	f1c3 0320 	rsble	r3, r3, #32
 80053fc:	ea49 0003 	orrgt.w	r0, r9, r3
 8005400:	fa06 f003 	lslle.w	r0, r6, r3
 8005404:	f7fa ffee 	bl	80003e4 <__aeabi_ui2d>
 8005408:	2201      	movs	r2, #1
 800540a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800540e:	3c01      	subs	r4, #1
 8005410:	9213      	str	r2, [sp, #76]	; 0x4c
 8005412:	e76f      	b.n	80052f4 <_dtoa_r+0x114>
 8005414:	2301      	movs	r3, #1
 8005416:	e7b3      	b.n	8005380 <_dtoa_r+0x1a0>
 8005418:	900f      	str	r0, [sp, #60]	; 0x3c
 800541a:	e7b2      	b.n	8005382 <_dtoa_r+0x1a2>
 800541c:	f1cb 0300 	rsb	r3, fp, #0
 8005420:	930a      	str	r3, [sp, #40]	; 0x28
 8005422:	2300      	movs	r3, #0
 8005424:	eba9 090b 	sub.w	r9, r9, fp
 8005428:	930e      	str	r3, [sp, #56]	; 0x38
 800542a:	e7c0      	b.n	80053ae <_dtoa_r+0x1ce>
 800542c:	2300      	movs	r3, #0
 800542e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005430:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005432:	2b00      	cmp	r3, #0
 8005434:	dc55      	bgt.n	80054e2 <_dtoa_r+0x302>
 8005436:	2301      	movs	r3, #1
 8005438:	461a      	mov	r2, r3
 800543a:	9306      	str	r3, [sp, #24]
 800543c:	9308      	str	r3, [sp, #32]
 800543e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005440:	e00b      	b.n	800545a <_dtoa_r+0x27a>
 8005442:	2301      	movs	r3, #1
 8005444:	e7f3      	b.n	800542e <_dtoa_r+0x24e>
 8005446:	2300      	movs	r3, #0
 8005448:	930b      	str	r3, [sp, #44]	; 0x2c
 800544a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800544c:	445b      	add	r3, fp
 800544e:	9306      	str	r3, [sp, #24]
 8005450:	3301      	adds	r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	9308      	str	r3, [sp, #32]
 8005456:	bfb8      	it	lt
 8005458:	2301      	movlt	r3, #1
 800545a:	2100      	movs	r1, #0
 800545c:	2204      	movs	r2, #4
 800545e:	69e8      	ldr	r0, [r5, #28]
 8005460:	f102 0614 	add.w	r6, r2, #20
 8005464:	429e      	cmp	r6, r3
 8005466:	d940      	bls.n	80054ea <_dtoa_r+0x30a>
 8005468:	6041      	str	r1, [r0, #4]
 800546a:	4628      	mov	r0, r5
 800546c:	f000 fd98 	bl	8005fa0 <_Balloc>
 8005470:	9003      	str	r0, [sp, #12]
 8005472:	2800      	cmp	r0, #0
 8005474:	d13c      	bne.n	80054f0 <_dtoa_r+0x310>
 8005476:	4602      	mov	r2, r0
 8005478:	f240 11af 	movw	r1, #431	; 0x1af
 800547c:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <_dtoa_r+0x2f8>)
 800547e:	e6c3      	b.n	8005208 <_dtoa_r+0x28>
 8005480:	2301      	movs	r3, #1
 8005482:	e7e1      	b.n	8005448 <_dtoa_r+0x268>
 8005484:	2401      	movs	r4, #1
 8005486:	2300      	movs	r3, #0
 8005488:	940b      	str	r4, [sp, #44]	; 0x2c
 800548a:	9322      	str	r3, [sp, #136]	; 0x88
 800548c:	f04f 33ff 	mov.w	r3, #4294967295
 8005490:	2200      	movs	r2, #0
 8005492:	9306      	str	r3, [sp, #24]
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	2312      	movs	r3, #18
 8005498:	e7d1      	b.n	800543e <_dtoa_r+0x25e>
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w
 80054a0:	636f4361 	.word	0x636f4361
 80054a4:	3fd287a7 	.word	0x3fd287a7
 80054a8:	8b60c8b3 	.word	0x8b60c8b3
 80054ac:	3fc68a28 	.word	0x3fc68a28
 80054b0:	509f79fb 	.word	0x509f79fb
 80054b4:	3fd34413 	.word	0x3fd34413
 80054b8:	08006def 	.word	0x08006def
 80054bc:	08006e06 	.word	0x08006e06
 80054c0:	7ff00000 	.word	0x7ff00000
 80054c4:	08006deb 	.word	0x08006deb
 80054c8:	08006de2 	.word	0x08006de2
 80054cc:	08006dbf 	.word	0x08006dbf
 80054d0:	3ff80000 	.word	0x3ff80000
 80054d4:	08006ef0 	.word	0x08006ef0
 80054d8:	08006e5e 	.word	0x08006e5e
 80054dc:	2301      	movs	r3, #1
 80054de:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e0:	e7d4      	b.n	800548c <_dtoa_r+0x2ac>
 80054e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054e4:	9306      	str	r3, [sp, #24]
 80054e6:	9308      	str	r3, [sp, #32]
 80054e8:	e7b7      	b.n	800545a <_dtoa_r+0x27a>
 80054ea:	3101      	adds	r1, #1
 80054ec:	0052      	lsls	r2, r2, #1
 80054ee:	e7b7      	b.n	8005460 <_dtoa_r+0x280>
 80054f0:	69eb      	ldr	r3, [r5, #28]
 80054f2:	9a03      	ldr	r2, [sp, #12]
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	9b08      	ldr	r3, [sp, #32]
 80054f8:	2b0e      	cmp	r3, #14
 80054fa:	f200 80a8 	bhi.w	800564e <_dtoa_r+0x46e>
 80054fe:	2c00      	cmp	r4, #0
 8005500:	f000 80a5 	beq.w	800564e <_dtoa_r+0x46e>
 8005504:	f1bb 0f00 	cmp.w	fp, #0
 8005508:	dd34      	ble.n	8005574 <_dtoa_r+0x394>
 800550a:	4b9a      	ldr	r3, [pc, #616]	; (8005774 <_dtoa_r+0x594>)
 800550c:	f00b 020f 	and.w	r2, fp, #15
 8005510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005514:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800551c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005520:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005524:	d016      	beq.n	8005554 <_dtoa_r+0x374>
 8005526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800552a:	4b93      	ldr	r3, [pc, #588]	; (8005778 <_dtoa_r+0x598>)
 800552c:	2703      	movs	r7, #3
 800552e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005532:	f7fb f8fb 	bl	800072c <__aeabi_ddiv>
 8005536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800553a:	f004 040f 	and.w	r4, r4, #15
 800553e:	4e8e      	ldr	r6, [pc, #568]	; (8005778 <_dtoa_r+0x598>)
 8005540:	b954      	cbnz	r4, 8005558 <_dtoa_r+0x378>
 8005542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554a:	f7fb f8ef 	bl	800072c <__aeabi_ddiv>
 800554e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005552:	e029      	b.n	80055a8 <_dtoa_r+0x3c8>
 8005554:	2702      	movs	r7, #2
 8005556:	e7f2      	b.n	800553e <_dtoa_r+0x35e>
 8005558:	07e1      	lsls	r1, r4, #31
 800555a:	d508      	bpl.n	800556e <_dtoa_r+0x38e>
 800555c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005560:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556c:	3701      	adds	r7, #1
 800556e:	1064      	asrs	r4, r4, #1
 8005570:	3608      	adds	r6, #8
 8005572:	e7e5      	b.n	8005540 <_dtoa_r+0x360>
 8005574:	f000 80a5 	beq.w	80056c2 <_dtoa_r+0x4e2>
 8005578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800557c:	f1cb 0400 	rsb	r4, fp, #0
 8005580:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <_dtoa_r+0x594>)
 8005582:	f004 020f 	and.w	r2, r4, #15
 8005586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa ffa3 	bl	80004d8 <__aeabi_dmul>
 8005592:	2702      	movs	r7, #2
 8005594:	2300      	movs	r3, #0
 8005596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800559a:	4e77      	ldr	r6, [pc, #476]	; (8005778 <_dtoa_r+0x598>)
 800559c:	1124      	asrs	r4, r4, #4
 800559e:	2c00      	cmp	r4, #0
 80055a0:	f040 8084 	bne.w	80056ac <_dtoa_r+0x4cc>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1d2      	bne.n	800554e <_dtoa_r+0x36e>
 80055a8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8087 	beq.w	80056c6 <_dtoa_r+0x4e6>
 80055b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055bc:	2200      	movs	r2, #0
 80055be:	4b6f      	ldr	r3, [pc, #444]	; (800577c <_dtoa_r+0x59c>)
 80055c0:	f7fb f9fc 	bl	80009bc <__aeabi_dcmplt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d07e      	beq.n	80056c6 <_dtoa_r+0x4e6>
 80055c8:	9b08      	ldr	r3, [sp, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d07b      	beq.n	80056c6 <_dtoa_r+0x4e6>
 80055ce:	9b06      	ldr	r3, [sp, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dd38      	ble.n	8005646 <_dtoa_r+0x466>
 80055d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055d8:	2200      	movs	r2, #0
 80055da:	4b69      	ldr	r3, [pc, #420]	; (8005780 <_dtoa_r+0x5a0>)
 80055dc:	f7fa ff7c 	bl	80004d8 <__aeabi_dmul>
 80055e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055e4:	9c06      	ldr	r4, [sp, #24]
 80055e6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80055ea:	3701      	adds	r7, #1
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7fa ff09 	bl	8000404 <__aeabi_i2d>
 80055f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f6:	f7fa ff6f 	bl	80004d8 <__aeabi_dmul>
 80055fa:	2200      	movs	r2, #0
 80055fc:	4b61      	ldr	r3, [pc, #388]	; (8005784 <_dtoa_r+0x5a4>)
 80055fe:	f7fa fdb5 	bl	800016c <__adddf3>
 8005602:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800560a:	9611      	str	r6, [sp, #68]	; 0x44
 800560c:	2c00      	cmp	r4, #0
 800560e:	d15d      	bne.n	80056cc <_dtoa_r+0x4ec>
 8005610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005614:	2200      	movs	r2, #0
 8005616:	4b5c      	ldr	r3, [pc, #368]	; (8005788 <_dtoa_r+0x5a8>)
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_dsub>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005624:	4633      	mov	r3, r6
 8005626:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005628:	f7fb f9e6 	bl	80009f8 <__aeabi_dcmpgt>
 800562c:	2800      	cmp	r0, #0
 800562e:	f040 8295 	bne.w	8005b5c <_dtoa_r+0x97c>
 8005632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005636:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005638:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800563c:	f7fb f9be 	bl	80009bc <__aeabi_dcmplt>
 8005640:	2800      	cmp	r0, #0
 8005642:	f040 8289 	bne.w	8005b58 <_dtoa_r+0x978>
 8005646:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800564a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800564e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005650:	2b00      	cmp	r3, #0
 8005652:	f2c0 8151 	blt.w	80058f8 <_dtoa_r+0x718>
 8005656:	f1bb 0f0e 	cmp.w	fp, #14
 800565a:	f300 814d 	bgt.w	80058f8 <_dtoa_r+0x718>
 800565e:	4b45      	ldr	r3, [pc, #276]	; (8005774 <_dtoa_r+0x594>)
 8005660:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005664:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005668:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800566c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800566e:	2b00      	cmp	r3, #0
 8005670:	f280 80da 	bge.w	8005828 <_dtoa_r+0x648>
 8005674:	9b08      	ldr	r3, [sp, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f300 80d6 	bgt.w	8005828 <_dtoa_r+0x648>
 800567c:	f040 826b 	bne.w	8005b56 <_dtoa_r+0x976>
 8005680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005684:	2200      	movs	r2, #0
 8005686:	4b40      	ldr	r3, [pc, #256]	; (8005788 <_dtoa_r+0x5a8>)
 8005688:	f7fa ff26 	bl	80004d8 <__aeabi_dmul>
 800568c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005690:	f7fb f9a8 	bl	80009e4 <__aeabi_dcmpge>
 8005694:	9c08      	ldr	r4, [sp, #32]
 8005696:	4626      	mov	r6, r4
 8005698:	2800      	cmp	r0, #0
 800569a:	f040 8241 	bne.w	8005b20 <_dtoa_r+0x940>
 800569e:	2331      	movs	r3, #49	; 0x31
 80056a0:	9f03      	ldr	r7, [sp, #12]
 80056a2:	f10b 0b01 	add.w	fp, fp, #1
 80056a6:	f807 3b01 	strb.w	r3, [r7], #1
 80056aa:	e23d      	b.n	8005b28 <_dtoa_r+0x948>
 80056ac:	07e2      	lsls	r2, r4, #31
 80056ae:	d505      	bpl.n	80056bc <_dtoa_r+0x4dc>
 80056b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056b4:	f7fa ff10 	bl	80004d8 <__aeabi_dmul>
 80056b8:	2301      	movs	r3, #1
 80056ba:	3701      	adds	r7, #1
 80056bc:	1064      	asrs	r4, r4, #1
 80056be:	3608      	adds	r6, #8
 80056c0:	e76d      	b.n	800559e <_dtoa_r+0x3be>
 80056c2:	2702      	movs	r7, #2
 80056c4:	e770      	b.n	80055a8 <_dtoa_r+0x3c8>
 80056c6:	46d8      	mov	r8, fp
 80056c8:	9c08      	ldr	r4, [sp, #32]
 80056ca:	e78f      	b.n	80055ec <_dtoa_r+0x40c>
 80056cc:	9903      	ldr	r1, [sp, #12]
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <_dtoa_r+0x594>)
 80056d0:	4421      	add	r1, r4
 80056d2:	9112      	str	r1, [sp, #72]	; 0x48
 80056d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056da:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d054      	beq.n	8005790 <_dtoa_r+0x5b0>
 80056e6:	2000      	movs	r0, #0
 80056e8:	4928      	ldr	r1, [pc, #160]	; (800578c <_dtoa_r+0x5ac>)
 80056ea:	f7fb f81f 	bl	800072c <__aeabi_ddiv>
 80056ee:	463b      	mov	r3, r7
 80056f0:	4632      	mov	r2, r6
 80056f2:	f7fa fd39 	bl	8000168 <__aeabi_dsub>
 80056f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056fa:	9f03      	ldr	r7, [sp, #12]
 80056fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005700:	f7fb f99a 	bl	8000a38 <__aeabi_d2iz>
 8005704:	4604      	mov	r4, r0
 8005706:	f7fa fe7d 	bl	8000404 <__aeabi_i2d>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005712:	f7fa fd29 	bl	8000168 <__aeabi_dsub>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	3430      	adds	r4, #48	; 0x30
 800571c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005720:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005724:	f807 4b01 	strb.w	r4, [r7], #1
 8005728:	f7fb f948 	bl	80009bc <__aeabi_dcmplt>
 800572c:	2800      	cmp	r0, #0
 800572e:	d173      	bne.n	8005818 <_dtoa_r+0x638>
 8005730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005734:	2000      	movs	r0, #0
 8005736:	4911      	ldr	r1, [pc, #68]	; (800577c <_dtoa_r+0x59c>)
 8005738:	f7fa fd16 	bl	8000168 <__aeabi_dsub>
 800573c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005740:	f7fb f93c 	bl	80009bc <__aeabi_dcmplt>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 80b6 	bne.w	80058b6 <_dtoa_r+0x6d6>
 800574a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800574c:	429f      	cmp	r7, r3
 800574e:	f43f af7a 	beq.w	8005646 <_dtoa_r+0x466>
 8005752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005756:	2200      	movs	r2, #0
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <_dtoa_r+0x5a0>)
 800575a:	f7fa febd 	bl	80004d8 <__aeabi_dmul>
 800575e:	2200      	movs	r2, #0
 8005760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <_dtoa_r+0x5a0>)
 800576a:	f7fa feb5 	bl	80004d8 <__aeabi_dmul>
 800576e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005772:	e7c3      	b.n	80056fc <_dtoa_r+0x51c>
 8005774:	08006ef0 	.word	0x08006ef0
 8005778:	08006ec8 	.word	0x08006ec8
 800577c:	3ff00000 	.word	0x3ff00000
 8005780:	40240000 	.word	0x40240000
 8005784:	401c0000 	.word	0x401c0000
 8005788:	40140000 	.word	0x40140000
 800578c:	3fe00000 	.word	0x3fe00000
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fea0 	bl	80004d8 <__aeabi_dmul>
 8005798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800579a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800579e:	9c03      	ldr	r4, [sp, #12]
 80057a0:	9314      	str	r3, [sp, #80]	; 0x50
 80057a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057a6:	f7fb f947 	bl	8000a38 <__aeabi_d2iz>
 80057aa:	9015      	str	r0, [sp, #84]	; 0x54
 80057ac:	f7fa fe2a 	bl	8000404 <__aeabi_i2d>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b8:	f7fa fcd6 	bl	8000168 <__aeabi_dsub>
 80057bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057be:	4606      	mov	r6, r0
 80057c0:	3330      	adds	r3, #48	; 0x30
 80057c2:	f804 3b01 	strb.w	r3, [r4], #1
 80057c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057c8:	460f      	mov	r7, r1
 80057ca:	429c      	cmp	r4, r3
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	d124      	bne.n	800581c <_dtoa_r+0x63c>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057d6:	4baf      	ldr	r3, [pc, #700]	; (8005a94 <_dtoa_r+0x8b4>)
 80057d8:	f7fa fcc8 	bl	800016c <__adddf3>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4630      	mov	r0, r6
 80057e2:	4639      	mov	r1, r7
 80057e4:	f7fb f908 	bl	80009f8 <__aeabi_dcmpgt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d163      	bne.n	80058b4 <_dtoa_r+0x6d4>
 80057ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057f0:	2000      	movs	r0, #0
 80057f2:	49a8      	ldr	r1, [pc, #672]	; (8005a94 <_dtoa_r+0x8b4>)
 80057f4:	f7fa fcb8 	bl	8000168 <__aeabi_dsub>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f8dc 	bl	80009bc <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f43f af1e 	beq.w	8005646 <_dtoa_r+0x466>
 800580a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800580c:	1e7b      	subs	r3, r7, #1
 800580e:	9314      	str	r3, [sp, #80]	; 0x50
 8005810:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d0f8      	beq.n	800580a <_dtoa_r+0x62a>
 8005818:	46c3      	mov	fp, r8
 800581a:	e03b      	b.n	8005894 <_dtoa_r+0x6b4>
 800581c:	4b9e      	ldr	r3, [pc, #632]	; (8005a98 <_dtoa_r+0x8b8>)
 800581e:	f7fa fe5b 	bl	80004d8 <__aeabi_dmul>
 8005822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005826:	e7bc      	b.n	80057a2 <_dtoa_r+0x5c2>
 8005828:	9f03      	ldr	r7, [sp, #12]
 800582a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800582e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005832:	4640      	mov	r0, r8
 8005834:	4649      	mov	r1, r9
 8005836:	f7fa ff79 	bl	800072c <__aeabi_ddiv>
 800583a:	f7fb f8fd 	bl	8000a38 <__aeabi_d2iz>
 800583e:	4604      	mov	r4, r0
 8005840:	f7fa fde0 	bl	8000404 <__aeabi_i2d>
 8005844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fc88 	bl	8000168 <__aeabi_dsub>
 8005858:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800585c:	f807 6b01 	strb.w	r6, [r7], #1
 8005860:	9e03      	ldr	r6, [sp, #12]
 8005862:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005866:	1bbe      	subs	r6, r7, r6
 8005868:	45b4      	cmp	ip, r6
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	d136      	bne.n	80058de <_dtoa_r+0x6fe>
 8005870:	f7fa fc7c 	bl	800016c <__adddf3>
 8005874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005878:	4680      	mov	r8, r0
 800587a:	4689      	mov	r9, r1
 800587c:	f7fb f8bc 	bl	80009f8 <__aeabi_dcmpgt>
 8005880:	bb58      	cbnz	r0, 80058da <_dtoa_r+0x6fa>
 8005882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fb f88d 	bl	80009a8 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <_dtoa_r+0x6b4>
 8005890:	07e3      	lsls	r3, r4, #31
 8005892:	d422      	bmi.n	80058da <_dtoa_r+0x6fa>
 8005894:	4651      	mov	r1, sl
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fbc2 	bl	8006020 <_Bfree>
 800589c:	2300      	movs	r3, #0
 800589e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058a0:	703b      	strb	r3, [r7, #0]
 80058a2:	f10b 0301 	add.w	r3, fp, #1
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f43f ace6 	beq.w	800527c <_dtoa_r+0x9c>
 80058b0:	601f      	str	r7, [r3, #0]
 80058b2:	e4e3      	b.n	800527c <_dtoa_r+0x9c>
 80058b4:	4627      	mov	r7, r4
 80058b6:	463b      	mov	r3, r7
 80058b8:	461f      	mov	r7, r3
 80058ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058be:	2a39      	cmp	r2, #57	; 0x39
 80058c0:	d107      	bne.n	80058d2 <_dtoa_r+0x6f2>
 80058c2:	9a03      	ldr	r2, [sp, #12]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d1f7      	bne.n	80058b8 <_dtoa_r+0x6d8>
 80058c8:	2230      	movs	r2, #48	; 0x30
 80058ca:	9903      	ldr	r1, [sp, #12]
 80058cc:	f108 0801 	add.w	r8, r8, #1
 80058d0:	700a      	strb	r2, [r1, #0]
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	3201      	adds	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e79e      	b.n	8005818 <_dtoa_r+0x638>
 80058da:	46d8      	mov	r8, fp
 80058dc:	e7eb      	b.n	80058b6 <_dtoa_r+0x6d6>
 80058de:	2200      	movs	r2, #0
 80058e0:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <_dtoa_r+0x8b8>)
 80058e2:	f7fa fdf9 	bl	80004d8 <__aeabi_dmul>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4680      	mov	r8, r0
 80058ec:	4689      	mov	r9, r1
 80058ee:	f7fb f85b 	bl	80009a8 <__aeabi_dcmpeq>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d09b      	beq.n	800582e <_dtoa_r+0x64e>
 80058f6:	e7cd      	b.n	8005894 <_dtoa_r+0x6b4>
 80058f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	f000 80c4 	beq.w	8005a88 <_dtoa_r+0x8a8>
 8005900:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005902:	2a01      	cmp	r2, #1
 8005904:	f300 80a8 	bgt.w	8005a58 <_dtoa_r+0x878>
 8005908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800590a:	2a00      	cmp	r2, #0
 800590c:	f000 80a0 	beq.w	8005a50 <_dtoa_r+0x870>
 8005910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005914:	464f      	mov	r7, r9
 8005916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591a:	2101      	movs	r1, #1
 800591c:	441a      	add	r2, r3
 800591e:	4628      	mov	r0, r5
 8005920:	4499      	add	r9, r3
 8005922:	9209      	str	r2, [sp, #36]	; 0x24
 8005924:	f000 fc32 	bl	800618c <__i2b>
 8005928:	4606      	mov	r6, r0
 800592a:	b15f      	cbz	r7, 8005944 <_dtoa_r+0x764>
 800592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd08      	ble.n	8005944 <_dtoa_r+0x764>
 8005932:	42bb      	cmp	r3, r7
 8005934:	bfa8      	it	ge
 8005936:	463b      	movge	r3, r7
 8005938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593a:	eba9 0903 	sub.w	r9, r9, r3
 800593e:	1aff      	subs	r7, r7, r3
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005946:	b1f3      	cbz	r3, 8005986 <_dtoa_r+0x7a6>
 8005948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80a0 	beq.w	8005a90 <_dtoa_r+0x8b0>
 8005950:	2c00      	cmp	r4, #0
 8005952:	dd10      	ble.n	8005976 <_dtoa_r+0x796>
 8005954:	4631      	mov	r1, r6
 8005956:	4622      	mov	r2, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 fcd5 	bl	8006308 <__pow5mult>
 800595e:	4652      	mov	r2, sl
 8005960:	4601      	mov	r1, r0
 8005962:	4606      	mov	r6, r0
 8005964:	4628      	mov	r0, r5
 8005966:	f000 fc27 	bl	80061b8 <__multiply>
 800596a:	4680      	mov	r8, r0
 800596c:	4651      	mov	r1, sl
 800596e:	4628      	mov	r0, r5
 8005970:	f000 fb56 	bl	8006020 <_Bfree>
 8005974:	46c2      	mov	sl, r8
 8005976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005978:	1b1a      	subs	r2, r3, r4
 800597a:	d004      	beq.n	8005986 <_dtoa_r+0x7a6>
 800597c:	4651      	mov	r1, sl
 800597e:	4628      	mov	r0, r5
 8005980:	f000 fcc2 	bl	8006308 <__pow5mult>
 8005984:	4682      	mov	sl, r0
 8005986:	2101      	movs	r1, #1
 8005988:	4628      	mov	r0, r5
 800598a:	f000 fbff 	bl	800618c <__i2b>
 800598e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005990:	4604      	mov	r4, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	f340 8082 	ble.w	8005a9c <_dtoa_r+0x8bc>
 8005998:	461a      	mov	r2, r3
 800599a:	4601      	mov	r1, r0
 800599c:	4628      	mov	r0, r5
 800599e:	f000 fcb3 	bl	8006308 <__pow5mult>
 80059a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059a4:	4604      	mov	r4, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	dd7b      	ble.n	8005aa2 <_dtoa_r+0x8c2>
 80059aa:	f04f 0800 	mov.w	r8, #0
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059b4:	6918      	ldr	r0, [r3, #16]
 80059b6:	f000 fb9b 	bl	80060f0 <__hi0bits>
 80059ba:	f1c0 0020 	rsb	r0, r0, #32
 80059be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c0:	4418      	add	r0, r3
 80059c2:	f010 001f 	ands.w	r0, r0, #31
 80059c6:	f000 8092 	beq.w	8005aee <_dtoa_r+0x90e>
 80059ca:	f1c0 0320 	rsb	r3, r0, #32
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	f340 8085 	ble.w	8005ade <_dtoa_r+0x8fe>
 80059d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d6:	f1c0 001c 	rsb	r0, r0, #28
 80059da:	4403      	add	r3, r0
 80059dc:	4481      	add	r9, r0
 80059de:	4407      	add	r7, r0
 80059e0:	9309      	str	r3, [sp, #36]	; 0x24
 80059e2:	f1b9 0f00 	cmp.w	r9, #0
 80059e6:	dd05      	ble.n	80059f4 <_dtoa_r+0x814>
 80059e8:	4651      	mov	r1, sl
 80059ea:	464a      	mov	r2, r9
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 fce5 	bl	80063bc <__lshift>
 80059f2:	4682      	mov	sl, r0
 80059f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd05      	ble.n	8005a06 <_dtoa_r+0x826>
 80059fa:	4621      	mov	r1, r4
 80059fc:	461a      	mov	r2, r3
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 fcdc 	bl	80063bc <__lshift>
 8005a04:	4604      	mov	r4, r0
 8005a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d072      	beq.n	8005af2 <_dtoa_r+0x912>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4650      	mov	r0, sl
 8005a10:	f000 fd40 	bl	8006494 <__mcmp>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	da6c      	bge.n	8005af2 <_dtoa_r+0x912>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4651      	mov	r1, sl
 8005a1c:	220a      	movs	r2, #10
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 fb20 	bl	8006064 <__multadd>
 8005a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a26:	4682      	mov	sl, r0
 8005a28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 81ac 	beq.w	8005d8a <_dtoa_r+0xbaa>
 8005a32:	2300      	movs	r3, #0
 8005a34:	4631      	mov	r1, r6
 8005a36:	220a      	movs	r2, #10
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 fb13 	bl	8006064 <__multadd>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	4606      	mov	r6, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f300 8093 	bgt.w	8005b6e <_dtoa_r+0x98e>
 8005a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	dc59      	bgt.n	8005b02 <_dtoa_r+0x922>
 8005a4e:	e08e      	b.n	8005b6e <_dtoa_r+0x98e>
 8005a50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a56:	e75d      	b.n	8005914 <_dtoa_r+0x734>
 8005a58:	9b08      	ldr	r3, [sp, #32]
 8005a5a:	1e5c      	subs	r4, r3, #1
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	bfbf      	itttt	lt
 8005a62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005a66:	1ae3      	sublt	r3, r4, r3
 8005a68:	18d2      	addlt	r2, r2, r3
 8005a6a:	bfa8      	it	ge
 8005a6c:	1b1c      	subge	r4, r3, r4
 8005a6e:	9b08      	ldr	r3, [sp, #32]
 8005a70:	bfbe      	ittt	lt
 8005a72:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a74:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005a76:	2400      	movlt	r4, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb5      	itete	lt
 8005a7c:	eba9 0703 	sublt.w	r7, r9, r3
 8005a80:	464f      	movge	r7, r9
 8005a82:	2300      	movlt	r3, #0
 8005a84:	9b08      	ldrge	r3, [sp, #32]
 8005a86:	e747      	b.n	8005918 <_dtoa_r+0x738>
 8005a88:	464f      	mov	r7, r9
 8005a8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a8e:	e74c      	b.n	800592a <_dtoa_r+0x74a>
 8005a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a92:	e773      	b.n	800597c <_dtoa_r+0x79c>
 8005a94:	3fe00000 	.word	0x3fe00000
 8005a98:	40240000 	.word	0x40240000
 8005a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	dc18      	bgt.n	8005ad4 <_dtoa_r+0x8f4>
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	b9b3      	cbnz	r3, 8005ad4 <_dtoa_r+0x8f4>
 8005aa6:	9b05      	ldr	r3, [sp, #20]
 8005aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aac:	b993      	cbnz	r3, 8005ad4 <_dtoa_r+0x8f4>
 8005aae:	9b05      	ldr	r3, [sp, #20]
 8005ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	0d1b      	lsrs	r3, r3, #20
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	b17b      	cbz	r3, 8005ada <_dtoa_r+0x8fa>
 8005aba:	f04f 0801 	mov.w	r8, #1
 8005abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac0:	f109 0901 	add.w	r9, r9, #1
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f47f af6f 	bne.w	80059ae <_dtoa_r+0x7ce>
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	e774      	b.n	80059be <_dtoa_r+0x7de>
 8005ad4:	f04f 0800 	mov.w	r8, #0
 8005ad8:	e7f6      	b.n	8005ac8 <_dtoa_r+0x8e8>
 8005ada:	4698      	mov	r8, r3
 8005adc:	e7f4      	b.n	8005ac8 <_dtoa_r+0x8e8>
 8005ade:	d080      	beq.n	80059e2 <_dtoa_r+0x802>
 8005ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae2:	331c      	adds	r3, #28
 8005ae4:	441a      	add	r2, r3
 8005ae6:	4499      	add	r9, r3
 8005ae8:	441f      	add	r7, r3
 8005aea:	9209      	str	r2, [sp, #36]	; 0x24
 8005aec:	e779      	b.n	80059e2 <_dtoa_r+0x802>
 8005aee:	4603      	mov	r3, r0
 8005af0:	e7f6      	b.n	8005ae0 <_dtoa_r+0x900>
 8005af2:	9b08      	ldr	r3, [sp, #32]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dc34      	bgt.n	8005b62 <_dtoa_r+0x982>
 8005af8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	dd31      	ble.n	8005b62 <_dtoa_r+0x982>
 8005afe:	9b08      	ldr	r3, [sp, #32]
 8005b00:	9306      	str	r3, [sp, #24]
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	b963      	cbnz	r3, 8005b20 <_dtoa_r+0x940>
 8005b06:	4621      	mov	r1, r4
 8005b08:	2205      	movs	r2, #5
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 faaa 	bl	8006064 <__multadd>
 8005b10:	4601      	mov	r1, r0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4650      	mov	r0, sl
 8005b16:	f000 fcbd 	bl	8006494 <__mcmp>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f73f adbf 	bgt.w	800569e <_dtoa_r+0x4be>
 8005b20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b22:	9f03      	ldr	r7, [sp, #12]
 8005b24:	ea6f 0b03 	mvn.w	fp, r3
 8005b28:	f04f 0800 	mov.w	r8, #0
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fa76 	bl	8006020 <_Bfree>
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	f43f aead 	beq.w	8005894 <_dtoa_r+0x6b4>
 8005b3a:	f1b8 0f00 	cmp.w	r8, #0
 8005b3e:	d005      	beq.n	8005b4c <_dtoa_r+0x96c>
 8005b40:	45b0      	cmp	r8, r6
 8005b42:	d003      	beq.n	8005b4c <_dtoa_r+0x96c>
 8005b44:	4641      	mov	r1, r8
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fa6a 	bl	8006020 <_Bfree>
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 fa66 	bl	8006020 <_Bfree>
 8005b54:	e69e      	b.n	8005894 <_dtoa_r+0x6b4>
 8005b56:	2400      	movs	r4, #0
 8005b58:	4626      	mov	r6, r4
 8005b5a:	e7e1      	b.n	8005b20 <_dtoa_r+0x940>
 8005b5c:	46c3      	mov	fp, r8
 8005b5e:	4626      	mov	r6, r4
 8005b60:	e59d      	b.n	800569e <_dtoa_r+0x4be>
 8005b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80c8 	beq.w	8005cfa <_dtoa_r+0xb1a>
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	dd05      	ble.n	8005b7e <_dtoa_r+0x99e>
 8005b72:	4631      	mov	r1, r6
 8005b74:	463a      	mov	r2, r7
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fc20 	bl	80063bc <__lshift>
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	f1b8 0f00 	cmp.w	r8, #0
 8005b82:	d05b      	beq.n	8005c3c <_dtoa_r+0xa5c>
 8005b84:	4628      	mov	r0, r5
 8005b86:	6871      	ldr	r1, [r6, #4]
 8005b88:	f000 fa0a 	bl	8005fa0 <_Balloc>
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	b928      	cbnz	r0, 8005b9c <_dtoa_r+0x9bc>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b96:	4b81      	ldr	r3, [pc, #516]	; (8005d9c <_dtoa_r+0xbbc>)
 8005b98:	f7ff bb36 	b.w	8005208 <_dtoa_r+0x28>
 8005b9c:	6932      	ldr	r2, [r6, #16]
 8005b9e:	f106 010c 	add.w	r1, r6, #12
 8005ba2:	3202      	adds	r2, #2
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	300c      	adds	r0, #12
 8005ba8:	f000 fff2 	bl	8006b90 <memcpy>
 8005bac:	2201      	movs	r2, #1
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 fc03 	bl	80063bc <__lshift>
 8005bb6:	46b0      	mov	r8, r6
 8005bb8:	4606      	mov	r6, r0
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	9a03      	ldr	r2, [sp, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	9308      	str	r3, [sp, #32]
 8005bc2:	9b06      	ldr	r3, [sp, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc8:	9b04      	ldr	r3, [sp, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	930a      	str	r3, [sp, #40]	; 0x28
 8005bd0:	9b08      	ldr	r3, [sp, #32]
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	f7ff fa78 	bl	80050ce <quorem>
 8005bde:	4641      	mov	r1, r8
 8005be0:	9006      	str	r0, [sp, #24]
 8005be2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005be6:	4650      	mov	r0, sl
 8005be8:	f000 fc54 	bl	8006494 <__mcmp>
 8005bec:	4632      	mov	r2, r6
 8005bee:	9009      	str	r0, [sp, #36]	; 0x24
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 fc6a 	bl	80064cc <__mdiff>
 8005bf8:	68c2      	ldr	r2, [r0, #12]
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	bb02      	cbnz	r2, 8005c40 <_dtoa_r+0xa60>
 8005bfe:	4601      	mov	r1, r0
 8005c00:	4650      	mov	r0, sl
 8005c02:	f000 fc47 	bl	8006494 <__mcmp>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4639      	mov	r1, r7
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	920c      	str	r2, [sp, #48]	; 0x30
 8005c0e:	f000 fa07 	bl	8006020 <_Bfree>
 8005c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c16:	9f08      	ldr	r7, [sp, #32]
 8005c18:	ea43 0102 	orr.w	r1, r3, r2
 8005c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1e:	4319      	orrs	r1, r3
 8005c20:	d110      	bne.n	8005c44 <_dtoa_r+0xa64>
 8005c22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c26:	d029      	beq.n	8005c7c <_dtoa_r+0xa9c>
 8005c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd02      	ble.n	8005c34 <_dtoa_r+0xa54>
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	f883 9000 	strb.w	r9, [r3]
 8005c3a:	e777      	b.n	8005b2c <_dtoa_r+0x94c>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	e7ba      	b.n	8005bb6 <_dtoa_r+0x9d6>
 8005c40:	2201      	movs	r2, #1
 8005c42:	e7e1      	b.n	8005c08 <_dtoa_r+0xa28>
 8005c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	db04      	blt.n	8005c54 <_dtoa_r+0xa74>
 8005c4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c50:	430b      	orrs	r3, r1
 8005c52:	d120      	bne.n	8005c96 <_dtoa_r+0xab6>
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	dded      	ble.n	8005c34 <_dtoa_r+0xa54>
 8005c58:	4651      	mov	r1, sl
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 fbad 	bl	80063bc <__lshift>
 8005c62:	4621      	mov	r1, r4
 8005c64:	4682      	mov	sl, r0
 8005c66:	f000 fc15 	bl	8006494 <__mcmp>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	dc03      	bgt.n	8005c76 <_dtoa_r+0xa96>
 8005c6e:	d1e1      	bne.n	8005c34 <_dtoa_r+0xa54>
 8005c70:	f019 0f01 	tst.w	r9, #1
 8005c74:	d0de      	beq.n	8005c34 <_dtoa_r+0xa54>
 8005c76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c7a:	d1d8      	bne.n	8005c2e <_dtoa_r+0xa4e>
 8005c7c:	2339      	movs	r3, #57	; 0x39
 8005c7e:	9a04      	ldr	r2, [sp, #16]
 8005c80:	7013      	strb	r3, [r2, #0]
 8005c82:	463b      	mov	r3, r7
 8005c84:	461f      	mov	r7, r3
 8005c86:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	2a39      	cmp	r2, #57	; 0x39
 8005c8e:	d06b      	beq.n	8005d68 <_dtoa_r+0xb88>
 8005c90:	3201      	adds	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e74a      	b.n	8005b2c <_dtoa_r+0x94c>
 8005c96:	2a00      	cmp	r2, #0
 8005c98:	dd07      	ble.n	8005caa <_dtoa_r+0xaca>
 8005c9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c9e:	d0ed      	beq.n	8005c7c <_dtoa_r+0xa9c>
 8005ca0:	9a04      	ldr	r2, [sp, #16]
 8005ca2:	f109 0301 	add.w	r3, r9, #1
 8005ca6:	7013      	strb	r3, [r2, #0]
 8005ca8:	e740      	b.n	8005b2c <_dtoa_r+0x94c>
 8005caa:	9b08      	ldr	r3, [sp, #32]
 8005cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cae:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d042      	beq.n	8005d3c <_dtoa_r+0xb5c>
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	2300      	movs	r3, #0
 8005cba:	220a      	movs	r2, #10
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 f9d1 	bl	8006064 <__multadd>
 8005cc2:	45b0      	cmp	r8, r6
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f04f 020a 	mov.w	r2, #10
 8005cce:	4641      	mov	r1, r8
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	d107      	bne.n	8005ce4 <_dtoa_r+0xb04>
 8005cd4:	f000 f9c6 	bl	8006064 <__multadd>
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4606      	mov	r6, r0
 8005cdc:	9b08      	ldr	r3, [sp, #32]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9308      	str	r3, [sp, #32]
 8005ce2:	e775      	b.n	8005bd0 <_dtoa_r+0x9f0>
 8005ce4:	f000 f9be 	bl	8006064 <__multadd>
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4680      	mov	r8, r0
 8005cec:	2300      	movs	r3, #0
 8005cee:	220a      	movs	r2, #10
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 f9b7 	bl	8006064 <__multadd>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	e7f0      	b.n	8005cdc <_dtoa_r+0xafc>
 8005cfa:	9b08      	ldr	r3, [sp, #32]
 8005cfc:	9306      	str	r3, [sp, #24]
 8005cfe:	9f03      	ldr	r7, [sp, #12]
 8005d00:	4621      	mov	r1, r4
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7ff f9e3 	bl	80050ce <quorem>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d0e:	f807 9b01 	strb.w	r9, [r7], #1
 8005d12:	1afa      	subs	r2, r7, r3
 8005d14:	9b06      	ldr	r3, [sp, #24]
 8005d16:	4293      	cmp	r3, r2
 8005d18:	dd07      	ble.n	8005d2a <_dtoa_r+0xb4a>
 8005d1a:	4651      	mov	r1, sl
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	220a      	movs	r2, #10
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f99f 	bl	8006064 <__multadd>
 8005d26:	4682      	mov	sl, r0
 8005d28:	e7ea      	b.n	8005d00 <_dtoa_r+0xb20>
 8005d2a:	9b06      	ldr	r3, [sp, #24]
 8005d2c:	f04f 0800 	mov.w	r8, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bfcc      	ite	gt
 8005d34:	461f      	movgt	r7, r3
 8005d36:	2701      	movle	r7, #1
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	441f      	add	r7, r3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 fb3b 	bl	80063bc <__lshift>
 8005d46:	4621      	mov	r1, r4
 8005d48:	4682      	mov	sl, r0
 8005d4a:	f000 fba3 	bl	8006494 <__mcmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	dc97      	bgt.n	8005c82 <_dtoa_r+0xaa2>
 8005d52:	d102      	bne.n	8005d5a <_dtoa_r+0xb7a>
 8005d54:	f019 0f01 	tst.w	r9, #1
 8005d58:	d193      	bne.n	8005c82 <_dtoa_r+0xaa2>
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	461f      	mov	r7, r3
 8005d5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d62:	2a30      	cmp	r2, #48	; 0x30
 8005d64:	d0fa      	beq.n	8005d5c <_dtoa_r+0xb7c>
 8005d66:	e6e1      	b.n	8005b2c <_dtoa_r+0x94c>
 8005d68:	9a03      	ldr	r2, [sp, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d18a      	bne.n	8005c84 <_dtoa_r+0xaa4>
 8005d6e:	2331      	movs	r3, #49	; 0x31
 8005d70:	f10b 0b01 	add.w	fp, fp, #1
 8005d74:	e797      	b.n	8005ca6 <_dtoa_r+0xac6>
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <_dtoa_r+0xbc0>)
 8005d78:	f7ff ba9f 	b.w	80052ba <_dtoa_r+0xda>
 8005d7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f47f aa77 	bne.w	8005272 <_dtoa_r+0x92>
 8005d84:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <_dtoa_r+0xbc4>)
 8005d86:	f7ff ba98 	b.w	80052ba <_dtoa_r+0xda>
 8005d8a:	9b06      	ldr	r3, [sp, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dcb6      	bgt.n	8005cfe <_dtoa_r+0xb1e>
 8005d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	f73f aeb5 	bgt.w	8005b02 <_dtoa_r+0x922>
 8005d98:	e7b1      	b.n	8005cfe <_dtoa_r+0xb1e>
 8005d9a:	bf00      	nop
 8005d9c:	08006e5e 	.word	0x08006e5e
 8005da0:	08006dbe 	.word	0x08006dbe
 8005da4:	08006de2 	.word	0x08006de2

08005da8 <_free_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d040      	beq.n	8005e32 <_free_r+0x8a>
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f0c      	subs	r4, r1, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	18e4      	addlt	r4, r4, r3
 8005dbc:	f000 f8e4 	bl	8005f88 <__malloc_lock>
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <_free_r+0x8c>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	b933      	cbnz	r3, 8005dd4 <_free_r+0x2c>
 8005dc6:	6063      	str	r3, [r4, #4]
 8005dc8:	6014      	str	r4, [r2, #0]
 8005dca:	4628      	mov	r0, r5
 8005dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd0:	f000 b8e0 	b.w	8005f94 <__malloc_unlock>
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d908      	bls.n	8005dea <_free_r+0x42>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	1821      	adds	r1, r4, r0
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	bf01      	itttt	eq
 8005de0:	6819      	ldreq	r1, [r3, #0]
 8005de2:	685b      	ldreq	r3, [r3, #4]
 8005de4:	1809      	addeq	r1, r1, r0
 8005de6:	6021      	streq	r1, [r4, #0]
 8005de8:	e7ed      	b.n	8005dc6 <_free_r+0x1e>
 8005dea:	461a      	mov	r2, r3
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b10b      	cbz	r3, 8005df4 <_free_r+0x4c>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d9fa      	bls.n	8005dea <_free_r+0x42>
 8005df4:	6811      	ldr	r1, [r2, #0]
 8005df6:	1850      	adds	r0, r2, r1
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d10b      	bne.n	8005e14 <_free_r+0x6c>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	4401      	add	r1, r0
 8005e00:	1850      	adds	r0, r2, r1
 8005e02:	4283      	cmp	r3, r0
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	d1e0      	bne.n	8005dca <_free_r+0x22>
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4408      	add	r0, r1
 8005e0e:	6010      	str	r0, [r2, #0]
 8005e10:	6053      	str	r3, [r2, #4]
 8005e12:	e7da      	b.n	8005dca <_free_r+0x22>
 8005e14:	d902      	bls.n	8005e1c <_free_r+0x74>
 8005e16:	230c      	movs	r3, #12
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	e7d6      	b.n	8005dca <_free_r+0x22>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf01      	itttt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6054      	str	r4, [r2, #4]
 8005e30:	e7cb      	b.n	8005dca <_free_r+0x22>
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000530 	.word	0x20000530

08005e38 <malloc>:
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <malloc+0xc>)
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f000 b823 	b.w	8005e88 <_malloc_r>
 8005e42:	bf00      	nop
 8005e44:	20000064 	.word	0x20000064

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0e      	ldr	r6, [pc, #56]	; (8005e84 <sbrk_aligned+0x3c>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f000 fe8c 	bl	8006b70 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 fe87 	bl	8006b70 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <sbrk_aligned+0x34>
 8005e66:	1cc4      	adds	r4, r0, #3
 8005e68:	f024 0403 	bic.w	r4, r4, #3
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d007      	beq.n	8005e80 <sbrk_aligned+0x38>
 8005e70:	1a21      	subs	r1, r4, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 fe7c 	bl	8006b70 <_sbrk_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d101      	bne.n	8005e80 <sbrk_aligned+0x38>
 8005e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e80:	4620      	mov	r0, r4
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	20000534 	.word	0x20000534

08005e88 <_malloc_r>:
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	1ccd      	adds	r5, r1, #3
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db01      	blt.n	8005ea4 <_malloc_r+0x1c>
 8005ea0:	42a9      	cmp	r1, r5
 8005ea2:	d905      	bls.n	8005eb0 <_malloc_r+0x28>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f84 <_malloc_r+0xfc>
 8005eb4:	f000 f868 	bl	8005f88 <__malloc_lock>
 8005eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ebc:	461c      	mov	r4, r3
 8005ebe:	bb5c      	cbnz	r4, 8005f18 <_malloc_r+0x90>
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ffc0 	bl	8005e48 <sbrk_aligned>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	4604      	mov	r4, r0
 8005ecc:	d155      	bne.n	8005f7a <_malloc_r+0xf2>
 8005ece:	f8d8 4000 	ldr.w	r4, [r8]
 8005ed2:	4626      	mov	r6, r4
 8005ed4:	2e00      	cmp	r6, #0
 8005ed6:	d145      	bne.n	8005f64 <_malloc_r+0xdc>
 8005ed8:	2c00      	cmp	r4, #0
 8005eda:	d048      	beq.n	8005f6e <_malloc_r+0xe6>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	eb04 0903 	add.w	r9, r4, r3
 8005ee6:	f000 fe43 	bl	8006b70 <_sbrk_r>
 8005eea:	4581      	cmp	r9, r0
 8005eec:	d13f      	bne.n	8005f6e <_malloc_r+0xe6>
 8005eee:	6821      	ldr	r1, [r4, #0]
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	1a6d      	subs	r5, r5, r1
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7ff ffa7 	bl	8005e48 <sbrk_aligned>
 8005efa:	3001      	adds	r0, #1
 8005efc:	d037      	beq.n	8005f6e <_malloc_r+0xe6>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	442b      	add	r3, r5
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	f8d8 3000 	ldr.w	r3, [r8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d038      	beq.n	8005f7e <_malloc_r+0xf6>
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	42a2      	cmp	r2, r4
 8005f10:	d12b      	bne.n	8005f6a <_malloc_r+0xe2>
 8005f12:	2200      	movs	r2, #0
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	e00f      	b.n	8005f38 <_malloc_r+0xb0>
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	1b52      	subs	r2, r2, r5
 8005f1c:	d41f      	bmi.n	8005f5e <_malloc_r+0xd6>
 8005f1e:	2a0b      	cmp	r2, #11
 8005f20:	d917      	bls.n	8005f52 <_malloc_r+0xca>
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	6025      	str	r5, [r4, #0]
 8005f28:	bf18      	it	ne
 8005f2a:	6059      	strne	r1, [r3, #4]
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	bf08      	it	eq
 8005f30:	f8c8 1000 	streq.w	r1, [r8]
 8005f34:	5162      	str	r2, [r4, r5]
 8005f36:	604b      	str	r3, [r1, #4]
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f104 060b 	add.w	r6, r4, #11
 8005f3e:	f000 f829 	bl	8005f94 <__malloc_unlock>
 8005f42:	f026 0607 	bic.w	r6, r6, #7
 8005f46:	1d23      	adds	r3, r4, #4
 8005f48:	1af2      	subs	r2, r6, r3
 8005f4a:	d0ae      	beq.n	8005eaa <_malloc_r+0x22>
 8005f4c:	1b9b      	subs	r3, r3, r6
 8005f4e:	50a3      	str	r3, [r4, r2]
 8005f50:	e7ab      	b.n	8005eaa <_malloc_r+0x22>
 8005f52:	42a3      	cmp	r3, r4
 8005f54:	6862      	ldr	r2, [r4, #4]
 8005f56:	d1dd      	bne.n	8005f14 <_malloc_r+0x8c>
 8005f58:	f8c8 2000 	str.w	r2, [r8]
 8005f5c:	e7ec      	b.n	8005f38 <_malloc_r+0xb0>
 8005f5e:	4623      	mov	r3, r4
 8005f60:	6864      	ldr	r4, [r4, #4]
 8005f62:	e7ac      	b.n	8005ebe <_malloc_r+0x36>
 8005f64:	4634      	mov	r4, r6
 8005f66:	6876      	ldr	r6, [r6, #4]
 8005f68:	e7b4      	b.n	8005ed4 <_malloc_r+0x4c>
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	e7cc      	b.n	8005f08 <_malloc_r+0x80>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	4638      	mov	r0, r7
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	f000 f80e 	bl	8005f94 <__malloc_unlock>
 8005f78:	e797      	b.n	8005eaa <_malloc_r+0x22>
 8005f7a:	6025      	str	r5, [r4, #0]
 8005f7c:	e7dc      	b.n	8005f38 <_malloc_r+0xb0>
 8005f7e:	605b      	str	r3, [r3, #4]
 8005f80:	deff      	udf	#255	; 0xff
 8005f82:	bf00      	nop
 8005f84:	20000530 	.word	0x20000530

08005f88 <__malloc_lock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_lock+0x8>)
 8005f8a:	f7ff b890 	b.w	80050ae <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	2000052c 	.word	0x2000052c

08005f94 <__malloc_unlock>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__malloc_unlock+0x8>)
 8005f96:	f7ff b88b 	b.w	80050b0 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	2000052c 	.word	0x2000052c

08005fa0 <_Balloc>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	69c6      	ldr	r6, [r0, #28]
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	b976      	cbnz	r6, 8005fc8 <_Balloc+0x28>
 8005faa:	2010      	movs	r0, #16
 8005fac:	f7ff ff44 	bl	8005e38 <malloc>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	61e0      	str	r0, [r4, #28]
 8005fb4:	b920      	cbnz	r0, 8005fc0 <_Balloc+0x20>
 8005fb6:	216b      	movs	r1, #107	; 0x6b
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <_Balloc+0x78>)
 8005fba:	4818      	ldr	r0, [pc, #96]	; (800601c <_Balloc+0x7c>)
 8005fbc:	f000 fdf6 	bl	8006bac <__assert_func>
 8005fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fc4:	6006      	str	r6, [r0, #0]
 8005fc6:	60c6      	str	r6, [r0, #12]
 8005fc8:	69e6      	ldr	r6, [r4, #28]
 8005fca:	68f3      	ldr	r3, [r6, #12]
 8005fcc:	b183      	cbz	r3, 8005ff0 <_Balloc+0x50>
 8005fce:	69e3      	ldr	r3, [r4, #28]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fd6:	b9b8      	cbnz	r0, 8006008 <_Balloc+0x68>
 8005fd8:	2101      	movs	r1, #1
 8005fda:	fa01 f605 	lsl.w	r6, r1, r5
 8005fde:	1d72      	adds	r2, r6, #5
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	f000 fe00 	bl	8006be8 <_calloc_r>
 8005fe8:	b160      	cbz	r0, 8006004 <_Balloc+0x64>
 8005fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fee:	e00e      	b.n	800600e <_Balloc+0x6e>
 8005ff0:	2221      	movs	r2, #33	; 0x21
 8005ff2:	2104      	movs	r1, #4
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fdf7 	bl	8006be8 <_calloc_r>
 8005ffa:	69e3      	ldr	r3, [r4, #28]
 8005ffc:	60f0      	str	r0, [r6, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e4      	bne.n	8005fce <_Balloc+0x2e>
 8006004:	2000      	movs	r0, #0
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	6802      	ldr	r2, [r0, #0]
 800600a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800600e:	2300      	movs	r3, #0
 8006010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006014:	e7f7      	b.n	8006006 <_Balloc+0x66>
 8006016:	bf00      	nop
 8006018:	08006def 	.word	0x08006def
 800601c:	08006e6f 	.word	0x08006e6f

08006020 <_Bfree>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	69c6      	ldr	r6, [r0, #28]
 8006024:	4605      	mov	r5, r0
 8006026:	460c      	mov	r4, r1
 8006028:	b976      	cbnz	r6, 8006048 <_Bfree+0x28>
 800602a:	2010      	movs	r0, #16
 800602c:	f7ff ff04 	bl	8005e38 <malloc>
 8006030:	4602      	mov	r2, r0
 8006032:	61e8      	str	r0, [r5, #28]
 8006034:	b920      	cbnz	r0, 8006040 <_Bfree+0x20>
 8006036:	218f      	movs	r1, #143	; 0x8f
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <_Bfree+0x3c>)
 800603a:	4809      	ldr	r0, [pc, #36]	; (8006060 <_Bfree+0x40>)
 800603c:	f000 fdb6 	bl	8006bac <__assert_func>
 8006040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006044:	6006      	str	r6, [r0, #0]
 8006046:	60c6      	str	r6, [r0, #12]
 8006048:	b13c      	cbz	r4, 800605a <_Bfree+0x3a>
 800604a:	69eb      	ldr	r3, [r5, #28]
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006054:	6021      	str	r1, [r4, #0]
 8006056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	08006def 	.word	0x08006def
 8006060:	08006e6f 	.word	0x08006e6f

08006064 <__multadd>:
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	4607      	mov	r7, r0
 800606a:	460c      	mov	r4, r1
 800606c:	461e      	mov	r6, r3
 800606e:	2000      	movs	r0, #0
 8006070:	690d      	ldr	r5, [r1, #16]
 8006072:	f101 0c14 	add.w	ip, r1, #20
 8006076:	f8dc 3000 	ldr.w	r3, [ip]
 800607a:	3001      	adds	r0, #1
 800607c:	b299      	uxth	r1, r3
 800607e:	fb02 6101 	mla	r1, r2, r1, r6
 8006082:	0c1e      	lsrs	r6, r3, #16
 8006084:	0c0b      	lsrs	r3, r1, #16
 8006086:	fb02 3306 	mla	r3, r2, r6, r3
 800608a:	b289      	uxth	r1, r1
 800608c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006090:	4285      	cmp	r5, r0
 8006092:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006096:	f84c 1b04 	str.w	r1, [ip], #4
 800609a:	dcec      	bgt.n	8006076 <__multadd+0x12>
 800609c:	b30e      	cbz	r6, 80060e2 <__multadd+0x7e>
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	dc19      	bgt.n	80060d8 <__multadd+0x74>
 80060a4:	6861      	ldr	r1, [r4, #4]
 80060a6:	4638      	mov	r0, r7
 80060a8:	3101      	adds	r1, #1
 80060aa:	f7ff ff79 	bl	8005fa0 <_Balloc>
 80060ae:	4680      	mov	r8, r0
 80060b0:	b928      	cbnz	r0, 80060be <__multadd+0x5a>
 80060b2:	4602      	mov	r2, r0
 80060b4:	21ba      	movs	r1, #186	; 0xba
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <__multadd+0x84>)
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <__multadd+0x88>)
 80060ba:	f000 fd77 	bl	8006bac <__assert_func>
 80060be:	6922      	ldr	r2, [r4, #16]
 80060c0:	f104 010c 	add.w	r1, r4, #12
 80060c4:	3202      	adds	r2, #2
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	300c      	adds	r0, #12
 80060ca:	f000 fd61 	bl	8006b90 <memcpy>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4638      	mov	r0, r7
 80060d2:	f7ff ffa5 	bl	8006020 <_Bfree>
 80060d6:	4644      	mov	r4, r8
 80060d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060dc:	3501      	adds	r5, #1
 80060de:	615e      	str	r6, [r3, #20]
 80060e0:	6125      	str	r5, [r4, #16]
 80060e2:	4620      	mov	r0, r4
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	08006e5e 	.word	0x08006e5e
 80060ec:	08006e6f 	.word	0x08006e6f

080060f0 <__hi0bits>:
 80060f0:	0c02      	lsrs	r2, r0, #16
 80060f2:	0412      	lsls	r2, r2, #16
 80060f4:	4603      	mov	r3, r0
 80060f6:	b9ca      	cbnz	r2, 800612c <__hi0bits+0x3c>
 80060f8:	0403      	lsls	r3, r0, #16
 80060fa:	2010      	movs	r0, #16
 80060fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006100:	bf04      	itt	eq
 8006102:	021b      	lsleq	r3, r3, #8
 8006104:	3008      	addeq	r0, #8
 8006106:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800610a:	bf04      	itt	eq
 800610c:	011b      	lsleq	r3, r3, #4
 800610e:	3004      	addeq	r0, #4
 8006110:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006114:	bf04      	itt	eq
 8006116:	009b      	lsleq	r3, r3, #2
 8006118:	3002      	addeq	r0, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	db05      	blt.n	800612a <__hi0bits+0x3a>
 800611e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006122:	f100 0001 	add.w	r0, r0, #1
 8006126:	bf08      	it	eq
 8006128:	2020      	moveq	r0, #32
 800612a:	4770      	bx	lr
 800612c:	2000      	movs	r0, #0
 800612e:	e7e5      	b.n	80060fc <__hi0bits+0xc>

08006130 <__lo0bits>:
 8006130:	6803      	ldr	r3, [r0, #0]
 8006132:	4602      	mov	r2, r0
 8006134:	f013 0007 	ands.w	r0, r3, #7
 8006138:	d00b      	beq.n	8006152 <__lo0bits+0x22>
 800613a:	07d9      	lsls	r1, r3, #31
 800613c:	d421      	bmi.n	8006182 <__lo0bits+0x52>
 800613e:	0798      	lsls	r0, r3, #30
 8006140:	bf49      	itett	mi
 8006142:	085b      	lsrmi	r3, r3, #1
 8006144:	089b      	lsrpl	r3, r3, #2
 8006146:	2001      	movmi	r0, #1
 8006148:	6013      	strmi	r3, [r2, #0]
 800614a:	bf5c      	itt	pl
 800614c:	2002      	movpl	r0, #2
 800614e:	6013      	strpl	r3, [r2, #0]
 8006150:	4770      	bx	lr
 8006152:	b299      	uxth	r1, r3
 8006154:	b909      	cbnz	r1, 800615a <__lo0bits+0x2a>
 8006156:	2010      	movs	r0, #16
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	b2d9      	uxtb	r1, r3
 800615c:	b909      	cbnz	r1, 8006162 <__lo0bits+0x32>
 800615e:	3008      	adds	r0, #8
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	0719      	lsls	r1, r3, #28
 8006164:	bf04      	itt	eq
 8006166:	091b      	lsreq	r3, r3, #4
 8006168:	3004      	addeq	r0, #4
 800616a:	0799      	lsls	r1, r3, #30
 800616c:	bf04      	itt	eq
 800616e:	089b      	lsreq	r3, r3, #2
 8006170:	3002      	addeq	r0, #2
 8006172:	07d9      	lsls	r1, r3, #31
 8006174:	d403      	bmi.n	800617e <__lo0bits+0x4e>
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	f100 0001 	add.w	r0, r0, #1
 800617c:	d003      	beq.n	8006186 <__lo0bits+0x56>
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4770      	bx	lr
 8006182:	2000      	movs	r0, #0
 8006184:	4770      	bx	lr
 8006186:	2020      	movs	r0, #32
 8006188:	4770      	bx	lr
	...

0800618c <__i2b>:
 800618c:	b510      	push	{r4, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	2101      	movs	r1, #1
 8006192:	f7ff ff05 	bl	8005fa0 <_Balloc>
 8006196:	4602      	mov	r2, r0
 8006198:	b928      	cbnz	r0, 80061a6 <__i2b+0x1a>
 800619a:	f240 1145 	movw	r1, #325	; 0x145
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <__i2b+0x24>)
 80061a0:	4804      	ldr	r0, [pc, #16]	; (80061b4 <__i2b+0x28>)
 80061a2:	f000 fd03 	bl	8006bac <__assert_func>
 80061a6:	2301      	movs	r3, #1
 80061a8:	6144      	str	r4, [r0, #20]
 80061aa:	6103      	str	r3, [r0, #16]
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	bf00      	nop
 80061b0:	08006e5e 	.word	0x08006e5e
 80061b4:	08006e6f 	.word	0x08006e6f

080061b8 <__multiply>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4691      	mov	r9, r2
 80061be:	690a      	ldr	r2, [r1, #16]
 80061c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061c4:	460c      	mov	r4, r1
 80061c6:	429a      	cmp	r2, r3
 80061c8:	bfbe      	ittt	lt
 80061ca:	460b      	movlt	r3, r1
 80061cc:	464c      	movlt	r4, r9
 80061ce:	4699      	movlt	r9, r3
 80061d0:	6927      	ldr	r7, [r4, #16]
 80061d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	eb07 060a 	add.w	r6, r7, sl
 80061de:	42b3      	cmp	r3, r6
 80061e0:	b085      	sub	sp, #20
 80061e2:	bfb8      	it	lt
 80061e4:	3101      	addlt	r1, #1
 80061e6:	f7ff fedb 	bl	8005fa0 <_Balloc>
 80061ea:	b930      	cbnz	r0, 80061fa <__multiply+0x42>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80061f2:	4b43      	ldr	r3, [pc, #268]	; (8006300 <__multiply+0x148>)
 80061f4:	4843      	ldr	r0, [pc, #268]	; (8006304 <__multiply+0x14c>)
 80061f6:	f000 fcd9 	bl	8006bac <__assert_func>
 80061fa:	f100 0514 	add.w	r5, r0, #20
 80061fe:	462b      	mov	r3, r5
 8006200:	2200      	movs	r2, #0
 8006202:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006206:	4543      	cmp	r3, r8
 8006208:	d321      	bcc.n	800624e <__multiply+0x96>
 800620a:	f104 0314 	add.w	r3, r4, #20
 800620e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006212:	f109 0314 	add.w	r3, r9, #20
 8006216:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	1b3a      	subs	r2, r7, r4
 800621e:	3a15      	subs	r2, #21
 8006220:	f022 0203 	bic.w	r2, r2, #3
 8006224:	3204      	adds	r2, #4
 8006226:	f104 0115 	add.w	r1, r4, #21
 800622a:	428f      	cmp	r7, r1
 800622c:	bf38      	it	cc
 800622e:	2204      	movcc	r2, #4
 8006230:	9201      	str	r2, [sp, #4]
 8006232:	9a02      	ldr	r2, [sp, #8]
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	429a      	cmp	r2, r3
 8006238:	d80c      	bhi.n	8006254 <__multiply+0x9c>
 800623a:	2e00      	cmp	r6, #0
 800623c:	dd03      	ble.n	8006246 <__multiply+0x8e>
 800623e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05a      	beq.n	80062fc <__multiply+0x144>
 8006246:	6106      	str	r6, [r0, #16]
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	f843 2b04 	str.w	r2, [r3], #4
 8006252:	e7d8      	b.n	8006206 <__multiply+0x4e>
 8006254:	f8b3 a000 	ldrh.w	sl, [r3]
 8006258:	f1ba 0f00 	cmp.w	sl, #0
 800625c:	d023      	beq.n	80062a6 <__multiply+0xee>
 800625e:	46a9      	mov	r9, r5
 8006260:	f04f 0c00 	mov.w	ip, #0
 8006264:	f104 0e14 	add.w	lr, r4, #20
 8006268:	f85e 2b04 	ldr.w	r2, [lr], #4
 800626c:	f8d9 1000 	ldr.w	r1, [r9]
 8006270:	fa1f fb82 	uxth.w	fp, r2
 8006274:	b289      	uxth	r1, r1
 8006276:	fb0a 110b 	mla	r1, sl, fp, r1
 800627a:	4461      	add	r1, ip
 800627c:	f8d9 c000 	ldr.w	ip, [r9]
 8006280:	0c12      	lsrs	r2, r2, #16
 8006282:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006286:	fb0a c202 	mla	r2, sl, r2, ip
 800628a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800628e:	b289      	uxth	r1, r1
 8006290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006294:	4577      	cmp	r7, lr
 8006296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800629a:	f849 1b04 	str.w	r1, [r9], #4
 800629e:	d8e3      	bhi.n	8006268 <__multiply+0xb0>
 80062a0:	9a01      	ldr	r2, [sp, #4]
 80062a2:	f845 c002 	str.w	ip, [r5, r2]
 80062a6:	9a03      	ldr	r2, [sp, #12]
 80062a8:	3304      	adds	r3, #4
 80062aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062ae:	f1b9 0f00 	cmp.w	r9, #0
 80062b2:	d021      	beq.n	80062f8 <__multiply+0x140>
 80062b4:	46ae      	mov	lr, r5
 80062b6:	f04f 0a00 	mov.w	sl, #0
 80062ba:	6829      	ldr	r1, [r5, #0]
 80062bc:	f104 0c14 	add.w	ip, r4, #20
 80062c0:	f8bc b000 	ldrh.w	fp, [ip]
 80062c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062c8:	b289      	uxth	r1, r1
 80062ca:	fb09 220b 	mla	r2, r9, fp, r2
 80062ce:	4452      	add	r2, sl
 80062d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062d4:	f84e 1b04 	str.w	r1, [lr], #4
 80062d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062e0:	f8be 1000 	ldrh.w	r1, [lr]
 80062e4:	4567      	cmp	r7, ip
 80062e6:	fb09 110a 	mla	r1, r9, sl, r1
 80062ea:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80062ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062f2:	d8e5      	bhi.n	80062c0 <__multiply+0x108>
 80062f4:	9a01      	ldr	r2, [sp, #4]
 80062f6:	50a9      	str	r1, [r5, r2]
 80062f8:	3504      	adds	r5, #4
 80062fa:	e79a      	b.n	8006232 <__multiply+0x7a>
 80062fc:	3e01      	subs	r6, #1
 80062fe:	e79c      	b.n	800623a <__multiply+0x82>
 8006300:	08006e5e 	.word	0x08006e5e
 8006304:	08006e6f 	.word	0x08006e6f

08006308 <__pow5mult>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4615      	mov	r5, r2
 800630e:	f012 0203 	ands.w	r2, r2, #3
 8006312:	4606      	mov	r6, r0
 8006314:	460f      	mov	r7, r1
 8006316:	d007      	beq.n	8006328 <__pow5mult+0x20>
 8006318:	4c25      	ldr	r4, [pc, #148]	; (80063b0 <__pow5mult+0xa8>)
 800631a:	3a01      	subs	r2, #1
 800631c:	2300      	movs	r3, #0
 800631e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006322:	f7ff fe9f 	bl	8006064 <__multadd>
 8006326:	4607      	mov	r7, r0
 8006328:	10ad      	asrs	r5, r5, #2
 800632a:	d03d      	beq.n	80063a8 <__pow5mult+0xa0>
 800632c:	69f4      	ldr	r4, [r6, #28]
 800632e:	b97c      	cbnz	r4, 8006350 <__pow5mult+0x48>
 8006330:	2010      	movs	r0, #16
 8006332:	f7ff fd81 	bl	8005e38 <malloc>
 8006336:	4602      	mov	r2, r0
 8006338:	61f0      	str	r0, [r6, #28]
 800633a:	b928      	cbnz	r0, 8006348 <__pow5mult+0x40>
 800633c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006340:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <__pow5mult+0xac>)
 8006342:	481d      	ldr	r0, [pc, #116]	; (80063b8 <__pow5mult+0xb0>)
 8006344:	f000 fc32 	bl	8006bac <__assert_func>
 8006348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800634c:	6004      	str	r4, [r0, #0]
 800634e:	60c4      	str	r4, [r0, #12]
 8006350:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006358:	b94c      	cbnz	r4, 800636e <__pow5mult+0x66>
 800635a:	f240 2171 	movw	r1, #625	; 0x271
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff14 	bl	800618c <__i2b>
 8006364:	2300      	movs	r3, #0
 8006366:	4604      	mov	r4, r0
 8006368:	f8c8 0008 	str.w	r0, [r8, #8]
 800636c:	6003      	str	r3, [r0, #0]
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	07eb      	lsls	r3, r5, #31
 8006374:	d50a      	bpl.n	800638c <__pow5mult+0x84>
 8006376:	4639      	mov	r1, r7
 8006378:	4622      	mov	r2, r4
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ff1c 	bl	80061b8 <__multiply>
 8006380:	4680      	mov	r8, r0
 8006382:	4639      	mov	r1, r7
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff fe4b 	bl	8006020 <_Bfree>
 800638a:	4647      	mov	r7, r8
 800638c:	106d      	asrs	r5, r5, #1
 800638e:	d00b      	beq.n	80063a8 <__pow5mult+0xa0>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	b938      	cbnz	r0, 80063a4 <__pow5mult+0x9c>
 8006394:	4622      	mov	r2, r4
 8006396:	4621      	mov	r1, r4
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff ff0d 	bl	80061b8 <__multiply>
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	f8c0 9000 	str.w	r9, [r0]
 80063a4:	4604      	mov	r4, r0
 80063a6:	e7e4      	b.n	8006372 <__pow5mult+0x6a>
 80063a8:	4638      	mov	r0, r7
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	bf00      	nop
 80063b0:	08006fb8 	.word	0x08006fb8
 80063b4:	08006def 	.word	0x08006def
 80063b8:	08006e6f 	.word	0x08006e6f

080063bc <__lshift>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	460c      	mov	r4, r1
 80063c2:	4607      	mov	r7, r0
 80063c4:	4691      	mov	r9, r2
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	6849      	ldr	r1, [r1, #4]
 80063ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d4:	f108 0601 	add.w	r6, r8, #1
 80063d8:	42b3      	cmp	r3, r6
 80063da:	db0b      	blt.n	80063f4 <__lshift+0x38>
 80063dc:	4638      	mov	r0, r7
 80063de:	f7ff fddf 	bl	8005fa0 <_Balloc>
 80063e2:	4605      	mov	r5, r0
 80063e4:	b948      	cbnz	r0, 80063fa <__lshift+0x3e>
 80063e6:	4602      	mov	r2, r0
 80063e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80063ec:	4b27      	ldr	r3, [pc, #156]	; (800648c <__lshift+0xd0>)
 80063ee:	4828      	ldr	r0, [pc, #160]	; (8006490 <__lshift+0xd4>)
 80063f0:	f000 fbdc 	bl	8006bac <__assert_func>
 80063f4:	3101      	adds	r1, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	e7ee      	b.n	80063d8 <__lshift+0x1c>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f100 0114 	add.w	r1, r0, #20
 8006400:	f100 0210 	add.w	r2, r0, #16
 8006404:	4618      	mov	r0, r3
 8006406:	4553      	cmp	r3, sl
 8006408:	db33      	blt.n	8006472 <__lshift+0xb6>
 800640a:	6920      	ldr	r0, [r4, #16]
 800640c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006410:	f104 0314 	add.w	r3, r4, #20
 8006414:	f019 091f 	ands.w	r9, r9, #31
 8006418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800641c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006420:	d02b      	beq.n	800647a <__lshift+0xbe>
 8006422:	468a      	mov	sl, r1
 8006424:	2200      	movs	r2, #0
 8006426:	f1c9 0e20 	rsb	lr, r9, #32
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	fa00 f009 	lsl.w	r0, r0, r9
 8006430:	4310      	orrs	r0, r2
 8006432:	f84a 0b04 	str.w	r0, [sl], #4
 8006436:	f853 2b04 	ldr.w	r2, [r3], #4
 800643a:	459c      	cmp	ip, r3
 800643c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006440:	d8f3      	bhi.n	800642a <__lshift+0x6e>
 8006442:	ebac 0304 	sub.w	r3, ip, r4
 8006446:	3b15      	subs	r3, #21
 8006448:	f023 0303 	bic.w	r3, r3, #3
 800644c:	3304      	adds	r3, #4
 800644e:	f104 0015 	add.w	r0, r4, #21
 8006452:	4584      	cmp	ip, r0
 8006454:	bf38      	it	cc
 8006456:	2304      	movcc	r3, #4
 8006458:	50ca      	str	r2, [r1, r3]
 800645a:	b10a      	cbz	r2, 8006460 <__lshift+0xa4>
 800645c:	f108 0602 	add.w	r6, r8, #2
 8006460:	3e01      	subs	r6, #1
 8006462:	4638      	mov	r0, r7
 8006464:	4621      	mov	r1, r4
 8006466:	612e      	str	r6, [r5, #16]
 8006468:	f7ff fdda 	bl	8006020 <_Bfree>
 800646c:	4628      	mov	r0, r5
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	f842 0f04 	str.w	r0, [r2, #4]!
 8006476:	3301      	adds	r3, #1
 8006478:	e7c5      	b.n	8006406 <__lshift+0x4a>
 800647a:	3904      	subs	r1, #4
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	459c      	cmp	ip, r3
 8006482:	f841 2f04 	str.w	r2, [r1, #4]!
 8006486:	d8f9      	bhi.n	800647c <__lshift+0xc0>
 8006488:	e7ea      	b.n	8006460 <__lshift+0xa4>
 800648a:	bf00      	nop
 800648c:	08006e5e 	.word	0x08006e5e
 8006490:	08006e6f 	.word	0x08006e6f

08006494 <__mcmp>:
 8006494:	4603      	mov	r3, r0
 8006496:	690a      	ldr	r2, [r1, #16]
 8006498:	6900      	ldr	r0, [r0, #16]
 800649a:	b530      	push	{r4, r5, lr}
 800649c:	1a80      	subs	r0, r0, r2
 800649e:	d10d      	bne.n	80064bc <__mcmp+0x28>
 80064a0:	3314      	adds	r3, #20
 80064a2:	3114      	adds	r1, #20
 80064a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064b4:	4295      	cmp	r5, r2
 80064b6:	d002      	beq.n	80064be <__mcmp+0x2a>
 80064b8:	d304      	bcc.n	80064c4 <__mcmp+0x30>
 80064ba:	2001      	movs	r0, #1
 80064bc:	bd30      	pop	{r4, r5, pc}
 80064be:	42a3      	cmp	r3, r4
 80064c0:	d3f4      	bcc.n	80064ac <__mcmp+0x18>
 80064c2:	e7fb      	b.n	80064bc <__mcmp+0x28>
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	e7f8      	b.n	80064bc <__mcmp+0x28>
	...

080064cc <__mdiff>:
 80064cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d0:	460d      	mov	r5, r1
 80064d2:	4607      	mov	r7, r0
 80064d4:	4611      	mov	r1, r2
 80064d6:	4628      	mov	r0, r5
 80064d8:	4614      	mov	r4, r2
 80064da:	f7ff ffdb 	bl	8006494 <__mcmp>
 80064de:	1e06      	subs	r6, r0, #0
 80064e0:	d111      	bne.n	8006506 <__mdiff+0x3a>
 80064e2:	4631      	mov	r1, r6
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff fd5b 	bl	8005fa0 <_Balloc>
 80064ea:	4602      	mov	r2, r0
 80064ec:	b928      	cbnz	r0, 80064fa <__mdiff+0x2e>
 80064ee:	f240 2137 	movw	r1, #567	; 0x237
 80064f2:	4b3a      	ldr	r3, [pc, #232]	; (80065dc <__mdiff+0x110>)
 80064f4:	483a      	ldr	r0, [pc, #232]	; (80065e0 <__mdiff+0x114>)
 80064f6:	f000 fb59 	bl	8006bac <__assert_func>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006500:	4610      	mov	r0, r2
 8006502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	bfa4      	itt	ge
 8006508:	4623      	movge	r3, r4
 800650a:	462c      	movge	r4, r5
 800650c:	4638      	mov	r0, r7
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	bfa6      	itte	ge
 8006512:	461d      	movge	r5, r3
 8006514:	2600      	movge	r6, #0
 8006516:	2601      	movlt	r6, #1
 8006518:	f7ff fd42 	bl	8005fa0 <_Balloc>
 800651c:	4602      	mov	r2, r0
 800651e:	b918      	cbnz	r0, 8006528 <__mdiff+0x5c>
 8006520:	f240 2145 	movw	r1, #581	; 0x245
 8006524:	4b2d      	ldr	r3, [pc, #180]	; (80065dc <__mdiff+0x110>)
 8006526:	e7e5      	b.n	80064f4 <__mdiff+0x28>
 8006528:	f102 0814 	add.w	r8, r2, #20
 800652c:	46c2      	mov	sl, r8
 800652e:	f04f 0c00 	mov.w	ip, #0
 8006532:	6927      	ldr	r7, [r4, #16]
 8006534:	60c6      	str	r6, [r0, #12]
 8006536:	692e      	ldr	r6, [r5, #16]
 8006538:	f104 0014 	add.w	r0, r4, #20
 800653c:	f105 0914 	add.w	r9, r5, #20
 8006540:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006544:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006548:	3410      	adds	r4, #16
 800654a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800654e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006552:	fa1f f18b 	uxth.w	r1, fp
 8006556:	4461      	add	r1, ip
 8006558:	fa1f fc83 	uxth.w	ip, r3
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	eba1 010c 	sub.w	r1, r1, ip
 8006562:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006566:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800656a:	b289      	uxth	r1, r1
 800656c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006570:	454e      	cmp	r6, r9
 8006572:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006576:	f84a 1b04 	str.w	r1, [sl], #4
 800657a:	d8e6      	bhi.n	800654a <__mdiff+0x7e>
 800657c:	1b73      	subs	r3, r6, r5
 800657e:	3b15      	subs	r3, #21
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	3515      	adds	r5, #21
 8006586:	3304      	adds	r3, #4
 8006588:	42ae      	cmp	r6, r5
 800658a:	bf38      	it	cc
 800658c:	2304      	movcc	r3, #4
 800658e:	4418      	add	r0, r3
 8006590:	4443      	add	r3, r8
 8006592:	461e      	mov	r6, r3
 8006594:	4605      	mov	r5, r0
 8006596:	4575      	cmp	r5, lr
 8006598:	d30e      	bcc.n	80065b8 <__mdiff+0xec>
 800659a:	f10e 0103 	add.w	r1, lr, #3
 800659e:	1a09      	subs	r1, r1, r0
 80065a0:	f021 0103 	bic.w	r1, r1, #3
 80065a4:	3803      	subs	r0, #3
 80065a6:	4586      	cmp	lr, r0
 80065a8:	bf38      	it	cc
 80065aa:	2100      	movcc	r1, #0
 80065ac:	440b      	add	r3, r1
 80065ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065b2:	b189      	cbz	r1, 80065d8 <__mdiff+0x10c>
 80065b4:	6117      	str	r7, [r2, #16]
 80065b6:	e7a3      	b.n	8006500 <__mdiff+0x34>
 80065b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80065bc:	fa1f f188 	uxth.w	r1, r8
 80065c0:	4461      	add	r1, ip
 80065c2:	140c      	asrs	r4, r1, #16
 80065c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065c8:	b289      	uxth	r1, r1
 80065ca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065ce:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80065d2:	f846 1b04 	str.w	r1, [r6], #4
 80065d6:	e7de      	b.n	8006596 <__mdiff+0xca>
 80065d8:	3f01      	subs	r7, #1
 80065da:	e7e8      	b.n	80065ae <__mdiff+0xe2>
 80065dc:	08006e5e 	.word	0x08006e5e
 80065e0:	08006e6f 	.word	0x08006e6f

080065e4 <__d2b>:
 80065e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e6:	2101      	movs	r1, #1
 80065e8:	4617      	mov	r7, r2
 80065ea:	461c      	mov	r4, r3
 80065ec:	9e08      	ldr	r6, [sp, #32]
 80065ee:	f7ff fcd7 	bl	8005fa0 <_Balloc>
 80065f2:	4605      	mov	r5, r0
 80065f4:	b930      	cbnz	r0, 8006604 <__d2b+0x20>
 80065f6:	4602      	mov	r2, r0
 80065f8:	f240 310f 	movw	r1, #783	; 0x30f
 80065fc:	4b22      	ldr	r3, [pc, #136]	; (8006688 <__d2b+0xa4>)
 80065fe:	4823      	ldr	r0, [pc, #140]	; (800668c <__d2b+0xa8>)
 8006600:	f000 fad4 	bl	8006bac <__assert_func>
 8006604:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006608:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800660c:	bb24      	cbnz	r4, 8006658 <__d2b+0x74>
 800660e:	2f00      	cmp	r7, #0
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	d026      	beq.n	8006662 <__d2b+0x7e>
 8006614:	4668      	mov	r0, sp
 8006616:	9700      	str	r7, [sp, #0]
 8006618:	f7ff fd8a 	bl	8006130 <__lo0bits>
 800661c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006620:	b1e8      	cbz	r0, 800665e <__d2b+0x7a>
 8006622:	f1c0 0320 	rsb	r3, r0, #32
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	430b      	orrs	r3, r1
 800662c:	40c2      	lsrs	r2, r0
 800662e:	616b      	str	r3, [r5, #20]
 8006630:	9201      	str	r2, [sp, #4]
 8006632:	9b01      	ldr	r3, [sp, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf14      	ite	ne
 8006638:	2102      	movne	r1, #2
 800663a:	2101      	moveq	r1, #1
 800663c:	61ab      	str	r3, [r5, #24]
 800663e:	6129      	str	r1, [r5, #16]
 8006640:	b1bc      	cbz	r4, 8006672 <__d2b+0x8e>
 8006642:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006646:	4404      	add	r4, r0
 8006648:	6034      	str	r4, [r6, #0]
 800664a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	6018      	str	r0, [r3, #0]
 8006652:	4628      	mov	r0, r5
 8006654:	b003      	add	sp, #12
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665c:	e7d7      	b.n	800660e <__d2b+0x2a>
 800665e:	6169      	str	r1, [r5, #20]
 8006660:	e7e7      	b.n	8006632 <__d2b+0x4e>
 8006662:	a801      	add	r0, sp, #4
 8006664:	f7ff fd64 	bl	8006130 <__lo0bits>
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	2101      	movs	r1, #1
 800666c:	616b      	str	r3, [r5, #20]
 800666e:	3020      	adds	r0, #32
 8006670:	e7e5      	b.n	800663e <__d2b+0x5a>
 8006672:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006676:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800667a:	6030      	str	r0, [r6, #0]
 800667c:	6918      	ldr	r0, [r3, #16]
 800667e:	f7ff fd37 	bl	80060f0 <__hi0bits>
 8006682:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006686:	e7e2      	b.n	800664e <__d2b+0x6a>
 8006688:	08006e5e 	.word	0x08006e5e
 800668c:	08006e6f 	.word	0x08006e6f

08006690 <__sfputc_r>:
 8006690:	6893      	ldr	r3, [r2, #8]
 8006692:	b410      	push	{r4}
 8006694:	3b01      	subs	r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	6093      	str	r3, [r2, #8]
 800669a:	da07      	bge.n	80066ac <__sfputc_r+0x1c>
 800669c:	6994      	ldr	r4, [r2, #24]
 800669e:	42a3      	cmp	r3, r4
 80066a0:	db01      	blt.n	80066a6 <__sfputc_r+0x16>
 80066a2:	290a      	cmp	r1, #10
 80066a4:	d102      	bne.n	80066ac <__sfputc_r+0x1c>
 80066a6:	bc10      	pop	{r4}
 80066a8:	f7fe bbef 	b.w	8004e8a <__swbuf_r>
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	1c58      	adds	r0, r3, #1
 80066b0:	6010      	str	r0, [r2, #0]
 80066b2:	7019      	strb	r1, [r3, #0]
 80066b4:	4608      	mov	r0, r1
 80066b6:	bc10      	pop	{r4}
 80066b8:	4770      	bx	lr

080066ba <__sfputs_r>:
 80066ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	4614      	mov	r4, r2
 80066c2:	18d5      	adds	r5, r2, r3
 80066c4:	42ac      	cmp	r4, r5
 80066c6:	d101      	bne.n	80066cc <__sfputs_r+0x12>
 80066c8:	2000      	movs	r0, #0
 80066ca:	e007      	b.n	80066dc <__sfputs_r+0x22>
 80066cc:	463a      	mov	r2, r7
 80066ce:	4630      	mov	r0, r6
 80066d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d4:	f7ff ffdc 	bl	8006690 <__sfputc_r>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d1f3      	bne.n	80066c4 <__sfputs_r+0xa>
 80066dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e0 <_vfiprintf_r>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	460d      	mov	r5, r1
 80066e6:	4614      	mov	r4, r2
 80066e8:	4698      	mov	r8, r3
 80066ea:	4606      	mov	r6, r0
 80066ec:	b09d      	sub	sp, #116	; 0x74
 80066ee:	b118      	cbz	r0, 80066f8 <_vfiprintf_r+0x18>
 80066f0:	6a03      	ldr	r3, [r0, #32]
 80066f2:	b90b      	cbnz	r3, 80066f8 <_vfiprintf_r+0x18>
 80066f4:	f7fe fb3e 	bl	8004d74 <__sinit>
 80066f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066fa:	07d9      	lsls	r1, r3, #31
 80066fc:	d405      	bmi.n	800670a <_vfiprintf_r+0x2a>
 80066fe:	89ab      	ldrh	r3, [r5, #12]
 8006700:	059a      	lsls	r2, r3, #22
 8006702:	d402      	bmi.n	800670a <_vfiprintf_r+0x2a>
 8006704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006706:	f7fe fcd2 	bl	80050ae <__retarget_lock_acquire_recursive>
 800670a:	89ab      	ldrh	r3, [r5, #12]
 800670c:	071b      	lsls	r3, r3, #28
 800670e:	d501      	bpl.n	8006714 <_vfiprintf_r+0x34>
 8006710:	692b      	ldr	r3, [r5, #16]
 8006712:	b99b      	cbnz	r3, 800673c <_vfiprintf_r+0x5c>
 8006714:	4629      	mov	r1, r5
 8006716:	4630      	mov	r0, r6
 8006718:	f7fe fbf4 	bl	8004f04 <__swsetup_r>
 800671c:	b170      	cbz	r0, 800673c <_vfiprintf_r+0x5c>
 800671e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006720:	07dc      	lsls	r4, r3, #31
 8006722:	d504      	bpl.n	800672e <_vfiprintf_r+0x4e>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	b01d      	add	sp, #116	; 0x74
 800672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	0598      	lsls	r0, r3, #22
 8006732:	d4f7      	bmi.n	8006724 <_vfiprintf_r+0x44>
 8006734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006736:	f7fe fcbb 	bl	80050b0 <__retarget_lock_release_recursive>
 800673a:	e7f3      	b.n	8006724 <_vfiprintf_r+0x44>
 800673c:	2300      	movs	r3, #0
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	2320      	movs	r3, #32
 8006742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006746:	2330      	movs	r3, #48	; 0x30
 8006748:	f04f 0901 	mov.w	r9, #1
 800674c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006750:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006900 <_vfiprintf_r+0x220>
 8006754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006758:	4623      	mov	r3, r4
 800675a:	469a      	mov	sl, r3
 800675c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006760:	b10a      	cbz	r2, 8006766 <_vfiprintf_r+0x86>
 8006762:	2a25      	cmp	r2, #37	; 0x25
 8006764:	d1f9      	bne.n	800675a <_vfiprintf_r+0x7a>
 8006766:	ebba 0b04 	subs.w	fp, sl, r4
 800676a:	d00b      	beq.n	8006784 <_vfiprintf_r+0xa4>
 800676c:	465b      	mov	r3, fp
 800676e:	4622      	mov	r2, r4
 8006770:	4629      	mov	r1, r5
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ffa1 	bl	80066ba <__sfputs_r>
 8006778:	3001      	adds	r0, #1
 800677a:	f000 80a9 	beq.w	80068d0 <_vfiprintf_r+0x1f0>
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	445a      	add	r2, fp
 8006782:	9209      	str	r2, [sp, #36]	; 0x24
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a1 	beq.w	80068d0 <_vfiprintf_r+0x1f0>
 800678e:	2300      	movs	r3, #0
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a4:	931a      	str	r3, [sp, #104]	; 0x68
 80067a6:	4654      	mov	r4, sl
 80067a8:	2205      	movs	r2, #5
 80067aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ae:	4854      	ldr	r0, [pc, #336]	; (8006900 <_vfiprintf_r+0x220>)
 80067b0:	f7fe fc7f 	bl	80050b2 <memchr>
 80067b4:	9a04      	ldr	r2, [sp, #16]
 80067b6:	b9d8      	cbnz	r0, 80067f0 <_vfiprintf_r+0x110>
 80067b8:	06d1      	lsls	r1, r2, #27
 80067ba:	bf44      	itt	mi
 80067bc:	2320      	movmi	r3, #32
 80067be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c2:	0713      	lsls	r3, r2, #28
 80067c4:	bf44      	itt	mi
 80067c6:	232b      	movmi	r3, #43	; 0x2b
 80067c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067cc:	f89a 3000 	ldrb.w	r3, [sl]
 80067d0:	2b2a      	cmp	r3, #42	; 0x2a
 80067d2:	d015      	beq.n	8006800 <_vfiprintf_r+0x120>
 80067d4:	4654      	mov	r4, sl
 80067d6:	2000      	movs	r0, #0
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	4621      	mov	r1, r4
 80067e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e4:	3b30      	subs	r3, #48	; 0x30
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d94d      	bls.n	8006886 <_vfiprintf_r+0x1a6>
 80067ea:	b1b0      	cbz	r0, 800681a <_vfiprintf_r+0x13a>
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	e014      	b.n	800681a <_vfiprintf_r+0x13a>
 80067f0:	eba0 0308 	sub.w	r3, r0, r8
 80067f4:	fa09 f303 	lsl.w	r3, r9, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	46a2      	mov	sl, r4
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	e7d2      	b.n	80067a6 <_vfiprintf_r+0xc6>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	1d19      	adds	r1, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	9103      	str	r1, [sp, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfbb      	ittet	lt
 800680c:	425b      	neglt	r3, r3
 800680e:	f042 0202 	orrlt.w	r2, r2, #2
 8006812:	9307      	strge	r3, [sp, #28]
 8006814:	9307      	strlt	r3, [sp, #28]
 8006816:	bfb8      	it	lt
 8006818:	9204      	strlt	r2, [sp, #16]
 800681a:	7823      	ldrb	r3, [r4, #0]
 800681c:	2b2e      	cmp	r3, #46	; 0x2e
 800681e:	d10c      	bne.n	800683a <_vfiprintf_r+0x15a>
 8006820:	7863      	ldrb	r3, [r4, #1]
 8006822:	2b2a      	cmp	r3, #42	; 0x2a
 8006824:	d134      	bne.n	8006890 <_vfiprintf_r+0x1b0>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3402      	adds	r4, #2
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	9203      	str	r2, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfb8      	it	lt
 8006834:	f04f 33ff 	movlt.w	r3, #4294967295
 8006838:	9305      	str	r3, [sp, #20]
 800683a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006904 <_vfiprintf_r+0x224>
 800683e:	2203      	movs	r2, #3
 8006840:	4650      	mov	r0, sl
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	f7fe fc35 	bl	80050b2 <memchr>
 8006848:	b138      	cbz	r0, 800685a <_vfiprintf_r+0x17a>
 800684a:	2240      	movs	r2, #64	; 0x40
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	eba0 000a 	sub.w	r0, r0, sl
 8006852:	4082      	lsls	r2, r0
 8006854:	4313      	orrs	r3, r2
 8006856:	3401      	adds	r4, #1
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800685e:	2206      	movs	r2, #6
 8006860:	4829      	ldr	r0, [pc, #164]	; (8006908 <_vfiprintf_r+0x228>)
 8006862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006866:	f7fe fc24 	bl	80050b2 <memchr>
 800686a:	2800      	cmp	r0, #0
 800686c:	d03f      	beq.n	80068ee <_vfiprintf_r+0x20e>
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <_vfiprintf_r+0x22c>)
 8006870:	bb1b      	cbnz	r3, 80068ba <_vfiprintf_r+0x1da>
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	3307      	adds	r3, #7
 8006876:	f023 0307 	bic.w	r3, r3, #7
 800687a:	3308      	adds	r3, #8
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006880:	443b      	add	r3, r7
 8006882:	9309      	str	r3, [sp, #36]	; 0x24
 8006884:	e768      	b.n	8006758 <_vfiprintf_r+0x78>
 8006886:	460c      	mov	r4, r1
 8006888:	2001      	movs	r0, #1
 800688a:	fb0c 3202 	mla	r2, ip, r2, r3
 800688e:	e7a6      	b.n	80067de <_vfiprintf_r+0xfe>
 8006890:	2300      	movs	r3, #0
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4619      	mov	r1, r3
 8006898:	3401      	adds	r4, #1
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	4620      	mov	r0, r4
 800689e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a2:	3a30      	subs	r2, #48	; 0x30
 80068a4:	2a09      	cmp	r2, #9
 80068a6:	d903      	bls.n	80068b0 <_vfiprintf_r+0x1d0>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0c6      	beq.n	800683a <_vfiprintf_r+0x15a>
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	e7c4      	b.n	800683a <_vfiprintf_r+0x15a>
 80068b0:	4604      	mov	r4, r0
 80068b2:	2301      	movs	r3, #1
 80068b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b8:	e7f0      	b.n	800689c <_vfiprintf_r+0x1bc>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	4b13      	ldr	r3, [pc, #76]	; (8006910 <_vfiprintf_r+0x230>)
 80068c4:	a904      	add	r1, sp, #16
 80068c6:	f7fd fe07 	bl	80044d8 <_printf_float>
 80068ca:	4607      	mov	r7, r0
 80068cc:	1c78      	adds	r0, r7, #1
 80068ce:	d1d6      	bne.n	800687e <_vfiprintf_r+0x19e>
 80068d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d2:	07d9      	lsls	r1, r3, #31
 80068d4:	d405      	bmi.n	80068e2 <_vfiprintf_r+0x202>
 80068d6:	89ab      	ldrh	r3, [r5, #12]
 80068d8:	059a      	lsls	r2, r3, #22
 80068da:	d402      	bmi.n	80068e2 <_vfiprintf_r+0x202>
 80068dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068de:	f7fe fbe7 	bl	80050b0 <__retarget_lock_release_recursive>
 80068e2:	89ab      	ldrh	r3, [r5, #12]
 80068e4:	065b      	lsls	r3, r3, #25
 80068e6:	f53f af1d 	bmi.w	8006724 <_vfiprintf_r+0x44>
 80068ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ec:	e71c      	b.n	8006728 <_vfiprintf_r+0x48>
 80068ee:	ab03      	add	r3, sp, #12
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	462a      	mov	r2, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <_vfiprintf_r+0x230>)
 80068f8:	a904      	add	r1, sp, #16
 80068fa:	f7fe f88d 	bl	8004a18 <_printf_i>
 80068fe:	e7e4      	b.n	80068ca <_vfiprintf_r+0x1ea>
 8006900:	08006fc4 	.word	0x08006fc4
 8006904:	08006fca 	.word	0x08006fca
 8006908:	08006fce 	.word	0x08006fce
 800690c:	080044d9 	.word	0x080044d9
 8006910:	080066bb 	.word	0x080066bb

08006914 <__sflush_r>:
 8006914:	898a      	ldrh	r2, [r1, #12]
 8006916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006918:	4605      	mov	r5, r0
 800691a:	0710      	lsls	r0, r2, #28
 800691c:	460c      	mov	r4, r1
 800691e:	d457      	bmi.n	80069d0 <__sflush_r+0xbc>
 8006920:	684b      	ldr	r3, [r1, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	dc04      	bgt.n	8006930 <__sflush_r+0x1c>
 8006926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	dc01      	bgt.n	8006930 <__sflush_r+0x1c>
 800692c:	2000      	movs	r0, #0
 800692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006932:	2e00      	cmp	r6, #0
 8006934:	d0fa      	beq.n	800692c <__sflush_r+0x18>
 8006936:	2300      	movs	r3, #0
 8006938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800693c:	682f      	ldr	r7, [r5, #0]
 800693e:	6a21      	ldr	r1, [r4, #32]
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	d032      	beq.n	80069aa <__sflush_r+0x96>
 8006944:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	075a      	lsls	r2, r3, #29
 800694a:	d505      	bpl.n	8006958 <__sflush_r+0x44>
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	1ac0      	subs	r0, r0, r3
 8006950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006952:	b10b      	cbz	r3, 8006958 <__sflush_r+0x44>
 8006954:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006956:	1ac0      	subs	r0, r0, r3
 8006958:	2300      	movs	r3, #0
 800695a:	4602      	mov	r2, r0
 800695c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800695e:	4628      	mov	r0, r5
 8006960:	6a21      	ldr	r1, [r4, #32]
 8006962:	47b0      	blx	r6
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	d106      	bne.n	8006978 <__sflush_r+0x64>
 800696a:	6829      	ldr	r1, [r5, #0]
 800696c:	291d      	cmp	r1, #29
 800696e:	d82b      	bhi.n	80069c8 <__sflush_r+0xb4>
 8006970:	4a28      	ldr	r2, [pc, #160]	; (8006a14 <__sflush_r+0x100>)
 8006972:	410a      	asrs	r2, r1
 8006974:	07d6      	lsls	r6, r2, #31
 8006976:	d427      	bmi.n	80069c8 <__sflush_r+0xb4>
 8006978:	2200      	movs	r2, #0
 800697a:	6062      	str	r2, [r4, #4]
 800697c:	6922      	ldr	r2, [r4, #16]
 800697e:	04d9      	lsls	r1, r3, #19
 8006980:	6022      	str	r2, [r4, #0]
 8006982:	d504      	bpl.n	800698e <__sflush_r+0x7a>
 8006984:	1c42      	adds	r2, r0, #1
 8006986:	d101      	bne.n	800698c <__sflush_r+0x78>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b903      	cbnz	r3, 800698e <__sflush_r+0x7a>
 800698c:	6560      	str	r0, [r4, #84]	; 0x54
 800698e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006990:	602f      	str	r7, [r5, #0]
 8006992:	2900      	cmp	r1, #0
 8006994:	d0ca      	beq.n	800692c <__sflush_r+0x18>
 8006996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800699a:	4299      	cmp	r1, r3
 800699c:	d002      	beq.n	80069a4 <__sflush_r+0x90>
 800699e:	4628      	mov	r0, r5
 80069a0:	f7ff fa02 	bl	8005da8 <_free_r>
 80069a4:	2000      	movs	r0, #0
 80069a6:	6360      	str	r0, [r4, #52]	; 0x34
 80069a8:	e7c1      	b.n	800692e <__sflush_r+0x1a>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b0      	blx	r6
 80069b0:	1c41      	adds	r1, r0, #1
 80069b2:	d1c8      	bne.n	8006946 <__sflush_r+0x32>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0c5      	beq.n	8006946 <__sflush_r+0x32>
 80069ba:	2b1d      	cmp	r3, #29
 80069bc:	d001      	beq.n	80069c2 <__sflush_r+0xae>
 80069be:	2b16      	cmp	r3, #22
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0xb2>
 80069c2:	602f      	str	r7, [r5, #0]
 80069c4:	e7b2      	b.n	800692c <__sflush_r+0x18>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	e7ae      	b.n	800692e <__sflush_r+0x1a>
 80069d0:	690f      	ldr	r7, [r1, #16]
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	d0aa      	beq.n	800692c <__sflush_r+0x18>
 80069d6:	0793      	lsls	r3, r2, #30
 80069d8:	bf18      	it	ne
 80069da:	2300      	movne	r3, #0
 80069dc:	680e      	ldr	r6, [r1, #0]
 80069de:	bf08      	it	eq
 80069e0:	694b      	ldreq	r3, [r1, #20]
 80069e2:	1bf6      	subs	r6, r6, r7
 80069e4:	600f      	str	r7, [r1, #0]
 80069e6:	608b      	str	r3, [r1, #8]
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	dd9f      	ble.n	800692c <__sflush_r+0x18>
 80069ec:	4633      	mov	r3, r6
 80069ee:	463a      	mov	r2, r7
 80069f0:	4628      	mov	r0, r5
 80069f2:	6a21      	ldr	r1, [r4, #32]
 80069f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80069f8:	47e0      	blx	ip
 80069fa:	2800      	cmp	r0, #0
 80069fc:	dc06      	bgt.n	8006a0c <__sflush_r+0xf8>
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e790      	b.n	800692e <__sflush_r+0x1a>
 8006a0c:	4407      	add	r7, r0
 8006a0e:	1a36      	subs	r6, r6, r0
 8006a10:	e7ea      	b.n	80069e8 <__sflush_r+0xd4>
 8006a12:	bf00      	nop
 8006a14:	dfbffffe 	.word	0xdfbffffe

08006a18 <_fflush_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	690b      	ldr	r3, [r1, #16]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	b913      	cbnz	r3, 8006a28 <_fflush_r+0x10>
 8006a22:	2500      	movs	r5, #0
 8006a24:	4628      	mov	r0, r5
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	b118      	cbz	r0, 8006a32 <_fflush_r+0x1a>
 8006a2a:	6a03      	ldr	r3, [r0, #32]
 8006a2c:	b90b      	cbnz	r3, 8006a32 <_fflush_r+0x1a>
 8006a2e:	f7fe f9a1 	bl	8004d74 <__sinit>
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f3      	beq.n	8006a22 <_fflush_r+0xa>
 8006a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a3c:	07d0      	lsls	r0, r2, #31
 8006a3e:	d404      	bmi.n	8006a4a <_fflush_r+0x32>
 8006a40:	0599      	lsls	r1, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_fflush_r+0x32>
 8006a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a46:	f7fe fb32 	bl	80050ae <__retarget_lock_acquire_recursive>
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	f7ff ff61 	bl	8006914 <__sflush_r>
 8006a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a54:	4605      	mov	r5, r0
 8006a56:	07da      	lsls	r2, r3, #31
 8006a58:	d4e4      	bmi.n	8006a24 <_fflush_r+0xc>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	059b      	lsls	r3, r3, #22
 8006a5e:	d4e1      	bmi.n	8006a24 <_fflush_r+0xc>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f7fe fb25 	bl	80050b0 <__retarget_lock_release_recursive>
 8006a66:	e7dd      	b.n	8006a24 <_fflush_r+0xc>

08006a68 <__swhatbuf_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a70:	4615      	mov	r5, r2
 8006a72:	2900      	cmp	r1, #0
 8006a74:	461e      	mov	r6, r3
 8006a76:	b096      	sub	sp, #88	; 0x58
 8006a78:	da0c      	bge.n	8006a94 <__swhatbuf_r+0x2c>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a82:	bf0c      	ite	eq
 8006a84:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a88:	2340      	movne	r3, #64	; 0x40
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	6031      	str	r1, [r6, #0]
 8006a8e:	602b      	str	r3, [r5, #0]
 8006a90:	b016      	add	sp, #88	; 0x58
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	466a      	mov	r2, sp
 8006a96:	f000 f849 	bl	8006b2c <_fstat_r>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	dbed      	blt.n	8006a7a <__swhatbuf_r+0x12>
 8006a9e:	9901      	ldr	r1, [sp, #4]
 8006aa0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006aa4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006aa8:	4259      	negs	r1, r3
 8006aaa:	4159      	adcs	r1, r3
 8006aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab0:	e7eb      	b.n	8006a8a <__swhatbuf_r+0x22>

08006ab2 <__smakebuf_r>:
 8006ab2:	898b      	ldrh	r3, [r1, #12]
 8006ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab6:	079d      	lsls	r5, r3, #30
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	d507      	bpl.n	8006ace <__smakebuf_r+0x1c>
 8006abe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	6163      	str	r3, [r4, #20]
 8006aca:	b002      	add	sp, #8
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	466a      	mov	r2, sp
 8006ad0:	ab01      	add	r3, sp, #4
 8006ad2:	f7ff ffc9 	bl	8006a68 <__swhatbuf_r>
 8006ad6:	9900      	ldr	r1, [sp, #0]
 8006ad8:	4605      	mov	r5, r0
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff f9d4 	bl	8005e88 <_malloc_r>
 8006ae0:	b948      	cbnz	r0, 8006af6 <__smakebuf_r+0x44>
 8006ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae6:	059a      	lsls	r2, r3, #22
 8006ae8:	d4ef      	bmi.n	8006aca <__smakebuf_r+0x18>
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	e7e3      	b.n	8006abe <__smakebuf_r+0xc>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	6020      	str	r0, [r4, #0]
 8006afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	9b00      	ldr	r3, [sp, #0]
 8006b02:	6120      	str	r0, [r4, #16]
 8006b04:	6163      	str	r3, [r4, #20]
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	b15b      	cbz	r3, 8006b22 <__smakebuf_r+0x70>
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b10:	f000 f81e 	bl	8006b50 <_isatty_r>
 8006b14:	b128      	cbz	r0, 8006b22 <__smakebuf_r+0x70>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	431d      	orrs	r5, r3
 8006b26:	81a5      	strh	r5, [r4, #12]
 8006b28:	e7cf      	b.n	8006aca <__smakebuf_r+0x18>
	...

08006b2c <_fstat_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4d06      	ldr	r5, [pc, #24]	; (8006b4c <_fstat_r+0x20>)
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	f7fa fd28 	bl	800158e <_fstat>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	d102      	bne.n	8006b48 <_fstat_r+0x1c>
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	b103      	cbz	r3, 8006b48 <_fstat_r+0x1c>
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	bd38      	pop	{r3, r4, r5, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000528 	.word	0x20000528

08006b50 <_isatty_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	2300      	movs	r3, #0
 8006b54:	4d05      	ldr	r5, [pc, #20]	; (8006b6c <_isatty_r+0x1c>)
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fa fd26 	bl	80015ac <_isatty>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_isatty_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_isatty_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000528 	.word	0x20000528

08006b70 <_sbrk_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	2300      	movs	r3, #0
 8006b74:	4d05      	ldr	r5, [pc, #20]	; (8006b8c <_sbrk_r+0x1c>)
 8006b76:	4604      	mov	r4, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	f7fa fd2c 	bl	80015d8 <_sbrk>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_sbrk_r+0x1a>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_sbrk_r+0x1a>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20000528 	.word	0x20000528

08006b90 <memcpy>:
 8006b90:	440a      	add	r2, r1
 8006b92:	4291      	cmp	r1, r2
 8006b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b98:	d100      	bne.n	8006b9c <memcpy+0xc>
 8006b9a:	4770      	bx	lr
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ba8:	d1f9      	bne.n	8006b9e <memcpy+0xe>
 8006baa:	bd10      	pop	{r4, pc}

08006bac <__assert_func>:
 8006bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bae:	4614      	mov	r4, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <__assert_func+0x2c>)
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68d8      	ldr	r0, [r3, #12]
 8006bba:	b14c      	cbz	r4, 8006bd0 <__assert_func+0x24>
 8006bbc:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <__assert_func+0x30>)
 8006bbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bc2:	9100      	str	r1, [sp, #0]
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	4906      	ldr	r1, [pc, #24]	; (8006be0 <__assert_func+0x34>)
 8006bc8:	f000 f842 	bl	8006c50 <fiprintf>
 8006bcc:	f000 f852 	bl	8006c74 <abort>
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <__assert_func+0x38>)
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	e7f3      	b.n	8006bbe <__assert_func+0x12>
 8006bd6:	bf00      	nop
 8006bd8:	20000064 	.word	0x20000064
 8006bdc:	08006fdf 	.word	0x08006fdf
 8006be0:	08006fec 	.word	0x08006fec
 8006be4:	0800701a 	.word	0x0800701a

08006be8 <_calloc_r>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	fba1 5402 	umull	r5, r4, r1, r2
 8006bee:	b934      	cbnz	r4, 8006bfe <_calloc_r+0x16>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7ff f949 	bl	8005e88 <_malloc_r>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	b928      	cbnz	r0, 8006c06 <_calloc_r+0x1e>
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	220c      	movs	r2, #12
 8006c00:	2600      	movs	r6, #0
 8006c02:	6002      	str	r2, [r0, #0]
 8006c04:	e7f9      	b.n	8006bfa <_calloc_r+0x12>
 8006c06:	462a      	mov	r2, r5
 8006c08:	4621      	mov	r1, r4
 8006c0a:	f7fe f9d3 	bl	8004fb4 <memset>
 8006c0e:	e7f4      	b.n	8006bfa <_calloc_r+0x12>

08006c10 <__ascii_mbtowc>:
 8006c10:	b082      	sub	sp, #8
 8006c12:	b901      	cbnz	r1, 8006c16 <__ascii_mbtowc+0x6>
 8006c14:	a901      	add	r1, sp, #4
 8006c16:	b142      	cbz	r2, 8006c2a <__ascii_mbtowc+0x1a>
 8006c18:	b14b      	cbz	r3, 8006c2e <__ascii_mbtowc+0x1e>
 8006c1a:	7813      	ldrb	r3, [r2, #0]
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	1e10      	subs	r0, r2, #0
 8006c22:	bf18      	it	ne
 8006c24:	2001      	movne	r0, #1
 8006c26:	b002      	add	sp, #8
 8006c28:	4770      	bx	lr
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	e7fb      	b.n	8006c26 <__ascii_mbtowc+0x16>
 8006c2e:	f06f 0001 	mvn.w	r0, #1
 8006c32:	e7f8      	b.n	8006c26 <__ascii_mbtowc+0x16>

08006c34 <__ascii_wctomb>:
 8006c34:	4603      	mov	r3, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	b141      	cbz	r1, 8006c4c <__ascii_wctomb+0x18>
 8006c3a:	2aff      	cmp	r2, #255	; 0xff
 8006c3c:	d904      	bls.n	8006c48 <__ascii_wctomb+0x14>
 8006c3e:	228a      	movs	r2, #138	; 0x8a
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	4770      	bx	lr
 8006c48:	2001      	movs	r0, #1
 8006c4a:	700a      	strb	r2, [r1, #0]
 8006c4c:	4770      	bx	lr
	...

08006c50 <fiprintf>:
 8006c50:	b40e      	push	{r1, r2, r3}
 8006c52:	b503      	push	{r0, r1, lr}
 8006c54:	4601      	mov	r1, r0
 8006c56:	ab03      	add	r3, sp, #12
 8006c58:	4805      	ldr	r0, [pc, #20]	; (8006c70 <fiprintf+0x20>)
 8006c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	f7ff fd3d 	bl	80066e0 <_vfiprintf_r>
 8006c66:	b002      	add	sp, #8
 8006c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c6c:	b003      	add	sp, #12
 8006c6e:	4770      	bx	lr
 8006c70:	20000064 	.word	0x20000064

08006c74 <abort>:
 8006c74:	2006      	movs	r0, #6
 8006c76:	b508      	push	{r3, lr}
 8006c78:	f000 f82c 	bl	8006cd4 <raise>
 8006c7c:	2001      	movs	r0, #1
 8006c7e:	f7fa fc38 	bl	80014f2 <_exit>

08006c82 <_raise_r>:
 8006c82:	291f      	cmp	r1, #31
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4604      	mov	r4, r0
 8006c88:	460d      	mov	r5, r1
 8006c8a:	d904      	bls.n	8006c96 <_raise_r+0x14>
 8006c8c:	2316      	movs	r3, #22
 8006c8e:	6003      	str	r3, [r0, #0]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	bd38      	pop	{r3, r4, r5, pc}
 8006c96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c98:	b112      	cbz	r2, 8006ca0 <_raise_r+0x1e>
 8006c9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c9e:	b94b      	cbnz	r3, 8006cb4 <_raise_r+0x32>
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 f831 	bl	8006d08 <_getpid_r>
 8006ca6:	462a      	mov	r2, r5
 8006ca8:	4601      	mov	r1, r0
 8006caa:	4620      	mov	r0, r4
 8006cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb0:	f000 b818 	b.w	8006ce4 <_kill_r>
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d00a      	beq.n	8006cce <_raise_r+0x4c>
 8006cb8:	1c59      	adds	r1, r3, #1
 8006cba:	d103      	bne.n	8006cc4 <_raise_r+0x42>
 8006cbc:	2316      	movs	r3, #22
 8006cbe:	6003      	str	r3, [r0, #0]
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7e7      	b.n	8006c94 <_raise_r+0x12>
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ccc:	4798      	blx	r3
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e7e0      	b.n	8006c94 <_raise_r+0x12>
	...

08006cd4 <raise>:
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <raise+0xc>)
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f7ff bfd2 	b.w	8006c82 <_raise_r>
 8006cde:	bf00      	nop
 8006ce0:	20000064 	.word	0x20000064

08006ce4 <_kill_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4d06      	ldr	r5, [pc, #24]	; (8006d04 <_kill_r+0x20>)
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f7fa fbee 	bl	80014d2 <_kill>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d102      	bne.n	8006d00 <_kill_r+0x1c>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	b103      	cbz	r3, 8006d00 <_kill_r+0x1c>
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	bd38      	pop	{r3, r4, r5, pc}
 8006d02:	bf00      	nop
 8006d04:	20000528 	.word	0x20000528

08006d08 <_getpid_r>:
 8006d08:	f7fa bbdc 	b.w	80014c4 <_getpid>

08006d0c <_init>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr

08006d18 <_fini>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr
